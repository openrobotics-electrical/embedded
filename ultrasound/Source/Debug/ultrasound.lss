
ultrasound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000310  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000adc  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003b3  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c7  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000144  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000473  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000423  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 14 01 	call	0x228	; 0x228 <main>
  9e:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
	return (((((FOSC * 10) / (16L * baud)) + 5) / 10) - 1);
}

void USART_Init(unsigned int ubrr) {
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (0 << USBS0)|(3 << UCSZ00);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <__vector_21>:

volatile uint8_t analogLow, analogHigh;

//------------------INTERRUPT SERVICE ROUTINES

ISR(ADC_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
	
	analogLow = ADCL;
  c8:	80 91 78 00 	lds	r24, 0x0078
  cc:	80 93 01 01 	sts	0x0101, r24
	analogHigh = ADCH;
  d0:	80 91 79 00 	lds	r24, 0x0079
  d4:	80 93 00 01 	sts	0x0100, r24
}
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <_Z8setBitTohhPVh>:

//------------------FUNCTIONS

void setBitTo(uint8_t bit, uint8_t value, volatile uint8_t *reg) {
	*reg = (value << bit) | (*reg & (0xff - (1 << bit)));
  e4:	fa 01       	movw	r30, r20
  e6:	90 81       	ld	r25, Z
  e8:	e1 e0       	ldi	r30, 0x01	; 1
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	9f 01       	movw	r18, r30
  ee:	08 2e       	mov	r0, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <_Z8setBitTohhPVh+0x12>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <_Z8setBitTohhPVh+0xe>
  fa:	20 95       	com	r18
  fc:	29 23       	and	r18, r25
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	fb 01       	movw	r30, r22
 102:	02 c0       	rjmp	.+4      	; 0x108 <_Z8setBitTohhPVh+0x24>
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	8a 95       	dec	r24
 10a:	e2 f7       	brpl	.-8      	; 0x104 <_Z8setBitTohhPVh+0x20>
 10c:	cf 01       	movw	r24, r30
 10e:	82 2b       	or	r24, r18
 110:	fa 01       	movw	r30, r20
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <_ZN3Bit4testEv>:
		
		static void test() {
			
			// blinks PORTB5 (Nano light) with rate controlled by PORTD2
			
			Bit blinky(5, PORTB);
 116:	85 b1       	in	r24, 0x05	; 5
			
		Bit(uint8_t bit, uint8_t port) {
		
			this->bit = bit;
			
			if(port == PORTB) {
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	89 17       	cp	r24, r25
 11c:	41 f0       	breq	.+16     	; 0x12e <_ZN3Bit4testEv+0x18>
				
				this->port = &PORTB;
				this->direction = &DDRB;
				this->input = &PINB;
				
			} else if(port == PORTC) {
 11e:	98 b1       	in	r25, 0x08	; 8
 120:	89 13       	cpse	r24, r25
 122:	0a c0       	rjmp	.+20     	; 0x138 <_ZN3Bit4testEv+0x22>
				
				this->port = &PORTC;
 124:	c8 e2       	ldi	r28, 0x28	; 40
 126:	d0 e0       	ldi	r29, 0x00	; 0
				this->direction = &DDRC;
 128:	47 e2       	ldi	r20, 0x27	; 39
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	09 c0       	rjmp	.+18     	; 0x140 <_ZN3Bit4testEv+0x2a>
		
			this->bit = bit;
			
			if(port == PORTB) {
				
				this->port = &PORTB;
 12e:	c5 e2       	ldi	r28, 0x25	; 37
 130:	d0 e0       	ldi	r29, 0x00	; 0
				this->direction = &DDRB;
 132:	44 e2       	ldi	r20, 0x24	; 36
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	04 c0       	rjmp	.+8      	; 0x140 <_ZN3Bit4testEv+0x2a>
				this->direction = &DDRC;
				this->input = &PINC;
				
			} else {
				
				this->port = &PORTD;
 138:	cb e2       	ldi	r28, 0x2B	; 43
 13a:	d0 e0       	ldi	r29, 0x00	; 0
				this->direction = &DDRD;
 13c:	4a e2       	ldi	r20, 0x2A	; 42
 13e:	50 e0       	ldi	r21, 0x00	; 0
		static void test() {
			
			// blinks PORTB5 (Nano light) with rate controlled by PORTD2
			
			Bit blinky(5, PORTB);
			Bit rateSelect(2, PORTD);
 140:	8b b1       	in	r24, 0x0b	; 11
			
		Bit(uint8_t bit, uint8_t port) {
		
			this->bit = bit;
			
			if(port == PORTB) {
 142:	95 b1       	in	r25, 0x05	; 5
 144:	89 17       	cp	r24, r25
 146:	81 f0       	breq	.+32     	; 0x168 <_ZN3Bit4testEv+0x52>
				
				this->port = &PORTB;
				this->direction = &DDRB;
				this->input = &PINB;
				
			} else if(port == PORTC) {
 148:	98 b1       	in	r25, 0x08	; 8
 14a:	89 13       	cpse	r24, r25
 14c:	1a c0       	rjmp	.+52     	; 0x182 <_ZN3Bit4testEv+0x6c>
				
				this->port = &PORTC;
				this->direction = &DDRC;
				this->input = &PINC;
 14e:	06 e2       	ldi	r16, 0x26	; 38
 150:	10 e0       	ldi	r17, 0x00	; 0
				this->direction = &DDRB;
				this->input = &PINB;
				
			} else if(port == PORTC) {
				
				this->port = &PORTC;
 152:	0f 2e       	mov	r0, r31
 154:	f8 e2       	ldi	r31, 0x28	; 40
 156:	ef 2e       	mov	r14, r31
 158:	f1 2c       	mov	r15, r1
 15a:	f0 2d       	mov	r31, r0
				this->direction = &DDRC;
 15c:	0f 2e       	mov	r0, r31
 15e:	f7 e2       	ldi	r31, 0x27	; 39
 160:	cf 2e       	mov	r12, r31
 162:	d1 2c       	mov	r13, r1
 164:	f0 2d       	mov	r31, r0
 166:	19 c0       	rjmp	.+50     	; 0x19a <_ZN3Bit4testEv+0x84>
			
			if(port == PORTB) {
				
				this->port = &PORTB;
				this->direction = &DDRB;
				this->input = &PINB;
 168:	03 e2       	ldi	r16, 0x23	; 35
 16a:	10 e0       	ldi	r17, 0x00	; 0
		
			this->bit = bit;
			
			if(port == PORTB) {
				
				this->port = &PORTB;
 16c:	0f 2e       	mov	r0, r31
 16e:	f5 e2       	ldi	r31, 0x25	; 37
 170:	ef 2e       	mov	r14, r31
 172:	f1 2c       	mov	r15, r1
 174:	f0 2d       	mov	r31, r0
				this->direction = &DDRB;
 176:	0f 2e       	mov	r0, r31
 178:	f4 e2       	ldi	r31, 0x24	; 36
 17a:	cf 2e       	mov	r12, r31
 17c:	d1 2c       	mov	r13, r1
 17e:	f0 2d       	mov	r31, r0
 180:	0c c0       	rjmp	.+24     	; 0x19a <_ZN3Bit4testEv+0x84>
				
			} else {
				
				this->port = &PORTD;
				this->direction = &DDRD;
				this->input = &PIND;
 182:	09 e2       	ldi	r16, 0x29	; 41
 184:	10 e0       	ldi	r17, 0x00	; 0
				this->direction = &DDRC;
				this->input = &PINC;
				
			} else {
				
				this->port = &PORTD;
 186:	0f 2e       	mov	r0, r31
 188:	fb e2       	ldi	r31, 0x2B	; 43
 18a:	ef 2e       	mov	r14, r31
 18c:	f1 2c       	mov	r15, r1
 18e:	f0 2d       	mov	r31, r0
				this->direction = &DDRD;
 190:	0f 2e       	mov	r0, r31
 192:	fa e2       	ldi	r31, 0x2A	; 42
 194:	cf 2e       	mov	r12, r31
 196:	d1 2c       	mov	r13, r1
 198:	f0 2d       	mov	r31, r0
		void clear()		{ setBitTo(this->bit, 0, this->port); }	
						
		bool isHigh()		{ return *(this->input) & (1 << this->bit); }	
		bool isLow()		{ return !isHigh(); }
					
		void setAsOutput()	{ setBitTo(bit, 1, direction); }		
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
		
		void setAsPullUpInput()	{ 
			
			setBitTo(bit, 0, direction); 
 1a2:	a6 01       	movw	r20, r12
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
			}
		}

//------PUBLIC FUNCTIONS
	
		void set()			{ setBitTo(this->bit, 1, this->port); }		
 1ac:	a7 01       	movw	r20, r14
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
 1b6:	ae 01       	movw	r20, r28
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	83 ec       	ldi	r24, 0xC3	; 195
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <_ZN3Bit4testEv+0xb0>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN3Bit4testEv+0xba>
 1d0:	00 00       	nop
		void clear()		{ setBitTo(this->bit, 0, this->port); }	
 1d2:	ae 01       	movw	r20, r28
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
						
		bool isHigh()		{ return *(this->input) & (1 << this->bit); }	
 1dc:	f8 01       	movw	r30, r16
 1de:	80 81       	ld	r24, Z
			while(1) {
				
				blinky.set();
				_delay_ms(200);
				blinky.clear();
				if(rateSelect.isHigh())
 1e0:	82 ff       	sbrs	r24, 2
 1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <_ZN3Bit4testEv+0xe2>
 1e4:	ff ef       	ldi	r31, 0xFF	; 255
 1e6:	23 ec       	ldi	r18, 0xC3	; 195
 1e8:	89 e0       	ldi	r24, 0x09	; 9
 1ea:	f1 50       	subi	r31, 0x01	; 1
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <_ZN3Bit4testEv+0xd4>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <_ZN3Bit4testEv+0xde>
 1f4:	00 00       	nop
 1f6:	df cf       	rjmp	.-66     	; 0x1b6 <_ZN3Bit4testEv+0xa0>
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
 1fa:	e9 e6       	ldi	r30, 0x69	; 105
 1fc:	f8 e1       	ldi	r31, 0x18	; 24
 1fe:	91 50       	subi	r25, 0x01	; 1
 200:	e0 40       	sbci	r30, 0x00	; 0
 202:	f0 40       	sbci	r31, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <_ZN3Bit4testEv+0xe8>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN3Bit4testEv+0xf2>
 208:	00 00       	nop
 20a:	d5 cf       	rjmp	.-86     	; 0x1b6 <_ZN3Bit4testEv+0xa0>

0000020c <__vector_11>:
char strOut[CHAR_BUFFER_LENGTH];
char strIn[CHAR_BUFFER_LENGTH];

//------------------INTERRUPT SERVICE ROUTINES

ISR(TIMER1_COMPA_vect) {
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
	
	TCNT1 = 0;
 216:	10 92 85 00 	sts	0x0085, r1
 21a:	10 92 84 00 	sts	0x0084, r1
}
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <main>:

//------------------MAIN

int main(void) {
	
	USART_Init(convertBaud(COM_SPEED));
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	
	Bit trig(2, PORTD);
 230:	8b b1       	in	r24, 0x0b	; 11
			
		Bit(uint8_t bit, uint8_t port) {
		
			this->bit = bit;
			
			if(port == PORTB) {
 232:	95 b1       	in	r25, 0x05	; 5
 234:	89 17       	cp	r24, r25
 236:	31 f0       	breq	.+12     	; 0x244 <main+0x1c>
				
				this->port = &PORTB;
				this->direction = &DDRB;
				this->input = &PINB;
				
			} else if(port == PORTC) {
 238:	98 b1       	in	r25, 0x08	; 8
 23a:	89 13       	cpse	r24, r25
 23c:	06 c0       	rjmp	.+12     	; 0x24a <main+0x22>
				
				this->port = &PORTC;
				this->direction = &DDRC;
 23e:	47 e2       	ldi	r20, 0x27	; 39
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	05 c0       	rjmp	.+10     	; 0x24e <main+0x26>
			this->bit = bit;
			
			if(port == PORTB) {
				
				this->port = &PORTB;
				this->direction = &DDRB;
 244:	44 e2       	ldi	r20, 0x24	; 36
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <main+0x26>
				this->input = &PINC;
				
			} else {
				
				this->port = &PORTD;
				this->direction = &DDRD;
 24a:	4a e2       	ldi	r20, 0x2A	; 42
 24c:	50 e0       	ldi	r21, 0x00	; 0
	Bit echo(3, PORTD);
 24e:	8b b1       	in	r24, 0x0b	; 11
			
		Bit(uint8_t bit, uint8_t port) {
		
			this->bit = bit;
			
			if(port == PORTB) {
 250:	95 b1       	in	r25, 0x05	; 5
 252:	89 17       	cp	r24, r25
 254:	41 f0       	breq	.+16     	; 0x266 <main+0x3e>
				
				this->port = &PORTB;
				this->direction = &DDRB;
				this->input = &PINB;
				
			} else if(port == PORTC) {
 256:	98 b1       	in	r25, 0x08	; 8
 258:	89 13       	cpse	r24, r25
 25a:	0a c0       	rjmp	.+20     	; 0x270 <main+0x48>
				
				this->port = &PORTC;
 25c:	c8 e2       	ldi	r28, 0x28	; 40
 25e:	d0 e0       	ldi	r29, 0x00	; 0
				this->direction = &DDRC;
 260:	07 e2       	ldi	r16, 0x27	; 39
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	09 c0       	rjmp	.+18     	; 0x278 <main+0x50>
		
			this->bit = bit;
			
			if(port == PORTB) {
				
				this->port = &PORTB;
 266:	c5 e2       	ldi	r28, 0x25	; 37
 268:	d0 e0       	ldi	r29, 0x00	; 0
				this->direction = &DDRB;
 26a:	04 e2       	ldi	r16, 0x24	; 36
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	04 c0       	rjmp	.+8      	; 0x278 <main+0x50>
				this->direction = &DDRC;
				this->input = &PINC;
				
			} else {
				
				this->port = &PORTD;
 270:	cb e2       	ldi	r28, 0x2B	; 43
 272:	d0 e0       	ldi	r29, 0x00	; 0
				this->direction = &DDRD;
 274:	0a e2       	ldi	r16, 0x2A	; 42
 276:	10 e0       	ldi	r17, 0x00	; 0
		void clear()		{ setBitTo(this->bit, 0, this->port); }	
						
		bool isHigh()		{ return *(this->input) & (1 << this->bit); }	
		bool isLow()		{ return !isHigh(); }
					
		void setAsOutput()	{ setBitTo(bit, 1, direction); }		
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
			set();
		}
		
		void setAsHighZInput() { 
		
			setBitTo(bit, 0, direction);
 280:	a8 01       	movw	r20, r16
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
		}

//------PUBLIC FUNCTIONS
	
		void set()			{ setBitTo(this->bit, 1, this->port); }		
		void clear()		{ setBitTo(this->bit, 0, this->port); }	
 28a:	ae 01       	movw	r20, r28
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8setBitTohhPVh>
	// void (*silliness) (int i); 
	
	trig.setAsOutput();
	echo.setAsHighZInput();
	
	Bit::test();
 294:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN3Bit4testEv>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
