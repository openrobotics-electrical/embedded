
attiny441.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000912  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800148  00800148  000009ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba9  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000545  00000000  00000000  000026fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  00002c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00003138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096a  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000585  00000000  00000000  00003d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000429b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__dtors_end>
   2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	d8 c0       	rjmp	.+432    	; 0x1c4 <__vector_9>
  14:	e1 c0       	rjmp	.+450    	; 0x1d8 <__vector_10>
  16:	86 c0       	rjmp	.+268    	; 0x124 <__vector_11>
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	37 c0       	rjmp	.+110    	; 0x8a <__bad_interrupt>
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	31 c0       	rjmp	.+98     	; 0x8a <__bad_interrupt>
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	2f c0       	rjmp	.+94     	; 0x8a <__bad_interrupt>
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	2d c0       	rjmp	.+90     	; 0x8a <__bad_interrupt>
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	2b c0       	rjmp	.+86     	; 0x8a <__bad_interrupt>
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	29 c0       	rjmp	.+82     	; 0x8a <__bad_interrupt>
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	27 c0       	rjmp	.+78     	; 0x8a <__bad_interrupt>

0000003c <__ctors_start>:
  3c:	cb 01       	movw	r24, r22

0000003e <__ctors_end>:
  3e:	27 03       	mulsu	r18, r23

00000040 <__dtors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf ef       	ldi	r28, 0xFF	; 255
  46:	d1 e0       	ldi	r29, 0x01	; 1
  48:	de bf       	out	0x3e, r29	; 62
  4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_copy_data>:
  4c:	11 e0       	ldi	r17, 0x01	; 1
  4e:	a0 e0       	ldi	r26, 0x00	; 0
  50:	b1 e0       	ldi	r27, 0x01	; 1
  52:	e2 e1       	ldi	r30, 0x12	; 18
  54:	f9 e0       	ldi	r31, 0x09	; 9
  56:	02 c0       	rjmp	.+4      	; 0x5c <__do_copy_data+0x10>
  58:	05 90       	lpm	r0, Z+
  5a:	0d 92       	st	X+, r0
  5c:	a8 34       	cpi	r26, 0x48	; 72
  5e:	b1 07       	cpc	r27, r17
  60:	d9 f7       	brne	.-10     	; 0x58 <__do_copy_data+0xc>

00000062 <__do_clear_bss>:
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	a8 e4       	ldi	r26, 0x48	; 72
  66:	b1 e0       	ldi	r27, 0x01	; 1
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	ad 3c       	cpi	r26, 0xCD	; 205
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	cf e1       	ldi	r28, 0x1F	; 31
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	03 c0       	rjmp	.+6      	; 0x80 <__do_global_ctors+0xe>
  7a:	21 97       	sbiw	r28, 0x01	; 1
  7c:	fe 01       	movw	r30, r28
  7e:	0a d3       	rcall	.+1556   	; 0x694 <__tablejump2__>
  80:	ce 31       	cpi	r28, 0x1E	; 30
  82:	d1 07       	cpc	r29, r17
  84:	d1 f7       	brne	.-12     	; 0x7a <__do_global_ctors+0x8>
  86:	24 d1       	rcall	.+584    	; 0x2d0 <main>
  88:	38 c4       	rjmp	.+2160   	; 0x8fa <__do_global_dtors>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <_ZN6timers9Timer8bit5startEv>:
	Timer8bit(Prescaler pre) : GenericTimer(pre) {}
		
public:
	virtual uint8_t inline count() = 0;
	
	void inline start() { TCCR0B |= prescale; }
  8c:	23 b7       	in	r18, 0x33	; 51
  8e:	fc 01       	movw	r30, r24
  90:	82 81       	ldd	r24, Z+2	; 0x02
  92:	82 2b       	or	r24, r18
  94:	83 bf       	out	0x33, r24	; 51
  96:	08 95       	ret

00000098 <_ZN6timers9Timer8bit4stopEv>:
	void inline stop() { TCCR0B &= ~PRESCALER_MASK; }
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	83 bf       	out	0x33, r24	; 51
  9e:	08 95       	ret

000000a0 <_ZN6timers9Timer8bit10is_runningEv>:
	bool inline is_running() { return TCCR0B &= ~PRESCALER_MASK; }
  a0:	93 b7       	in	r25, 0x33	; 51
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	93 bf       	out	0x33, r25	; 51
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	91 11       	cpse	r25, r1
  aa:	01 c0       	rjmp	.+2      	; 0xae <_ZN6timers9Timer8bit10is_runningEv+0xe>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	08 95       	ret

000000b0 <_ZN6timers10Timer16bit5startEv>:
	volatile uint8_t *const base_address; // Child classes must initialize this

public:
	virtual uint16_t count() = 0;

	void inline start() { *(base_address-1) |= prescale; }
  b0:	dc 01       	movw	r26, r24
  b2:	13 96       	adiw	r26, 0x03	; 3
  b4:	ed 91       	ld	r30, X+
  b6:	fc 91       	ld	r31, X
  b8:	14 97       	sbiw	r26, 0x04	; 4
  ba:	92 91       	ld	r25, -Z
  bc:	12 96       	adiw	r26, 0x02	; 2
  be:	8c 91       	ld	r24, X
  c0:	89 2b       	or	r24, r25
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <_ZN6timers10Timer16bit4stopEv>:
	void inline stop() { *(base_address-1) &= ~PRESCALER_MASK; }
  c6:	dc 01       	movw	r26, r24
  c8:	13 96       	adiw	r26, 0x03	; 3
  ca:	ed 91       	ld	r30, X+
  cc:	fc 91       	ld	r31, X
  ce:	14 97       	sbiw	r26, 0x04	; 4
  d0:	82 91       	ld	r24, -Z
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <_ZN6timers10Timer16bit10is_runningEv>:
	bool inline is_running() { return *(base_address-1) & PRESCALER_MASK; }
  d8:	dc 01       	movw	r26, r24
  da:	13 96       	adiw	r26, 0x03	; 3
  dc:	ed 91       	ld	r30, X+
  de:	fc 91       	ld	r31, X
  e0:	14 97       	sbiw	r26, 0x04	; 4
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	90 81       	ld	r25, Z
  e6:	97 70       	andi	r25, 0x07	; 7
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	09 f4       	brne	.+2      	; 0xee <_ZN6timers10Timer16bit10is_runningEv+0x16>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret

000000f0 <_ZN6timers6Timer05countEv>:
public:
	Timer0(Prescaler pre) : Timer8bit(pre) {
		TCCR0A = (1<<COM0A1) | (1<<COM0B1) | (1<<WGM00);
		TCCR0B = 0;//(1<<WGM02);
	}
	uint8_t count() { return TCNT0; }
  f0:	82 b7       	in	r24, 0x32	; 50
  f2:	08 95       	ret

000000f4 <_ZN6timers6Timer05clearEv>:
	void clear() { TCNT0 = 0; }
  f4:	12 be       	out	0x32, r1	; 50
  f6:	08 95       	ret

000000f8 <_ZN6timers6Timer15countEv>:
public:
	Timer1(Prescaler pre) : Timer16bit(pre, &TCCR1A) {
		TCCR1A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
		TCCR1B = (1<<WGM13) | (1<<WGM12);
	}
	uint16_t count() { return TCNT1; }
  f8:	8c b5       	in	r24, 0x2c	; 44
  fa:	9d b5       	in	r25, 0x2d	; 45
  fc:	08 95       	ret

000000fe <_ZN6timers6Timer15clearEv>:
	void clear() { TCNT1 = 0; }
  fe:	1d bc       	out	0x2d, r1	; 45
 100:	1c bc       	out	0x2c, r1	; 44
 102:	08 95       	ret

00000104 <_ZN6timers6Timer25countEv>:
public:
	Timer2(Prescaler pre) : Timer16bit(pre, &TCCR2A) {
		TCCR2A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
		TCCR2B = (1<<WGM13) | (1<<WGM12);		
	}
	uint16_t count() { return TCNT2; }
 104:	80 91 c6 00 	lds	r24, 0x00C6
 108:	90 91 c7 00 	lds	r25, 0x00C7
 10c:	08 95       	ret

0000010e <_ZN6timers6Timer25clearEv>:
	void clear() { TCNT2 = 0; }
 10e:	10 92 c7 00 	sts	0x00C7, r1
 112:	10 92 c6 00 	sts	0x00C6, r1
 116:	08 95       	ret

00000118 <_ZN8io_manip6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
 118:	08 95       	ret

0000011a <_ZN8io_manip5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
 11a:	08 95       	ret

0000011c <_ZN8io_manip6OutputD0Ev>:
	return p;
}

void operator delete(void * p) // or delete(void *, std::size_t)
{
	free(p);
 11c:	56 d3       	rcall	.+1708   	; 0x7ca <free>
 11e:	08 95       	ret

00000120 <_ZN8io_manip5InputD0Ev>:
 120:	54 d3       	rcall	.+1704   	; 0x7ca <free>
 122:	08 95       	ret

00000124 <__vector_11>:
Timer2 timer2(timers::PRESCALER_1);

volatile uint16_t timer0_overflows(0);
volatile uint16_t timer0_overflow_limit(0);

ISR(TIMER0_OVF_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	cli();
 13e:	f8 94       	cli
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 140:	a5 e6       	ldi	r26, 0x65	; 101
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	12 96       	adiw	r26, 0x02	; 2
 146:	ed 91       	ld	r30, X+
 148:	fc 91       	ld	r31, X
 14a:	13 97       	sbiw	r26, 0x03	; 3
 14c:	90 81       	ld	r25, Z
 14e:	19 96       	adiw	r26, 0x09	; 9
 150:	8c 91       	ld	r24, X
 152:	89 2b       	or	r24, r25
 154:	80 83       	st	Z, r24
	trig2.set();
	timer0_overflows++;
 156:	80 91 4c 01 	lds	r24, 0x014C
 15a:	90 91 4d 01 	lds	r25, 0x014D
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 4d 01 	sts	0x014D, r25
 164:	80 93 4c 01 	sts	0x014C, r24
	if(timer0_overflows > timer0_overflow_limit) {
 168:	20 91 4c 01 	lds	r18, 0x014C
 16c:	30 91 4d 01 	lds	r19, 0x014D
 170:	80 91 4a 01 	lds	r24, 0x014A
 174:	90 91 4b 01 	lds	r25, 0x014B
 178:	82 17       	cp	r24, r18
 17a:	93 07       	cpc	r25, r19
 17c:	48 f4       	brcc	.+18     	; 0x190 <__vector_11+0x6c>
		timer0_overflows = 0;
 17e:	10 92 4d 01 	sts	0x014D, r1
 182:	10 92 4c 01 	sts	0x014C, r1
		TIFR0 |= 1<<OCF0B;
 186:	88 b7       	in	r24, 0x38	; 56
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	88 bf       	out	0x38, r24	; 56
		TIMSK0 = 1<<OCIE0B;
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	89 bf       	out	0x39, r24	; 57
	void inline clear() { *port_out &= ~pin_mask; }
 190:	a5 e6       	ldi	r26, 0x65	; 101
 192:	b1 e0       	ldi	r27, 0x01	; 1
 194:	12 96       	adiw	r26, 0x02	; 2
 196:	ed 91       	ld	r30, X+
 198:	fc 91       	ld	r31, X
 19a:	13 97       	sbiw	r26, 0x03	; 3
 19c:	90 81       	ld	r25, Z
 19e:	19 96       	adiw	r26, 0x09	; 9
 1a0:	8c 91       	ld	r24, X
 1a2:	80 95       	com	r24
 1a4:	89 23       	and	r24, r25
 1a6:	80 83       	st	Z, r24
	}
	trig2.clear();
	sei();
 1a8:	78 94       	sei
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_9>:

ISR(TIMER0_COMPA_vect) {}
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_10>:
	
ISR(TIMER0_COMPB_vect) {
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	cli();
 1ee:	f8 94       	cli
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 1f0:	a9 e7       	ldi	r26, 0x79	; 121
 1f2:	b1 e0       	ldi	r27, 0x01	; 1
 1f4:	12 96       	adiw	r26, 0x02	; 2
 1f6:	ed 91       	ld	r30, X+
 1f8:	fc 91       	ld	r31, X
 1fa:	13 97       	sbiw	r26, 0x03	; 3
 1fc:	90 81       	ld	r25, Z
 1fe:	19 96       	adiw	r26, 0x09	; 9
 200:	8c 91       	ld	r24, X
 202:	89 2b       	or	r24, r25
 204:	80 83       	st	Z, r24
	trig1.set();
	if (timer0_overflow_limit > 0) {
 206:	80 91 4a 01 	lds	r24, 0x014A
 20a:	90 91 4b 01 	lds	r25, 0x014B
 20e:	89 2b       	or	r24, r25
 210:	11 f0       	breq	.+4      	; 0x216 <__stack+0x17>
		TIMSK0 = 1<<TOIE0;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	89 bf       	out	0x39, r24	; 57
	}
	TCNT0 = 0;
 216:	12 be       	out	0x32, r1	; 50
	TIFR0 |= 1<<TOV0;
 218:	88 b7       	in	r24, 0x38	; 56
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	88 bf       	out	0x38, r24	; 56
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
 21e:	ab e5       	ldi	r26, 0x5B	; 91
 220:	b1 e0       	ldi	r27, 0x01	; 1
 222:	12 96       	adiw	r26, 0x02	; 2
 224:	ed 91       	ld	r30, X+
 226:	fc 91       	ld	r31, X
 228:	13 97       	sbiw	r26, 0x03	; 3
 22a:	90 81       	ld	r25, Z
 22c:	19 96       	adiw	r26, 0x09	; 9
 22e:	8c 91       	ld	r24, X
 230:	89 27       	eor	r24, r25
 232:	80 83       	st	Z, r24
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
 234:	a9 e7       	ldi	r26, 0x79	; 121
 236:	b1 e0       	ldi	r27, 0x01	; 1
 238:	12 96       	adiw	r26, 0x02	; 2
 23a:	ed 91       	ld	r30, X+
 23c:	fc 91       	ld	r31, X
 23e:	13 97       	sbiw	r26, 0x03	; 3
 240:	90 81       	ld	r25, Z
 242:	19 96       	adiw	r26, 0x09	; 9
 244:	8c 91       	ld	r24, X
 246:	80 95       	com	r24
 248:	89 23       	and	r24, r25
 24a:	80 83       	st	Z, r24
	echo2.toggle();
	trig1.clear();
	sei();
 24c:	78 94       	sei
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_Z16set_frequency_Hzm>:
	
volatile uint16_t conversion, period;

void set_frequency_Hz(uint32_t f) {
	cli();
 264:	f8 94       	cli
	period = uint32_t(F_CPU) / (f*512);
 266:	9b 01       	movw	r18, r22
 268:	ac 01       	movw	r20, r24
 26a:	01 2e       	mov	r0, r17
 26c:	19 e0       	ldi	r17, 0x09	; 9
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	44 1f       	adc	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	1a 95       	dec	r17
 278:	d1 f7       	brne	.-12     	; 0x26e <_Z16set_frequency_Hzm+0xa>
 27a:	10 2d       	mov	r17, r0
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	72 e1       	ldi	r23, 0x12	; 18
 280:	8a e7       	ldi	r24, 0x7A	; 122
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	e5 d1       	rcall	.+970    	; 0x650 <__udivmodsi4>
 286:	30 93 49 01 	sts	0x0149, r19
 28a:	20 93 48 01 	sts	0x0148, r18
			trig1.toggle();
		}
		_delay_ms(1);
	}
	*/
	timer0_overflow_limit = period / 256;
 28e:	80 91 48 01 	lds	r24, 0x0148
 292:	90 91 49 01 	lds	r25, 0x0149
 296:	89 2f       	mov	r24, r25
 298:	99 27       	eor	r25, r25
 29a:	90 93 4b 01 	sts	0x014B, r25
 29e:	80 93 4a 01 	sts	0x014A, r24
	if(timer0_overflow_limit == 0)
 2a2:	80 91 4a 01 	lds	r24, 0x014A
 2a6:	90 91 4b 01 	lds	r25, 0x014B
 2aa:	89 2b       	or	r24, r25
 2ac:	21 f4       	brne	.+8      	; 0x2b6 <_Z16set_frequency_Hzm+0x52>
		TIMSK0 |= (1<<OCIE0B);
 2ae:	89 b7       	in	r24, 0x39	; 57
 2b0:	84 60       	ori	r24, 0x04	; 4
 2b2:	89 bf       	out	0x39, r24	; 57
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <_Z16set_frequency_Hzm+0x5e>
	else {
		TIMSK0 |= 1<<TOIE0;
 2b6:	89 b7       	in	r24, 0x39	; 57
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	89 bf       	out	0x39, r24	; 57
		TIFR0 |= 1<<TOV0;
 2bc:	88 b7       	in	r24, 0x38	; 56
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	88 bf       	out	0x38, r24	; 56
	}
	timer0.set_output_compare_B(period % 256);
 2c2:	80 91 48 01 	lds	r24, 0x0148
 2c6:	90 91 49 01 	lds	r25, 0x0149
	
	void inline start() { TCCR0B |= prescale; }
	void inline stop() { TCCR0B &= ~PRESCALER_MASK; }
	bool inline is_running() { return TCCR0B &= ~PRESCALER_MASK; }
	void inline set_output_compare_A(uint8_t oc_A) { OCR0A = oc_A; };
	void inline set_output_compare_B(uint8_t oc_B) { OCR0B = oc_B; };
 2ca:	8c bf       	out	0x3c, r24	; 60
	sei();
 2cc:	78 94       	sei
 2ce:	08 95       	ret

000002d0 <main>:
		_delay_ms(1000);		
	}
	timer0.stop();
}

int main() {
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	28 97       	sbiw	r28, 0x08	; 8
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
	TOCPMSA0 = 0; // TOCC3,TOCC2,TOCC1,TOCC0 output pins use timer0
 2e4:	10 92 67 00 	sts	0x0067, r1
	TOCPMSA1 = 0; // TOCC7,TOCC6,TOCC5,TOCC4 output pins use timer0
 2e8:	10 92 68 00 	sts	0x0068, r1
	TOCPMCOE = 0; //1<<TOCC7OE;
 2ec:	10 92 66 00 	sts	0x0066, r1
	// timer0.set_output_compare_A(254U);
	// timer0.set_output_compare_B(50U);
	TIMSK0 |= 1<<TOIE0;
 2f0:	89 b7       	in	r24, 0x39	; 57
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	89 bf       	out	0x39, r24	; 57
	sei();
 2f6:	78 94       	sei
	Timer8bit(Prescaler pre) : GenericTimer(pre) {}
		
public:
	virtual uint8_t inline count() = 0;
	
	void inline start() { TCCR0B |= prescale; }
 2f8:	93 b7       	in	r25, 0x33	; 51
 2fa:	80 91 5a 01 	lds	r24, 0x015A
 2fe:	89 2b       	or	r24, r25
 300:	83 bf       	out	0x33, r24	; 51
	timer0.start();
	uint16_t pattern[] = {25,50,100,200};
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	e6 e0       	ldi	r30, 0x06	; 6
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	de 01       	movw	r26, r28
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	01 90       	ld	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	8a 95       	dec	r24
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x3c>
	uint8_t inc(0);
 314:	10 e0       	ldi	r17, 0x00	; 0
 316:	0f 2e       	mov	r0, r31
 318:	f8 e5       	ldi	r31, 0x58	; 88
 31a:	cf 2e       	mov	r12, r31
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	df 2e       	mov	r13, r31
 320:	f0 2d       	mov	r31, r0
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
 322:	0f 2e       	mov	r0, r31
 324:	f7 e9       	ldi	r31, 0x97	; 151
 326:	ef 2e       	mov	r14, r31
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	ff 2e       	mov	r15, r31
 32c:	f0 2d       	mov	r31, r0
	while (1) {
		inc %= 4;
 32e:	13 70       	andi	r17, 0x03	; 3
		inc++;
 330:	1f 5f       	subi	r17, 0xFF	; 255
		TCNT0 = 0;
 332:	12 be       	out	0x32, r1	; 50
 334:	93 b7       	in	r25, 0x33	; 51
 336:	d6 01       	movw	r26, r12
 338:	12 96       	adiw	r26, 0x02	; 2
 33a:	8c 91       	ld	r24, X
 33c:	89 2b       	or	r24, r25
 33e:	83 bf       	out	0x33, r24	; 51
		timer0.start();
		set_frequency_Hz(pattern[inc]);
 340:	fe 01       	movw	r30, r28
 342:	31 96       	adiw	r30, 0x01	; 1
 344:	e1 0f       	add	r30, r17
 346:	f1 1d       	adc	r31, r1
 348:	e1 0f       	add	r30, r17
 34a:	f1 1d       	adc	r31, r1
 34c:	60 81       	ld	r22, Z
 34e:	71 81       	ldd	r23, Z+1	; 0x01
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	87 df       	rcall	.-242    	; 0x264 <_Z16set_frequency_Hzm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	bf ef       	ldi	r27, 0xFF	; 255
 358:	e1 ee       	ldi	r30, 0xE1	; 225
 35a:	f4 e0       	ldi	r31, 0x04	; 4
 35c:	b1 50       	subi	r27, 0x01	; 1
 35e:	e0 40       	sbci	r30, 0x00	; 0
 360:	f0 40       	sbci	r31, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x8c>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x96>
 366:	00 00       	nop
	void inline stop() { TCCR0B &= ~PRESCALER_MASK; }
 368:	83 b7       	in	r24, 0x33	; 51
 36a:	88 7f       	andi	r24, 0xF8	; 248
 36c:	83 bf       	out	0x33, r24	; 51
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	81 ee       	ldi	r24, 0xE1	; 225
 372:	94 e0       	ldi	r25, 0x04	; 4
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0xa4>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0xae>
 37e:	00 00       	nop
 380:	d7 01       	movw	r26, r14
 382:	12 96       	adiw	r26, 0x02	; 2
 384:	ed 91       	ld	r30, X+
 386:	fc 91       	ld	r31, X
 388:	13 97       	sbiw	r26, 0x03	; 3
 38a:	90 81       	ld	r25, Z
 38c:	19 96       	adiw	r26, 0x09	; 9
 38e:	8c 91       	ld	r24, X
 390:	89 27       	eor	r24, r25
 392:	80 83       	st	Z, r24
 394:	cc cf       	rjmp	.-104    	; 0x32e <main+0x5e>

00000396 <_GLOBAL__sub_I__Znwj>:
		_delay_ms(200);
		timer0.stop();
		_delay_ms(200);
		sck.toggle();
	}
}
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 39e:	af eb       	ldi	r26, 0xBF	; 191
 3a0:	b1 e0       	ldi	r27, 0x01	; 1
 3a2:	6b e3       	ldi	r22, 0x3B	; 59
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	13 96       	adiw	r26, 0x03	; 3
 3a8:	7c 93       	st	X, r23
 3aa:	6e 93       	st	-X, r22
 3ac:	12 97       	sbiw	r26, 0x02	; 2
 3ae:	4a e3       	ldi	r20, 0x3A	; 58
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	15 96       	adiw	r26, 0x05	; 5
 3b4:	5c 93       	st	X, r21
 3b6:	4e 93       	st	-X, r20
 3b8:	14 97       	sbiw	r26, 0x04	; 4
 3ba:	29 e3       	ldi	r18, 0x39	; 57
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	17 96       	adiw	r26, 0x07	; 7
 3c0:	3c 93       	st	X, r19
 3c2:	2e 93       	st	-X, r18
 3c4:	16 97       	sbiw	r26, 0x06	; 6
 3c6:	18 96       	adiw	r26, 0x08	; 8
 3c8:	1c 92       	st	X, r1
 3ca:	18 97       	sbiw	r26, 0x08	; 8
 3cc:	e1 e0       	ldi	r30, 0x01	; 1
 3ce:	19 96       	adiw	r26, 0x09	; 9
 3d0:	ec 93       	st	X, r30
 3d2:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 3d4:	8c e3       	ldi	r24, 0x3C	; 60
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	8d 93       	st	X+, r24
 3da:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 3dc:	d8 98       	cbi	0x1b, 0	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 3de:	d0 9a       	sbi	0x1a, 0	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 3e0:	a5 eb       	ldi	r26, 0xB5	; 181
 3e2:	b1 e0       	ldi	r27, 0x01	; 1
 3e4:	13 96       	adiw	r26, 0x03	; 3
 3e6:	7c 93       	st	X, r23
 3e8:	6e 93       	st	-X, r22
 3ea:	12 97       	sbiw	r26, 0x02	; 2
 3ec:	15 96       	adiw	r26, 0x05	; 5
 3ee:	5c 93       	st	X, r21
 3f0:	4e 93       	st	-X, r20
 3f2:	14 97       	sbiw	r26, 0x04	; 4
 3f4:	17 96       	adiw	r26, 0x07	; 7
 3f6:	3c 93       	st	X, r19
 3f8:	2e 93       	st	-X, r18
 3fa:	16 97       	sbiw	r26, 0x06	; 6
 3fc:	18 96       	adiw	r26, 0x08	; 8
 3fe:	ec 93       	st	X, r30
 400:	18 97       	sbiw	r26, 0x08	; 8
 402:	12 e0       	ldi	r17, 0x02	; 2
 404:	19 96       	adiw	r26, 0x09	; 9
 406:	1c 93       	st	X, r17
 408:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 40a:	8d 93       	st	X+, r24
 40c:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 40e:	d9 98       	cbi	0x1b, 1	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 410:	d1 9a       	sbi	0x1a, 1	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 412:	ab ea       	ldi	r26, 0xAB	; 171
 414:	b1 e0       	ldi	r27, 0x01	; 1
 416:	13 96       	adiw	r26, 0x03	; 3
 418:	7c 93       	st	X, r23
 41a:	6e 93       	st	-X, r22
 41c:	12 97       	sbiw	r26, 0x02	; 2
 41e:	15 96       	adiw	r26, 0x05	; 5
 420:	5c 93       	st	X, r21
 422:	4e 93       	st	-X, r20
 424:	14 97       	sbiw	r26, 0x04	; 4
 426:	17 96       	adiw	r26, 0x07	; 7
 428:	3c 93       	st	X, r19
 42a:	2e 93       	st	-X, r18
 42c:	16 97       	sbiw	r26, 0x06	; 6
 42e:	18 96       	adiw	r26, 0x08	; 8
 430:	1c 93       	st	X, r17
 432:	18 97       	sbiw	r26, 0x08	; 8
 434:	f4 e0       	ldi	r31, 0x04	; 4
 436:	19 96       	adiw	r26, 0x09	; 9
 438:	fc 93       	st	X, r31
 43a:	19 97       	sbiw	r26, 0x09	; 9
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 43c:	c4 e4       	ldi	r28, 0x44	; 68
 43e:	d1 e0       	ldi	r29, 0x01	; 1
 440:	cd 93       	st	X+, r28
 442:	dc 93       	st	X, r29
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 444:	d2 98       	cbi	0x1a, 2	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 446:	a1 ea       	ldi	r26, 0xA1	; 161
 448:	b1 e0       	ldi	r27, 0x01	; 1
 44a:	13 96       	adiw	r26, 0x03	; 3
 44c:	7c 93       	st	X, r23
 44e:	6e 93       	st	-X, r22
 450:	12 97       	sbiw	r26, 0x02	; 2
 452:	15 96       	adiw	r26, 0x05	; 5
 454:	5c 93       	st	X, r21
 456:	4e 93       	st	-X, r20
 458:	14 97       	sbiw	r26, 0x04	; 4
 45a:	17 96       	adiw	r26, 0x07	; 7
 45c:	3c 93       	st	X, r19
 45e:	2e 93       	st	-X, r18
 460:	16 97       	sbiw	r26, 0x06	; 6
 462:	03 e0       	ldi	r16, 0x03	; 3
 464:	18 96       	adiw	r26, 0x08	; 8
 466:	0c 93       	st	X, r16
 468:	18 97       	sbiw	r26, 0x08	; 8
 46a:	08 e0       	ldi	r16, 0x08	; 8
 46c:	19 96       	adiw	r26, 0x09	; 9
 46e:	0c 93       	st	X, r16
 470:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 472:	8d 93       	st	X+, r24
 474:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 476:	db 98       	cbi	0x1b, 3	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 478:	d3 9a       	sbi	0x1a, 3	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 47a:	a7 e9       	ldi	r26, 0x97	; 151
 47c:	b1 e0       	ldi	r27, 0x01	; 1
 47e:	13 96       	adiw	r26, 0x03	; 3
 480:	7c 93       	st	X, r23
 482:	6e 93       	st	-X, r22
 484:	12 97       	sbiw	r26, 0x02	; 2
 486:	15 96       	adiw	r26, 0x05	; 5
 488:	5c 93       	st	X, r21
 48a:	4e 93       	st	-X, r20
 48c:	14 97       	sbiw	r26, 0x04	; 4
 48e:	17 96       	adiw	r26, 0x07	; 7
 490:	3c 93       	st	X, r19
 492:	2e 93       	st	-X, r18
 494:	16 97       	sbiw	r26, 0x06	; 6
 496:	18 96       	adiw	r26, 0x08	; 8
 498:	fc 93       	st	X, r31
 49a:	18 97       	sbiw	r26, 0x08	; 8
 49c:	00 e1       	ldi	r16, 0x10	; 16
 49e:	19 96       	adiw	r26, 0x09	; 9
 4a0:	0c 93       	st	X, r16
 4a2:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 4a4:	8d 93       	st	X+, r24
 4a6:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 4a8:	dc 98       	cbi	0x1b, 4	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 4aa:	d4 9a       	sbi	0x1a, 4	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 4ac:	ad e8       	ldi	r26, 0x8D	; 141
 4ae:	b1 e0       	ldi	r27, 0x01	; 1
 4b0:	13 96       	adiw	r26, 0x03	; 3
 4b2:	7c 93       	st	X, r23
 4b4:	6e 93       	st	-X, r22
 4b6:	12 97       	sbiw	r26, 0x02	; 2
 4b8:	15 96       	adiw	r26, 0x05	; 5
 4ba:	5c 93       	st	X, r21
 4bc:	4e 93       	st	-X, r20
 4be:	14 97       	sbiw	r26, 0x04	; 4
 4c0:	17 96       	adiw	r26, 0x07	; 7
 4c2:	3c 93       	st	X, r19
 4c4:	2e 93       	st	-X, r18
 4c6:	16 97       	sbiw	r26, 0x06	; 6
 4c8:	05 e0       	ldi	r16, 0x05	; 5
 4ca:	18 96       	adiw	r26, 0x08	; 8
 4cc:	0c 93       	st	X, r16
 4ce:	18 97       	sbiw	r26, 0x08	; 8
 4d0:	00 e2       	ldi	r16, 0x20	; 32
 4d2:	19 96       	adiw	r26, 0x09	; 9
 4d4:	0c 93       	st	X, r16
 4d6:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 4d8:	8d 93       	st	X+, r24
 4da:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 4dc:	dd 98       	cbi	0x1b, 5	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 4de:	d5 9a       	sbi	0x1a, 5	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 4e0:	a3 e8       	ldi	r26, 0x83	; 131
 4e2:	b1 e0       	ldi	r27, 0x01	; 1
 4e4:	13 96       	adiw	r26, 0x03	; 3
 4e6:	7c 93       	st	X, r23
 4e8:	6e 93       	st	-X, r22
 4ea:	12 97       	sbiw	r26, 0x02	; 2
 4ec:	15 96       	adiw	r26, 0x05	; 5
 4ee:	5c 93       	st	X, r21
 4f0:	4e 93       	st	-X, r20
 4f2:	14 97       	sbiw	r26, 0x04	; 4
 4f4:	17 96       	adiw	r26, 0x07	; 7
 4f6:	3c 93       	st	X, r19
 4f8:	2e 93       	st	-X, r18
 4fa:	16 97       	sbiw	r26, 0x06	; 6
 4fc:	06 e0       	ldi	r16, 0x06	; 6
 4fe:	18 96       	adiw	r26, 0x08	; 8
 500:	0c 93       	st	X, r16
 502:	18 97       	sbiw	r26, 0x08	; 8
 504:	00 e4       	ldi	r16, 0x40	; 64
 506:	19 96       	adiw	r26, 0x09	; 9
 508:	0c 93       	st	X, r16
 50a:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 50c:	8d 93       	st	X+, r24
 50e:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 510:	de 98       	cbi	0x1b, 6	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 512:	d6 9a       	sbi	0x1a, 6	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 514:	a9 e7       	ldi	r26, 0x79	; 121
 516:	b1 e0       	ldi	r27, 0x01	; 1
 518:	13 96       	adiw	r26, 0x03	; 3
 51a:	7c 93       	st	X, r23
 51c:	6e 93       	st	-X, r22
 51e:	12 97       	sbiw	r26, 0x02	; 2
 520:	15 96       	adiw	r26, 0x05	; 5
 522:	5c 93       	st	X, r21
 524:	4e 93       	st	-X, r20
 526:	14 97       	sbiw	r26, 0x04	; 4
 528:	17 96       	adiw	r26, 0x07	; 7
 52a:	3c 93       	st	X, r19
 52c:	2e 93       	st	-X, r18
 52e:	16 97       	sbiw	r26, 0x06	; 6
 530:	27 e0       	ldi	r18, 0x07	; 7
 532:	18 96       	adiw	r26, 0x08	; 8
 534:	2c 93       	st	X, r18
 536:	18 97       	sbiw	r26, 0x08	; 8
 538:	20 e8       	ldi	r18, 0x80	; 128
 53a:	19 96       	adiw	r26, 0x09	; 9
 53c:	2c 93       	st	X, r18
 53e:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 540:	8d 93       	st	X+, r24
 542:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 544:	df 98       	cbi	0x1b, 7	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 546:	d7 9a       	sbi	0x1a, 7	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 548:	af e6       	ldi	r26, 0x6F	; 111
 54a:	b1 e0       	ldi	r27, 0x01	; 1
 54c:	68 e3       	ldi	r22, 0x38	; 56
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	13 96       	adiw	r26, 0x03	; 3
 552:	7c 93       	st	X, r23
 554:	6e 93       	st	-X, r22
 556:	12 97       	sbiw	r26, 0x02	; 2
 558:	47 e3       	ldi	r20, 0x37	; 55
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	15 96       	adiw	r26, 0x05	; 5
 55e:	5c 93       	st	X, r21
 560:	4e 93       	st	-X, r20
 562:	14 97       	sbiw	r26, 0x04	; 4
 564:	26 e3       	ldi	r18, 0x36	; 54
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	17 96       	adiw	r26, 0x07	; 7
 56a:	3c 93       	st	X, r19
 56c:	2e 93       	st	-X, r18
 56e:	16 97       	sbiw	r26, 0x06	; 6
 570:	18 96       	adiw	r26, 0x08	; 8
 572:	1c 92       	st	X, r1
 574:	18 97       	sbiw	r26, 0x08	; 8
 576:	19 96       	adiw	r26, 0x09	; 9
 578:	ec 93       	st	X, r30
 57a:	19 97       	sbiw	r26, 0x09	; 9
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 57c:	cd 93       	st	X+, r28
 57e:	dc 93       	st	X, r29
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 580:	b8 98       	cbi	0x17, 0	; 23
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 582:	a5 e6       	ldi	r26, 0x65	; 101
 584:	b1 e0       	ldi	r27, 0x01	; 1
 586:	13 96       	adiw	r26, 0x03	; 3
 588:	7c 93       	st	X, r23
 58a:	6e 93       	st	-X, r22
 58c:	12 97       	sbiw	r26, 0x02	; 2
 58e:	15 96       	adiw	r26, 0x05	; 5
 590:	5c 93       	st	X, r21
 592:	4e 93       	st	-X, r20
 594:	14 97       	sbiw	r26, 0x04	; 4
 596:	17 96       	adiw	r26, 0x07	; 7
 598:	3c 93       	st	X, r19
 59a:	2e 93       	st	-X, r18
 59c:	16 97       	sbiw	r26, 0x06	; 6
 59e:	18 96       	adiw	r26, 0x08	; 8
 5a0:	ec 93       	st	X, r30
 5a2:	18 97       	sbiw	r26, 0x08	; 8
 5a4:	19 96       	adiw	r26, 0x09	; 9
 5a6:	1c 93       	st	X, r17
 5a8:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 5aa:	8d 93       	st	X+, r24
 5ac:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 5ae:	c1 98       	cbi	0x18, 1	; 24
		// Set pin in port to output
		*port_dir |= pin_mask;
 5b0:	b9 9a       	sbi	0x17, 1	; 23
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 5b2:	ab e5       	ldi	r26, 0x5B	; 91
 5b4:	b1 e0       	ldi	r27, 0x01	; 1
 5b6:	13 96       	adiw	r26, 0x03	; 3
 5b8:	7c 93       	st	X, r23
 5ba:	6e 93       	st	-X, r22
 5bc:	12 97       	sbiw	r26, 0x02	; 2
 5be:	15 96       	adiw	r26, 0x05	; 5
 5c0:	5c 93       	st	X, r21
 5c2:	4e 93       	st	-X, r20
 5c4:	14 97       	sbiw	r26, 0x04	; 4
 5c6:	17 96       	adiw	r26, 0x07	; 7
 5c8:	3c 93       	st	X, r19
 5ca:	2e 93       	st	-X, r18
 5cc:	16 97       	sbiw	r26, 0x06	; 6
 5ce:	18 96       	adiw	r26, 0x08	; 8
 5d0:	1c 93       	st	X, r17
 5d2:	18 97       	sbiw	r26, 0x08	; 8
 5d4:	19 96       	adiw	r26, 0x09	; 9
 5d6:	fc 93       	st	X, r31
 5d8:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 5da:	8d 93       	st	X+, r24
 5dc:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 5de:	c2 98       	cbi	0x18, 2	; 24
		// Set pin in port to output
		*port_dir |= pin_mask;
 5e0:	ba 9a       	sbi	0x17, 2	; 23
const uint16_t value_map[] = {0, 1, 8, 64, 256, 0, 1024, 0};

class GenericTimer {
protected:
	Prescaler prescale;
	GenericTimer(Prescaler pre) : prescale(pre) {}
 5e2:	a8 e5       	ldi	r26, 0x58	; 88
 5e4:	b1 e0       	ldi	r27, 0x01	; 1
 5e6:	12 96       	adiw	r26, 0x02	; 2
 5e8:	fc 93       	st	X, r31
 5ea:	12 97       	sbiw	r26, 0x02	; 2
	void inline set_output_compare_B(uint16_t oc_B) { *(base_address-8) = oc_B; };
};

class Timer0 : public Timer8bit {
public:
	Timer0(Prescaler pre) : Timer8bit(pre) {
 5ec:	82 e1       	ldi	r24, 0x12	; 18
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	8d 93       	st	X+, r24
 5f2:	9c 93       	st	X, r25
		TCCR0A = (1<<COM0A1) | (1<<COM0B1) | (1<<WGM00);
 5f4:	81 ea       	ldi	r24, 0xA1	; 161
 5f6:	80 bf       	out	0x30, r24	; 48
		TCCR0B = 0;//(1<<WGM02);
 5f8:	13 be       	out	0x33, r1	; 51
const uint16_t value_map[] = {0, 1, 8, 64, 256, 0, 1024, 0};

class GenericTimer {
protected:
	Prescaler prescale;
	GenericTimer(Prescaler pre) : prescale(pre) {}
 5fa:	a3 e5       	ldi	r26, 0x53	; 83
 5fc:	b1 e0       	ldi	r27, 0x01	; 1
 5fe:	12 96       	adiw	r26, 0x02	; 2
 600:	ec 93       	st	X, r30
 602:	12 97       	sbiw	r26, 0x02	; 2
};

class Timer16bit : public GenericTimer {
protected:
	Timer16bit(Prescaler pre, volatile uint8_t *const base) 
			: GenericTimer(pre), base_address(base) {}
 604:	8f e4       	ldi	r24, 0x4F	; 79
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	14 96       	adiw	r26, 0x04	; 4
 60a:	9c 93       	st	X, r25
 60c:	8e 93       	st	-X, r24
 60e:	13 97       	sbiw	r26, 0x03	; 3
	void clear() { TCNT0 = 0; }
};

class Timer1 : public Timer16bit {
public:
	Timer1(Prescaler pre) : Timer16bit(pre, &TCCR1A) {
 610:	80 e2       	ldi	r24, 0x20	; 32
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	8d 93       	st	X+, r24
 616:	9c 93       	st	X, r25
		TCCR1A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
 618:	92 ea       	ldi	r25, 0xA2	; 162
 61a:	9f bd       	out	0x2f, r25	; 47
		TCCR1B = (1<<WGM13) | (1<<WGM12);
 61c:	88 e1       	ldi	r24, 0x18	; 24
 61e:	8e bd       	out	0x2e, r24	; 46
const uint16_t value_map[] = {0, 1, 8, 64, 256, 0, 1024, 0};

class GenericTimer {
protected:
	Prescaler prescale;
	GenericTimer(Prescaler pre) : prescale(pre) {}
 620:	ae e4       	ldi	r26, 0x4E	; 78
 622:	b1 e0       	ldi	r27, 0x01	; 1
 624:	12 96       	adiw	r26, 0x02	; 2
 626:	ec 93       	st	X, r30
 628:	12 97       	sbiw	r26, 0x02	; 2
};

class Timer16bit : public GenericTimer {
protected:
	Timer16bit(Prescaler pre, volatile uint8_t *const base) 
			: GenericTimer(pre), base_address(base) {}
 62a:	ea ec       	ldi	r30, 0xCA	; 202
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	14 96       	adiw	r26, 0x04	; 4
 630:	fc 93       	st	X, r31
 632:	ee 93       	st	-X, r30
 634:	13 97       	sbiw	r26, 0x03	; 3
	void clear() { TCNT1 = 0; }
};

class Timer2 : public Timer16bit {
public:
	Timer2(Prescaler pre) : Timer16bit(pre, &TCCR2A) {
 636:	2e e2       	ldi	r18, 0x2E	; 46
 638:	31 e0       	ldi	r19, 0x01	; 1
 63a:	2d 93       	st	X+, r18
 63c:	3c 93       	st	X, r19
		TCCR2A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
 63e:	90 83       	st	Z, r25
		TCCR2B = (1<<WGM13) | (1<<WGM12);		
 640:	80 93 c9 00 	sts	0x00C9, r24
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	08 95       	ret

0000064e <_GLOBAL__sub_D__Znwj>:
 64e:	08 95       	ret

00000650 <__udivmodsi4>:
 650:	a1 e2       	ldi	r26, 0x21	; 33
 652:	1a 2e       	mov	r1, r26
 654:	aa 1b       	sub	r26, r26
 656:	bb 1b       	sub	r27, r27
 658:	fd 01       	movw	r30, r26
 65a:	0d c0       	rjmp	.+26     	; 0x676 <__udivmodsi4_ep>

0000065c <__udivmodsi4_loop>:
 65c:	aa 1f       	adc	r26, r26
 65e:	bb 1f       	adc	r27, r27
 660:	ee 1f       	adc	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	a2 17       	cp	r26, r18
 666:	b3 07       	cpc	r27, r19
 668:	e4 07       	cpc	r30, r20
 66a:	f5 07       	cpc	r31, r21
 66c:	20 f0       	brcs	.+8      	; 0x676 <__udivmodsi4_ep>
 66e:	a2 1b       	sub	r26, r18
 670:	b3 0b       	sbc	r27, r19
 672:	e4 0b       	sbc	r30, r20
 674:	f5 0b       	sbc	r31, r21

00000676 <__udivmodsi4_ep>:
 676:	66 1f       	adc	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	1a 94       	dec	r1
 680:	69 f7       	brne	.-38     	; 0x65c <__udivmodsi4_loop>
 682:	60 95       	com	r22
 684:	70 95       	com	r23
 686:	80 95       	com	r24
 688:	90 95       	com	r25
 68a:	9b 01       	movw	r18, r22
 68c:	ac 01       	movw	r20, r24
 68e:	bd 01       	movw	r22, r26
 690:	cf 01       	movw	r24, r30
 692:	08 95       	ret

00000694 <__tablejump2__>:
 694:	ee 0f       	add	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	05 90       	lpm	r0, Z+
 69a:	f4 91       	lpm	r31, Z
 69c:	e0 2d       	mov	r30, r0
 69e:	09 94       	ijmp

000006a0 <malloc>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	82 30       	cpi	r24, 0x02	; 2
 6a6:	91 05       	cpc	r25, r1
 6a8:	10 f4       	brcc	.+4      	; 0x6ae <malloc+0xe>
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	e0 91 cb 01 	lds	r30, 0x01CB
 6b2:	f0 91 cc 01 	lds	r31, 0x01CC
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	c0 e0       	ldi	r28, 0x00	; 0
 6bc:	d0 e0       	ldi	r29, 0x00	; 0
 6be:	30 97       	sbiw	r30, 0x00	; 0
 6c0:	11 f1       	breq	.+68     	; 0x706 <malloc+0x66>
 6c2:	40 81       	ld	r20, Z
 6c4:	51 81       	ldd	r21, Z+1	; 0x01
 6c6:	48 17       	cp	r20, r24
 6c8:	59 07       	cpc	r21, r25
 6ca:	c0 f0       	brcs	.+48     	; 0x6fc <malloc+0x5c>
 6cc:	48 17       	cp	r20, r24
 6ce:	59 07       	cpc	r21, r25
 6d0:	61 f4       	brne	.+24     	; 0x6ea <malloc+0x4a>
 6d2:	82 81       	ldd	r24, Z+2	; 0x02
 6d4:	93 81       	ldd	r25, Z+3	; 0x03
 6d6:	20 97       	sbiw	r28, 0x00	; 0
 6d8:	19 f0       	breq	.+6      	; 0x6e0 <malloc+0x40>
 6da:	9b 83       	std	Y+3, r25	; 0x03
 6dc:	8a 83       	std	Y+2, r24	; 0x02
 6de:	2b c0       	rjmp	.+86     	; 0x736 <malloc+0x96>
 6e0:	90 93 cc 01 	sts	0x01CC, r25
 6e4:	80 93 cb 01 	sts	0x01CB, r24
 6e8:	26 c0       	rjmp	.+76     	; 0x736 <malloc+0x96>
 6ea:	21 15       	cp	r18, r1
 6ec:	31 05       	cpc	r19, r1
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <malloc+0x56>
 6f0:	42 17       	cp	r20, r18
 6f2:	53 07       	cpc	r21, r19
 6f4:	18 f4       	brcc	.+6      	; 0x6fc <malloc+0x5c>
 6f6:	9a 01       	movw	r18, r20
 6f8:	be 01       	movw	r22, r28
 6fa:	df 01       	movw	r26, r30
 6fc:	ef 01       	movw	r28, r30
 6fe:	02 80       	ldd	r0, Z+2	; 0x02
 700:	f3 81       	ldd	r31, Z+3	; 0x03
 702:	e0 2d       	mov	r30, r0
 704:	dc cf       	rjmp	.-72     	; 0x6be <malloc+0x1e>
 706:	21 15       	cp	r18, r1
 708:	31 05       	cpc	r19, r1
 70a:	09 f1       	breq	.+66     	; 0x74e <malloc+0xae>
 70c:	28 1b       	sub	r18, r24
 70e:	39 0b       	sbc	r19, r25
 710:	24 30       	cpi	r18, 0x04	; 4
 712:	31 05       	cpc	r19, r1
 714:	90 f4       	brcc	.+36     	; 0x73a <malloc+0x9a>
 716:	12 96       	adiw	r26, 0x02	; 2
 718:	8d 91       	ld	r24, X+
 71a:	9c 91       	ld	r25, X
 71c:	13 97       	sbiw	r26, 0x03	; 3
 71e:	61 15       	cp	r22, r1
 720:	71 05       	cpc	r23, r1
 722:	21 f0       	breq	.+8      	; 0x72c <malloc+0x8c>
 724:	fb 01       	movw	r30, r22
 726:	93 83       	std	Z+3, r25	; 0x03
 728:	82 83       	std	Z+2, r24	; 0x02
 72a:	04 c0       	rjmp	.+8      	; 0x734 <malloc+0x94>
 72c:	90 93 cc 01 	sts	0x01CC, r25
 730:	80 93 cb 01 	sts	0x01CB, r24
 734:	fd 01       	movw	r30, r26
 736:	32 96       	adiw	r30, 0x02	; 2
 738:	44 c0       	rjmp	.+136    	; 0x7c2 <malloc+0x122>
 73a:	fd 01       	movw	r30, r26
 73c:	e2 0f       	add	r30, r18
 73e:	f3 1f       	adc	r31, r19
 740:	81 93       	st	Z+, r24
 742:	91 93       	st	Z+, r25
 744:	22 50       	subi	r18, 0x02	; 2
 746:	31 09       	sbc	r19, r1
 748:	2d 93       	st	X+, r18
 74a:	3c 93       	st	X, r19
 74c:	3a c0       	rjmp	.+116    	; 0x7c2 <malloc+0x122>
 74e:	20 91 c9 01 	lds	r18, 0x01C9
 752:	30 91 ca 01 	lds	r19, 0x01CA
 756:	23 2b       	or	r18, r19
 758:	41 f4       	brne	.+16     	; 0x76a <malloc+0xca>
 75a:	20 91 02 01 	lds	r18, 0x0102
 75e:	30 91 03 01 	lds	r19, 0x0103
 762:	30 93 ca 01 	sts	0x01CA, r19
 766:	20 93 c9 01 	sts	0x01C9, r18
 76a:	20 91 00 01 	lds	r18, 0x0100
 76e:	30 91 01 01 	lds	r19, 0x0101
 772:	21 15       	cp	r18, r1
 774:	31 05       	cpc	r19, r1
 776:	41 f4       	brne	.+16     	; 0x788 <malloc+0xe8>
 778:	2d b7       	in	r18, 0x3d	; 61
 77a:	3e b7       	in	r19, 0x3e	; 62
 77c:	40 91 04 01 	lds	r20, 0x0104
 780:	50 91 05 01 	lds	r21, 0x0105
 784:	24 1b       	sub	r18, r20
 786:	35 0b       	sbc	r19, r21
 788:	e0 91 c9 01 	lds	r30, 0x01C9
 78c:	f0 91 ca 01 	lds	r31, 0x01CA
 790:	e2 17       	cp	r30, r18
 792:	f3 07       	cpc	r31, r19
 794:	a0 f4       	brcc	.+40     	; 0x7be <malloc+0x11e>
 796:	2e 1b       	sub	r18, r30
 798:	3f 0b       	sbc	r19, r31
 79a:	28 17       	cp	r18, r24
 79c:	39 07       	cpc	r19, r25
 79e:	78 f0       	brcs	.+30     	; 0x7be <malloc+0x11e>
 7a0:	ac 01       	movw	r20, r24
 7a2:	4e 5f       	subi	r20, 0xFE	; 254
 7a4:	5f 4f       	sbci	r21, 0xFF	; 255
 7a6:	24 17       	cp	r18, r20
 7a8:	35 07       	cpc	r19, r21
 7aa:	48 f0       	brcs	.+18     	; 0x7be <malloc+0x11e>
 7ac:	4e 0f       	add	r20, r30
 7ae:	5f 1f       	adc	r21, r31
 7b0:	50 93 ca 01 	sts	0x01CA, r21
 7b4:	40 93 c9 01 	sts	0x01C9, r20
 7b8:	81 93       	st	Z+, r24
 7ba:	91 93       	st	Z+, r25
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <malloc+0x122>
 7be:	e0 e0       	ldi	r30, 0x00	; 0
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	cf 01       	movw	r24, r30
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <free>:
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	00 97       	sbiw	r24, 0x00	; 0
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <free+0xe>
 7d6:	8c c0       	rjmp	.+280    	; 0x8f0 <free+0x126>
 7d8:	fc 01       	movw	r30, r24
 7da:	32 97       	sbiw	r30, 0x02	; 2
 7dc:	13 82       	std	Z+3, r1	; 0x03
 7de:	12 82       	std	Z+2, r1	; 0x02
 7e0:	00 91 cb 01 	lds	r16, 0x01CB
 7e4:	10 91 cc 01 	lds	r17, 0x01CC
 7e8:	01 15       	cp	r16, r1
 7ea:	11 05       	cpc	r17, r1
 7ec:	81 f4       	brne	.+32     	; 0x80e <free+0x44>
 7ee:	20 81       	ld	r18, Z
 7f0:	31 81       	ldd	r19, Z+1	; 0x01
 7f2:	82 0f       	add	r24, r18
 7f4:	93 1f       	adc	r25, r19
 7f6:	20 91 c9 01 	lds	r18, 0x01C9
 7fa:	30 91 ca 01 	lds	r19, 0x01CA
 7fe:	28 17       	cp	r18, r24
 800:	39 07       	cpc	r19, r25
 802:	79 f5       	brne	.+94     	; 0x862 <free+0x98>
 804:	f0 93 ca 01 	sts	0x01CA, r31
 808:	e0 93 c9 01 	sts	0x01C9, r30
 80c:	71 c0       	rjmp	.+226    	; 0x8f0 <free+0x126>
 80e:	d8 01       	movw	r26, r16
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	ae 17       	cp	r26, r30
 816:	bf 07       	cpc	r27, r31
 818:	50 f4       	brcc	.+20     	; 0x82e <free+0x64>
 81a:	12 96       	adiw	r26, 0x02	; 2
 81c:	2d 91       	ld	r18, X+
 81e:	3c 91       	ld	r19, X
 820:	13 97       	sbiw	r26, 0x03	; 3
 822:	ad 01       	movw	r20, r26
 824:	21 15       	cp	r18, r1
 826:	31 05       	cpc	r19, r1
 828:	09 f1       	breq	.+66     	; 0x86c <free+0xa2>
 82a:	d9 01       	movw	r26, r18
 82c:	f3 cf       	rjmp	.-26     	; 0x814 <free+0x4a>
 82e:	9d 01       	movw	r18, r26
 830:	da 01       	movw	r26, r20
 832:	33 83       	std	Z+3, r19	; 0x03
 834:	22 83       	std	Z+2, r18	; 0x02
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	86 0f       	add	r24, r22
 83c:	97 1f       	adc	r25, r23
 83e:	82 17       	cp	r24, r18
 840:	93 07       	cpc	r25, r19
 842:	69 f4       	brne	.+26     	; 0x85e <free+0x94>
 844:	ec 01       	movw	r28, r24
 846:	28 81       	ld	r18, Y
 848:	39 81       	ldd	r19, Y+1	; 0x01
 84a:	26 0f       	add	r18, r22
 84c:	37 1f       	adc	r19, r23
 84e:	2e 5f       	subi	r18, 0xFE	; 254
 850:	3f 4f       	sbci	r19, 0xFF	; 255
 852:	31 83       	std	Z+1, r19	; 0x01
 854:	20 83       	st	Z, r18
 856:	8a 81       	ldd	r24, Y+2	; 0x02
 858:	9b 81       	ldd	r25, Y+3	; 0x03
 85a:	93 83       	std	Z+3, r25	; 0x03
 85c:	82 83       	std	Z+2, r24	; 0x02
 85e:	45 2b       	or	r20, r21
 860:	29 f4       	brne	.+10     	; 0x86c <free+0xa2>
 862:	f0 93 cc 01 	sts	0x01CC, r31
 866:	e0 93 cb 01 	sts	0x01CB, r30
 86a:	42 c0       	rjmp	.+132    	; 0x8f0 <free+0x126>
 86c:	13 96       	adiw	r26, 0x03	; 3
 86e:	fc 93       	st	X, r31
 870:	ee 93       	st	-X, r30
 872:	12 97       	sbiw	r26, 0x02	; 2
 874:	ed 01       	movw	r28, r26
 876:	49 91       	ld	r20, Y+
 878:	59 91       	ld	r21, Y+
 87a:	9e 01       	movw	r18, r28
 87c:	24 0f       	add	r18, r20
 87e:	35 1f       	adc	r19, r21
 880:	e2 17       	cp	r30, r18
 882:	f3 07       	cpc	r31, r19
 884:	71 f4       	brne	.+28     	; 0x8a2 <free+0xd8>
 886:	80 81       	ld	r24, Z
 888:	91 81       	ldd	r25, Z+1	; 0x01
 88a:	84 0f       	add	r24, r20
 88c:	95 1f       	adc	r25, r21
 88e:	02 96       	adiw	r24, 0x02	; 2
 890:	11 96       	adiw	r26, 0x01	; 1
 892:	9c 93       	st	X, r25
 894:	8e 93       	st	-X, r24
 896:	82 81       	ldd	r24, Z+2	; 0x02
 898:	93 81       	ldd	r25, Z+3	; 0x03
 89a:	13 96       	adiw	r26, 0x03	; 3
 89c:	9c 93       	st	X, r25
 89e:	8e 93       	st	-X, r24
 8a0:	12 97       	sbiw	r26, 0x02	; 2
 8a2:	e0 e0       	ldi	r30, 0x00	; 0
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	d8 01       	movw	r26, r16
 8a8:	12 96       	adiw	r26, 0x02	; 2
 8aa:	8d 91       	ld	r24, X+
 8ac:	9c 91       	ld	r25, X
 8ae:	13 97       	sbiw	r26, 0x03	; 3
 8b0:	00 97       	sbiw	r24, 0x00	; 0
 8b2:	19 f0       	breq	.+6      	; 0x8ba <free+0xf0>
 8b4:	f8 01       	movw	r30, r16
 8b6:	8c 01       	movw	r16, r24
 8b8:	f6 cf       	rjmp	.-20     	; 0x8a6 <free+0xdc>
 8ba:	8d 91       	ld	r24, X+
 8bc:	9c 91       	ld	r25, X
 8be:	98 01       	movw	r18, r16
 8c0:	2e 5f       	subi	r18, 0xFE	; 254
 8c2:	3f 4f       	sbci	r19, 0xFF	; 255
 8c4:	82 0f       	add	r24, r18
 8c6:	93 1f       	adc	r25, r19
 8c8:	20 91 c9 01 	lds	r18, 0x01C9
 8cc:	30 91 ca 01 	lds	r19, 0x01CA
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	69 f4       	brne	.+26     	; 0x8f0 <free+0x126>
 8d6:	30 97       	sbiw	r30, 0x00	; 0
 8d8:	29 f4       	brne	.+10     	; 0x8e4 <free+0x11a>
 8da:	10 92 cc 01 	sts	0x01CC, r1
 8de:	10 92 cb 01 	sts	0x01CB, r1
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <free+0x11e>
 8e4:	13 82       	std	Z+3, r1	; 0x03
 8e6:	12 82       	std	Z+2, r1	; 0x02
 8e8:	10 93 ca 01 	sts	0x01CA, r17
 8ec:	00 93 c9 01 	sts	0x01C9, r16
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	1f 91       	pop	r17
 8f6:	0f 91       	pop	r16
 8f8:	08 95       	ret

000008fa <__do_global_dtors>:
 8fa:	10 e0       	ldi	r17, 0x00	; 0
 8fc:	cf e1       	ldi	r28, 0x1F	; 31
 8fe:	d0 e0       	ldi	r29, 0x00	; 0
 900:	03 c0       	rjmp	.+6      	; 0x908 <__do_global_dtors+0xe>
 902:	fe 01       	movw	r30, r28
 904:	c7 de       	rcall	.-626    	; 0x694 <__tablejump2__>
 906:	21 96       	adiw	r28, 0x01	; 1
 908:	c0 32       	cpi	r28, 0x20	; 32
 90a:	d1 07       	cpc	r29, r17
 90c:	d1 f7       	brne	.-12     	; 0x902 <__do_global_dtors+0x8>
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>
