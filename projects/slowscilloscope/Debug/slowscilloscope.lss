
slowscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000fdc  00001070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800148  00800148  000010b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bed  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050e  00000000  00000000  00001dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000493  00000000  00000000  000022e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000607  00000000  00000000  00002990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000492  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003429  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_18>
  4c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_19>
  50:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_20>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b0 01 	call	0x360	; 0x360 <main>
  9e:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
volatile uint8_t Analog::analogHigh = 0;
volatile uint8_t Analog::analogLow = 0;
volatile uint8_t Analog::lastChannel = 0; // Channels 0-7 for ATmega328P

ISR(ADC_vect) 
{	
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	Analog::analogLow = ADCL;
  b2:	80 91 78 00 	lds	r24, 0x0078
  b6:	80 93 48 01 	sts	0x0148, r24
	Analog::analogHigh = ADCH;
  ba:	80 91 79 00 	lds	r24, 0x0079
  be:	80 93 49 01 	sts	0x0149, r24
	Analog::newValue = true;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 4a 01 	sts	0x014A, r24
}
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <_ZN6Analog13selectChannelEh>:

void Analog::selectChannel (uint8_t n) 
{		
	DDRC = DDRC & ~_BV(n);
  d4:	97 b1       	in	r25, 0x07	; 7
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	9a 01       	movw	r18, r20
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <_ZN6Analog13selectChannelEh+0x10>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <_ZN6Analog13selectChannelEh+0xc>
  e8:	20 95       	com	r18
  ea:	29 23       	and	r18, r25
  ec:	27 b9       	out	0x07, r18	; 7
	ADMUX  = _BV(REFS0) | n; // AREF = AVCC
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 93 7c 00 	sts	0x007C, r24
	//ADMUX  = n; // uses AREF voltage, channel n selected
	ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
  f4:	8f e8       	ldi	r24, 0x8F	; 143
  f6:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // free running
  fa:	10 92 7b 00 	sts	0x007B, r1
  fe:	08 95       	ret

00000100 <_ZN6Analog17autoTriggerEnableEb>:
}

void Analog::autoTriggerEnable(bool enabled) 
{
	ADCSRA = enabled? ADCSRA | _BV(ADATE) : ADCSRA & ~_BV(ADATE);
 100:	88 23       	and	r24, r24
 102:	21 f0       	breq	.+8      	; 0x10c <_ZN6Analog17autoTriggerEnableEb+0xc>
 104:	80 91 7a 00 	lds	r24, 0x007A
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	03 c0       	rjmp	.+6      	; 0x112 <_ZN6Analog17autoTriggerEnableEb+0x12>
 10c:	80 91 7a 00 	lds	r24, 0x007A
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	80 93 7a 00 	sts	0x007A, r24
 116:	08 95       	ret

00000118 <_ZN6Analog15startConversionEv>:
}
	
void Analog::startConversion() 
{ 
	newValue = false;
 118:	10 92 4a 01 	sts	0x014A, r1
	ADCSRA |= _BV(ADSC); 
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <_ZN6Analog17newValueAvailableEv>:
	
void Analog::stopConversion() { ADCSRA &= ~_BV(ADSC); }
	
bool Analog::conversionComplete() { ADCSRA & _BV(ADSC); }
	
bool Analog::newValueAvailable() { return newValue; }
 128:	80 91 4a 01 	lds	r24, 0x014A
 12c:	08 95       	ret

0000012e <_ZN6Analog8getValueEv>:
	
uint16_t Analog::getValue() 
{
	return ((Analog::analogHigh << 8)) | (Analog::analogLow); 
 12e:	20 91 49 01 	lds	r18, 0x0149
 132:	80 91 48 01 	lds	r24, 0x0148
 136:	90 e0       	ldi	r25, 0x00	; 0
}
 138:	92 2b       	or	r25, r18
 13a:	08 95       	ret

0000013c <__vector_20>:

volatile uint8_t* _S3P_transmitting;
volatile uint8_t _S3P_charsLeft = 0, _S3P_charsToSend = 0;

ISR(USART_TX_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	D2OFF;
 14c:	2c 98       	cbi	0x05, 4	; 5
	DON;
 14e:	2d 9a       	sbi	0x05, 5	; 5
	
	UCSR0B &= ~_BV(TXCIE0); // disables TX complete interrupt
 150:	e1 ec       	ldi	r30, 0xC1	; 193
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8f 7b       	andi	r24, 0xBF	; 191
 158:	80 83       	st	Z, r24
	_S3P_TX_DISABLE();
 15a:	2a 98       	cbi	0x05, 2	; 5
 15c:	80 81       	ld	r24, Z
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	80 83       	st	Z, r24
	
	DOFF;
 162:	2d 98       	cbi	0x05, 5	; 5
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_19>:
	
	D2OFF;
}

ISR(USART_UDRE_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	D2ON;
 186:	2c 9a       	sbi	0x05, 4	; 5
	DON;
 188:	2d 9a       	sbi	0x05, 5	; 5
	
	UDR0 = _S3P_transmitting[_S3P_charsToSend - _S3P_charsLeft];
 18a:	e0 91 4b 01 	lds	r30, 0x014B
 18e:	80 91 4c 01 	lds	r24, 0x014C
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e8 1b       	sub	r30, r24
 196:	f1 09       	sbc	r31, r1
 198:	80 91 4d 01 	lds	r24, 0x014D
 19c:	90 91 4e 01 	lds	r25, 0x014E
 1a0:	e8 0f       	add	r30, r24
 1a2:	f9 1f       	adc	r31, r25
 1a4:	80 81       	ld	r24, Z
 1a6:	80 93 c6 00 	sts	0x00C6, r24
	_S3P_charsLeft--;
 1aa:	80 91 4c 01 	lds	r24, 0x014C
 1ae:	81 50       	subi	r24, 0x01	; 1
 1b0:	80 93 4c 01 	sts	0x014C, r24
	
	if(_S3P_charsLeft == 0)
 1b4:	80 91 4c 01 	lds	r24, 0x014C
 1b8:	81 11       	cpse	r24, r1
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <__vector_19+0x58>
	{
		UCSR0B &= ~_BV(UDRIE0);  // disable buffer empty interrupt
 1bc:	e1 ec       	ldi	r30, 0xC1	; 193
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 7d       	andi	r24, 0xDF	; 223
 1c4:	80 83       	st	Z, r24
		UCSR0B |= _BV(TXCIE0); // enables TX complete interrupt
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
	}
	
	D2OFF;
 1cc:	2c 98       	cbi	0x05, 4	; 5
	DOFF;
 1ce:	2d 98       	cbi	0x05, 5	; 5
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <_ZN3S3P4initEjPKvhPVvhS3_h>:
		uint8_t delimiterSize,
		volatile void* in,
		uint8_t inSize,
		volatile void* out,
		uint8_t outSize)
{	
 1e2:	cf 92       	push	r12
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
	_S3P_outputSize = outSize;
}

void S3P::setDelimiter(const void* delimiter, uint8_t delimiterSize)
{
	_S3P_delimiter = (uint8_t*)delimiter;
 1ea:	70 93 59 01 	sts	0x0159, r23
 1ee:	60 93 58 01 	sts	0x0158, r22
	_S3P_delimiterSize = delimiterSize;
 1f2:	40 93 57 01 	sts	0x0157, r20
		volatile void* in,
		uint8_t inSize,
		volatile void* out,
		uint8_t outSize)
{
	_S3P_input = (volatile uint8_t*)in;
 1f6:	30 93 56 01 	sts	0x0156, r19
 1fa:	20 93 55 01 	sts	0x0155, r18
	_S3P_inputSize = inSize;
 1fe:	00 93 53 01 	sts	0x0153, r16
	_S3P_output = (volatile uint8_t*)out;
 202:	f0 92 52 01 	sts	0x0152, r15
 206:	e0 92 51 01 	sts	0x0151, r14
	_S3P_outputSize = outSize;
 20a:	c0 92 50 01 	sts	0x0150, r12
		uint8_t outSize)
{	
	setDelimiter(delimiter, delimiterSize);
	setbuffers(in, inSize, out, outSize);
	
	DDRB |= _BV(TXDEN_PIN) + _BV(5);
 20e:	24 b1       	in	r18, 0x04	; 4
 210:	24 62       	ori	r18, 0x24	; 36
 212:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(TXDEN_PIN);
 214:	2a 98       	cbi	0x05, 2	; 5
	
	UBRR0H = baudrateDivisor >> 8;
 216:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = baudrateDivisor;
 21a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = _BV(U2X0); // Double speed UART
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0); // Receive interrupt, RX/TX enable
 224:	88 e9       	ldi	r24, 0x98	; 152
 226:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data, no parity, 1 stop bit
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	80 93 c2 00 	sts	0x00C2, r24
}
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	cf 90       	pop	r12
 238:	08 95       	ret

0000023a <_ZN3S3P8transmitEPVvh>:
void S3P::transmit(volatile void* toTransmit, uint8_t charCount) 
{
	// sends between 1 and 255 chars
	// uses USART_TX and USART_UDRE interrupts to advance through chars
	
	_S3P_transmitting = (volatile uint8_t*)toTransmit;
 23a:	90 93 4e 01 	sts	0x014E, r25
 23e:	80 93 4d 01 	sts	0x014D, r24
	_S3P_charsToSend = charCount;
 242:	60 93 4b 01 	sts	0x014B, r22
	_S3P_charsLeft = _S3P_charsToSend - 1;
 246:	80 91 4b 01 	lds	r24, 0x014B
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	80 93 4c 01 	sts	0x014C, r24
	
	_S3P_TX_ENABLE();
 250:	e1 ec       	ldi	r30, 0xC1	; 193
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	88 60       	ori	r24, 0x08	; 8
 258:	80 83       	st	Z, r24
 25a:	2a 9a       	sbi	0x05, 2	; 5
	
	UDR0 = _S3P_transmitting[0]; // start transmission of first char
 25c:	e0 91 4d 01 	lds	r30, 0x014D
 260:	f0 91 4e 01 	lds	r31, 0x014E
 264:	80 81       	ld	r24, Z
 266:	80 93 c6 00 	sts	0x00C6, r24
	
	if (_S3P_charsLeft > 0)
 26a:	80 91 4c 01 	lds	r24, 0x014C
 26e:	88 23       	and	r24, r24
 270:	31 f0       	breq	.+12     	; 0x27e <_ZN3S3P8transmitEPVvh+0x44>
	{
		UCSR0B |= _BV(UDRIE0); // enable buffer empty interrupt
 272:	e1 ec       	ldi	r30, 0xC1	; 193
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret
	}
	else
	{
		UCSR0B |= _BV(TXCIE0); // enables TX complete interrupt
 27e:	e1 ec       	ldi	r30, 0xC1	; 193
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 64       	ori	r24, 0x40	; 64
 286:	80 83       	st	Z, r24
 288:	08 95       	ret

0000028a <_ZN3S3P8transmitEv>:
	}
}

void S3P::transmit()
{
	transmit(_S3P_output, _S3P_outputSize);
 28a:	60 91 50 01 	lds	r22, 0x0150
 28e:	80 91 51 01 	lds	r24, 0x0151
 292:	90 91 52 01 	lds	r25, 0x0152
 296:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN3S3P8transmitEPVvh>
 29a:	08 95       	ret

0000029c <__vector_18>:
	
	DOFF;
}

ISR(USART_RX_vect)
{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	D2ON;
 2be:	2c 9a       	sbi	0x05, 4	; 5
	DOFF;
 2c0:	2d 98       	cbi	0x05, 5	; 5
	
	char received = UDR0; // clears flag
 2c2:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(_S3P_memoryIndex < _S3P_delimiterSize)
 2c6:	90 91 4f 01 	lds	r25, 0x014F
 2ca:	80 91 57 01 	lds	r24, 0x0157
 2ce:	98 17       	cp	r25, r24
 2d0:	98 f4       	brcc	.+38     	; 0x2f8 <__vector_18+0x5c>
	{
		_S3P_memoryIndex = (received == _S3P_delimiter[_S3P_memoryIndex])? 
 2d2:	80 91 4f 01 	lds	r24, 0x014F
 2d6:	e0 91 58 01 	lds	r30, 0x0158
 2da:	f0 91 59 01 	lds	r31, 0x0159
 2de:	e8 0f       	add	r30, r24
 2e0:	f1 1d       	adc	r31, r1
			_S3P_memoryIndex + 1 : 0;
 2e2:	80 81       	ld	r24, Z
 2e4:	82 13       	cpse	r24, r18
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <__vector_18+0x54>
 2e8:	80 91 4f 01 	lds	r24, 0x014F
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <__vector_18+0x56>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	80 93 4f 01 	sts	0x014F, r24
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <__vector_18+0x84>
	}
	else if(_S3P_inputIndex < _S3P_inputSize)
 2f8:	90 91 54 01 	lds	r25, 0x0154
 2fc:	80 91 53 01 	lds	r24, 0x0153
 300:	98 17       	cp	r25, r24
 302:	70 f4       	brcc	.+28     	; 0x320 <__vector_18+0x84>
	{
		_S3P_input[_S3P_inputIndex] = received;
 304:	80 91 54 01 	lds	r24, 0x0154
 308:	e0 91 55 01 	lds	r30, 0x0155
 30c:	f0 91 56 01 	lds	r31, 0x0156
 310:	e8 0f       	add	r30, r24
 312:	f1 1d       	adc	r31, r1
 314:	20 83       	st	Z, r18
		_S3P_inputIndex++;
 316:	80 91 54 01 	lds	r24, 0x0154
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	80 93 54 01 	sts	0x0154, r24
	}
	if(_S3P_inputIndex == _S3P_inputSize)
 320:	90 91 54 01 	lds	r25, 0x0154
 324:	80 91 53 01 	lds	r24, 0x0153
 328:	98 13       	cpse	r25, r24
 32a:	08 c0       	rjmp	.+16     	; 0x33c <__vector_18+0xa0>
	{
		_S3P_memoryIndex = 0;
 32c:	10 92 4f 01 	sts	0x014F, r1
		_S3P_inputIndex = 0;
 330:	10 92 54 01 	sts	0x0154, r1
		D2ON;
 334:	2c 9a       	sbi	0x05, 4	; 5
		S3P::transmit();
 336:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN3S3P8transmitEv>
		D2OFF;
 33a:	2c 98       	cbi	0x05, 4	; 5
	}
	
	D2OFF;
 33c:	2c 98       	cbi	0x05, 4	; 5
}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <main>:
#include "dataStructures.h"
#include <stdio.h>
#include <string.h>

int main(void) 
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	c0 56       	subi	r28, 0x60	; 96
 36a:	d1 09       	sbc	r29, r1
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
	S3P::init(BAUDRATE_DIVISOR, DATA_STRUCTURE_REF);
 376:	68 94       	set
 378:	cc 24       	eor	r12, r12
 37a:	c4 f8       	bld	r12, 4
 37c:	0f 2e       	mov	r0, r31
 37e:	fa e5       	ldi	r31, 0x5A	; 90
 380:	ef 2e       	mov	r14, r31
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	ff 2e       	mov	r15, r31
 386:	f0 2d       	mov	r31, r0
 388:	01 e0       	ldi	r16, 0x01	; 1
 38a:	2a e6       	ldi	r18, 0x6A	; 106
 38c:	31 e0       	ldi	r19, 0x01	; 1
 38e:	45 e0       	ldi	r20, 0x05	; 5
 390:	62 e4       	ldi	r22, 0x42	; 66
 392:	71 e0       	ldi	r23, 0x01	; 1
 394:	80 e1       	ldi	r24, 0x10	; 16
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN3S3P4initEjPKvhPVvhS3_h>
	Analog::selectChannel(0);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN6Analog13selectChannelEh>
	Analog::autoTriggerEnable(false);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6Analog17autoTriggerEnableEb>
	Analog::startConversion();
 3a8:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Analog15startConversionEv>
	sei(); // set interrupts
 3ac:	78 94       	sei
	
	DDRC = 0x00;
 3ae:	17 b8       	out	0x07, r1	; 7
	
    while(1)	
	{
		#define NUMBER_CHANNELS 8
		for(int i = 0; i < NUMBER_CHANNELS; i++)
 3b0:	00 e0       	ldi	r16, 0x00	; 0
 3b2:	10 e0       	ldi	r17, 0x00	; 0
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
				dataOut.voltage[3] / 1000, dataOut.voltage[3] % 1000,
				dataOut.voltage[4] / 1000, dataOut.voltage[4] % 1000,
				dataOut.voltage[5] / 1000, dataOut.voltage[5] % 1000,
				dataOut.voltage[6] / 1000, dataOut.voltage[6] % 1000,
				dataOut.voltage[7] / 1000, dataOut.voltage[7] % 1000);
 3b4:	0f 2e       	mov	r0, r31
 3b6:	f8 ee       	ldi	r31, 0xE8	; 232
 3b8:	4f 2e       	mov	r4, r31
 3ba:	f3 e0       	ldi	r31, 0x03	; 3
 3bc:	5f 2e       	mov	r5, r31
 3be:	f0 2d       	mov	r31, r0
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	63 96       	adiw	r28, 0x13	; 19
 3c6:	9f af       	std	Y+63, r25	; 0x3f
 3c8:	8e af       	std	Y+62, r24	; 0x3e
 3ca:	63 97       	sbiw	r28, 0x13	; 19
 3cc:	23 c0       	rjmp	.+70     	; 0x414 <main+0xb4>
    while(1)	
	{
		#define NUMBER_CHANNELS 8
		for(int i = 0; i < NUMBER_CHANNELS; i++)
		{
			Analog::selectChannel(i);
 3ce:	80 2f       	mov	r24, r16
 3d0:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN6Analog13selectChannelEh>
			Analog::startConversion();
 3d4:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Analog15startConversionEv>
			while(!Analog::newValueAvailable()) 
 3d8:	0e 94 94 00 	call	0x128	; 0x128 <_ZN6Analog17newValueAvailableEv>
 3dc:	88 23       	and	r24, r24
 3de:	e1 f3       	breq	.-8      	; 0x3d8 <main+0x78>
			{ 
				/*do nothing*/
			}
			ATOMIC(dataOut.voltage[i] = (uint16_t)Analog::getValue() * 4.882813);
 3e0:	f8 94       	cli
 3e2:	0e 94 97 00 	call	0x12e	; 0x12e <_ZN6Analog8getValueEv>
 3e6:	bc 01       	movw	r22, r24
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 1b 04 	call	0x836	; 0x836 <__floatunsisf>
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	30 e4       	ldi	r19, 0x40	; 64
 3f4:	4c e9       	ldi	r20, 0x9C	; 156
 3f6:	50 e4       	ldi	r21, 0x40	; 64
 3f8:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 3fc:	0e 94 ef 03 	call	0x7de	; 0x7de <__fixunssfsi>
 400:	f8 01       	movw	r30, r16
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	e6 5a       	subi	r30, 0xA6	; 166
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	71 83       	std	Z+1, r23	; 0x01
 40c:	60 83       	st	Z, r22
 40e:	78 94       	sei
	DDRC = 0x00;
	
    while(1)	
	{
		#define NUMBER_CHANNELS 8
		for(int i = 0; i < NUMBER_CHANNELS; i++)
 410:	0f 5f       	subi	r16, 0xFF	; 255
 412:	1f 4f       	sbci	r17, 0xFF	; 255
 414:	08 30       	cpi	r16, 0x08	; 8
 416:	11 05       	cpc	r17, r1
 418:	d4 f2       	brlt	.-76     	; 0x3ce <main+0x6e>
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
				dataOut.voltage[3] / 1000, dataOut.voltage[3] % 1000,
				dataOut.voltage[4] / 1000, dataOut.voltage[4] % 1000,
				dataOut.voltage[5] / 1000, dataOut.voltage[5] % 1000,
				dataOut.voltage[6] / 1000, dataOut.voltage[6] % 1000,
				dataOut.voltage[7] / 1000, dataOut.voltage[7] % 1000);
 41a:	a8 e6       	ldi	r26, 0x68	; 104
 41c:	b1 e0       	ldi	r27, 0x01	; 1
 41e:	ad 90       	ld	r10, X+
 420:	bc 90       	ld	r11, X
 422:	11 97       	sbiw	r26, 0x01	; 1
 424:	2d 90       	ld	r2, X+
 426:	3c 90       	ld	r3, X
				dataOut.voltage[1] / 1000, dataOut.voltage[1] % 1000,
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
				dataOut.voltage[3] / 1000, dataOut.voltage[3] % 1000,
				dataOut.voltage[4] / 1000, dataOut.voltage[4] % 1000,
				dataOut.voltage[5] / 1000, dataOut.voltage[5] % 1000,
				dataOut.voltage[6] / 1000, dataOut.voltage[6] % 1000,
 428:	e6 e6       	ldi	r30, 0x66	; 102
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	c0 80       	ld	r12, Z
 42e:	d1 80       	ldd	r13, Z+1	; 0x01
 430:	01 90       	ld	r0, Z+
 432:	f0 81       	ld	r31, Z
 434:	e0 2d       	mov	r30, r0
 436:	65 96       	adiw	r28, 0x15	; 21
 438:	ff af       	std	Y+63, r31	; 0x3f
 43a:	ee af       	std	Y+62, r30	; 0x3e
 43c:	65 97       	sbiw	r28, 0x15	; 21
				dataOut.voltage[0] / 1000, dataOut.voltage[0] % 1000,
				dataOut.voltage[1] / 1000, dataOut.voltage[1] % 1000,
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
				dataOut.voltage[3] / 1000, dataOut.voltage[3] % 1000,
				dataOut.voltage[4] / 1000, dataOut.voltage[4] % 1000,
				dataOut.voltage[5] / 1000, dataOut.voltage[5] % 1000,
 43e:	a4 e6       	ldi	r26, 0x64	; 100
 440:	b1 e0       	ldi	r27, 0x01	; 1
 442:	ed 90       	ld	r14, X+
 444:	fc 90       	ld	r15, X
 446:	11 97       	sbiw	r26, 0x01	; 1
 448:	ed 91       	ld	r30, X+
 44a:	fc 91       	ld	r31, X
 44c:	67 96       	adiw	r28, 0x17	; 23
 44e:	ff af       	std	Y+63, r31	; 0x3f
 450:	ee af       	std	Y+62, r30	; 0x3e
 452:	67 97       	sbiw	r28, 0x17	; 23
		sprintf(message, "%1d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d\n",
				dataOut.voltage[0] / 1000, dataOut.voltage[0] % 1000,
				dataOut.voltage[1] / 1000, dataOut.voltage[1] % 1000,
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
				dataOut.voltage[3] / 1000, dataOut.voltage[3] % 1000,
				dataOut.voltage[4] / 1000, dataOut.voltage[4] % 1000,
 454:	a2 e6       	ldi	r26, 0x62	; 98
 456:	b1 e0       	ldi	r27, 0x01	; 1
 458:	0d 91       	ld	r16, X+
 45a:	1c 91       	ld	r17, X
 45c:	11 97       	sbiw	r26, 0x01	; 1
 45e:	ed 91       	ld	r30, X+
 460:	fc 91       	ld	r31, X
 462:	69 96       	adiw	r28, 0x19	; 25
 464:	ff af       	std	Y+63, r31	; 0x3f
 466:	ee af       	std	Y+62, r30	; 0x3e
 468:	69 97       	sbiw	r28, 0x19	; 25
		char message[80];
		sprintf(message, "%1d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d\n",
				dataOut.voltage[0] / 1000, dataOut.voltage[0] % 1000,
				dataOut.voltage[1] / 1000, dataOut.voltage[1] % 1000,
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
				dataOut.voltage[3] / 1000, dataOut.voltage[3] % 1000,
 46a:	a0 e6       	ldi	r26, 0x60	; 96
 46c:	b1 e0       	ldi	r27, 0x01	; 1
 46e:	ed 91       	ld	r30, X+
 470:	fc 91       	ld	r31, X
 472:	11 97       	sbiw	r26, 0x01	; 1
 474:	8d 91       	ld	r24, X+
 476:	9c 91       	ld	r25, X
 478:	6b 96       	adiw	r28, 0x1b	; 27
 47a:	9f af       	std	Y+63, r25	; 0x3f
 47c:	8e af       	std	Y+62, r24	; 0x3e
 47e:	6b 97       	sbiw	r28, 0x1b	; 27
		
		char message[80];
		sprintf(message, "%1d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d\n",
				dataOut.voltage[0] / 1000, dataOut.voltage[0] % 1000,
				dataOut.voltage[1] / 1000, dataOut.voltage[1] % 1000,
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
 480:	ae e5       	ldi	r26, 0x5E	; 94
 482:	b1 e0       	ldi	r27, 0x01	; 1
 484:	4d 91       	ld	r20, X+
 486:	5c 91       	ld	r21, X
 488:	11 97       	sbiw	r26, 0x01	; 1
 48a:	8d 91       	ld	r24, X+
 48c:	9c 91       	ld	r25, X
 48e:	6d 96       	adiw	r28, 0x1d	; 29
 490:	9f af       	std	Y+63, r25	; 0x3f
 492:	8e af       	std	Y+62, r24	; 0x3e
 494:	6d 97       	sbiw	r28, 0x1d	; 29
		}
		
		char message[80];
		sprintf(message, "%1d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d\n",
				dataOut.voltage[0] / 1000, dataOut.voltage[0] % 1000,
				dataOut.voltage[1] / 1000, dataOut.voltage[1] % 1000,
 496:	ac e5       	ldi	r26, 0x5C	; 92
 498:	b1 e0       	ldi	r27, 0x01	; 1
 49a:	8d 90       	ld	r8, X+
 49c:	9c 90       	ld	r9, X
 49e:	11 97       	sbiw	r26, 0x01	; 1
 4a0:	8d 91       	ld	r24, X+
 4a2:	9c 91       	ld	r25, X
 4a4:	6f 96       	adiw	r28, 0x1f	; 31
 4a6:	9f af       	std	Y+63, r25	; 0x3f
 4a8:	8e af       	std	Y+62, r24	; 0x3e
 4aa:	6f 97       	sbiw	r28, 0x1f	; 31
			ATOMIC(dataOut.voltage[i] = (uint16_t)Analog::getValue() * 4.882813);
		}
		
		char message[80];
		sprintf(message, "%1d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d%2d.%03d\n",
				dataOut.voltage[0] / 1000, dataOut.voltage[0] % 1000,
 4ac:	aa e5       	ldi	r26, 0x5A	; 90
 4ae:	b1 e0       	ldi	r27, 0x01	; 1
 4b0:	6d 90       	ld	r6, X+
 4b2:	7c 90       	ld	r7, X
 4b4:	11 97       	sbiw	r26, 0x01	; 1
 4b6:	8d 91       	ld	r24, X+
 4b8:	9c 91       	ld	r25, X
 4ba:	a1 96       	adiw	r28, 0x21	; 33
 4bc:	9f af       	std	Y+63, r25	; 0x3f
 4be:	8e af       	std	Y+62, r24	; 0x3e
 4c0:	a1 97       	sbiw	r28, 0x21	; 33
				dataOut.voltage[2] / 1000, dataOut.voltage[2] % 1000,
				dataOut.voltage[3] / 1000, dataOut.voltage[3] % 1000,
				dataOut.voltage[4] / 1000, dataOut.voltage[4] % 1000,
				dataOut.voltage[5] / 1000, dataOut.voltage[5] % 1000,
				dataOut.voltage[6] / 1000, dataOut.voltage[6] % 1000,
				dataOut.voltage[7] / 1000, dataOut.voltage[7] % 1000);
 4c2:	95 01       	movw	r18, r10
 4c4:	36 95       	lsr	r19
 4c6:	27 95       	ror	r18
 4c8:	36 95       	lsr	r19
 4ca:	27 95       	ror	r18
 4cc:	36 95       	lsr	r19
 4ce:	27 95       	ror	r18
 4d0:	a5 ec       	ldi	r26, 0xC5	; 197
 4d2:	b0 e2       	ldi	r27, 0x20	; 32
 4d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 4d8:	92 95       	swap	r25
 4da:	82 95       	swap	r24
 4dc:	8f 70       	andi	r24, 0x0F	; 15
 4de:	89 27       	eor	r24, r25
 4e0:	9f 70       	andi	r25, 0x0F	; 15
 4e2:	89 27       	eor	r24, r25
 4e4:	84 9d       	mul	r24, r4
 4e6:	90 01       	movw	r18, r0
 4e8:	85 9d       	mul	r24, r5
 4ea:	30 0d       	add	r19, r0
 4ec:	94 9d       	mul	r25, r4
 4ee:	30 0d       	add	r19, r0
 4f0:	11 24       	eor	r1, r1
 4f2:	a2 1a       	sub	r10, r18
 4f4:	b3 0a       	sbc	r11, r19
 4f6:	bf 92       	push	r11
 4f8:	af 92       	push	r10
 4fa:	91 01       	movw	r18, r2
 4fc:	36 95       	lsr	r19
 4fe:	27 95       	ror	r18
 500:	36 95       	lsr	r19
 502:	27 95       	ror	r18
 504:	36 95       	lsr	r19
 506:	27 95       	ror	r18
 508:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 50c:	92 95       	swap	r25
 50e:	82 95       	swap	r24
 510:	8f 70       	andi	r24, 0x0F	; 15
 512:	89 27       	eor	r24, r25
 514:	9f 70       	andi	r25, 0x0F	; 15
 516:	89 27       	eor	r24, r25
 518:	9f 93       	push	r25
 51a:	8f 93       	push	r24
 51c:	96 01       	movw	r18, r12
 51e:	36 95       	lsr	r19
 520:	27 95       	ror	r18
 522:	36 95       	lsr	r19
 524:	27 95       	ror	r18
 526:	36 95       	lsr	r19
 528:	27 95       	ror	r18
 52a:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 52e:	92 95       	swap	r25
 530:	82 95       	swap	r24
 532:	8f 70       	andi	r24, 0x0F	; 15
 534:	89 27       	eor	r24, r25
 536:	9f 70       	andi	r25, 0x0F	; 15
 538:	89 27       	eor	r24, r25
 53a:	84 9d       	mul	r24, r4
 53c:	90 01       	movw	r18, r0
 53e:	85 9d       	mul	r24, r5
 540:	30 0d       	add	r19, r0
 542:	94 9d       	mul	r25, r4
 544:	30 0d       	add	r19, r0
 546:	11 24       	eor	r1, r1
 548:	c2 1a       	sub	r12, r18
 54a:	d3 0a       	sbc	r13, r19
 54c:	df 92       	push	r13
 54e:	cf 92       	push	r12
 550:	65 96       	adiw	r28, 0x15	; 21
 552:	2e ad       	ldd	r18, Y+62	; 0x3e
 554:	3f ad       	ldd	r19, Y+63	; 0x3f
 556:	65 97       	sbiw	r28, 0x15	; 21
 558:	36 95       	lsr	r19
 55a:	27 95       	ror	r18
 55c:	36 95       	lsr	r19
 55e:	27 95       	ror	r18
 560:	36 95       	lsr	r19
 562:	27 95       	ror	r18
 564:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 568:	92 95       	swap	r25
 56a:	82 95       	swap	r24
 56c:	8f 70       	andi	r24, 0x0F	; 15
 56e:	89 27       	eor	r24, r25
 570:	9f 70       	andi	r25, 0x0F	; 15
 572:	89 27       	eor	r24, r25
 574:	9f 93       	push	r25
 576:	8f 93       	push	r24
 578:	97 01       	movw	r18, r14
 57a:	36 95       	lsr	r19
 57c:	27 95       	ror	r18
 57e:	36 95       	lsr	r19
 580:	27 95       	ror	r18
 582:	36 95       	lsr	r19
 584:	27 95       	ror	r18
 586:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 58a:	92 95       	swap	r25
 58c:	82 95       	swap	r24
 58e:	8f 70       	andi	r24, 0x0F	; 15
 590:	89 27       	eor	r24, r25
 592:	9f 70       	andi	r25, 0x0F	; 15
 594:	89 27       	eor	r24, r25
 596:	84 9d       	mul	r24, r4
 598:	90 01       	movw	r18, r0
 59a:	85 9d       	mul	r24, r5
 59c:	30 0d       	add	r19, r0
 59e:	94 9d       	mul	r25, r4
 5a0:	30 0d       	add	r19, r0
 5a2:	11 24       	eor	r1, r1
 5a4:	e2 1a       	sub	r14, r18
 5a6:	f3 0a       	sbc	r15, r19
 5a8:	ff 92       	push	r15
 5aa:	ef 92       	push	r14
 5ac:	67 96       	adiw	r28, 0x17	; 23
 5ae:	2e ad       	ldd	r18, Y+62	; 0x3e
 5b0:	3f ad       	ldd	r19, Y+63	; 0x3f
 5b2:	67 97       	sbiw	r28, 0x17	; 23
 5b4:	36 95       	lsr	r19
 5b6:	27 95       	ror	r18
 5b8:	36 95       	lsr	r19
 5ba:	27 95       	ror	r18
 5bc:	36 95       	lsr	r19
 5be:	27 95       	ror	r18
 5c0:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 5c4:	92 95       	swap	r25
 5c6:	82 95       	swap	r24
 5c8:	8f 70       	andi	r24, 0x0F	; 15
 5ca:	89 27       	eor	r24, r25
 5cc:	9f 70       	andi	r25, 0x0F	; 15
 5ce:	89 27       	eor	r24, r25
 5d0:	9f 93       	push	r25
 5d2:	8f 93       	push	r24
 5d4:	98 01       	movw	r18, r16
 5d6:	36 95       	lsr	r19
 5d8:	27 95       	ror	r18
 5da:	36 95       	lsr	r19
 5dc:	27 95       	ror	r18
 5de:	36 95       	lsr	r19
 5e0:	27 95       	ror	r18
 5e2:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 5e6:	92 95       	swap	r25
 5e8:	82 95       	swap	r24
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	89 27       	eor	r24, r25
 5ee:	9f 70       	andi	r25, 0x0F	; 15
 5f0:	89 27       	eor	r24, r25
 5f2:	84 9d       	mul	r24, r4
 5f4:	90 01       	movw	r18, r0
 5f6:	85 9d       	mul	r24, r5
 5f8:	30 0d       	add	r19, r0
 5fa:	94 9d       	mul	r25, r4
 5fc:	30 0d       	add	r19, r0
 5fe:	11 24       	eor	r1, r1
 600:	02 1b       	sub	r16, r18
 602:	13 0b       	sbc	r17, r19
 604:	1f 93       	push	r17
 606:	0f 93       	push	r16
 608:	69 96       	adiw	r28, 0x19	; 25
 60a:	2e ad       	ldd	r18, Y+62	; 0x3e
 60c:	3f ad       	ldd	r19, Y+63	; 0x3f
 60e:	69 97       	sbiw	r28, 0x19	; 25
 610:	36 95       	lsr	r19
 612:	27 95       	ror	r18
 614:	36 95       	lsr	r19
 616:	27 95       	ror	r18
 618:	36 95       	lsr	r19
 61a:	27 95       	ror	r18
 61c:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 620:	92 95       	swap	r25
 622:	82 95       	swap	r24
 624:	8f 70       	andi	r24, 0x0F	; 15
 626:	89 27       	eor	r24, r25
 628:	9f 70       	andi	r25, 0x0F	; 15
 62a:	89 27       	eor	r24, r25
 62c:	9f 93       	push	r25
 62e:	8f 93       	push	r24
 630:	9f 01       	movw	r18, r30
 632:	36 95       	lsr	r19
 634:	27 95       	ror	r18
 636:	36 95       	lsr	r19
 638:	27 95       	ror	r18
 63a:	36 95       	lsr	r19
 63c:	27 95       	ror	r18
 63e:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 642:	92 95       	swap	r25
 644:	82 95       	swap	r24
 646:	8f 70       	andi	r24, 0x0F	; 15
 648:	89 27       	eor	r24, r25
 64a:	9f 70       	andi	r25, 0x0F	; 15
 64c:	89 27       	eor	r24, r25
 64e:	84 9d       	mul	r24, r4
 650:	90 01       	movw	r18, r0
 652:	85 9d       	mul	r24, r5
 654:	30 0d       	add	r19, r0
 656:	94 9d       	mul	r25, r4
 658:	30 0d       	add	r19, r0
 65a:	11 24       	eor	r1, r1
 65c:	e2 1b       	sub	r30, r18
 65e:	f3 0b       	sbc	r31, r19
 660:	ff 93       	push	r31
 662:	ef 93       	push	r30
 664:	6b 96       	adiw	r28, 0x1b	; 27
 666:	2e ad       	ldd	r18, Y+62	; 0x3e
 668:	3f ad       	ldd	r19, Y+63	; 0x3f
 66a:	6b 97       	sbiw	r28, 0x1b	; 27
 66c:	36 95       	lsr	r19
 66e:	27 95       	ror	r18
 670:	36 95       	lsr	r19
 672:	27 95       	ror	r18
 674:	36 95       	lsr	r19
 676:	27 95       	ror	r18
 678:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 67c:	92 95       	swap	r25
 67e:	82 95       	swap	r24
 680:	8f 70       	andi	r24, 0x0F	; 15
 682:	89 27       	eor	r24, r25
 684:	9f 70       	andi	r25, 0x0F	; 15
 686:	89 27       	eor	r24, r25
 688:	9f 93       	push	r25
 68a:	8f 93       	push	r24
 68c:	9a 01       	movw	r18, r20
 68e:	36 95       	lsr	r19
 690:	27 95       	ror	r18
 692:	36 95       	lsr	r19
 694:	27 95       	ror	r18
 696:	36 95       	lsr	r19
 698:	27 95       	ror	r18
 69a:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 69e:	92 95       	swap	r25
 6a0:	82 95       	swap	r24
 6a2:	8f 70       	andi	r24, 0x0F	; 15
 6a4:	89 27       	eor	r24, r25
 6a6:	9f 70       	andi	r25, 0x0F	; 15
 6a8:	89 27       	eor	r24, r25
 6aa:	84 9d       	mul	r24, r4
 6ac:	90 01       	movw	r18, r0
 6ae:	85 9d       	mul	r24, r5
 6b0:	30 0d       	add	r19, r0
 6b2:	94 9d       	mul	r25, r4
 6b4:	30 0d       	add	r19, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	42 1b       	sub	r20, r18
 6ba:	53 0b       	sbc	r21, r19
 6bc:	5f 93       	push	r21
 6be:	4f 93       	push	r20
 6c0:	6d 96       	adiw	r28, 0x1d	; 29
 6c2:	2e ad       	ldd	r18, Y+62	; 0x3e
 6c4:	3f ad       	ldd	r19, Y+63	; 0x3f
 6c6:	6d 97       	sbiw	r28, 0x1d	; 29
 6c8:	36 95       	lsr	r19
 6ca:	27 95       	ror	r18
 6cc:	36 95       	lsr	r19
 6ce:	27 95       	ror	r18
 6d0:	36 95       	lsr	r19
 6d2:	27 95       	ror	r18
 6d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 6d8:	92 95       	swap	r25
 6da:	82 95       	swap	r24
 6dc:	8f 70       	andi	r24, 0x0F	; 15
 6de:	89 27       	eor	r24, r25
 6e0:	9f 70       	andi	r25, 0x0F	; 15
 6e2:	89 27       	eor	r24, r25
 6e4:	9f 93       	push	r25
 6e6:	8f 93       	push	r24
 6e8:	94 01       	movw	r18, r8
 6ea:	36 95       	lsr	r19
 6ec:	27 95       	ror	r18
 6ee:	36 95       	lsr	r19
 6f0:	27 95       	ror	r18
 6f2:	36 95       	lsr	r19
 6f4:	27 95       	ror	r18
 6f6:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 6fa:	92 95       	swap	r25
 6fc:	82 95       	swap	r24
 6fe:	8f 70       	andi	r24, 0x0F	; 15
 700:	89 27       	eor	r24, r25
 702:	9f 70       	andi	r25, 0x0F	; 15
 704:	89 27       	eor	r24, r25
 706:	84 9d       	mul	r24, r4
 708:	90 01       	movw	r18, r0
 70a:	85 9d       	mul	r24, r5
 70c:	30 0d       	add	r19, r0
 70e:	94 9d       	mul	r25, r4
 710:	30 0d       	add	r19, r0
 712:	11 24       	eor	r1, r1
 714:	82 1a       	sub	r8, r18
 716:	93 0a       	sbc	r9, r19
 718:	9f 92       	push	r9
 71a:	8f 92       	push	r8
 71c:	6f 96       	adiw	r28, 0x1f	; 31
 71e:	2e ad       	ldd	r18, Y+62	; 0x3e
 720:	3f ad       	ldd	r19, Y+63	; 0x3f
 722:	6f 97       	sbiw	r28, 0x1f	; 31
 724:	36 95       	lsr	r19
 726:	27 95       	ror	r18
 728:	36 95       	lsr	r19
 72a:	27 95       	ror	r18
 72c:	36 95       	lsr	r19
 72e:	27 95       	ror	r18
 730:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 734:	92 95       	swap	r25
 736:	82 95       	swap	r24
 738:	8f 70       	andi	r24, 0x0F	; 15
 73a:	89 27       	eor	r24, r25
 73c:	9f 70       	andi	r25, 0x0F	; 15
 73e:	89 27       	eor	r24, r25
 740:	9f 93       	push	r25
 742:	8f 93       	push	r24
 744:	93 01       	movw	r18, r6
 746:	36 95       	lsr	r19
 748:	27 95       	ror	r18
 74a:	36 95       	lsr	r19
 74c:	27 95       	ror	r18
 74e:	36 95       	lsr	r19
 750:	27 95       	ror	r18
 752:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 756:	92 95       	swap	r25
 758:	82 95       	swap	r24
 75a:	8f 70       	andi	r24, 0x0F	; 15
 75c:	89 27       	eor	r24, r25
 75e:	9f 70       	andi	r25, 0x0F	; 15
 760:	89 27       	eor	r24, r25
 762:	84 9d       	mul	r24, r4
 764:	90 01       	movw	r18, r0
 766:	85 9d       	mul	r24, r5
 768:	30 0d       	add	r19, r0
 76a:	94 9d       	mul	r25, r4
 76c:	30 0d       	add	r19, r0
 76e:	11 24       	eor	r1, r1
 770:	62 1a       	sub	r6, r18
 772:	73 0a       	sbc	r7, r19
 774:	7f 92       	push	r7
 776:	6f 92       	push	r6
 778:	a1 96       	adiw	r28, 0x21	; 33
 77a:	2e ad       	ldd	r18, Y+62	; 0x3e
 77c:	3f ad       	ldd	r19, Y+63	; 0x3f
 77e:	a1 97       	sbiw	r28, 0x21	; 33
 780:	36 95       	lsr	r19
 782:	27 95       	ror	r18
 784:	36 95       	lsr	r19
 786:	27 95       	ror	r18
 788:	36 95       	lsr	r19
 78a:	27 95       	ror	r18
 78c:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 790:	92 95       	swap	r25
 792:	82 95       	swap	r24
 794:	8f 70       	andi	r24, 0x0F	; 15
 796:	89 27       	eor	r24, r25
 798:	9f 70       	andi	r25, 0x0F	; 15
 79a:	89 27       	eor	r24, r25
 79c:	9f 93       	push	r25
 79e:	8f 93       	push	r24
 7a0:	a0 e0       	ldi	r26, 0x00	; 0
 7a2:	b1 e0       	ldi	r27, 0x01	; 1
 7a4:	bf 93       	push	r27
 7a6:	af 93       	push	r26
 7a8:	63 96       	adiw	r28, 0x13	; 19
 7aa:	ff ad       	ldd	r31, Y+63	; 0x3f
 7ac:	63 97       	sbiw	r28, 0x13	; 19
 7ae:	ff 93       	push	r31
 7b0:	62 96       	adiw	r28, 0x12	; 18
 7b2:	2f ad       	ldd	r18, Y+63	; 0x3f
 7b4:	62 97       	sbiw	r28, 0x12	; 18
 7b6:	2f 93       	push	r18
 7b8:	0e 94 1b 05 	call	0xa36	; 0xa36 <sprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	91 ee       	ldi	r25, 0xE1	; 225
 7c0:	a4 e0       	ldi	r26, 0x04	; 4
 7c2:	81 50       	subi	r24, 0x01	; 1
 7c4:	90 40       	sbci	r25, 0x00	; 0
 7c6:	a0 40       	sbci	r26, 0x00	; 0
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <main+0x462>
 7ca:	00 c0       	rjmp	.+0      	; 0x7cc <main+0x46c>
 7cc:	00 00       	nop
		//S3P::transmit(&message, strlen(message));
		_delay_ms(100);
	}
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x00;
	
    while(1)	
	{
		#define NUMBER_CHANNELS 8
		for(int i = 0; i < NUMBER_CHANNELS; i++)
 7d8:	00 e0       	ldi	r16, 0x00	; 0
 7da:	10 e0       	ldi	r17, 0x00	; 0
				dataOut.voltage[5] / 1000, dataOut.voltage[5] % 1000,
				dataOut.voltage[6] / 1000, dataOut.voltage[6] % 1000,
				dataOut.voltage[7] / 1000, dataOut.voltage[7] % 1000);
		//S3P::transmit(&message, strlen(message));
		_delay_ms(100);
	}
 7dc:	1b ce       	rjmp	.-970    	; 0x414 <main+0xb4>

000007de <__fixunssfsi>:
 7de:	70 d0       	rcall	.+224    	; 0x8c0 <__fp_splitA>
 7e0:	88 f0       	brcs	.+34     	; 0x804 <__fixunssfsi+0x26>
 7e2:	9f 57       	subi	r25, 0x7F	; 127
 7e4:	90 f0       	brcs	.+36     	; 0x80a <__fixunssfsi+0x2c>
 7e6:	b9 2f       	mov	r27, r25
 7e8:	99 27       	eor	r25, r25
 7ea:	b7 51       	subi	r27, 0x17	; 23
 7ec:	a0 f0       	brcs	.+40     	; 0x816 <__fixunssfsi+0x38>
 7ee:	d1 f0       	breq	.+52     	; 0x824 <__fixunssfsi+0x46>
 7f0:	66 0f       	add	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	88 1f       	adc	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	1a f0       	brmi	.+6      	; 0x800 <__fixunssfsi+0x22>
 7fa:	ba 95       	dec	r27
 7fc:	c9 f7       	brne	.-14     	; 0x7f0 <__fixunssfsi+0x12>
 7fe:	12 c0       	rjmp	.+36     	; 0x824 <__fixunssfsi+0x46>
 800:	b1 30       	cpi	r27, 0x01	; 1
 802:	81 f0       	breq	.+32     	; 0x824 <__fixunssfsi+0x46>
 804:	77 d0       	rcall	.+238    	; 0x8f4 <__fp_zero>
 806:	b1 e0       	ldi	r27, 0x01	; 1
 808:	08 95       	ret
 80a:	74 c0       	rjmp	.+232    	; 0x8f4 <__fp_zero>
 80c:	67 2f       	mov	r22, r23
 80e:	78 2f       	mov	r23, r24
 810:	88 27       	eor	r24, r24
 812:	b8 5f       	subi	r27, 0xF8	; 248
 814:	39 f0       	breq	.+14     	; 0x824 <__fixunssfsi+0x46>
 816:	b9 3f       	cpi	r27, 0xF9	; 249
 818:	cc f3       	brlt	.-14     	; 0x80c <__fixunssfsi+0x2e>
 81a:	86 95       	lsr	r24
 81c:	77 95       	ror	r23
 81e:	67 95       	ror	r22
 820:	b3 95       	inc	r27
 822:	d9 f7       	brne	.-10     	; 0x81a <__fixunssfsi+0x3c>
 824:	3e f4       	brtc	.+14     	; 0x834 <__fixunssfsi+0x56>
 826:	90 95       	com	r25
 828:	80 95       	com	r24
 82a:	70 95       	com	r23
 82c:	61 95       	neg	r22
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	08 95       	ret

00000836 <__floatunsisf>:
 836:	e8 94       	clt
 838:	09 c0       	rjmp	.+18     	; 0x84c <__floatsisf+0x12>

0000083a <__floatsisf>:
 83a:	97 fb       	bst	r25, 7
 83c:	3e f4       	brtc	.+14     	; 0x84c <__floatsisf+0x12>
 83e:	90 95       	com	r25
 840:	80 95       	com	r24
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	99 23       	and	r25, r25
 84e:	a9 f0       	breq	.+42     	; 0x87a <__floatsisf+0x40>
 850:	f9 2f       	mov	r31, r25
 852:	96 e9       	ldi	r25, 0x96	; 150
 854:	bb 27       	eor	r27, r27
 856:	93 95       	inc	r25
 858:	f6 95       	lsr	r31
 85a:	87 95       	ror	r24
 85c:	77 95       	ror	r23
 85e:	67 95       	ror	r22
 860:	b7 95       	ror	r27
 862:	f1 11       	cpse	r31, r1
 864:	f8 cf       	rjmp	.-16     	; 0x856 <__floatsisf+0x1c>
 866:	fa f4       	brpl	.+62     	; 0x8a6 <__floatsisf+0x6c>
 868:	bb 0f       	add	r27, r27
 86a:	11 f4       	brne	.+4      	; 0x870 <__floatsisf+0x36>
 86c:	60 ff       	sbrs	r22, 0
 86e:	1b c0       	rjmp	.+54     	; 0x8a6 <__floatsisf+0x6c>
 870:	6f 5f       	subi	r22, 0xFF	; 255
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <__floatsisf+0x6c>
 87a:	88 23       	and	r24, r24
 87c:	11 f0       	breq	.+4      	; 0x882 <__floatsisf+0x48>
 87e:	96 e9       	ldi	r25, 0x96	; 150
 880:	11 c0       	rjmp	.+34     	; 0x8a4 <__floatsisf+0x6a>
 882:	77 23       	and	r23, r23
 884:	21 f0       	breq	.+8      	; 0x88e <__floatsisf+0x54>
 886:	9e e8       	ldi	r25, 0x8E	; 142
 888:	87 2f       	mov	r24, r23
 88a:	76 2f       	mov	r23, r22
 88c:	05 c0       	rjmp	.+10     	; 0x898 <__floatsisf+0x5e>
 88e:	66 23       	and	r22, r22
 890:	71 f0       	breq	.+28     	; 0x8ae <__floatsisf+0x74>
 892:	96 e8       	ldi	r25, 0x86	; 134
 894:	86 2f       	mov	r24, r22
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	2a f0       	brmi	.+10     	; 0x8a6 <__floatsisf+0x6c>
 89c:	9a 95       	dec	r25
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	da f7       	brpl	.-10     	; 0x89c <__floatsisf+0x62>
 8a6:	88 0f       	add	r24, r24
 8a8:	96 95       	lsr	r25
 8aa:	87 95       	ror	r24
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <__fp_split3>:
 8b0:	57 fd       	sbrc	r21, 7
 8b2:	90 58       	subi	r25, 0x80	; 128
 8b4:	44 0f       	add	r20, r20
 8b6:	55 1f       	adc	r21, r21
 8b8:	59 f0       	breq	.+22     	; 0x8d0 <__fp_splitA+0x10>
 8ba:	5f 3f       	cpi	r21, 0xFF	; 255
 8bc:	71 f0       	breq	.+28     	; 0x8da <__fp_splitA+0x1a>
 8be:	47 95       	ror	r20

000008c0 <__fp_splitA>:
 8c0:	88 0f       	add	r24, r24
 8c2:	97 fb       	bst	r25, 7
 8c4:	99 1f       	adc	r25, r25
 8c6:	61 f0       	breq	.+24     	; 0x8e0 <__fp_splitA+0x20>
 8c8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ca:	79 f0       	breq	.+30     	; 0x8ea <__fp_splitA+0x2a>
 8cc:	87 95       	ror	r24
 8ce:	08 95       	ret
 8d0:	12 16       	cp	r1, r18
 8d2:	13 06       	cpc	r1, r19
 8d4:	14 06       	cpc	r1, r20
 8d6:	55 1f       	adc	r21, r21
 8d8:	f2 cf       	rjmp	.-28     	; 0x8be <__fp_split3+0xe>
 8da:	46 95       	lsr	r20
 8dc:	f1 df       	rcall	.-30     	; 0x8c0 <__fp_splitA>
 8de:	08 c0       	rjmp	.+16     	; 0x8f0 <__fp_splitA+0x30>
 8e0:	16 16       	cp	r1, r22
 8e2:	17 06       	cpc	r1, r23
 8e4:	18 06       	cpc	r1, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	f1 cf       	rjmp	.-30     	; 0x8cc <__fp_splitA+0xc>
 8ea:	86 95       	lsr	r24
 8ec:	71 05       	cpc	r23, r1
 8ee:	61 05       	cpc	r22, r1
 8f0:	08 94       	sec
 8f2:	08 95       	ret

000008f4 <__fp_zero>:
 8f4:	e8 94       	clt

000008f6 <__fp_szero>:
 8f6:	bb 27       	eor	r27, r27
 8f8:	66 27       	eor	r22, r22
 8fa:	77 27       	eor	r23, r23
 8fc:	cb 01       	movw	r24, r22
 8fe:	97 f9       	bld	r25, 7
 900:	08 95       	ret

00000902 <__mulsf3>:
 902:	0b d0       	rcall	.+22     	; 0x91a <__mulsf3x>
 904:	78 c0       	rjmp	.+240    	; 0x9f6 <__fp_round>
 906:	69 d0       	rcall	.+210    	; 0x9da <__fp_pscA>
 908:	28 f0       	brcs	.+10     	; 0x914 <__mulsf3+0x12>
 90a:	6e d0       	rcall	.+220    	; 0x9e8 <__fp_pscB>
 90c:	18 f0       	brcs	.+6      	; 0x914 <__mulsf3+0x12>
 90e:	95 23       	and	r25, r21
 910:	09 f0       	breq	.+2      	; 0x914 <__mulsf3+0x12>
 912:	5a c0       	rjmp	.+180    	; 0x9c8 <__fp_inf>
 914:	5f c0       	rjmp	.+190    	; 0x9d4 <__fp_nan>
 916:	11 24       	eor	r1, r1
 918:	ee cf       	rjmp	.-36     	; 0x8f6 <__fp_szero>

0000091a <__mulsf3x>:
 91a:	ca df       	rcall	.-108    	; 0x8b0 <__fp_split3>
 91c:	a0 f3       	brcs	.-24     	; 0x906 <__mulsf3+0x4>

0000091e <__mulsf3_pse>:
 91e:	95 9f       	mul	r25, r21
 920:	d1 f3       	breq	.-12     	; 0x916 <__mulsf3+0x14>
 922:	95 0f       	add	r25, r21
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	55 1f       	adc	r21, r21
 928:	62 9f       	mul	r22, r18
 92a:	f0 01       	movw	r30, r0
 92c:	72 9f       	mul	r23, r18
 92e:	bb 27       	eor	r27, r27
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	63 9f       	mul	r22, r19
 936:	aa 27       	eor	r26, r26
 938:	f0 0d       	add	r31, r0
 93a:	b1 1d       	adc	r27, r1
 93c:	aa 1f       	adc	r26, r26
 93e:	64 9f       	mul	r22, r20
 940:	66 27       	eor	r22, r22
 942:	b0 0d       	add	r27, r0
 944:	a1 1d       	adc	r26, r1
 946:	66 1f       	adc	r22, r22
 948:	82 9f       	mul	r24, r18
 94a:	22 27       	eor	r18, r18
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	73 9f       	mul	r23, r19
 954:	b0 0d       	add	r27, r0
 956:	a1 1d       	adc	r26, r1
 958:	62 1f       	adc	r22, r18
 95a:	83 9f       	mul	r24, r19
 95c:	a0 0d       	add	r26, r0
 95e:	61 1d       	adc	r22, r1
 960:	22 1f       	adc	r18, r18
 962:	74 9f       	mul	r23, r20
 964:	33 27       	eor	r19, r19
 966:	a0 0d       	add	r26, r0
 968:	61 1d       	adc	r22, r1
 96a:	23 1f       	adc	r18, r19
 96c:	84 9f       	mul	r24, r20
 96e:	60 0d       	add	r22, r0
 970:	21 1d       	adc	r18, r1
 972:	82 2f       	mov	r24, r18
 974:	76 2f       	mov	r23, r22
 976:	6a 2f       	mov	r22, r26
 978:	11 24       	eor	r1, r1
 97a:	9f 57       	subi	r25, 0x7F	; 127
 97c:	50 40       	sbci	r21, 0x00	; 0
 97e:	8a f0       	brmi	.+34     	; 0x9a2 <__mulsf3_pse+0x84>
 980:	e1 f0       	breq	.+56     	; 0x9ba <__mulsf3_pse+0x9c>
 982:	88 23       	and	r24, r24
 984:	4a f0       	brmi	.+18     	; 0x998 <__mulsf3_pse+0x7a>
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	bb 1f       	adc	r27, r27
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	91 50       	subi	r25, 0x01	; 1
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	a9 f7       	brne	.-22     	; 0x982 <__mulsf3_pse+0x64>
 998:	9e 3f       	cpi	r25, 0xFE	; 254
 99a:	51 05       	cpc	r21, r1
 99c:	70 f0       	brcs	.+28     	; 0x9ba <__mulsf3_pse+0x9c>
 99e:	14 c0       	rjmp	.+40     	; 0x9c8 <__fp_inf>
 9a0:	aa cf       	rjmp	.-172    	; 0x8f6 <__fp_szero>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	ec f3       	brlt	.-6      	; 0x9a0 <__mulsf3_pse+0x82>
 9a6:	98 3e       	cpi	r25, 0xE8	; 232
 9a8:	dc f3       	brlt	.-10     	; 0x9a0 <__mulsf3_pse+0x82>
 9aa:	86 95       	lsr	r24
 9ac:	77 95       	ror	r23
 9ae:	67 95       	ror	r22
 9b0:	b7 95       	ror	r27
 9b2:	f7 95       	ror	r31
 9b4:	e7 95       	ror	r30
 9b6:	9f 5f       	subi	r25, 0xFF	; 255
 9b8:	c1 f7       	brne	.-16     	; 0x9aa <__mulsf3_pse+0x8c>
 9ba:	fe 2b       	or	r31, r30
 9bc:	88 0f       	add	r24, r24
 9be:	91 1d       	adc	r25, r1
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
 9c4:	97 f9       	bld	r25, 7
 9c6:	08 95       	ret

000009c8 <__fp_inf>:
 9c8:	97 f9       	bld	r25, 7
 9ca:	9f 67       	ori	r25, 0x7F	; 127
 9cc:	80 e8       	ldi	r24, 0x80	; 128
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	60 e0       	ldi	r22, 0x00	; 0
 9d2:	08 95       	ret

000009d4 <__fp_nan>:
 9d4:	9f ef       	ldi	r25, 0xFF	; 255
 9d6:	80 ec       	ldi	r24, 0xC0	; 192
 9d8:	08 95       	ret

000009da <__fp_pscA>:
 9da:	00 24       	eor	r0, r0
 9dc:	0a 94       	dec	r0
 9de:	16 16       	cp	r1, r22
 9e0:	17 06       	cpc	r1, r23
 9e2:	18 06       	cpc	r1, r24
 9e4:	09 06       	cpc	r0, r25
 9e6:	08 95       	ret

000009e8 <__fp_pscB>:
 9e8:	00 24       	eor	r0, r0
 9ea:	0a 94       	dec	r0
 9ec:	12 16       	cp	r1, r18
 9ee:	13 06       	cpc	r1, r19
 9f0:	14 06       	cpc	r1, r20
 9f2:	05 06       	cpc	r0, r21
 9f4:	08 95       	ret

000009f6 <__fp_round>:
 9f6:	09 2e       	mov	r0, r25
 9f8:	03 94       	inc	r0
 9fa:	00 0c       	add	r0, r0
 9fc:	11 f4       	brne	.+4      	; 0xa02 <__fp_round+0xc>
 9fe:	88 23       	and	r24, r24
 a00:	52 f0       	brmi	.+20     	; 0xa16 <__fp_round+0x20>
 a02:	bb 0f       	add	r27, r27
 a04:	40 f4       	brcc	.+16     	; 0xa16 <__fp_round+0x20>
 a06:	bf 2b       	or	r27, r31
 a08:	11 f4       	brne	.+4      	; 0xa0e <__fp_round+0x18>
 a0a:	60 ff       	sbrs	r22, 0
 a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__fp_round+0x20>
 a0e:	6f 5f       	subi	r22, 0xFF	; 255
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	08 95       	ret

00000a18 <__umulhisi3>:
 a18:	a2 9f       	mul	r26, r18
 a1a:	b0 01       	movw	r22, r0
 a1c:	b3 9f       	mul	r27, r19
 a1e:	c0 01       	movw	r24, r0
 a20:	a3 9f       	mul	r26, r19
 a22:	70 0d       	add	r23, r0
 a24:	81 1d       	adc	r24, r1
 a26:	11 24       	eor	r1, r1
 a28:	91 1d       	adc	r25, r1
 a2a:	b2 9f       	mul	r27, r18
 a2c:	70 0d       	add	r23, r0
 a2e:	81 1d       	adc	r24, r1
 a30:	11 24       	eor	r1, r1
 a32:	91 1d       	adc	r25, r1
 a34:	08 95       	ret

00000a36 <sprintf>:
 a36:	ae e0       	ldi	r26, 0x0E	; 14
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e1 e2       	ldi	r30, 0x21	; 33
 a3c:	f5 e0       	ldi	r31, 0x05	; 5
 a3e:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__prologue_saves__+0x1c>
 a42:	0d 89       	ldd	r16, Y+21	; 0x15
 a44:	1e 89       	ldd	r17, Y+22	; 0x16
 a46:	86 e0       	ldi	r24, 0x06	; 6
 a48:	8c 83       	std	Y+4, r24	; 0x04
 a4a:	1a 83       	std	Y+2, r17	; 0x02
 a4c:	09 83       	std	Y+1, r16	; 0x01
 a4e:	8f ef       	ldi	r24, 0xFF	; 255
 a50:	9f e7       	ldi	r25, 0x7F	; 127
 a52:	9e 83       	std	Y+6, r25	; 0x06
 a54:	8d 83       	std	Y+5, r24	; 0x05
 a56:	ae 01       	movw	r20, r28
 a58:	47 5e       	subi	r20, 0xE7	; 231
 a5a:	5f 4f       	sbci	r21, 0xFF	; 255
 a5c:	6f 89       	ldd	r22, Y+23	; 0x17
 a5e:	78 8d       	ldd	r23, Y+24	; 0x18
 a60:	ce 01       	movw	r24, r28
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vfprintf>
 a68:	ef 81       	ldd	r30, Y+7	; 0x07
 a6a:	f8 85       	ldd	r31, Y+8	; 0x08
 a6c:	e0 0f       	add	r30, r16
 a6e:	f1 1f       	adc	r31, r17
 a70:	10 82       	st	Z, r1
 a72:	2e 96       	adiw	r28, 0x0e	; 14
 a74:	e4 e0       	ldi	r30, 0x04	; 4
 a76:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__epilogue_restores__+0x1c>

00000a7a <vfprintf>:
 a7a:	ac e0       	ldi	r26, 0x0C	; 12
 a7c:	b0 e0       	ldi	r27, 0x00	; 0
 a7e:	e3 e4       	ldi	r30, 0x43	; 67
 a80:	f5 e0       	ldi	r31, 0x05	; 5
 a82:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__prologue_saves__>
 a86:	7c 01       	movw	r14, r24
 a88:	6b 01       	movw	r12, r22
 a8a:	8a 01       	movw	r16, r20
 a8c:	fc 01       	movw	r30, r24
 a8e:	17 82       	std	Z+7, r1	; 0x07
 a90:	16 82       	std	Z+6, r1	; 0x06
 a92:	83 81       	ldd	r24, Z+3	; 0x03
 a94:	81 ff       	sbrs	r24, 1
 a96:	bd c1       	rjmp	.+890    	; 0xe12 <vfprintf+0x398>
 a98:	ce 01       	movw	r24, r28
 a9a:	01 96       	adiw	r24, 0x01	; 1
 a9c:	4c 01       	movw	r8, r24
 a9e:	f7 01       	movw	r30, r14
 aa0:	93 81       	ldd	r25, Z+3	; 0x03
 aa2:	f6 01       	movw	r30, r12
 aa4:	93 fd       	sbrc	r25, 3
 aa6:	85 91       	lpm	r24, Z+
 aa8:	93 ff       	sbrs	r25, 3
 aaa:	81 91       	ld	r24, Z+
 aac:	6f 01       	movw	r12, r30
 aae:	88 23       	and	r24, r24
 ab0:	09 f4       	brne	.+2      	; 0xab4 <vfprintf+0x3a>
 ab2:	ab c1       	rjmp	.+854    	; 0xe0a <vfprintf+0x390>
 ab4:	85 32       	cpi	r24, 0x25	; 37
 ab6:	39 f4       	brne	.+14     	; 0xac6 <vfprintf+0x4c>
 ab8:	93 fd       	sbrc	r25, 3
 aba:	85 91       	lpm	r24, Z+
 abc:	93 ff       	sbrs	r25, 3
 abe:	81 91       	ld	r24, Z+
 ac0:	6f 01       	movw	r12, r30
 ac2:	85 32       	cpi	r24, 0x25	; 37
 ac4:	29 f4       	brne	.+10     	; 0xad0 <vfprintf+0x56>
 ac6:	b7 01       	movw	r22, r14
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 ace:	e7 cf       	rjmp	.-50     	; 0xa9e <vfprintf+0x24>
 ad0:	51 2c       	mov	r5, r1
 ad2:	31 2c       	mov	r3, r1
 ad4:	20 e0       	ldi	r18, 0x00	; 0
 ad6:	20 32       	cpi	r18, 0x20	; 32
 ad8:	a0 f4       	brcc	.+40     	; 0xb02 <vfprintf+0x88>
 ada:	8b 32       	cpi	r24, 0x2B	; 43
 adc:	69 f0       	breq	.+26     	; 0xaf8 <vfprintf+0x7e>
 ade:	30 f4       	brcc	.+12     	; 0xaec <vfprintf+0x72>
 ae0:	80 32       	cpi	r24, 0x20	; 32
 ae2:	59 f0       	breq	.+22     	; 0xafa <vfprintf+0x80>
 ae4:	83 32       	cpi	r24, 0x23	; 35
 ae6:	69 f4       	brne	.+26     	; 0xb02 <vfprintf+0x88>
 ae8:	20 61       	ori	r18, 0x10	; 16
 aea:	2c c0       	rjmp	.+88     	; 0xb44 <vfprintf+0xca>
 aec:	8d 32       	cpi	r24, 0x2D	; 45
 aee:	39 f0       	breq	.+14     	; 0xafe <vfprintf+0x84>
 af0:	80 33       	cpi	r24, 0x30	; 48
 af2:	39 f4       	brne	.+14     	; 0xb02 <vfprintf+0x88>
 af4:	21 60       	ori	r18, 0x01	; 1
 af6:	26 c0       	rjmp	.+76     	; 0xb44 <vfprintf+0xca>
 af8:	22 60       	ori	r18, 0x02	; 2
 afa:	24 60       	ori	r18, 0x04	; 4
 afc:	23 c0       	rjmp	.+70     	; 0xb44 <vfprintf+0xca>
 afe:	28 60       	ori	r18, 0x08	; 8
 b00:	21 c0       	rjmp	.+66     	; 0xb44 <vfprintf+0xca>
 b02:	27 fd       	sbrc	r18, 7
 b04:	27 c0       	rjmp	.+78     	; 0xb54 <vfprintf+0xda>
 b06:	30 ed       	ldi	r19, 0xD0	; 208
 b08:	38 0f       	add	r19, r24
 b0a:	3a 30       	cpi	r19, 0x0A	; 10
 b0c:	78 f4       	brcc	.+30     	; 0xb2c <vfprintf+0xb2>
 b0e:	26 ff       	sbrs	r18, 6
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <vfprintf+0xa4>
 b12:	fa e0       	ldi	r31, 0x0A	; 10
 b14:	5f 9e       	mul	r5, r31
 b16:	30 0d       	add	r19, r0
 b18:	11 24       	eor	r1, r1
 b1a:	53 2e       	mov	r5, r19
 b1c:	13 c0       	rjmp	.+38     	; 0xb44 <vfprintf+0xca>
 b1e:	8a e0       	ldi	r24, 0x0A	; 10
 b20:	38 9e       	mul	r3, r24
 b22:	30 0d       	add	r19, r0
 b24:	11 24       	eor	r1, r1
 b26:	33 2e       	mov	r3, r19
 b28:	20 62       	ori	r18, 0x20	; 32
 b2a:	0c c0       	rjmp	.+24     	; 0xb44 <vfprintf+0xca>
 b2c:	8e 32       	cpi	r24, 0x2E	; 46
 b2e:	21 f4       	brne	.+8      	; 0xb38 <vfprintf+0xbe>
 b30:	26 fd       	sbrc	r18, 6
 b32:	6b c1       	rjmp	.+726    	; 0xe0a <vfprintf+0x390>
 b34:	20 64       	ori	r18, 0x40	; 64
 b36:	06 c0       	rjmp	.+12     	; 0xb44 <vfprintf+0xca>
 b38:	8c 36       	cpi	r24, 0x6C	; 108
 b3a:	11 f4       	brne	.+4      	; 0xb40 <vfprintf+0xc6>
 b3c:	20 68       	ori	r18, 0x80	; 128
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <vfprintf+0xca>
 b40:	88 36       	cpi	r24, 0x68	; 104
 b42:	41 f4       	brne	.+16     	; 0xb54 <vfprintf+0xda>
 b44:	f6 01       	movw	r30, r12
 b46:	93 fd       	sbrc	r25, 3
 b48:	85 91       	lpm	r24, Z+
 b4a:	93 ff       	sbrs	r25, 3
 b4c:	81 91       	ld	r24, Z+
 b4e:	6f 01       	movw	r12, r30
 b50:	81 11       	cpse	r24, r1
 b52:	c1 cf       	rjmp	.-126    	; 0xad6 <vfprintf+0x5c>
 b54:	98 2f       	mov	r25, r24
 b56:	9f 7d       	andi	r25, 0xDF	; 223
 b58:	95 54       	subi	r25, 0x45	; 69
 b5a:	93 30       	cpi	r25, 0x03	; 3
 b5c:	28 f4       	brcc	.+10     	; 0xb68 <vfprintf+0xee>
 b5e:	0c 5f       	subi	r16, 0xFC	; 252
 b60:	1f 4f       	sbci	r17, 0xFF	; 255
 b62:	ff e3       	ldi	r31, 0x3F	; 63
 b64:	f9 83       	std	Y+1, r31	; 0x01
 b66:	0d c0       	rjmp	.+26     	; 0xb82 <vfprintf+0x108>
 b68:	83 36       	cpi	r24, 0x63	; 99
 b6a:	31 f0       	breq	.+12     	; 0xb78 <vfprintf+0xfe>
 b6c:	83 37       	cpi	r24, 0x73	; 115
 b6e:	71 f0       	breq	.+28     	; 0xb8c <vfprintf+0x112>
 b70:	83 35       	cpi	r24, 0x53	; 83
 b72:	09 f0       	breq	.+2      	; 0xb76 <vfprintf+0xfc>
 b74:	5b c0       	rjmp	.+182    	; 0xc2c <vfprintf+0x1b2>
 b76:	22 c0       	rjmp	.+68     	; 0xbbc <vfprintf+0x142>
 b78:	f8 01       	movw	r30, r16
 b7a:	80 81       	ld	r24, Z
 b7c:	89 83       	std	Y+1, r24	; 0x01
 b7e:	0e 5f       	subi	r16, 0xFE	; 254
 b80:	1f 4f       	sbci	r17, 0xFF	; 255
 b82:	44 24       	eor	r4, r4
 b84:	43 94       	inc	r4
 b86:	51 2c       	mov	r5, r1
 b88:	54 01       	movw	r10, r8
 b8a:	15 c0       	rjmp	.+42     	; 0xbb6 <vfprintf+0x13c>
 b8c:	38 01       	movw	r6, r16
 b8e:	f2 e0       	ldi	r31, 0x02	; 2
 b90:	6f 0e       	add	r6, r31
 b92:	71 1c       	adc	r7, r1
 b94:	f8 01       	movw	r30, r16
 b96:	a0 80       	ld	r10, Z
 b98:	b1 80       	ldd	r11, Z+1	; 0x01
 b9a:	26 ff       	sbrs	r18, 6
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <vfprintf+0x12a>
 b9e:	65 2d       	mov	r22, r5
 ba0:	70 e0       	ldi	r23, 0x00	; 0
 ba2:	02 c0       	rjmp	.+4      	; 0xba8 <vfprintf+0x12e>
 ba4:	6f ef       	ldi	r22, 0xFF	; 255
 ba6:	7f ef       	ldi	r23, 0xFF	; 255
 ba8:	c5 01       	movw	r24, r10
 baa:	2c 87       	std	Y+12, r18	; 0x0c
 bac:	0e 94 1a 07 	call	0xe34	; 0xe34 <strnlen>
 bb0:	2c 01       	movw	r4, r24
 bb2:	83 01       	movw	r16, r6
 bb4:	2c 85       	ldd	r18, Y+12	; 0x0c
 bb6:	2f 77       	andi	r18, 0x7F	; 127
 bb8:	22 2e       	mov	r2, r18
 bba:	17 c0       	rjmp	.+46     	; 0xbea <vfprintf+0x170>
 bbc:	38 01       	movw	r6, r16
 bbe:	f2 e0       	ldi	r31, 0x02	; 2
 bc0:	6f 0e       	add	r6, r31
 bc2:	71 1c       	adc	r7, r1
 bc4:	f8 01       	movw	r30, r16
 bc6:	a0 80       	ld	r10, Z
 bc8:	b1 80       	ldd	r11, Z+1	; 0x01
 bca:	26 ff       	sbrs	r18, 6
 bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <vfprintf+0x15a>
 bce:	65 2d       	mov	r22, r5
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <vfprintf+0x15e>
 bd4:	6f ef       	ldi	r22, 0xFF	; 255
 bd6:	7f ef       	ldi	r23, 0xFF	; 255
 bd8:	c5 01       	movw	r24, r10
 bda:	2c 87       	std	Y+12, r18	; 0x0c
 bdc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <strnlen_P>
 be0:	2c 01       	movw	r4, r24
 be2:	2c 85       	ldd	r18, Y+12	; 0x0c
 be4:	20 68       	ori	r18, 0x80	; 128
 be6:	22 2e       	mov	r2, r18
 be8:	83 01       	movw	r16, r6
 bea:	23 fc       	sbrc	r2, 3
 bec:	1b c0       	rjmp	.+54     	; 0xc24 <vfprintf+0x1aa>
 bee:	83 2d       	mov	r24, r3
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	48 16       	cp	r4, r24
 bf4:	59 06       	cpc	r5, r25
 bf6:	b0 f4       	brcc	.+44     	; 0xc24 <vfprintf+0x1aa>
 bf8:	b7 01       	movw	r22, r14
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 c02:	3a 94       	dec	r3
 c04:	f4 cf       	rjmp	.-24     	; 0xbee <vfprintf+0x174>
 c06:	f5 01       	movw	r30, r10
 c08:	27 fc       	sbrc	r2, 7
 c0a:	85 91       	lpm	r24, Z+
 c0c:	27 fe       	sbrs	r2, 7
 c0e:	81 91       	ld	r24, Z+
 c10:	5f 01       	movw	r10, r30
 c12:	b7 01       	movw	r22, r14
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 c1a:	31 10       	cpse	r3, r1
 c1c:	3a 94       	dec	r3
 c1e:	f1 e0       	ldi	r31, 0x01	; 1
 c20:	4f 1a       	sub	r4, r31
 c22:	51 08       	sbc	r5, r1
 c24:	41 14       	cp	r4, r1
 c26:	51 04       	cpc	r5, r1
 c28:	71 f7       	brne	.-36     	; 0xc06 <vfprintf+0x18c>
 c2a:	e5 c0       	rjmp	.+458    	; 0xdf6 <vfprintf+0x37c>
 c2c:	84 36       	cpi	r24, 0x64	; 100
 c2e:	11 f0       	breq	.+4      	; 0xc34 <vfprintf+0x1ba>
 c30:	89 36       	cpi	r24, 0x69	; 105
 c32:	39 f5       	brne	.+78     	; 0xc82 <vfprintf+0x208>
 c34:	f8 01       	movw	r30, r16
 c36:	27 ff       	sbrs	r18, 7
 c38:	07 c0       	rjmp	.+14     	; 0xc48 <vfprintf+0x1ce>
 c3a:	60 81       	ld	r22, Z
 c3c:	71 81       	ldd	r23, Z+1	; 0x01
 c3e:	82 81       	ldd	r24, Z+2	; 0x02
 c40:	93 81       	ldd	r25, Z+3	; 0x03
 c42:	0c 5f       	subi	r16, 0xFC	; 252
 c44:	1f 4f       	sbci	r17, 0xFF	; 255
 c46:	08 c0       	rjmp	.+16     	; 0xc58 <vfprintf+0x1de>
 c48:	60 81       	ld	r22, Z
 c4a:	71 81       	ldd	r23, Z+1	; 0x01
 c4c:	88 27       	eor	r24, r24
 c4e:	77 fd       	sbrc	r23, 7
 c50:	80 95       	com	r24
 c52:	98 2f       	mov	r25, r24
 c54:	0e 5f       	subi	r16, 0xFE	; 254
 c56:	1f 4f       	sbci	r17, 0xFF	; 255
 c58:	2f 76       	andi	r18, 0x6F	; 111
 c5a:	b2 2e       	mov	r11, r18
 c5c:	97 ff       	sbrs	r25, 7
 c5e:	09 c0       	rjmp	.+18     	; 0xc72 <vfprintf+0x1f8>
 c60:	90 95       	com	r25
 c62:	80 95       	com	r24
 c64:	70 95       	com	r23
 c66:	61 95       	neg	r22
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	8f 4f       	sbci	r24, 0xFF	; 255
 c6c:	9f 4f       	sbci	r25, 0xFF	; 255
 c6e:	20 68       	ori	r18, 0x80	; 128
 c70:	b2 2e       	mov	r11, r18
 c72:	2a e0       	ldi	r18, 0x0A	; 10
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	a4 01       	movw	r20, r8
 c78:	0e 94 57 07 	call	0xeae	; 0xeae <__ultoa_invert>
 c7c:	a8 2e       	mov	r10, r24
 c7e:	a8 18       	sub	r10, r8
 c80:	44 c0       	rjmp	.+136    	; 0xd0a <vfprintf+0x290>
 c82:	85 37       	cpi	r24, 0x75	; 117
 c84:	29 f4       	brne	.+10     	; 0xc90 <vfprintf+0x216>
 c86:	2f 7e       	andi	r18, 0xEF	; 239
 c88:	b2 2e       	mov	r11, r18
 c8a:	2a e0       	ldi	r18, 0x0A	; 10
 c8c:	30 e0       	ldi	r19, 0x00	; 0
 c8e:	25 c0       	rjmp	.+74     	; 0xcda <vfprintf+0x260>
 c90:	f2 2f       	mov	r31, r18
 c92:	f9 7f       	andi	r31, 0xF9	; 249
 c94:	bf 2e       	mov	r11, r31
 c96:	8f 36       	cpi	r24, 0x6F	; 111
 c98:	c1 f0       	breq	.+48     	; 0xcca <vfprintf+0x250>
 c9a:	18 f4       	brcc	.+6      	; 0xca2 <vfprintf+0x228>
 c9c:	88 35       	cpi	r24, 0x58	; 88
 c9e:	79 f0       	breq	.+30     	; 0xcbe <vfprintf+0x244>
 ca0:	b4 c0       	rjmp	.+360    	; 0xe0a <vfprintf+0x390>
 ca2:	80 37       	cpi	r24, 0x70	; 112
 ca4:	19 f0       	breq	.+6      	; 0xcac <vfprintf+0x232>
 ca6:	88 37       	cpi	r24, 0x78	; 120
 ca8:	21 f0       	breq	.+8      	; 0xcb2 <vfprintf+0x238>
 caa:	af c0       	rjmp	.+350    	; 0xe0a <vfprintf+0x390>
 cac:	2f 2f       	mov	r18, r31
 cae:	20 61       	ori	r18, 0x10	; 16
 cb0:	b2 2e       	mov	r11, r18
 cb2:	b4 fe       	sbrs	r11, 4
 cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <vfprintf+0x256>
 cb6:	8b 2d       	mov	r24, r11
 cb8:	84 60       	ori	r24, 0x04	; 4
 cba:	b8 2e       	mov	r11, r24
 cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <vfprintf+0x256>
 cbe:	24 ff       	sbrs	r18, 4
 cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <vfprintf+0x25c>
 cc2:	9f 2f       	mov	r25, r31
 cc4:	96 60       	ori	r25, 0x06	; 6
 cc6:	b9 2e       	mov	r11, r25
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x25c>
 cca:	28 e0       	ldi	r18, 0x08	; 8
 ccc:	30 e0       	ldi	r19, 0x00	; 0
 cce:	05 c0       	rjmp	.+10     	; 0xcda <vfprintf+0x260>
 cd0:	20 e1       	ldi	r18, 0x10	; 16
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x260>
 cd6:	20 e1       	ldi	r18, 0x10	; 16
 cd8:	32 e0       	ldi	r19, 0x02	; 2
 cda:	f8 01       	movw	r30, r16
 cdc:	b7 fe       	sbrs	r11, 7
 cde:	07 c0       	rjmp	.+14     	; 0xcee <vfprintf+0x274>
 ce0:	60 81       	ld	r22, Z
 ce2:	71 81       	ldd	r23, Z+1	; 0x01
 ce4:	82 81       	ldd	r24, Z+2	; 0x02
 ce6:	93 81       	ldd	r25, Z+3	; 0x03
 ce8:	0c 5f       	subi	r16, 0xFC	; 252
 cea:	1f 4f       	sbci	r17, 0xFF	; 255
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0x280>
 cee:	60 81       	ld	r22, Z
 cf0:	71 81       	ldd	r23, Z+1	; 0x01
 cf2:	80 e0       	ldi	r24, 0x00	; 0
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	0e 5f       	subi	r16, 0xFE	; 254
 cf8:	1f 4f       	sbci	r17, 0xFF	; 255
 cfa:	a4 01       	movw	r20, r8
 cfc:	0e 94 57 07 	call	0xeae	; 0xeae <__ultoa_invert>
 d00:	a8 2e       	mov	r10, r24
 d02:	a8 18       	sub	r10, r8
 d04:	fb 2d       	mov	r31, r11
 d06:	ff 77       	andi	r31, 0x7F	; 127
 d08:	bf 2e       	mov	r11, r31
 d0a:	b6 fe       	sbrs	r11, 6
 d0c:	0b c0       	rjmp	.+22     	; 0xd24 <vfprintf+0x2aa>
 d0e:	2b 2d       	mov	r18, r11
 d10:	2e 7f       	andi	r18, 0xFE	; 254
 d12:	a5 14       	cp	r10, r5
 d14:	50 f4       	brcc	.+20     	; 0xd2a <vfprintf+0x2b0>
 d16:	b4 fe       	sbrs	r11, 4
 d18:	0a c0       	rjmp	.+20     	; 0xd2e <vfprintf+0x2b4>
 d1a:	b2 fc       	sbrc	r11, 2
 d1c:	08 c0       	rjmp	.+16     	; 0xd2e <vfprintf+0x2b4>
 d1e:	2b 2d       	mov	r18, r11
 d20:	2e 7e       	andi	r18, 0xEE	; 238
 d22:	05 c0       	rjmp	.+10     	; 0xd2e <vfprintf+0x2b4>
 d24:	7a 2c       	mov	r7, r10
 d26:	2b 2d       	mov	r18, r11
 d28:	03 c0       	rjmp	.+6      	; 0xd30 <vfprintf+0x2b6>
 d2a:	7a 2c       	mov	r7, r10
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <vfprintf+0x2b6>
 d2e:	75 2c       	mov	r7, r5
 d30:	24 ff       	sbrs	r18, 4
 d32:	0d c0       	rjmp	.+26     	; 0xd4e <vfprintf+0x2d4>
 d34:	fe 01       	movw	r30, r28
 d36:	ea 0d       	add	r30, r10
 d38:	f1 1d       	adc	r31, r1
 d3a:	80 81       	ld	r24, Z
 d3c:	80 33       	cpi	r24, 0x30	; 48
 d3e:	11 f4       	brne	.+4      	; 0xd44 <vfprintf+0x2ca>
 d40:	29 7e       	andi	r18, 0xE9	; 233
 d42:	09 c0       	rjmp	.+18     	; 0xd56 <vfprintf+0x2dc>
 d44:	22 ff       	sbrs	r18, 2
 d46:	06 c0       	rjmp	.+12     	; 0xd54 <vfprintf+0x2da>
 d48:	73 94       	inc	r7
 d4a:	73 94       	inc	r7
 d4c:	04 c0       	rjmp	.+8      	; 0xd56 <vfprintf+0x2dc>
 d4e:	82 2f       	mov	r24, r18
 d50:	86 78       	andi	r24, 0x86	; 134
 d52:	09 f0       	breq	.+2      	; 0xd56 <vfprintf+0x2dc>
 d54:	73 94       	inc	r7
 d56:	23 fd       	sbrc	r18, 3
 d58:	13 c0       	rjmp	.+38     	; 0xd80 <vfprintf+0x306>
 d5a:	20 ff       	sbrs	r18, 0
 d5c:	06 c0       	rjmp	.+12     	; 0xd6a <vfprintf+0x2f0>
 d5e:	5a 2c       	mov	r5, r10
 d60:	73 14       	cp	r7, r3
 d62:	18 f4       	brcc	.+6      	; 0xd6a <vfprintf+0x2f0>
 d64:	53 0c       	add	r5, r3
 d66:	57 18       	sub	r5, r7
 d68:	73 2c       	mov	r7, r3
 d6a:	73 14       	cp	r7, r3
 d6c:	68 f4       	brcc	.+26     	; 0xd88 <vfprintf+0x30e>
 d6e:	b7 01       	movw	r22, r14
 d70:	80 e2       	ldi	r24, 0x20	; 32
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	2c 87       	std	Y+12, r18	; 0x0c
 d76:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 d7a:	73 94       	inc	r7
 d7c:	2c 85       	ldd	r18, Y+12	; 0x0c
 d7e:	f5 cf       	rjmp	.-22     	; 0xd6a <vfprintf+0x2f0>
 d80:	73 14       	cp	r7, r3
 d82:	10 f4       	brcc	.+4      	; 0xd88 <vfprintf+0x30e>
 d84:	37 18       	sub	r3, r7
 d86:	01 c0       	rjmp	.+2      	; 0xd8a <vfprintf+0x310>
 d88:	31 2c       	mov	r3, r1
 d8a:	24 ff       	sbrs	r18, 4
 d8c:	12 c0       	rjmp	.+36     	; 0xdb2 <vfprintf+0x338>
 d8e:	b7 01       	movw	r22, r14
 d90:	80 e3       	ldi	r24, 0x30	; 48
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	2c 87       	std	Y+12, r18	; 0x0c
 d96:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 d9a:	2c 85       	ldd	r18, Y+12	; 0x0c
 d9c:	22 ff       	sbrs	r18, 2
 d9e:	17 c0       	rjmp	.+46     	; 0xdce <vfprintf+0x354>
 da0:	21 ff       	sbrs	r18, 1
 da2:	03 c0       	rjmp	.+6      	; 0xdaa <vfprintf+0x330>
 da4:	88 e5       	ldi	r24, 0x58	; 88
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	02 c0       	rjmp	.+4      	; 0xdae <vfprintf+0x334>
 daa:	88 e7       	ldi	r24, 0x78	; 120
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	b7 01       	movw	r22, r14
 db0:	0c c0       	rjmp	.+24     	; 0xdca <vfprintf+0x350>
 db2:	82 2f       	mov	r24, r18
 db4:	86 78       	andi	r24, 0x86	; 134
 db6:	59 f0       	breq	.+22     	; 0xdce <vfprintf+0x354>
 db8:	21 fd       	sbrc	r18, 1
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <vfprintf+0x346>
 dbc:	80 e2       	ldi	r24, 0x20	; 32
 dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <vfprintf+0x348>
 dc0:	8b e2       	ldi	r24, 0x2B	; 43
 dc2:	27 fd       	sbrc	r18, 7
 dc4:	8d e2       	ldi	r24, 0x2D	; 45
 dc6:	b7 01       	movw	r22, r14
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 dce:	a5 14       	cp	r10, r5
 dd0:	38 f4       	brcc	.+14     	; 0xde0 <vfprintf+0x366>
 dd2:	b7 01       	movw	r22, r14
 dd4:	80 e3       	ldi	r24, 0x30	; 48
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 ddc:	5a 94       	dec	r5
 dde:	f7 cf       	rjmp	.-18     	; 0xdce <vfprintf+0x354>
 de0:	aa 94       	dec	r10
 de2:	f4 01       	movw	r30, r8
 de4:	ea 0d       	add	r30, r10
 de6:	f1 1d       	adc	r31, r1
 de8:	80 81       	ld	r24, Z
 dea:	b7 01       	movw	r22, r14
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 df2:	a1 10       	cpse	r10, r1
 df4:	f5 cf       	rjmp	.-22     	; 0xde0 <vfprintf+0x366>
 df6:	33 20       	and	r3, r3
 df8:	09 f4       	brne	.+2      	; 0xdfc <vfprintf+0x382>
 dfa:	51 ce       	rjmp	.-862    	; 0xa9e <vfprintf+0x24>
 dfc:	b7 01       	movw	r22, r14
 dfe:	80 e2       	ldi	r24, 0x20	; 32
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 e06:	3a 94       	dec	r3
 e08:	f6 cf       	rjmp	.-20     	; 0xdf6 <vfprintf+0x37c>
 e0a:	f7 01       	movw	r30, r14
 e0c:	86 81       	ldd	r24, Z+6	; 0x06
 e0e:	97 81       	ldd	r25, Z+7	; 0x07
 e10:	02 c0       	rjmp	.+4      	; 0xe16 <vfprintf+0x39c>
 e12:	8f ef       	ldi	r24, 0xFF	; 255
 e14:	9f ef       	ldi	r25, 0xFF	; 255
 e16:	2c 96       	adiw	r28, 0x0c	; 12
 e18:	e2 e1       	ldi	r30, 0x12	; 18
 e1a:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__epilogue_restores__>

00000e1e <strnlen_P>:
 e1e:	fc 01       	movw	r30, r24
 e20:	05 90       	lpm	r0, Z+
 e22:	61 50       	subi	r22, 0x01	; 1
 e24:	70 40       	sbci	r23, 0x00	; 0
 e26:	01 10       	cpse	r0, r1
 e28:	d8 f7       	brcc	.-10     	; 0xe20 <strnlen_P+0x2>
 e2a:	80 95       	com	r24
 e2c:	90 95       	com	r25
 e2e:	8e 0f       	add	r24, r30
 e30:	9f 1f       	adc	r25, r31
 e32:	08 95       	ret

00000e34 <strnlen>:
 e34:	fc 01       	movw	r30, r24
 e36:	61 50       	subi	r22, 0x01	; 1
 e38:	70 40       	sbci	r23, 0x00	; 0
 e3a:	01 90       	ld	r0, Z+
 e3c:	01 10       	cpse	r0, r1
 e3e:	d8 f7       	brcc	.-10     	; 0xe36 <strnlen+0x2>
 e40:	80 95       	com	r24
 e42:	90 95       	com	r25
 e44:	8e 0f       	add	r24, r30
 e46:	9f 1f       	adc	r25, r31
 e48:	08 95       	ret

00000e4a <fputc>:
 e4a:	0f 93       	push	r16
 e4c:	1f 93       	push	r17
 e4e:	cf 93       	push	r28
 e50:	df 93       	push	r29
 e52:	18 2f       	mov	r17, r24
 e54:	09 2f       	mov	r16, r25
 e56:	eb 01       	movw	r28, r22
 e58:	8b 81       	ldd	r24, Y+3	; 0x03
 e5a:	81 fd       	sbrc	r24, 1
 e5c:	03 c0       	rjmp	.+6      	; 0xe64 <fputc+0x1a>
 e5e:	8f ef       	ldi	r24, 0xFF	; 255
 e60:	9f ef       	ldi	r25, 0xFF	; 255
 e62:	20 c0       	rjmp	.+64     	; 0xea4 <fputc+0x5a>
 e64:	82 ff       	sbrs	r24, 2
 e66:	10 c0       	rjmp	.+32     	; 0xe88 <fputc+0x3e>
 e68:	4e 81       	ldd	r20, Y+6	; 0x06
 e6a:	5f 81       	ldd	r21, Y+7	; 0x07
 e6c:	2c 81       	ldd	r18, Y+4	; 0x04
 e6e:	3d 81       	ldd	r19, Y+5	; 0x05
 e70:	42 17       	cp	r20, r18
 e72:	53 07       	cpc	r21, r19
 e74:	7c f4       	brge	.+30     	; 0xe94 <fputc+0x4a>
 e76:	e8 81       	ld	r30, Y
 e78:	f9 81       	ldd	r31, Y+1	; 0x01
 e7a:	9f 01       	movw	r18, r30
 e7c:	2f 5f       	subi	r18, 0xFF	; 255
 e7e:	3f 4f       	sbci	r19, 0xFF	; 255
 e80:	39 83       	std	Y+1, r19	; 0x01
 e82:	28 83       	st	Y, r18
 e84:	10 83       	st	Z, r17
 e86:	06 c0       	rjmp	.+12     	; 0xe94 <fputc+0x4a>
 e88:	e8 85       	ldd	r30, Y+8	; 0x08
 e8a:	f9 85       	ldd	r31, Y+9	; 0x09
 e8c:	81 2f       	mov	r24, r17
 e8e:	09 95       	icall
 e90:	89 2b       	or	r24, r25
 e92:	29 f7       	brne	.-54     	; 0xe5e <fputc+0x14>
 e94:	2e 81       	ldd	r18, Y+6	; 0x06
 e96:	3f 81       	ldd	r19, Y+7	; 0x07
 e98:	2f 5f       	subi	r18, 0xFF	; 255
 e9a:	3f 4f       	sbci	r19, 0xFF	; 255
 e9c:	3f 83       	std	Y+7, r19	; 0x07
 e9e:	2e 83       	std	Y+6, r18	; 0x06
 ea0:	81 2f       	mov	r24, r17
 ea2:	90 2f       	mov	r25, r16
 ea4:	df 91       	pop	r29
 ea6:	cf 91       	pop	r28
 ea8:	1f 91       	pop	r17
 eaa:	0f 91       	pop	r16
 eac:	08 95       	ret

00000eae <__ultoa_invert>:
 eae:	fa 01       	movw	r30, r20
 eb0:	aa 27       	eor	r26, r26
 eb2:	28 30       	cpi	r18, 0x08	; 8
 eb4:	51 f1       	breq	.+84     	; 0xf0a <__ultoa_invert+0x5c>
 eb6:	20 31       	cpi	r18, 0x10	; 16
 eb8:	81 f1       	breq	.+96     	; 0xf1a <__ultoa_invert+0x6c>
 eba:	e8 94       	clt
 ebc:	6f 93       	push	r22
 ebe:	6e 7f       	andi	r22, 0xFE	; 254
 ec0:	6e 5f       	subi	r22, 0xFE	; 254
 ec2:	7f 4f       	sbci	r23, 0xFF	; 255
 ec4:	8f 4f       	sbci	r24, 0xFF	; 255
 ec6:	9f 4f       	sbci	r25, 0xFF	; 255
 ec8:	af 4f       	sbci	r26, 0xFF	; 255
 eca:	b1 e0       	ldi	r27, 0x01	; 1
 ecc:	3e d0       	rcall	.+124    	; 0xf4a <__ultoa_invert+0x9c>
 ece:	b4 e0       	ldi	r27, 0x04	; 4
 ed0:	3c d0       	rcall	.+120    	; 0xf4a <__ultoa_invert+0x9c>
 ed2:	67 0f       	add	r22, r23
 ed4:	78 1f       	adc	r23, r24
 ed6:	89 1f       	adc	r24, r25
 ed8:	9a 1f       	adc	r25, r26
 eda:	a1 1d       	adc	r26, r1
 edc:	68 0f       	add	r22, r24
 ede:	79 1f       	adc	r23, r25
 ee0:	8a 1f       	adc	r24, r26
 ee2:	91 1d       	adc	r25, r1
 ee4:	a1 1d       	adc	r26, r1
 ee6:	6a 0f       	add	r22, r26
 ee8:	71 1d       	adc	r23, r1
 eea:	81 1d       	adc	r24, r1
 eec:	91 1d       	adc	r25, r1
 eee:	a1 1d       	adc	r26, r1
 ef0:	20 d0       	rcall	.+64     	; 0xf32 <__ultoa_invert+0x84>
 ef2:	09 f4       	brne	.+2      	; 0xef6 <__ultoa_invert+0x48>
 ef4:	68 94       	set
 ef6:	3f 91       	pop	r19
 ef8:	2a e0       	ldi	r18, 0x0A	; 10
 efa:	26 9f       	mul	r18, r22
 efc:	11 24       	eor	r1, r1
 efe:	30 19       	sub	r19, r0
 f00:	30 5d       	subi	r19, 0xD0	; 208
 f02:	31 93       	st	Z+, r19
 f04:	de f6       	brtc	.-74     	; 0xebc <__ultoa_invert+0xe>
 f06:	cf 01       	movw	r24, r30
 f08:	08 95       	ret
 f0a:	46 2f       	mov	r20, r22
 f0c:	47 70       	andi	r20, 0x07	; 7
 f0e:	40 5d       	subi	r20, 0xD0	; 208
 f10:	41 93       	st	Z+, r20
 f12:	b3 e0       	ldi	r27, 0x03	; 3
 f14:	0f d0       	rcall	.+30     	; 0xf34 <__ultoa_invert+0x86>
 f16:	c9 f7       	brne	.-14     	; 0xf0a <__ultoa_invert+0x5c>
 f18:	f6 cf       	rjmp	.-20     	; 0xf06 <__ultoa_invert+0x58>
 f1a:	46 2f       	mov	r20, r22
 f1c:	4f 70       	andi	r20, 0x0F	; 15
 f1e:	40 5d       	subi	r20, 0xD0	; 208
 f20:	4a 33       	cpi	r20, 0x3A	; 58
 f22:	18 f0       	brcs	.+6      	; 0xf2a <__ultoa_invert+0x7c>
 f24:	49 5d       	subi	r20, 0xD9	; 217
 f26:	31 fd       	sbrc	r19, 1
 f28:	40 52       	subi	r20, 0x20	; 32
 f2a:	41 93       	st	Z+, r20
 f2c:	02 d0       	rcall	.+4      	; 0xf32 <__ultoa_invert+0x84>
 f2e:	a9 f7       	brne	.-22     	; 0xf1a <__ultoa_invert+0x6c>
 f30:	ea cf       	rjmp	.-44     	; 0xf06 <__ultoa_invert+0x58>
 f32:	b4 e0       	ldi	r27, 0x04	; 4
 f34:	a6 95       	lsr	r26
 f36:	97 95       	ror	r25
 f38:	87 95       	ror	r24
 f3a:	77 95       	ror	r23
 f3c:	67 95       	ror	r22
 f3e:	ba 95       	dec	r27
 f40:	c9 f7       	brne	.-14     	; 0xf34 <__ultoa_invert+0x86>
 f42:	00 97       	sbiw	r24, 0x00	; 0
 f44:	61 05       	cpc	r22, r1
 f46:	71 05       	cpc	r23, r1
 f48:	08 95       	ret
 f4a:	9b 01       	movw	r18, r22
 f4c:	ac 01       	movw	r20, r24
 f4e:	0a 2e       	mov	r0, r26
 f50:	06 94       	lsr	r0
 f52:	57 95       	ror	r21
 f54:	47 95       	ror	r20
 f56:	37 95       	ror	r19
 f58:	27 95       	ror	r18
 f5a:	ba 95       	dec	r27
 f5c:	c9 f7       	brne	.-14     	; 0xf50 <__ultoa_invert+0xa2>
 f5e:	62 0f       	add	r22, r18
 f60:	73 1f       	adc	r23, r19
 f62:	84 1f       	adc	r24, r20
 f64:	95 1f       	adc	r25, r21
 f66:	a0 1d       	adc	r26, r0
 f68:	08 95       	ret

00000f6a <__prologue_saves__>:
 f6a:	2f 92       	push	r2
 f6c:	3f 92       	push	r3
 f6e:	4f 92       	push	r4
 f70:	5f 92       	push	r5
 f72:	6f 92       	push	r6
 f74:	7f 92       	push	r7
 f76:	8f 92       	push	r8
 f78:	9f 92       	push	r9
 f7a:	af 92       	push	r10
 f7c:	bf 92       	push	r11
 f7e:	cf 92       	push	r12
 f80:	df 92       	push	r13
 f82:	ef 92       	push	r14
 f84:	ff 92       	push	r15
 f86:	0f 93       	push	r16
 f88:	1f 93       	push	r17
 f8a:	cf 93       	push	r28
 f8c:	df 93       	push	r29
 f8e:	cd b7       	in	r28, 0x3d	; 61
 f90:	de b7       	in	r29, 0x3e	; 62
 f92:	ca 1b       	sub	r28, r26
 f94:	db 0b       	sbc	r29, r27
 f96:	0f b6       	in	r0, 0x3f	; 63
 f98:	f8 94       	cli
 f9a:	de bf       	out	0x3e, r29	; 62
 f9c:	0f be       	out	0x3f, r0	; 63
 f9e:	cd bf       	out	0x3d, r28	; 61
 fa0:	09 94       	ijmp

00000fa2 <__epilogue_restores__>:
 fa2:	2a 88       	ldd	r2, Y+18	; 0x12
 fa4:	39 88       	ldd	r3, Y+17	; 0x11
 fa6:	48 88       	ldd	r4, Y+16	; 0x10
 fa8:	5f 84       	ldd	r5, Y+15	; 0x0f
 faa:	6e 84       	ldd	r6, Y+14	; 0x0e
 fac:	7d 84       	ldd	r7, Y+13	; 0x0d
 fae:	8c 84       	ldd	r8, Y+12	; 0x0c
 fb0:	9b 84       	ldd	r9, Y+11	; 0x0b
 fb2:	aa 84       	ldd	r10, Y+10	; 0x0a
 fb4:	b9 84       	ldd	r11, Y+9	; 0x09
 fb6:	c8 84       	ldd	r12, Y+8	; 0x08
 fb8:	df 80       	ldd	r13, Y+7	; 0x07
 fba:	ee 80       	ldd	r14, Y+6	; 0x06
 fbc:	fd 80       	ldd	r15, Y+5	; 0x05
 fbe:	0c 81       	ldd	r16, Y+4	; 0x04
 fc0:	1b 81       	ldd	r17, Y+3	; 0x03
 fc2:	aa 81       	ldd	r26, Y+2	; 0x02
 fc4:	b9 81       	ldd	r27, Y+1	; 0x01
 fc6:	ce 0f       	add	r28, r30
 fc8:	d1 1d       	adc	r29, r1
 fca:	0f b6       	in	r0, 0x3f	; 63
 fcc:	f8 94       	cli
 fce:	de bf       	out	0x3e, r29	; 62
 fd0:	0f be       	out	0x3f, r0	; 63
 fd2:	cd bf       	out	0x3d, r28	; 61
 fd4:	ed 01       	movw	r28, r26
 fd6:	08 95       	ret

00000fd8 <_exit>:
 fd8:	f8 94       	cli

00000fda <__stop_program>:
 fda:	ff cf       	rjmp	.-2      	; 0xfda <__stop_program>
