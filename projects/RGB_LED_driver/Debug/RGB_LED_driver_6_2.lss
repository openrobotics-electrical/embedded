
RGB_LED_driver_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001a  00800100  00800100  00000240  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027f  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014a  00000000  00000000  0000053f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000189  00000000  00000000  00000689  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000264  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f6  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 31       	cpi	r26, 0x1A	; 26
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  88:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_20>:

#define RX_BUFFER_SIZE 16
volatile char receiving[16];
volatile uint8_t rx_index = 0, rx_head = 0, chars_unread = 0;

ISR(USART_TX_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	
	if(chars_left-- > 0) {	
  a2:	80 91 17 01 	lds	r24, 0x0117
  a6:	9f ef       	ldi	r25, 0xFF	; 255
  a8:	98 0f       	add	r25, r24
  aa:	90 93 17 01 	sts	0x0117, r25
  ae:	88 23       	and	r24, r24
  b0:	81 f0       	breq	.+32     	; 0xd2 <__vector_20+0x42>
		UDR0 = transmitting[chars_sent++];	
  b2:	e0 91 18 01 	lds	r30, 0x0118
  b6:	f0 91 19 01 	lds	r31, 0x0119
  ba:	80 91 16 01 	lds	r24, 0x0116
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	98 0f       	add	r25, r24
  c2:	90 93 16 01 	sts	0x0116, r25
  c6:	e8 0f       	add	r30, r24
  c8:	f1 1d       	adc	r31, r1
  ca:	80 81       	ld	r24, Z
  cc:	80 93 c6 00 	sts	0x00C6, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__vector_20+0x46>
	} else {
		chars_sent = 0;
  d2:	10 92 16 01 	sts	0x0116, r1
	}
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_18>:

bool flag = false;

ISR(USART_RX_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	
	UCSR0A &= ~_BV(RXC0); // clear flag
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	80 83       	st	Z, r24
	receiving[rx_index] = UDR0;
 104:	e0 91 05 01 	lds	r30, 0x0105
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 91 c6 00 	lds	r24, 0x00C6
 10e:	ea 5f       	subi	r30, 0xFA	; 250
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	80 83       	st	Z, r24
	rx_index = (rx_index + 1) % RX_BUFFER_SIZE;
 114:	80 91 05 01 	lds	r24, 0x0105
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	90 78       	andi	r25, 0x80	; 128
 120:	80 93 05 01 	sts	0x0105, r24
	chars_unread++;
 124:	80 91 04 01 	lds	r24, 0x0104
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 04 01 	sts	0x0104, r24
	PORTB = ~PORTB;
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	80 95       	com	r24
 132:	85 b9       	out	0x05, r24	; 5
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_14>:
#include <serial.h>

uint8_t r, g, b;
uint8_t PWM_count;

ISR(TIMER0_COMPA_vect) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25

	PWM_count++;
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 00 01 	sts	0x0100, r24
	uint8_t output = 0;
	
	if(r > PWM_count) BITSET(output, 3);
 160:	90 91 03 01 	lds	r25, 0x0103
 164:	89 17       	cp	r24, r25
 166:	10 f4       	brcc	.+4      	; 0x16c <__vector_14+0x26>
 168:	98 e0       	ldi	r25, 0x08	; 8
 16a:	01 c0       	rjmp	.+2      	; 0x16e <__vector_14+0x28>
		else BITCLR(output, 3);
 16c:	90 e0       	ldi	r25, 0x00	; 0
	if(b > PWM_count) BITSET(output, 4);
 16e:	20 91 01 01 	lds	r18, 0x0101
 172:	82 17       	cp	r24, r18
 174:	10 f4       	brcc	.+4      	; 0x17a <__vector_14+0x34>
 176:	90 61       	ori	r25, 0x10	; 16
 178:	01 c0       	rjmp	.+2      	; 0x17c <__vector_14+0x36>
		else BITCLR(output, 4);
 17a:	9f 7e       	andi	r25, 0xEF	; 239
	if(g > PWM_count) BITSET(output, 2);
 17c:	20 91 02 01 	lds	r18, 0x0102
 180:	82 17       	cp	r24, r18
 182:	18 f4       	brcc	.+6      	; 0x18a <__vector_14+0x44>
 184:	89 2f       	mov	r24, r25
 186:	84 60       	ori	r24, 0x04	; 4
 188:	02 c0       	rjmp	.+4      	; 0x18e <__vector_14+0x48>
		else BITCLR(output, 2);
 18a:	89 2f       	mov	r24, r25
 18c:	8b 7f       	andi	r24, 0xFB	; 251

	PORTD = output;
 18e:	8b b9       	out	0x0b, r24	; 11
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <main>:

int main(void) {

	// serial_init();

	DDRB = 0xff;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff; // PORTD as outputs
 1a4:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A = (1 << WGM01); // CTC mode
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	94 bd       	out	0x24, r25	; 36
	TCCR0B =  PRESCALER_8; // PRESCALER_8 default;
 1aa:	95 bd       	out	0x25, r25	; 37
	OCR0A = TIMER_COUNT; // calculated above to give 4/663 of a second
 1ac:	2d e5       	ldi	r18, 0x5D	; 93
 1ae:	27 bd       	out	0x27, r18	; 39
	TIMSK0 = _BV(OCIE1A); // enable timer interrupt
 1b0:	90 93 6e 00 	sts	0x006E, r25
	
	r = 255;
 1b4:	80 93 03 01 	sts	0x0103, r24
	g = 160;
 1b8:	80 ea       	ldi	r24, 0xA0	; 160
 1ba:	80 93 02 01 	sts	0x0102, r24
	b = 25;
 1be:	89 e1       	ldi	r24, 0x19	; 25
 1c0:	80 93 01 01 	sts	0x0101, r24
	
	sei(); // set interrupts
 1c4:	78 94       	sei
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <main+0x26>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
