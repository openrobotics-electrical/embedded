
RGB_LED_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000427  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000221  00000000  00000000  0000083b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000335  00000000  00000000  00001177  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_18>
  4c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_19>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  9e:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z13s3p_TX_enablev>:

#define TXDEN_PIN _BV(3)

void s3p_TX_enable() 
{ 
	UCSR0B |= _BV(TXEN0); // TX pin enabled
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	80 83       	st	Z, r24
	PORTB |= TXDEN_PIN;
  b0:	2b 9a       	sbi	0x05, 3	; 5
  b2:	08 95       	ret

000000b4 <_Z14s3p_TX_disablev>:
}

void s3p_TX_disable() 
{ 	
	PORTB &= ~TXDEN_PIN;
  b4:	2b 98       	cbi	0x05, 3	; 5
	UCSR0B &= ~_BV(TXEN0); // TX pin disabled
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	80 83       	st	Z, r24
	PORTD |= _BV(1);
  c0:	59 9a       	sbi	0x0b, 1	; 11
  c2:	08 95       	ret

000000c4 <__vector_20>:
}

ISR(USART_TX_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	s3p_TX_disable();
  e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z14s3p_TX_disablev>
	UCSR0B &= ~_BV(TXCIE0); // disables TX complete interrupt
  ea:	e1 ec       	ldi	r30, 0xC1	; 193
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	80 83       	st	Z, r24
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_18>:

ISR(USART_RX_vect) 
{	
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <__vector_18+0x1a>
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	char received = UDR0; // clears flag
 134:	20 91 c6 00 	lds	r18, 0x00C6
	
	char delimiter[] = "@";
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	9a 83       	std	Y+2, r25	; 0x02
 13e:	89 83       	std	Y+1, r24	; 0x01
	
	if(memory_index < sizeof(delimiter)) 
 140:	80 91 0d 01 	lds	r24, 0x010D
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	58 f4       	brcc	.+22     	; 0x15e <__vector_18+0x48>
	{
		memory_index = (received == delimiter[memory_index])? memory_index + 1 : 0;	
 148:	fe 01       	movw	r30, r28
 14a:	e8 0f       	add	r30, r24
 14c:	f1 1d       	adc	r31, r1
 14e:	91 81       	ldd	r25, Z+1	; 0x01
 150:	92 13       	cpse	r25, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <__vector_18+0x42>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	01 c0       	rjmp	.+2      	; 0x15a <__vector_18+0x44>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	80 93 0d 01 	sts	0x010D, r24
	} 
	else
	{
		
	}
}
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_19>:

ISR(USART_UDRE_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	UDR0 = transmitting[chars_to_send - chars_left];
 18c:	e0 91 09 01 	lds	r30, 0x0109
 190:	80 91 0a 01 	lds	r24, 0x010A
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e8 1b       	sub	r30, r24
 198:	f1 09       	sbc	r31, r1
 19a:	80 91 0b 01 	lds	r24, 0x010B
 19e:	90 91 0c 01 	lds	r25, 0x010C
 1a2:	e8 0f       	add	r30, r24
 1a4:	f9 1f       	adc	r31, r25
 1a6:	80 81       	ld	r24, Z
 1a8:	80 93 c6 00 	sts	0x00C6, r24
	chars_left--;
 1ac:	80 91 0a 01 	lds	r24, 0x010A
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	80 93 0a 01 	sts	0x010A, r24
	
	if(chars_left == 1) 
 1b6:	80 91 0a 01 	lds	r24, 0x010A
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	41 f4       	brne	.+16     	; 0x1ce <__vector_19+0x54>
	{
		UCSR0B &= ~_BV(UDRIE0);  // disable buffer empty interrupt
 1be:	e1 ec       	ldi	r30, 0xC1	; 193
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	80 83       	st	Z, r24
		UCSR0B |= _BV(TXCIE0); // enables TX complete interrupt
 1c8:	80 81       	ld	r24, Z
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
	}
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_Z8s3p_initv>:

void s3p_init() {
	
	DDRC = 0xff;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff;
 1e4:	84 b9       	out	0x04, r24	; 4
	
	PORTD |= _BV(1);
 1e6:	59 9a       	sbi	0x0b, 1	; 11
	
	UBRR0H = 0;
 1e8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 1; // 1Mbaud
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = _BV(U2X0);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = /*_BV(RXCIE0) |*/ _BV(RXEN0) | _BV(TXEN0);
 1f8:	88 e1       	ldi	r24, 0x18	; 24
 1fa:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	80 93 c2 00 	sts	0x00C2, r24
 204:	08 95       	ret

00000206 <_Z12s3p_transmitPch>:
}

void s3p_transmit(char* s, uint8_t char_count) {
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
	// sends between 1 and 255 chars
	// uses USART_TX and USART_UDRE interrupts to advance through chars
	
	#define TX_PIN 1
		
	transmitting = s;
 20c:	90 93 0c 01 	sts	0x010C, r25
 210:	80 93 0b 01 	sts	0x010B, r24
	chars_to_send = char_count;
 214:	60 93 09 01 	sts	0x0109, r22
	chars_left = chars_to_send - 1;
 218:	80 91 09 01 	lds	r24, 0x0109
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	80 93 0a 01 	sts	0x010A, r24
	
	s3p_TX_enable();
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z13s3p_TX_enablev>
	UDR0 = s[0]; // start transmission of first char
 226:	88 81       	ld	r24, Y
 228:	80 93 c6 00 	sts	0x00C6, r24
	UCSR0B |= _BV(UDRIE0); // enable buffer empty interrupt
 22c:	e1 ec       	ldi	r30, 0xC1	; 193
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 62       	ori	r24, 0x20	; 32
 234:	80 83       	st	Z, r24
	
	PORTD = _BV(TX_PIN);
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	8b b9       	out	0x0b, r24	; 11
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <__vector_14>:
}

char tick_msg[] = "@RGB";
char tock_msg[] = "TOCK";

ISR(TIMER0_COMPA_vect) {
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	
	PORTB ^= 2;
 262:	95 b1       	in	r25, 0x05	; 5
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	89 27       	eor	r24, r25
 268:	85 b9       	out	0x05, r24	; 5
	s3p_transmit(tick_msg, sizeof(tick_msg));
 26a:	65 e0       	ldi	r22, 0x05	; 5
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 03 01 	call	0x206	; 0x206 <_Z12s3p_transmitPch>
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <main>:

int main(void) 
{
	s3p_init();
 296:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z8s3p_initv>

	DDRB = 0xff;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff; // PORTD as outputs
 29e:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A = _BV(WGM01); // CTC mode
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	94 bd       	out	0x24, r25	; 36
	TCCR0B =  PRESCALER_64;
 2a4:	23 e0       	ldi	r18, 0x03	; 3
 2a6:	25 bd       	out	0x25, r18	; 37
	OCR0A =	49;
 2a8:	21 e3       	ldi	r18, 0x31	; 49
 2aa:	27 bd       	out	0x27, r18	; 39
	TIMSK0 = _BV(OCIE1A); // enable timer interrupt
 2ac:	90 93 6e 00 	sts	0x006E, r25
	
	colors.r = 255;
 2b0:	80 93 06 01 	sts	0x0106, r24
	colors.g = 160;
 2b4:	80 ea       	ldi	r24, 0xA0	; 160
 2b6:	80 93 07 01 	sts	0x0107, r24
	colors.b = 32;
 2ba:	80 e2       	ldi	r24, 0x20	; 32
 2bc:	80 93 08 01 	sts	0x0108, r24
	
	sei(); // set interrupts
 2c0:	78 94       	sei
	
	BITSET(PORTD, 6);
 2c2:	5e 9a       	sbi	0x0b, 6	; 11
	
    while(1)	
	{
		PORTD = PORTD + 1;
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	80 e7       	ldi	r24, 0x70	; 112
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x3a>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x44>
 2da:	00 00       	nop
 2dc:	f3 cf       	rjmp	.-26     	; 0x2c4 <main+0x2e>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
