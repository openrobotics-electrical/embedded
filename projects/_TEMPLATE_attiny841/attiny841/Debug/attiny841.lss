
attiny841.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000008b4  00000948  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  00800154  00800154  0000099c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001454  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054a  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038e  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8d  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055c  00000000  00000000  00003441  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000399d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__dtors_end>
   2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	39 c0       	rjmp	.+114    	; 0x8a <__bad_interrupt>
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	3e c0       	rjmp	.+124    	; 0x98 <__vector_13>
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	31 c0       	rjmp	.+98     	; 0x8a <__bad_interrupt>
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	2f c0       	rjmp	.+94     	; 0x8a <__bad_interrupt>
  2c:	d6 c0       	rjmp	.+428    	; 0x1da <__vector_22>
  2e:	2d c0       	rjmp	.+90     	; 0x8a <__bad_interrupt>
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__vector_24>
  32:	2b c0       	rjmp	.+86     	; 0x8a <__bad_interrupt>
  34:	0d c1       	rjmp	.+538    	; 0x250 <__vector_26>
  36:	29 c0       	rjmp	.+82     	; 0x8a <__bad_interrupt>
  38:	8b c0       	rjmp	.+278    	; 0x150 <__vector_28>
  3a:	27 c0       	rjmp	.+78     	; 0x8a <__bad_interrupt>

0000003c <__ctors_start>:
  3c:	8b 02       	muls	r24, r27

0000003e <__ctors_end>:
  3e:	1a 03       	fmul	r17, r18

00000040 <__dtors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf ef       	ldi	r28, 0xFF	; 255
  46:	d2 e0       	ldi	r29, 0x02	; 2
  48:	de bf       	out	0x3e, r29	; 62
  4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_copy_data>:
  4c:	11 e0       	ldi	r17, 0x01	; 1
  4e:	a0 e0       	ldi	r26, 0x00	; 0
  50:	b1 e0       	ldi	r27, 0x01	; 1
  52:	e4 eb       	ldi	r30, 0xB4	; 180
  54:	f8 e0       	ldi	r31, 0x08	; 8
  56:	02 c0       	rjmp	.+4      	; 0x5c <__do_copy_data+0x10>
  58:	05 90       	lpm	r0, Z+
  5a:	0d 92       	st	X+, r0
  5c:	a4 35       	cpi	r26, 0x54	; 84
  5e:	b1 07       	cpc	r27, r17
  60:	d9 f7       	brne	.-10     	; 0x58 <__do_copy_data+0xc>

00000062 <__do_clear_bss>:
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	a4 e5       	ldi	r26, 0x54	; 84
  66:	b1 e0       	ldi	r27, 0x01	; 1
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a5 3f       	cpi	r26, 0xF5	; 245
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	cf e1       	ldi	r28, 0x1F	; 31
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	03 c0       	rjmp	.+6      	; 0x80 <__do_global_ctors+0xe>
  7a:	21 97       	sbiw	r28, 0x01	; 1
  7c:	fe 01       	movw	r30, r28
  7e:	db d2       	rcall	.+1462   	; 0x636 <__tablejump2__>
  80:	ce 31       	cpi	r28, 0x1E	; 30
  82:	d1 07       	cpc	r29, r17
  84:	d1 f7       	brne	.-12     	; 0x7a <__do_global_ctors+0x8>
  86:	1f d1       	rcall	.+574    	; 0x2c6 <main>
  88:	09 c4       	rjmp	.+2066   	; 0x89c <__do_global_dtors>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
  8c:	08 95       	ret

0000008e <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
  8e:	08 95       	ret

00000090 <_ZN6opbots5InputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
  90:	6d d3       	rcall	.+1754   	; 0x76c <free>
  92:	08 95       	ret

00000094 <_ZN6opbots6OutputD0Ev>:
  94:	6b d3       	rcall	.+1750   	; 0x76c <free>
  96:	08 95       	ret

00000098 <__vector_13>:

} /* end of namespace opbots */

using namespace opbots;

ISR(ADC_vect) {
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
	cli();
  a4:	f8 94       	cli
	Analog::analog_low = ADCL;
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	80 93 ee 01 	sts	0x01EE, r24
	Analog::analogHigh = ADCH;
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 93 ef 01 	sts	0x01EF, r24
	Analog::new_value = true;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 f0 01 	sts	0x01F0, r24
	sei();
  b8:	78 94       	sei
};
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__vector_24>:

#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
		} else if (serial_port == 1) {
			Serial::uart1_txden = &txden_pin;
		}
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
  dc:	f8 94       	cli
		if (Serial::chars_left > 0) {
  de:	80 91 ab 01 	lds	r24, 0x01AB
  e2:	88 23       	and	r24, r24
  e4:	e1 f0       	breq	.+56     	; 0x11e <__vector_24+0x58>
			if (serial_port == 0) {
				UDR0 = Serial::transmitting[Serial::tx_head];
  e6:	e0 91 ac 01 	lds	r30, 0x01AC
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	e2 53       	subi	r30, 0x32	; 50
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	80 81       	ld	r24, Z
  f2:	80 93 80 00 	sts	0x0080, r24
			} else if (serial_port == 1) {
				UDR1 = Serial::transmitting[Serial::tx_head];
			}
			Serial::tx_head = (Serial::tx_head + 1) % TX_BUFFER_SIZE;
  f6:	80 91 ac 01 	lds	r24, 0x01AC
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	8f 71       	andi	r24, 0x1F	; 31
 100:	90 78       	andi	r25, 0x80	; 128
 102:	99 23       	and	r25, r25
 104:	24 f4       	brge	.+8      	; 0x10e <__vector_24+0x48>
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	80 6e       	ori	r24, 0xE0	; 224
 10a:	9f 6f       	ori	r25, 0xFF	; 255
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	80 93 ac 01 	sts	0x01AC, r24
			Serial::chars_left--;
 112:	80 91 ab 01 	lds	r24, 0x01AB
 116:	81 50       	subi	r24, 0x01	; 1
 118:	80 93 ab 01 	sts	0x01AB, r24
 11c:	0d c0       	rjmp	.+26     	; 0x138 <__vector_24+0x72>
		} else {
			if (serial_port == 0) {
				if (Serial::uart0_txden != nullptr) {
 11e:	e0 91 a6 01 	lds	r30, 0x01A6
 122:	f0 91 a7 01 	lds	r31, 0x01A7
 126:	30 97       	sbiw	r30, 0x00	; 0
 128:	39 f0       	breq	.+14     	; 0x138 <__vector_24+0x72>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
 12a:	a2 81       	ldd	r26, Z+2	; 0x02
 12c:	b3 81       	ldd	r27, Z+3	; 0x03
 12e:	9c 91       	ld	r25, X
 130:	81 85       	ldd	r24, Z+9	; 0x09
 132:	80 95       	com	r24
 134:	89 23       	and	r24, r25
 136:	8c 93       	st	X, r24
				if (Serial::uart1_txden != nullptr) {
					Serial::uart1_txden->clear();
				}
			}
		}
		sei();
 138:	78 94       	sei
	Analog::new_value = true;
	sei();
};

#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_28>:
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
		} else if (serial_port == 1) {
			Serial::uart1_txden = &txden_pin;
		}
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
 166:	f8 94       	cli
		if (Serial::chars_left > 0) {
 168:	80 91 ab 01 	lds	r24, 0x01AB
 16c:	88 23       	and	r24, r24
 16e:	e1 f0       	breq	.+56     	; 0x1a8 <__vector_28+0x58>
			if (serial_port == 0) {
				UDR0 = Serial::transmitting[Serial::tx_head];
			} else if (serial_port == 1) {
				UDR1 = Serial::transmitting[Serial::tx_head];
 170:	e0 91 ac 01 	lds	r30, 0x01AC
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e2 53       	subi	r30, 0x32	; 50
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	80 81       	ld	r24, Z
 17c:	80 93 90 00 	sts	0x0090, r24
			}
			Serial::tx_head = (Serial::tx_head + 1) % TX_BUFFER_SIZE;
 180:	80 91 ac 01 	lds	r24, 0x01AC
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	8f 71       	andi	r24, 0x1F	; 31
 18a:	90 78       	andi	r25, 0x80	; 128
 18c:	99 23       	and	r25, r25
 18e:	24 f4       	brge	.+8      	; 0x198 <__vector_28+0x48>
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	80 6e       	ori	r24, 0xE0	; 224
 194:	9f 6f       	ori	r25, 0xFF	; 255
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	80 93 ac 01 	sts	0x01AC, r24
			Serial::chars_left--;
 19c:	80 91 ab 01 	lds	r24, 0x01AB
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	80 93 ab 01 	sts	0x01AB, r24
 1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <__vector_28+0x72>
			if (serial_port == 0) {
				if (Serial::uart0_txden != nullptr) {
					Serial::uart0_txden->clear();
				}
			} else if(serial_port == 1) {
				if (Serial::uart1_txden != nullptr) {
 1a8:	e0 91 a4 01 	lds	r30, 0x01A4
 1ac:	f0 91 a5 01 	lds	r31, 0x01A5
 1b0:	30 97       	sbiw	r30, 0x00	; 0
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <__vector_28+0x72>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
 1b4:	a2 81       	ldd	r26, Z+2	; 0x02
 1b6:	b3 81       	ldd	r27, Z+3	; 0x03
 1b8:	9c 91       	ld	r25, X
 1ba:	81 85       	ldd	r24, Z+9	; 0x09
 1bc:	80 95       	com	r24
 1be:	89 23       	and	r24, r25
 1c0:	8c 93       	st	X, r24
				if (Serial::uart1_txden != nullptr) {
					Serial::uart1_txden->clear();
				}
			}
		}
		sei();
 1c2:	78 94       	sei
	sei();
};

#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_22>:
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
#endif

#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
 1f0:	f8 94       	cli
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
 1f2:	e6 e8       	ldi	r30, 0x86	; 134
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	80 83       	st	Z, r24
			Serial::receiving[Serial::rx_index] = UDR0;
 1fc:	e0 91 aa 01 	lds	r30, 0x01AA
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	a0 e8       	ldi	r26, 0x80	; 128
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	8c 91       	ld	r24, X
 208:	e2 55       	subi	r30, 0x52	; 82
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	80 83       	st	Z, r24
			UDR0 = '0';
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	8c 93       	st	X, r24
		} else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
			Serial::receiving[Serial::rx_index] = UDR1;			
			UDR1 = '1';
		}
		Serial::rx_index = (Serial::rx_index + 1) % RX_BUFFER_SIZE;
 212:	80 91 aa 01 	lds	r24, 0x01AA
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	8f 71       	andi	r24, 0x1F	; 31
 21c:	90 78       	andi	r25, 0x80	; 128
 21e:	99 23       	and	r25, r25
 220:	24 f4       	brge	.+8      	; 0x22a <__vector_22+0x50>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	80 6e       	ori	r24, 0xE0	; 224
 226:	9f 6f       	ori	r25, 0xFF	; 255
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	80 93 aa 01 	sts	0x01AA, r24
		Serial::chars_unread++;
 22e:	80 91 a8 01 	lds	r24, 0x01A8
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 a8 01 	sts	0x01A8, r24
		sei();
 238:	78 94       	sei
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
#endif

#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_26>:
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
 266:	f8 94       	cli
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
			Serial::receiving[Serial::rx_index] = UDR0;
			UDR0 = '0';
		} else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
 268:	e6 e9       	ldi	r30, 0x96	; 150
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	8f 77       	andi	r24, 0x7F	; 127
 270:	80 83       	st	Z, r24
			Serial::receiving[Serial::rx_index] = UDR1;			
 272:	e0 91 aa 01 	lds	r30, 0x01AA
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	a0 e9       	ldi	r26, 0x90	; 144
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	8c 91       	ld	r24, X
 27e:	e2 55       	subi	r30, 0x52	; 82
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	80 83       	st	Z, r24
			UDR1 = '1';
 284:	81 e3       	ldi	r24, 0x31	; 49
 286:	8c 93       	st	X, r24
		}
		Serial::rx_index = (Serial::rx_index + 1) % RX_BUFFER_SIZE;
 288:	80 91 aa 01 	lds	r24, 0x01AA
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	8f 71       	andi	r24, 0x1F	; 31
 292:	90 78       	andi	r25, 0x80	; 128
 294:	99 23       	and	r25, r25
 296:	24 f4       	brge	.+8      	; 0x2a0 <__vector_26+0x50>
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	80 6e       	ori	r24, 0xE0	; 224
 29c:	9f 6f       	ori	r25, 0xFF	; 255
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	80 93 aa 01 	sts	0x01AA, r24
		Serial::chars_unread++;
 2a4:	80 91 a8 01 	lds	r24, 0x01A8
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 a8 01 	sts	0x01A8, r24
		sei();
 2ae:	78 94       	sei
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
#endif

#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <main>:
Output tx_ttl		(&PORTA, PORTA5); // Used by USART1
Input  rx_ttl		(&PORTA, PORTA4); // Used by USART1
Input  s1			(&PORTA, PORTA0);
Input  s2			(&PORTB, PORTB2);

int main(void) {
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	ee 97       	sbiw	r28, 0x3e	; 62
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
#ifdef _AVR_ATTINY841_H_INCLUDED 
		if (serial_port == 1) {
			offset = 0x10;
		} 
#endif
		*(&UBRR0H+offset) = baud / 0xFF;
 2da:	10 92 82 00 	sts	0x0082, r1
		*(&UBRR0L+offset) = baud % 0xFF;
 2de:	3f ec       	ldi	r19, 0xCF	; 207
 2e0:	30 93 81 00 	sts	0x0081, r19
		*(&UCSR0A+offset) = 1<<(U2X0);
 2e4:	22 e0       	ldi	r18, 0x02	; 2
 2e6:	20 93 86 00 	sts	0x0086, r18
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
 2ea:	98 ed       	ldi	r25, 0xD8	; 216
 2ec:	90 93 85 00 	sts	0x0085, r25
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	80 93 84 00 	sts	0x0084, r24
			return '\0';
		}
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		if (serial_port == 0) {
			Serial::uart0_txden = &txden_pin;
 2f6:	aa e9       	ldi	r26, 0x9A	; 154
 2f8:	b1 e0       	ldi	r27, 0x01	; 1
 2fa:	b0 93 a7 01 	sts	0x01A7, r27
 2fe:	a0 93 a6 01 	sts	0x01A6, r26
#ifdef _AVR_ATTINY841_H_INCLUDED 
		if (serial_port == 1) {
			offset = 0x10;
		} 
#endif
		*(&UBRR0H+offset) = baud / 0xFF;
 302:	10 92 92 00 	sts	0x0092, r1
		*(&UBRR0L+offset) = baud % 0xFF;
 306:	30 93 91 00 	sts	0x0091, r19
		*(&UCSR0A+offset) = 1<<(U2X0);
 30a:	20 93 96 00 	sts	0x0096, r18
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
 30e:	90 93 95 00 	sts	0x0095, r25
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
 312:	80 93 94 00 	sts	0x0094, r24
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		if (serial_port == 0) {
			Serial::uart0_txden = &txden_pin;
		} else if (serial_port == 1) {
			Serial::uart1_txden = &txden_pin;
 316:	4c e7       	ldi	r20, 0x7C	; 124
 318:	51 e0       	ldi	r21, 0x01	; 1
 31a:	50 93 a5 01 	sts	0x01A5, r21
 31e:	40 93 a4 01 	sts	0x01A4, r20
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
 322:	12 96       	adiw	r26, 0x02	; 2
 324:	2d 91       	ld	r18, X+
 326:	3c 91       	ld	r19, X
 328:	13 97       	sbiw	r26, 0x03	; 3
 32a:	f9 01       	movw	r30, r18
 32c:	80 81       	ld	r24, Z
 32e:	19 96       	adiw	r26, 0x09	; 9
 330:	9c 91       	ld	r25, X
 332:	90 95       	com	r25
 334:	89 23       	and	r24, r25
 336:	80 83       	st	Z, r24
 338:	fa 01       	movw	r30, r20
 33a:	a2 81       	ldd	r26, Z+2	; 0x02
 33c:	b3 81       	ldd	r27, Z+3	; 0x03
 33e:	8c 91       	ld	r24, X
 340:	91 85       	ldd	r25, Z+9	; 0x09
 342:	90 95       	com	r25
 344:	89 23       	and	r24, r25
 346:	8c 93       	st	X, r24
	Serial::set_txden_pin(txden_485,0);
    Serial::init(9600,1);
	Serial::set_txden_pin(txden_ttl,1);
	txden_485.clear();
	txden_ttl.clear();
	char msg_485[] = "Hello from uart0 on rs485 bus\r\n";
 348:	80 e2       	ldi	r24, 0x20	; 32
 34a:	e6 e0       	ldi	r30, 0x06	; 6
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	de 01       	movw	r26, r28
 350:	11 96       	adiw	r26, 0x01	; 1
 352:	01 90       	ld	r0, Z+
 354:	0d 92       	st	X+, r0
 356:	8a 95       	dec	r24
 358:	e1 f7       	brne	.-8      	; 0x352 <__stack+0x53>
	char msg_ttl[] = "Hello from uart1 on ttl bus\r\n";
 35a:	8e e1       	ldi	r24, 0x1E	; 30
 35c:	e6 e2       	ldi	r30, 0x26	; 38
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	de 01       	movw	r26, r28
 362:	91 96       	adiw	r26, 0x21	; 33
 364:	01 90       	ld	r0, Z+
 366:	0d 92       	st	X+, r0
 368:	8a 95       	dec	r24
 36a:	e1 f7       	brne	.-8      	; 0x364 <__stack+0x65>
	const uint8_t size;
	uint8_t head;

public:
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0) {
		buffer = (T*)malloc(size);
 36c:	80 e1       	ldi	r24, 0x10	; 16
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	68 d1       	rcall	.+720    	; 0x642 <malloc>
	SimpleBuffer<char> test(16);
	sei();
 372:	78 94       	sei
 374:	ae 01       	movw	r20, r28
 376:	4f 5d       	subi	r20, 0xDF	; 223
 378:	5f 4f       	sbci	r21, 0xFF	; 255
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = buffer[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		}
		if (serial_port == 0) {
			UDR0 = transmitting[tx_head];
 37a:	68 94       	set
 37c:	aa 24       	eor	r10, r10
 37e:	a7 f8       	bld	r10, 7
 380:	b1 2c       	mov	r11, r1
 382:	be 01       	movw	r22, r28
 384:	61 5c       	subi	r22, 0xC1	; 193
 386:	7f 4f       	sbci	r23, 0xFF	; 255
		} else if (serial_port == 1) {
			UDR1 = transmitting[tx_head];
 388:	0f 2e       	mov	r0, r31
 38a:	f0 e9       	ldi	r31, 0x90	; 144
 38c:	cf 2e       	mov	r12, r31
 38e:	d1 2c       	mov	r13, r1
 390:	f0 2d       	mov	r31, r0
			}
		}
		sei();
	}
	static char get_char(bool* error_flag) {
		if (chars_unread > 0) {	
 392:	20 91 a8 01 	lds	r18, 0x01A8
 396:	22 23       	and	r18, r18
 398:	09 f4       	brne	.+2      	; 0x39c <__stack+0x9d>
 39a:	ba c0       	rjmp	.+372    	; 0x510 <__stack+0x211>
			*error_flag = false;
			return 	receiving[rx_head];
 39c:	20 91 a9 01 	lds	r18, 0x01A9
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	e2 55       	subi	r30, 0x52	; 82
 3a6:	fe 4f       	sbci	r31, 0xFE	; 254
 3a8:	20 81       	ld	r18, Z
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
 3aa:	f8 94       	cli
 3ac:	fe 01       	movw	r30, r28
 3ae:	31 96       	adiw	r30, 0x01	; 1
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = buffer[chars_added];
 3b0:	20 91 ad 01 	lds	r18, 0x01AD
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	f1 90       	ld	r15, Z+
 3b8:	d9 01       	movw	r26, r18
 3ba:	a2 53       	subi	r26, 0x32	; 50
 3bc:	be 4f       	sbci	r27, 0xFE	; 254
 3be:	fc 92       	st	X, r15
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
 3c0:	20 91 ad 01 	lds	r18, 0x01AD
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	2f 71       	andi	r18, 0x1F	; 31
 3cc:	30 78       	andi	r19, 0x80	; 128
 3ce:	33 23       	and	r19, r19
 3d0:	34 f4       	brge	.+12     	; 0x3de <__stack+0xdf>
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	31 09       	sbc	r19, r1
 3d6:	20 6e       	ori	r18, 0xE0	; 224
 3d8:	3f 6f       	ori	r19, 0xFF	; 255
 3da:	2f 5f       	subi	r18, 0xFF	; 255
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
 3de:	20 93 ad 01 	sts	0x01AD, r18
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
 3e2:	e4 17       	cp	r30, r20
 3e4:	f5 07       	cpc	r31, r21
 3e6:	21 f7       	brne	.-56     	; 0x3b0 <__stack+0xb1>
			transmitting[tx_index] = buffer[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		}
		if (serial_port == 0) {
			UDR0 = transmitting[tx_head];
 3e8:	20 91 ac 01 	lds	r18, 0x01AC
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	f9 01       	movw	r30, r18
 3f0:	e2 53       	subi	r30, 0x32	; 50
 3f2:	fe 4f       	sbci	r31, 0xFE	; 254
 3f4:	20 81       	ld	r18, Z
 3f6:	d5 01       	movw	r26, r10
 3f8:	2c 93       	st	X, r18
		} else if (serial_port == 1) {
			UDR1 = transmitting[tx_head];
		}
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
 3fa:	20 91 ac 01 	lds	r18, 0x01AC
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	2f 71       	andi	r18, 0x1F	; 31
 406:	30 78       	andi	r19, 0x80	; 128
 408:	33 23       	and	r19, r19
 40a:	34 f4       	brge	.+12     	; 0x418 <__stack+0x119>
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	31 09       	sbc	r19, r1
 410:	20 6e       	ori	r18, 0xE0	; 224
 412:	3f 6f       	ori	r19, 0xFF	; 255
 414:	2f 5f       	subi	r18, 0xFF	; 255
 416:	3f 4f       	sbci	r19, 0xFF	; 255
 418:	20 93 ac 01 	sts	0x01AC, r18
		chars_left += (char_count - 1);
 41c:	20 91 ab 01 	lds	r18, 0x01AB
 420:	21 5e       	subi	r18, 0xE1	; 225
 422:	20 93 ab 01 	sts	0x01AB, r18
		if (serial_port == 0) {
			if (Serial::uart0_txden != nullptr) {
 426:	20 91 a6 01 	lds	r18, 0x01A6
 42a:	30 91 a7 01 	lds	r19, 0x01A7
 42e:	21 15       	cp	r18, r1
 430:	31 05       	cpc	r19, r1
 432:	51 f0       	breq	.+20     	; 0x448 <__stack+0x149>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 434:	d9 01       	movw	r26, r18
 436:	12 96       	adiw	r26, 0x02	; 2
 438:	ed 91       	ld	r30, X+
 43a:	fc 91       	ld	r31, X
 43c:	13 97       	sbiw	r26, 0x03	; 3
 43e:	f0 80       	ld	r15, Z
 440:	19 96       	adiw	r26, 0x09	; 9
 442:	2c 91       	ld	r18, X
 444:	2f 29       	or	r18, r15
 446:	20 83       	st	Z, r18
		} else if(serial_port == 1) {
			if (Serial::uart1_txden != nullptr) {
				Serial::uart1_txden->set();
			}
		}
		sei();
 448:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44a:	bf ef       	ldi	r27, 0xFF	; 255
 44c:	e3 ed       	ldi	r30, 0xD3	; 211
 44e:	f0 e3       	ldi	r31, 0x30	; 48
 450:	b1 50       	subi	r27, 0x01	; 1
 452:	e0 40       	sbci	r30, 0x00	; 0
 454:	f0 40       	sbci	r31, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <__stack+0x151>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__stack+0x15b>
 45a:	00 00       	nop
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
 45c:	f8 94       	cli
 45e:	fa 01       	movw	r30, r20
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = buffer[chars_added];
 460:	20 91 ad 01 	lds	r18, 0x01AD
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	f1 90       	ld	r15, Z+
 468:	d9 01       	movw	r26, r18
 46a:	a2 53       	subi	r26, 0x32	; 50
 46c:	be 4f       	sbci	r27, 0xFE	; 254
 46e:	fc 92       	st	X, r15
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
 470:	20 91 ad 01 	lds	r18, 0x01AD
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	2f 71       	andi	r18, 0x1F	; 31
 47c:	30 78       	andi	r19, 0x80	; 128
 47e:	33 23       	and	r19, r19
 480:	34 f4       	brge	.+12     	; 0x48e <__stack+0x18f>
 482:	21 50       	subi	r18, 0x01	; 1
 484:	31 09       	sbc	r19, r1
 486:	20 6e       	ori	r18, 0xE0	; 224
 488:	3f 6f       	ori	r19, 0xFF	; 255
 48a:	2f 5f       	subi	r18, 0xFF	; 255
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
 48e:	20 93 ad 01 	sts	0x01AD, r18
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
 492:	e6 17       	cp	r30, r22
 494:	f7 07       	cpc	r31, r23
 496:	21 f7       	brne	.-56     	; 0x460 <__stack+0x161>
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		}
		if (serial_port == 0) {
			UDR0 = transmitting[tx_head];
		} else if (serial_port == 1) {
			UDR1 = transmitting[tx_head];
 498:	20 91 ac 01 	lds	r18, 0x01AC
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	22 53       	subi	r18, 0x32	; 50
 4a0:	3e 4f       	sbci	r19, 0xFE	; 254
 4a2:	d9 01       	movw	r26, r18
 4a4:	2c 91       	ld	r18, X
 4a6:	f6 01       	movw	r30, r12
 4a8:	20 83       	st	Z, r18
		}
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
 4aa:	20 91 ac 01 	lds	r18, 0x01AC
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	2f 5f       	subi	r18, 0xFF	; 255
 4b2:	3f 4f       	sbci	r19, 0xFF	; 255
 4b4:	2f 71       	andi	r18, 0x1F	; 31
 4b6:	30 78       	andi	r19, 0x80	; 128
 4b8:	33 23       	and	r19, r19
 4ba:	34 f4       	brge	.+12     	; 0x4c8 <__stack+0x1c9>
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	31 09       	sbc	r19, r1
 4c0:	20 6e       	ori	r18, 0xE0	; 224
 4c2:	3f 6f       	ori	r19, 0xFF	; 255
 4c4:	2f 5f       	subi	r18, 0xFF	; 255
 4c6:	3f 4f       	sbci	r19, 0xFF	; 255
 4c8:	20 93 ac 01 	sts	0x01AC, r18
		chars_left += (char_count - 1);
 4cc:	20 91 ab 01 	lds	r18, 0x01AB
 4d0:	23 5e       	subi	r18, 0xE3	; 227
 4d2:	20 93 ab 01 	sts	0x01AB, r18
		if (serial_port == 0) {
			if (Serial::uart0_txden != nullptr) {
				Serial::uart0_txden->set();
			}
		} else if(serial_port == 1) {
			if (Serial::uart1_txden != nullptr) {
 4d6:	20 91 a4 01 	lds	r18, 0x01A4
 4da:	30 91 a5 01 	lds	r19, 0x01A5
 4de:	21 15       	cp	r18, r1
 4e0:	31 05       	cpc	r19, r1
 4e2:	59 f0       	breq	.+22     	; 0x4fa <__stack+0x1fb>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 4e4:	d9 01       	movw	r26, r18
 4e6:	12 96       	adiw	r26, 0x02	; 2
 4e8:	0d 91       	ld	r16, X+
 4ea:	1c 91       	ld	r17, X
 4ec:	13 97       	sbiw	r26, 0x03	; 3
 4ee:	f8 01       	movw	r30, r16
 4f0:	f0 80       	ld	r15, Z
 4f2:	19 96       	adiw	r26, 0x09	; 9
 4f4:	2c 91       	ld	r18, X
 4f6:	2f 29       	or	r18, r15
 4f8:	20 83       	st	Z, r18
		} else if(serial_port == 1) {
			if (Serial::uart1_txden != nullptr) {
				Serial::uart1_txden->set();
			}
		}
		sei();
 4fa:	78 94       	sei
 4fc:	ff ef       	ldi	r31, 0xFF	; 255
 4fe:	23 ed       	ldi	r18, 0xD3	; 211
 500:	30 e3       	ldi	r19, 0x30	; 48
 502:	f1 50       	subi	r31, 0x01	; 1
 504:	20 40       	sbci	r18, 0x00	; 0
 506:	30 40       	sbci	r19, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <__stack+0x203>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__stack+0x20d>
 50c:	00 00       	nop
 50e:	41 cf       	rjmp	.-382    	; 0x392 <__stack+0x93>
			//TODO _raise_error(ErrorType::OUT_OF_MEMORY);
		}
	}
	inline void push(T element_copy) {
		if (head < size) {
			*(buffer+head) = element_copy;
 510:	dc 01       	movw	r26, r24
 512:	1c 92       	st	X, r1
 514:	4a cf       	rjmp	.-364    	; 0x3aa <__stack+0xab>

00000516 <_GLOBAL__sub_I__Znwj>:
		Serial::transmit(msg_485,sizeof(msg_485),0);
		_delay_ms(1000);
		Serial::transmit(msg_ttl,sizeof(msg_ttl),1);
		_delay_ms(1000);
    }
}
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 51e:	ea e9       	ldi	r30, 0x9A	; 154
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	4b e3       	ldi	r20, 0x3B	; 59
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	53 83       	std	Z+3, r21	; 0x03
 528:	42 83       	std	Z+2, r20	; 0x02
 52a:	2a e3       	ldi	r18, 0x3A	; 58
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	35 83       	std	Z+5, r19	; 0x05
 530:	24 83       	std	Z+4, r18	; 0x04
 532:	89 e3       	ldi	r24, 0x39	; 57
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	97 83       	std	Z+7, r25	; 0x07
 538:	86 83       	std	Z+6, r24	; 0x06
 53a:	63 e0       	ldi	r22, 0x03	; 3
 53c:	60 87       	std	Z+8, r22	; 0x08
 53e:	68 e0       	ldi	r22, 0x08	; 8
 540:	61 87       	std	Z+9, r22	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 542:	a8 e4       	ldi	r26, 0x48	; 72
 544:	b1 e0       	ldi	r27, 0x01	; 1
 546:	b1 83       	std	Z+1, r27	; 0x01
 548:	a0 83       	st	Z, r26
		// Set output low
		*port_out &= ~pin_mask;
 54a:	db 98       	cbi	0x1b, 3	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 54c:	d3 9a       	sbi	0x1a, 3	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 54e:	e0 e9       	ldi	r30, 0x90	; 144
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	53 83       	std	Z+3, r21	; 0x03
 554:	42 83       	std	Z+2, r20	; 0x02
 556:	35 83       	std	Z+5, r19	; 0x05
 558:	24 83       	std	Z+4, r18	; 0x04
 55a:	97 83       	std	Z+7, r25	; 0x07
 55c:	86 83       	std	Z+6, r24	; 0x06
 55e:	11 e0       	ldi	r17, 0x01	; 1
 560:	10 87       	std	Z+8, r17	; 0x08
 562:	d2 e0       	ldi	r29, 0x02	; 2
 564:	d1 87       	std	Z+9, r29	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 566:	b1 83       	std	Z+1, r27	; 0x01
 568:	a0 83       	st	Z, r26
		// Set output low
		*port_out &= ~pin_mask;
 56a:	d9 98       	cbi	0x1b, 1	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 56c:	d1 9a       	sbi	0x1a, 1	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 56e:	e6 e8       	ldi	r30, 0x86	; 134
 570:	f1 e0       	ldi	r31, 0x01	; 1
 572:	53 83       	std	Z+3, r21	; 0x03
 574:	42 83       	std	Z+2, r20	; 0x02
 576:	35 83       	std	Z+5, r19	; 0x05
 578:	24 83       	std	Z+4, r18	; 0x04
 57a:	97 83       	std	Z+7, r25	; 0x07
 57c:	86 83       	std	Z+6, r24	; 0x06
 57e:	d0 87       	std	Z+8, r29	; 0x08
 580:	c4 e0       	ldi	r28, 0x04	; 4
 582:	c1 87       	std	Z+9, r28	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 584:	60 e5       	ldi	r22, 0x50	; 80
 586:	71 e0       	ldi	r23, 0x01	; 1
 588:	71 83       	std	Z+1, r23	; 0x01
 58a:	60 83       	st	Z, r22
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 58c:	d2 98       	cbi	0x1a, 2	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 58e:	ec e7       	ldi	r30, 0x7C	; 124
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	53 83       	std	Z+3, r21	; 0x03
 594:	42 83       	std	Z+2, r20	; 0x02
 596:	35 83       	std	Z+5, r19	; 0x05
 598:	24 83       	std	Z+4, r18	; 0x04
 59a:	97 83       	std	Z+7, r25	; 0x07
 59c:	86 83       	std	Z+6, r24	; 0x06
 59e:	07 e0       	ldi	r16, 0x07	; 7
 5a0:	00 87       	std	Z+8, r16	; 0x08
 5a2:	00 e8       	ldi	r16, 0x80	; 128
 5a4:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 5a6:	b1 83       	std	Z+1, r27	; 0x01
 5a8:	a0 83       	st	Z, r26
		// Set output low
		*port_out &= ~pin_mask;
 5aa:	df 98       	cbi	0x1b, 7	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 5ac:	d7 9a       	sbi	0x1a, 7	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 5ae:	e2 e7       	ldi	r30, 0x72	; 114
 5b0:	f1 e0       	ldi	r31, 0x01	; 1
 5b2:	53 83       	std	Z+3, r21	; 0x03
 5b4:	42 83       	std	Z+2, r20	; 0x02
 5b6:	35 83       	std	Z+5, r19	; 0x05
 5b8:	24 83       	std	Z+4, r18	; 0x04
 5ba:	97 83       	std	Z+7, r25	; 0x07
 5bc:	86 83       	std	Z+6, r24	; 0x06
 5be:	05 e0       	ldi	r16, 0x05	; 5
 5c0:	00 87       	std	Z+8, r16	; 0x08
 5c2:	00 e2       	ldi	r16, 0x20	; 32
 5c4:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 5c6:	b1 83       	std	Z+1, r27	; 0x01
 5c8:	a0 83       	st	Z, r26
		// Set output low
		*port_out &= ~pin_mask;
 5ca:	dd 98       	cbi	0x1b, 5	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 5cc:	d5 9a       	sbi	0x1a, 5	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 5ce:	e8 e6       	ldi	r30, 0x68	; 104
 5d0:	f1 e0       	ldi	r31, 0x01	; 1
 5d2:	53 83       	std	Z+3, r21	; 0x03
 5d4:	42 83       	std	Z+2, r20	; 0x02
 5d6:	35 83       	std	Z+5, r19	; 0x05
 5d8:	24 83       	std	Z+4, r18	; 0x04
 5da:	97 83       	std	Z+7, r25	; 0x07
 5dc:	86 83       	std	Z+6, r24	; 0x06
 5de:	c0 87       	std	Z+8, r28	; 0x08
 5e0:	a0 e1       	ldi	r26, 0x10	; 16
 5e2:	a1 87       	std	Z+9, r26	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 5e4:	71 83       	std	Z+1, r23	; 0x01
 5e6:	60 83       	st	Z, r22
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 5e8:	d4 98       	cbi	0x1a, 4	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 5ea:	ee e5       	ldi	r30, 0x5E	; 94
 5ec:	f1 e0       	ldi	r31, 0x01	; 1
 5ee:	53 83       	std	Z+3, r21	; 0x03
 5f0:	42 83       	std	Z+2, r20	; 0x02
 5f2:	35 83       	std	Z+5, r19	; 0x05
 5f4:	24 83       	std	Z+4, r18	; 0x04
 5f6:	97 83       	std	Z+7, r25	; 0x07
 5f8:	86 83       	std	Z+6, r24	; 0x06
 5fa:	10 86       	std	Z+8, r1	; 0x08
 5fc:	11 87       	std	Z+9, r17	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 5fe:	71 83       	std	Z+1, r23	; 0x01
 600:	60 83       	st	Z, r22
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 602:	d0 98       	cbi	0x1a, 0	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 604:	e4 e5       	ldi	r30, 0x54	; 84
 606:	f1 e0       	ldi	r31, 0x01	; 1
 608:	88 e3       	ldi	r24, 0x38	; 56
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	93 83       	std	Z+3, r25	; 0x03
 60e:	82 83       	std	Z+2, r24	; 0x02
 610:	87 e3       	ldi	r24, 0x37	; 55
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	95 83       	std	Z+5, r25	; 0x05
 616:	84 83       	std	Z+4, r24	; 0x04
 618:	86 e3       	ldi	r24, 0x36	; 54
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	97 83       	std	Z+7, r25	; 0x07
 61e:	86 83       	std	Z+6, r24	; 0x06
 620:	d0 87       	std	Z+8, r29	; 0x08
 622:	c1 87       	std	Z+9, r28	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 624:	71 83       	std	Z+1, r23	; 0x01
 626:	60 83       	st	Z, r22
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 628:	ba 98       	cbi	0x17, 2	; 23
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <_GLOBAL__sub_D__Znwj>:
 634:	08 95       	ret

00000636 <__tablejump2__>:
 636:	ee 0f       	add	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	05 90       	lpm	r0, Z+
 63c:	f4 91       	lpm	r31, Z
 63e:	e0 2d       	mov	r30, r0
 640:	09 94       	ijmp

00000642 <malloc>:
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	82 30       	cpi	r24, 0x02	; 2
 648:	91 05       	cpc	r25, r1
 64a:	10 f4       	brcc	.+4      	; 0x650 <malloc+0xe>
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	e0 91 f3 01 	lds	r30, 0x01F3
 654:	f0 91 f4 01 	lds	r31, 0x01F4
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	c0 e0       	ldi	r28, 0x00	; 0
 65e:	d0 e0       	ldi	r29, 0x00	; 0
 660:	30 97       	sbiw	r30, 0x00	; 0
 662:	11 f1       	breq	.+68     	; 0x6a8 <malloc+0x66>
 664:	40 81       	ld	r20, Z
 666:	51 81       	ldd	r21, Z+1	; 0x01
 668:	48 17       	cp	r20, r24
 66a:	59 07       	cpc	r21, r25
 66c:	c0 f0       	brcs	.+48     	; 0x69e <malloc+0x5c>
 66e:	48 17       	cp	r20, r24
 670:	59 07       	cpc	r21, r25
 672:	61 f4       	brne	.+24     	; 0x68c <malloc+0x4a>
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	93 81       	ldd	r25, Z+3	; 0x03
 678:	20 97       	sbiw	r28, 0x00	; 0
 67a:	19 f0       	breq	.+6      	; 0x682 <malloc+0x40>
 67c:	9b 83       	std	Y+3, r25	; 0x03
 67e:	8a 83       	std	Y+2, r24	; 0x02
 680:	2b c0       	rjmp	.+86     	; 0x6d8 <malloc+0x96>
 682:	90 93 f4 01 	sts	0x01F4, r25
 686:	80 93 f3 01 	sts	0x01F3, r24
 68a:	26 c0       	rjmp	.+76     	; 0x6d8 <malloc+0x96>
 68c:	21 15       	cp	r18, r1
 68e:	31 05       	cpc	r19, r1
 690:	19 f0       	breq	.+6      	; 0x698 <malloc+0x56>
 692:	42 17       	cp	r20, r18
 694:	53 07       	cpc	r21, r19
 696:	18 f4       	brcc	.+6      	; 0x69e <malloc+0x5c>
 698:	9a 01       	movw	r18, r20
 69a:	be 01       	movw	r22, r28
 69c:	df 01       	movw	r26, r30
 69e:	ef 01       	movw	r28, r30
 6a0:	02 80       	ldd	r0, Z+2	; 0x02
 6a2:	f3 81       	ldd	r31, Z+3	; 0x03
 6a4:	e0 2d       	mov	r30, r0
 6a6:	dc cf       	rjmp	.-72     	; 0x660 <malloc+0x1e>
 6a8:	21 15       	cp	r18, r1
 6aa:	31 05       	cpc	r19, r1
 6ac:	09 f1       	breq	.+66     	; 0x6f0 <malloc+0xae>
 6ae:	28 1b       	sub	r18, r24
 6b0:	39 0b       	sbc	r19, r25
 6b2:	24 30       	cpi	r18, 0x04	; 4
 6b4:	31 05       	cpc	r19, r1
 6b6:	90 f4       	brcc	.+36     	; 0x6dc <malloc+0x9a>
 6b8:	12 96       	adiw	r26, 0x02	; 2
 6ba:	8d 91       	ld	r24, X+
 6bc:	9c 91       	ld	r25, X
 6be:	13 97       	sbiw	r26, 0x03	; 3
 6c0:	61 15       	cp	r22, r1
 6c2:	71 05       	cpc	r23, r1
 6c4:	21 f0       	breq	.+8      	; 0x6ce <malloc+0x8c>
 6c6:	fb 01       	movw	r30, r22
 6c8:	93 83       	std	Z+3, r25	; 0x03
 6ca:	82 83       	std	Z+2, r24	; 0x02
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <malloc+0x94>
 6ce:	90 93 f4 01 	sts	0x01F4, r25
 6d2:	80 93 f3 01 	sts	0x01F3, r24
 6d6:	fd 01       	movw	r30, r26
 6d8:	32 96       	adiw	r30, 0x02	; 2
 6da:	44 c0       	rjmp	.+136    	; 0x764 <malloc+0x122>
 6dc:	fd 01       	movw	r30, r26
 6de:	e2 0f       	add	r30, r18
 6e0:	f3 1f       	adc	r31, r19
 6e2:	81 93       	st	Z+, r24
 6e4:	91 93       	st	Z+, r25
 6e6:	22 50       	subi	r18, 0x02	; 2
 6e8:	31 09       	sbc	r19, r1
 6ea:	2d 93       	st	X+, r18
 6ec:	3c 93       	st	X, r19
 6ee:	3a c0       	rjmp	.+116    	; 0x764 <malloc+0x122>
 6f0:	20 91 f1 01 	lds	r18, 0x01F1
 6f4:	30 91 f2 01 	lds	r19, 0x01F2
 6f8:	23 2b       	or	r18, r19
 6fa:	41 f4       	brne	.+16     	; 0x70c <malloc+0xca>
 6fc:	20 91 02 01 	lds	r18, 0x0102
 700:	30 91 03 01 	lds	r19, 0x0103
 704:	30 93 f2 01 	sts	0x01F2, r19
 708:	20 93 f1 01 	sts	0x01F1, r18
 70c:	20 91 00 01 	lds	r18, 0x0100
 710:	30 91 01 01 	lds	r19, 0x0101
 714:	21 15       	cp	r18, r1
 716:	31 05       	cpc	r19, r1
 718:	41 f4       	brne	.+16     	; 0x72a <malloc+0xe8>
 71a:	2d b7       	in	r18, 0x3d	; 61
 71c:	3e b7       	in	r19, 0x3e	; 62
 71e:	40 91 04 01 	lds	r20, 0x0104
 722:	50 91 05 01 	lds	r21, 0x0105
 726:	24 1b       	sub	r18, r20
 728:	35 0b       	sbc	r19, r21
 72a:	e0 91 f1 01 	lds	r30, 0x01F1
 72e:	f0 91 f2 01 	lds	r31, 0x01F2
 732:	e2 17       	cp	r30, r18
 734:	f3 07       	cpc	r31, r19
 736:	a0 f4       	brcc	.+40     	; 0x760 <malloc+0x11e>
 738:	2e 1b       	sub	r18, r30
 73a:	3f 0b       	sbc	r19, r31
 73c:	28 17       	cp	r18, r24
 73e:	39 07       	cpc	r19, r25
 740:	78 f0       	brcs	.+30     	; 0x760 <malloc+0x11e>
 742:	ac 01       	movw	r20, r24
 744:	4e 5f       	subi	r20, 0xFE	; 254
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	24 17       	cp	r18, r20
 74a:	35 07       	cpc	r19, r21
 74c:	48 f0       	brcs	.+18     	; 0x760 <malloc+0x11e>
 74e:	4e 0f       	add	r20, r30
 750:	5f 1f       	adc	r21, r31
 752:	50 93 f2 01 	sts	0x01F2, r21
 756:	40 93 f1 01 	sts	0x01F1, r20
 75a:	81 93       	st	Z+, r24
 75c:	91 93       	st	Z+, r25
 75e:	02 c0       	rjmp	.+4      	; 0x764 <malloc+0x122>
 760:	e0 e0       	ldi	r30, 0x00	; 0
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	cf 01       	movw	r24, r30
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <free>:
 76c:	0f 93       	push	r16
 76e:	1f 93       	push	r17
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	00 97       	sbiw	r24, 0x00	; 0
 776:	09 f4       	brne	.+2      	; 0x77a <free+0xe>
 778:	8c c0       	rjmp	.+280    	; 0x892 <free+0x126>
 77a:	fc 01       	movw	r30, r24
 77c:	32 97       	sbiw	r30, 0x02	; 2
 77e:	13 82       	std	Z+3, r1	; 0x03
 780:	12 82       	std	Z+2, r1	; 0x02
 782:	00 91 f3 01 	lds	r16, 0x01F3
 786:	10 91 f4 01 	lds	r17, 0x01F4
 78a:	01 15       	cp	r16, r1
 78c:	11 05       	cpc	r17, r1
 78e:	81 f4       	brne	.+32     	; 0x7b0 <free+0x44>
 790:	20 81       	ld	r18, Z
 792:	31 81       	ldd	r19, Z+1	; 0x01
 794:	82 0f       	add	r24, r18
 796:	93 1f       	adc	r25, r19
 798:	20 91 f1 01 	lds	r18, 0x01F1
 79c:	30 91 f2 01 	lds	r19, 0x01F2
 7a0:	28 17       	cp	r18, r24
 7a2:	39 07       	cpc	r19, r25
 7a4:	79 f5       	brne	.+94     	; 0x804 <free+0x98>
 7a6:	f0 93 f2 01 	sts	0x01F2, r31
 7aa:	e0 93 f1 01 	sts	0x01F1, r30
 7ae:	71 c0       	rjmp	.+226    	; 0x892 <free+0x126>
 7b0:	d8 01       	movw	r26, r16
 7b2:	40 e0       	ldi	r20, 0x00	; 0
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	ae 17       	cp	r26, r30
 7b8:	bf 07       	cpc	r27, r31
 7ba:	50 f4       	brcc	.+20     	; 0x7d0 <free+0x64>
 7bc:	12 96       	adiw	r26, 0x02	; 2
 7be:	2d 91       	ld	r18, X+
 7c0:	3c 91       	ld	r19, X
 7c2:	13 97       	sbiw	r26, 0x03	; 3
 7c4:	ad 01       	movw	r20, r26
 7c6:	21 15       	cp	r18, r1
 7c8:	31 05       	cpc	r19, r1
 7ca:	09 f1       	breq	.+66     	; 0x80e <free+0xa2>
 7cc:	d9 01       	movw	r26, r18
 7ce:	f3 cf       	rjmp	.-26     	; 0x7b6 <free+0x4a>
 7d0:	9d 01       	movw	r18, r26
 7d2:	da 01       	movw	r26, r20
 7d4:	33 83       	std	Z+3, r19	; 0x03
 7d6:	22 83       	std	Z+2, r18	; 0x02
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	86 0f       	add	r24, r22
 7de:	97 1f       	adc	r25, r23
 7e0:	82 17       	cp	r24, r18
 7e2:	93 07       	cpc	r25, r19
 7e4:	69 f4       	brne	.+26     	; 0x800 <free+0x94>
 7e6:	ec 01       	movw	r28, r24
 7e8:	28 81       	ld	r18, Y
 7ea:	39 81       	ldd	r19, Y+1	; 0x01
 7ec:	26 0f       	add	r18, r22
 7ee:	37 1f       	adc	r19, r23
 7f0:	2e 5f       	subi	r18, 0xFE	; 254
 7f2:	3f 4f       	sbci	r19, 0xFF	; 255
 7f4:	31 83       	std	Z+1, r19	; 0x01
 7f6:	20 83       	st	Z, r18
 7f8:	8a 81       	ldd	r24, Y+2	; 0x02
 7fa:	9b 81       	ldd	r25, Y+3	; 0x03
 7fc:	93 83       	std	Z+3, r25	; 0x03
 7fe:	82 83       	std	Z+2, r24	; 0x02
 800:	45 2b       	or	r20, r21
 802:	29 f4       	brne	.+10     	; 0x80e <free+0xa2>
 804:	f0 93 f4 01 	sts	0x01F4, r31
 808:	e0 93 f3 01 	sts	0x01F3, r30
 80c:	42 c0       	rjmp	.+132    	; 0x892 <free+0x126>
 80e:	13 96       	adiw	r26, 0x03	; 3
 810:	fc 93       	st	X, r31
 812:	ee 93       	st	-X, r30
 814:	12 97       	sbiw	r26, 0x02	; 2
 816:	ed 01       	movw	r28, r26
 818:	49 91       	ld	r20, Y+
 81a:	59 91       	ld	r21, Y+
 81c:	9e 01       	movw	r18, r28
 81e:	24 0f       	add	r18, r20
 820:	35 1f       	adc	r19, r21
 822:	e2 17       	cp	r30, r18
 824:	f3 07       	cpc	r31, r19
 826:	71 f4       	brne	.+28     	; 0x844 <free+0xd8>
 828:	80 81       	ld	r24, Z
 82a:	91 81       	ldd	r25, Z+1	; 0x01
 82c:	84 0f       	add	r24, r20
 82e:	95 1f       	adc	r25, r21
 830:	02 96       	adiw	r24, 0x02	; 2
 832:	11 96       	adiw	r26, 0x01	; 1
 834:	9c 93       	st	X, r25
 836:	8e 93       	st	-X, r24
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	13 96       	adiw	r26, 0x03	; 3
 83e:	9c 93       	st	X, r25
 840:	8e 93       	st	-X, r24
 842:	12 97       	sbiw	r26, 0x02	; 2
 844:	e0 e0       	ldi	r30, 0x00	; 0
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	d8 01       	movw	r26, r16
 84a:	12 96       	adiw	r26, 0x02	; 2
 84c:	8d 91       	ld	r24, X+
 84e:	9c 91       	ld	r25, X
 850:	13 97       	sbiw	r26, 0x03	; 3
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	19 f0       	breq	.+6      	; 0x85c <free+0xf0>
 856:	f8 01       	movw	r30, r16
 858:	8c 01       	movw	r16, r24
 85a:	f6 cf       	rjmp	.-20     	; 0x848 <free+0xdc>
 85c:	8d 91       	ld	r24, X+
 85e:	9c 91       	ld	r25, X
 860:	98 01       	movw	r18, r16
 862:	2e 5f       	subi	r18, 0xFE	; 254
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	82 0f       	add	r24, r18
 868:	93 1f       	adc	r25, r19
 86a:	20 91 f1 01 	lds	r18, 0x01F1
 86e:	30 91 f2 01 	lds	r19, 0x01F2
 872:	28 17       	cp	r18, r24
 874:	39 07       	cpc	r19, r25
 876:	69 f4       	brne	.+26     	; 0x892 <free+0x126>
 878:	30 97       	sbiw	r30, 0x00	; 0
 87a:	29 f4       	brne	.+10     	; 0x886 <free+0x11a>
 87c:	10 92 f4 01 	sts	0x01F4, r1
 880:	10 92 f3 01 	sts	0x01F3, r1
 884:	02 c0       	rjmp	.+4      	; 0x88a <free+0x11e>
 886:	13 82       	std	Z+3, r1	; 0x03
 888:	12 82       	std	Z+2, r1	; 0x02
 88a:	10 93 f2 01 	sts	0x01F2, r17
 88e:	00 93 f1 01 	sts	0x01F1, r16
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	08 95       	ret

0000089c <__do_global_dtors>:
 89c:	10 e0       	ldi	r17, 0x00	; 0
 89e:	cf e1       	ldi	r28, 0x1F	; 31
 8a0:	d0 e0       	ldi	r29, 0x00	; 0
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__do_global_dtors+0xe>
 8a4:	fe 01       	movw	r30, r28
 8a6:	c7 de       	rcall	.-626    	; 0x636 <__tablejump2__>
 8a8:	21 96       	adiw	r28, 0x01	; 1
 8aa:	c0 32       	cpi	r28, 0x20	; 32
 8ac:	d1 07       	cpc	r29, r17
 8ae:	d1 f7       	brne	.-12     	; 0x8a4 <__do_global_dtors+0x8>
 8b0:	f8 94       	cli

000008b2 <__stop_program>:
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__stop_program>
