
P0005_v2_drivetrain_rev1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000a72  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080012c  0080012c  00000b32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000905  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000410  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046d  00000000  00000000  00001973  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bc  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000430  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_18>
  4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_20>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  9e:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
volatile uint8_t Analog::analogHigh = 0;
volatile uint8_t Analog::analogLow = 0;
volatile uint8_t Analog::lastChannel = 0; // Channels 0-7 for ATmega328P

ISR(ADC_vect) 
{	
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	Analog::analogLow = ADCL;
  b2:	80 91 78 00 	lds	r24, 0x0078
  b6:	80 93 2c 01 	sts	0x012C, r24
	Analog::analogHigh = ADCH;
  ba:	80 91 79 00 	lds	r24, 0x0079
  be:	80 93 2d 01 	sts	0x012D, r24
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <_ZN6Analog13selectChannelEh>:

void Analog::selectChannel (uint8_t n) 
{		
	DDRC = DDRC & ~_BV(n);
  ce:	97 b1       	in	r25, 0x07	; 7
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	9a 01       	movw	r18, r20
  d6:	08 2e       	mov	r0, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN6Analog13selectChannelEh+0x10>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <_ZN6Analog13selectChannelEh+0xc>
  e2:	20 95       	com	r18
  e4:	29 23       	and	r18, r25
  e6:	27 b9       	out	0x07, r18	; 7
	ADMUX  = _BV(REFS0) | n; // AREF = AVCC
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 93 7c 00 	sts	0x007C, r24
	//ADMUX  = n; // uses AREF voltage, channel n selected
	ADCSRA = _BV(ADATE) | _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
  ee:	8f ea       	ldi	r24, 0xAF	; 175
  f0:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // free running
  f4:	10 92 7b 00 	sts	0x007B, r1
  f8:	08 95       	ret

000000fa <_ZN6Analog15startConversionEv>:
}
	
void Analog::startConversion() { ADCSRA |= _BV(ADSC); }
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <_ZN6Analog8getValueEv>:
	
void Analog::stopConversion() { ADCSRA &= ~_BV(ADSC); }
	
bool Analog::conversionComplete() { return ADCSRA & _BV(ADSC); }
	
uint16_t Analog::getValue() { return ((Analog::analogHigh << 8)) | (Analog::analogLow); }
 106:	20 91 2d 01 	lds	r18, 0x012D
 10a:	80 91 2c 01 	lds	r24, 0x012C
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	92 2b       	or	r25, r18
 112:	08 95       	ret

00000114 <__vector_20>:

volatile char* _S3P_transmitting;
volatile uint8_t _S3P_charsLeft = 0, _S3P_charsToSend = 0;

ISR(USART_TX_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	_S3P_TX_DISABLE();
 124:	2a 98       	cbi	0x05, 2	; 5
 126:	e1 ec       	ldi	r30, 0xC1	; 193
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	87 7f       	andi	r24, 0xF7	; 247
 12e:	80 83       	st	Z, r24
	UCSR0B &= ~_BV(TXCIE0); // disables TX complete interrupt
 130:	80 81       	ld	r24, Z
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	80 83       	st	Z, r24
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_19>:
		S3P::transmit();
	}
}

ISR(USART_UDRE_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	UDR0 = _S3P_transmitting[_S3P_charsToSend - _S3P_charsLeft];
 158:	e0 91 2e 01 	lds	r30, 0x012E
 15c:	80 91 2f 01 	lds	r24, 0x012F
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e8 1b       	sub	r30, r24
 164:	f1 09       	sbc	r31, r1
 166:	80 91 30 01 	lds	r24, 0x0130
 16a:	90 91 31 01 	lds	r25, 0x0131
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	80 81       	ld	r24, Z
 174:	80 93 c6 00 	sts	0x00C6, r24
	_S3P_charsLeft--;
 178:	80 91 2f 01 	lds	r24, 0x012F
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	80 93 2f 01 	sts	0x012F, r24
	
	if(_S3P_charsLeft == 0)
 182:	80 91 2f 01 	lds	r24, 0x012F
 186:	81 11       	cpse	r24, r1
 188:	08 c0       	rjmp	.+16     	; 0x19a <__vector_19+0x54>
	{
		UCSR0B &= ~_BV(UDRIE0);  // disable buffer empty interrupt
 18a:	e1 ec       	ldi	r30, 0xC1	; 193
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	80 83       	st	Z, r24
		UCSR0B |= _BV(TXCIE0); // enables TX complete interrupt
 194:	80 81       	ld	r24, Z
 196:	80 64       	ori	r24, 0x40	; 64
 198:	80 83       	st	Z, r24
	}
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <_ZN3S3P4initEPVvhS1_h>:
		volatile void* in,
		uint8_t inSize,
		volatile void* out,
		uint8_t outSize)
{
	_S3P_input = (char*)in;
 1ac:	90 93 39 01 	sts	0x0139, r25
 1b0:	80 93 38 01 	sts	0x0138, r24
	_S3P_inputSize = inSize;
 1b4:	60 93 36 01 	sts	0x0136, r22
	_S3P_output = (char*)out;
 1b8:	50 93 35 01 	sts	0x0135, r21
 1bc:	40 93 34 01 	sts	0x0134, r20
	_S3P_outputSize = outSize;
 1c0:	20 93 33 01 	sts	0x0133, r18
		volatile void* out,
		uint8_t outSize)
{	
	setbuffers(in, inSize, out, outSize);
	
	DDRB |= _BV(TXDEN_PIN) + _BV(5);
 1c4:	84 b1       	in	r24, 0x04	; 4
 1c6:	84 62       	ori	r24, 0x24	; 36
 1c8:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~_BV(TXDEN_PIN);
 1ca:	2a 98       	cbi	0x05, 2	; 5
	
	UBRR0H = 0;
 1cc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 7; // 250000 baud
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = _BV(U2X0); // Double speed UART
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0); // Receive interrupt, RX/TX enable
 1dc:	88 e9       	ldi	r24, 0x98	; 152
 1de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data, no parity, 1 stop bit
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	80 93 c2 00 	sts	0x00C2, r24
 1e8:	08 95       	ret

000001ea <_ZN3S3P8transmitEPVvh>:
void S3P::transmit(volatile void* toTransmit, uint8_t charCount) 
{
	// sends between 1 and 255 chars
	// uses USART_TX and USART_UDRE interrupts to advance through chars
	
	_S3P_transmitting = (char*)toTransmit;
 1ea:	90 93 31 01 	sts	0x0131, r25
 1ee:	80 93 30 01 	sts	0x0130, r24
	_S3P_charsToSend = charCount;
 1f2:	60 93 2e 01 	sts	0x012E, r22
	_S3P_charsLeft = _S3P_charsToSend - 1;
 1f6:	80 91 2e 01 	lds	r24, 0x012E
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	80 93 2f 01 	sts	0x012F, r24
	
	_S3P_TX_ENABLE();
 200:	e1 ec       	ldi	r30, 0xC1	; 193
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	88 60       	ori	r24, 0x08	; 8
 208:	80 83       	st	Z, r24
 20a:	2a 9a       	sbi	0x05, 2	; 5
	
	UDR0 = _S3P_transmitting[0]; // start transmission of first char
 20c:	e0 91 30 01 	lds	r30, 0x0130
 210:	f0 91 31 01 	lds	r31, 0x0131
 214:	80 81       	ld	r24, Z
 216:	80 93 c6 00 	sts	0x00C6, r24
	
	if (_S3P_charsLeft > 0)
 21a:	80 91 2f 01 	lds	r24, 0x012F
 21e:	88 23       	and	r24, r24
 220:	31 f0       	breq	.+12     	; 0x22e <_ZN3S3P8transmitEPVvh+0x44>
	{
		UCSR0B |= _BV(UDRIE0); // enable buffer empty interrupt
 222:	e1 ec       	ldi	r30, 0xC1	; 193
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	80 83       	st	Z, r24
 22c:	08 95       	ret
	}
	else
	{
		UCSR0B |= _BV(TXCIE0); // enables TX complete interrupt
 22e:	e1 ec       	ldi	r30, 0xC1	; 193
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <_ZN3S3P8transmitEv>:
	}
}

void S3P::transmit()
{
	transmit(_S3P_output, _S3P_outputSize);
 23a:	60 91 33 01 	lds	r22, 0x0133
 23e:	80 91 34 01 	lds	r24, 0x0134
 242:	90 91 35 01 	lds	r25, 0x0135
 246:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN3S3P8transmitEPVvh>
 24a:	08 95       	ret

0000024c <__vector_18>:
	_S3P_TX_DISABLE();
	UCSR0B &= ~_BV(TXCIE0); // disables TX complete interrupt
}

ISR(USART_RX_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	char received = UDR0; // clears flag
 26e:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(_S3P_memoryIndex < _S3P_delimiterLength)
 272:	80 91 32 01 	lds	r24, 0x0132
 276:	90 91 3a 01 	lds	r25, 0x013A
 27a:	89 17       	cp	r24, r25
 27c:	78 f4       	brcc	.+30     	; 0x29c <__vector_18+0x50>
	{
		_S3P_memoryIndex = (received == _S3P_delimiter[_S3P_memoryIndex])? 
 27e:	e0 91 3b 01 	lds	r30, 0x013B
 282:	f0 91 3c 01 	lds	r31, 0x013C
 286:	e8 0f       	add	r30, r24
 288:	f1 1d       	adc	r31, r1
			_S3P_memoryIndex + 1 : 0;
 28a:	90 81       	ld	r25, Z
 28c:	92 13       	cpse	r25, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <__vector_18+0x48>
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	01 c0       	rjmp	.+2      	; 0x296 <__vector_18+0x4a>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	80 93 32 01 	sts	0x0132, r24
 29a:	12 c0       	rjmp	.+36     	; 0x2c0 <__vector_18+0x74>
	}
	else if(_S3P_inputIndex < _S3P_inputSize)
 29c:	80 91 37 01 	lds	r24, 0x0137
 2a0:	90 91 36 01 	lds	r25, 0x0136
 2a4:	89 17       	cp	r24, r25
 2a6:	60 f4       	brcc	.+24     	; 0x2c0 <__vector_18+0x74>
	{
		_S3P_input[_S3P_inputIndex] = received;
 2a8:	e0 91 38 01 	lds	r30, 0x0138
 2ac:	f0 91 39 01 	lds	r31, 0x0139
 2b0:	e8 0f       	add	r30, r24
 2b2:	f1 1d       	adc	r31, r1
 2b4:	20 83       	st	Z, r18
		_S3P_inputIndex++;
 2b6:	80 91 37 01 	lds	r24, 0x0137
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 37 01 	sts	0x0137, r24
	}
	if(_S3P_inputIndex == _S3P_inputSize)
 2c0:	90 91 37 01 	lds	r25, 0x0137
 2c4:	80 91 36 01 	lds	r24, 0x0136
 2c8:	98 13       	cpse	r25, r24
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__vector_18+0x8c>
	{
		_S3P_memoryIndex = 0;
 2cc:	10 92 32 01 	sts	0x0132, r1
		_S3P_inputIndex = 0;
 2d0:	10 92 37 01 	sts	0x0137, r1
		S3P::transmit();
 2d4:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN3S3P8transmitEv>
	}
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <_ZN3S3P12setDelimiterEPKv>:
	_S3P_outputSize = outSize;
}

void S3P::setDelimiter(const void* delimiter)
{
	_S3P_delimiter = (char*)delimiter;
 2fa:	90 93 3c 01 	sts	0x013C, r25
 2fe:	80 93 3b 01 	sts	0x013B, r24
	_S3P_delimiterLength = sizeof(delimiter);
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	80 93 3a 01 	sts	0x013A, r24
 308:	08 95       	ret

0000030a <__vector_14>:
};

uint8_t PWM_count;
int8_t PWM_signal;

ISR(TIMER0_COMPA_vect) {
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
	
	// 128-step resolution PWM 
	
	if((PWM_count = (PWM_count + 1) % 128) == 0) {
 320:	80 91 3e 01 	lds	r24, 0x013E
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	8f 77       	andi	r24, 0x7F	; 127
 32a:	90 78       	andi	r25, 0x80	; 128
 32c:	ac 01       	movw	r20, r24
 32e:	80 93 3e 01 	sts	0x013E, r24
 332:	81 11       	cpse	r24, r1
 334:	09 c0       	rjmp	.+18     	; 0x348 <__vector_14+0x3e>
		
		measured_vel = encoder_count;
 336:	80 91 42 01 	lds	r24, 0x0142
 33a:	80 93 41 01 	sts	0x0141, r24
		encoder_count = 0;	
 33e:	10 92 42 01 	sts	0x0142, r1
		counted = true;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 3f 01 	sts	0x013F, r24
	}
	
	PORTD = PWM_signal > PWM_count? 
 348:	20 91 3d 01 	lds	r18, 0x013D
 34c:	33 27       	eor	r19, r19
 34e:	27 fd       	sbrc	r18, 7
 350:	30 95       	com	r19
 352:	ca 01       	movw	r24, r20
 354:	99 27       	eor	r25, r25
		PIND | MOTOR_PIN : PIND & ~MOTOR_PIN;
 356:	82 17       	cp	r24, r18
 358:	93 07       	cpc	r25, r19
 35a:	1c f4       	brge	.+6      	; 0x362 <__vector_14+0x58>
 35c:	89 b1       	in	r24, 0x09	; 9
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	02 c0       	rjmp	.+4      	; 0x366 <__vector_14+0x5c>
 362:	89 b1       	in	r24, 0x09	; 9
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	8b b9       	out	0x0b, r24	; 11
}
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_3>:

ISR(PCINT0_vect) {
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	
	PORTD = PIND | _BV(PD5);
 392:	89 b1       	in	r24, 0x09	; 9
 394:	80 62       	ori	r24, 0x20	; 32
 396:	8b b9       	out	0x0b, r24	; 11
	encoder_count += encoder_matrix[PINB & 0b11][last_state];
 398:	83 b1       	in	r24, 0x03	; 3
 39a:	e0 91 40 01 	lds	r30, 0x0140
 39e:	20 91 42 01 	lds	r18, 0x0142
 3a2:	83 70       	andi	r24, 0x03	; 3
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	94 e0       	ldi	r25, 0x04	; 4
 3a8:	89 9f       	mul	r24, r25
 3aa:	e0 0d       	add	r30, r0
 3ac:	f1 1d       	adc	r31, r1
 3ae:	11 24       	eor	r1, r1
 3b0:	e5 5e       	subi	r30, 0xE5	; 229
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 81       	ld	r24, Z
 3b6:	99 27       	eor	r25, r25
 3b8:	87 fd       	sbrc	r24, 7
 3ba:	90 95       	com	r25
 3bc:	82 0f       	add	r24, r18
 3be:	91 1d       	adc	r25, r1
 3c0:	27 fd       	sbrc	r18, 7
 3c2:	9a 95       	dec	r25
 3c4:	80 93 42 01 	sts	0x0142, r24
	last_state = PINB & 0b11;
 3c8:	83 b1       	in	r24, 0x03	; 3
 3ca:	83 70       	andi	r24, 0x03	; 3
 3cc:	80 93 40 01 	sts	0x0140, r24
	PORTD = PIND & ~_BV(PD5);
 3d0:	89 b1       	in	r24, 0x09	; 9
 3d2:	8f 7d       	andi	r24, 0xDF	; 223
 3d4:	8b b9       	out	0x0b, r24	; 11
}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <main>:

int main(void) 
{
	DDRB = 0; // PORTB as inputs
 3ea:	14 b8       	out	0x04, r1	; 4
	DDRD = 0xff; // PORTD as outputs
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	8a b9       	out	0x0a, r24	; 10
	
	PCICR = _BV(PCIE0); // allow PCINT0-7 interrupts
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 = _BV(PCINT1) | _BV(PCINT0); // trigger interrupts on changes to PB0 and PB1 
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	80 93 6b 00 	sts	0x006B, r24

	TCCR0A = _BV(WGM01); // CTC mode
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	84 bd       	out	0x24, r24	; 36
	TCCR0B = PRESCALER_8;
 400:	85 bd       	out	0x25, r24	; 37
	OCR0A = TIMER_COUNT; // calculated above to give 4/663 of a second
 402:	9d e5       	ldi	r25, 0x5D	; 93
 404:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = _BV(OCIE1A); // enable timer interrupt
 406:	80 93 6e 00 	sts	0x006E, r24
	
	// Sets the buffers to the structs in local "dataStructures.h" and initializes UART
	S3P::init(DATA_STRUCTURE_REF);
 40a:	20 e1       	ldi	r18, 0x10	; 16
 40c:	43 e4       	ldi	r20, 0x43	; 67
 40e:	51 e0       	ldi	r21, 0x01	; 1
 410:	63 e0       	ldi	r22, 0x03	; 3
 412:	83 e5       	ldi	r24, 0x53	; 83
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN3S3P4initEPVvhS1_h>
	S3P::setDelimiter("@V2DT");
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN3S3P12setDelimiterEPKv>
	
	sei(); // set interrupts
 422:	78 94       	sei
	
	DDRC = 0x3f;
 424:	8f e3       	ldi	r24, 0x3F	; 63
 426:	87 b9       	out	0x07, r24	; 7
	Analog::selectChannel(5);
 428:	85 e0       	ldi	r24, 0x05	; 5
 42a:	0e 94 67 00 	call	0xce	; 0xce <_ZN6Analog13selectChannelEh>
	Analog::startConversion();
 42e:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZN6Analog15startConversionEv>
    while(1) 
	{
		PORTC = 0x00;
		_delay_ms(DELAY);
		
		sprintf((char*)dataOut.output, "V on: %d\n", Analog::getValue());
 432:	0f 2e       	mov	r0, r31
 434:	f6 e0       	ldi	r31, 0x06	; 6
 436:	ef 2e       	mov	r14, r31
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	ff 2e       	mov	r15, r31
 43c:	f0 2d       	mov	r31, r0
 43e:	c3 e4       	ldi	r28, 0x43	; 67
 440:	d1 e0       	ldi	r29, 0x01	; 1
		_delay_ms(DELAY);
		
		PORTC = 0x00;
		_delay_ms(DELAY);
		
		sprintf((char*)dataOut.output, "V off: %d\n", Analog::getValue());
 442:	00 e1       	ldi	r16, 0x10	; 16
 444:	11 e0       	ldi	r17, 0x01	; 1
	
	#define DELAY 100
	
    while(1) 
	{
		PORTC = 0x00;
 446:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	81 ee       	ldi	r24, 0xE1	; 225
 44c:	94 e0       	ldi	r25, 0x04	; 4
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <main+0x64>
 456:	00 c0       	rjmp	.+0      	; 0x458 <main+0x6e>
 458:	00 00       	nop
		_delay_ms(DELAY);
		
		sprintf((char*)dataOut.output, "V on: %d\n", Analog::getValue());
 45a:	0e 94 83 00 	call	0x106	; 0x106 <_ZN6Analog8getValueEv>
 45e:	9f 93       	push	r25
 460:	8f 93       	push	r24
 462:	ff 92       	push	r15
 464:	ef 92       	push	r14
 466:	df 93       	push	r29
 468:	cf 93       	push	r28
 46a:	0e 94 66 02 	call	0x4cc	; 0x4cc <sprintf>
 46e:	9f ef       	ldi	r25, 0xFF	; 255
 470:	21 ee       	ldi	r18, 0xE1	; 225
 472:	84 e0       	ldi	r24, 0x04	; 4
 474:	91 50       	subi	r25, 0x01	; 1
 476:	20 40       	sbci	r18, 0x00	; 0
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <main+0x8a>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <main+0x94>
 47e:	00 00       	nop
		
		_delay_ms(DELAY);
		
		PORTC = 0x00;
 480:	18 b8       	out	0x08, r1	; 8
 482:	9f ef       	ldi	r25, 0xFF	; 255
 484:	21 ee       	ldi	r18, 0xE1	; 225
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	91 50       	subi	r25, 0x01	; 1
 48a:	20 40       	sbci	r18, 0x00	; 0
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <main+0x9e>
 490:	00 c0       	rjmp	.+0      	; 0x492 <main+0xa8>
 492:	00 00       	nop
		_delay_ms(DELAY);
		
		sprintf((char*)dataOut.output, "V off: %d\n", Analog::getValue());
 494:	0e 94 83 00 	call	0x106	; 0x106 <_ZN6Analog8getValueEv>
 498:	9f 93       	push	r25
 49a:	8f 93       	push	r24
 49c:	1f 93       	push	r17
 49e:	0f 93       	push	r16
 4a0:	df 93       	push	r29
 4a2:	cf 93       	push	r28
 4a4:	0e 94 66 02 	call	0x4cc	; 0x4cc <sprintf>
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	91 ee       	ldi	r25, 0xE1	; 225
 4ac:	24 e0       	ldi	r18, 0x04	; 4
 4ae:	81 50       	subi	r24, 0x01	; 1
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	20 40       	sbci	r18, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <main+0xc4>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <main+0xce>
 4b8:	00 00       	nop
 4ba:	8d b7       	in	r24, 0x3d	; 61
 4bc:	9e b7       	in	r25, 0x3e	; 62
 4be:	0c 96       	adiw	r24, 0x0c	; 12
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	9e bf       	out	0x3e, r25	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	8d bf       	out	0x3d, r24	; 61
 4ca:	bd cf       	rjmp	.-134    	; 0x446 <main+0x5c>

000004cc <sprintf>:
 4cc:	ae e0       	ldi	r26, 0x0E	; 14
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	ec e6       	ldi	r30, 0x6C	; 108
 4d2:	f2 e0       	ldi	r31, 0x02	; 2
 4d4:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__prologue_saves__+0x1c>
 4d8:	0d 89       	ldd	r16, Y+21	; 0x15
 4da:	1e 89       	ldd	r17, Y+22	; 0x16
 4dc:	86 e0       	ldi	r24, 0x06	; 6
 4de:	8c 83       	std	Y+4, r24	; 0x04
 4e0:	1a 83       	std	Y+2, r17	; 0x02
 4e2:	09 83       	std	Y+1, r16	; 0x01
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	9f e7       	ldi	r25, 0x7F	; 127
 4e8:	9e 83       	std	Y+6, r25	; 0x06
 4ea:	8d 83       	std	Y+5, r24	; 0x05
 4ec:	ae 01       	movw	r20, r28
 4ee:	47 5e       	subi	r20, 0xE7	; 231
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
 4f2:	6f 89       	ldd	r22, Y+23	; 0x17
 4f4:	78 8d       	ldd	r23, Y+24	; 0x18
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0e 94 88 02 	call	0x510	; 0x510 <vfprintf>
 4fe:	ef 81       	ldd	r30, Y+7	; 0x07
 500:	f8 85       	ldd	r31, Y+8	; 0x08
 502:	e0 0f       	add	r30, r16
 504:	f1 1f       	adc	r31, r17
 506:	10 82       	st	Z, r1
 508:	2e 96       	adiw	r28, 0x0e	; 14
 50a:	e4 e0       	ldi	r30, 0x04	; 4
 50c:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__epilogue_restores__+0x1c>

00000510 <vfprintf>:
 510:	ac e0       	ldi	r26, 0x0C	; 12
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	ee e8       	ldi	r30, 0x8E	; 142
 516:	f2 e0       	ldi	r31, 0x02	; 2
 518:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__prologue_saves__>
 51c:	7c 01       	movw	r14, r24
 51e:	6b 01       	movw	r12, r22
 520:	8a 01       	movw	r16, r20
 522:	fc 01       	movw	r30, r24
 524:	17 82       	std	Z+7, r1	; 0x07
 526:	16 82       	std	Z+6, r1	; 0x06
 528:	83 81       	ldd	r24, Z+3	; 0x03
 52a:	81 ff       	sbrs	r24, 1
 52c:	bd c1       	rjmp	.+890    	; 0x8a8 <vfprintf+0x398>
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	4c 01       	movw	r8, r24
 534:	f7 01       	movw	r30, r14
 536:	93 81       	ldd	r25, Z+3	; 0x03
 538:	f6 01       	movw	r30, r12
 53a:	93 fd       	sbrc	r25, 3
 53c:	85 91       	lpm	r24, Z+
 53e:	93 ff       	sbrs	r25, 3
 540:	81 91       	ld	r24, Z+
 542:	6f 01       	movw	r12, r30
 544:	88 23       	and	r24, r24
 546:	09 f4       	brne	.+2      	; 0x54a <vfprintf+0x3a>
 548:	ab c1       	rjmp	.+854    	; 0x8a0 <vfprintf+0x390>
 54a:	85 32       	cpi	r24, 0x25	; 37
 54c:	39 f4       	brne	.+14     	; 0x55c <vfprintf+0x4c>
 54e:	93 fd       	sbrc	r25, 3
 550:	85 91       	lpm	r24, Z+
 552:	93 ff       	sbrs	r25, 3
 554:	81 91       	ld	r24, Z+
 556:	6f 01       	movw	r12, r30
 558:	85 32       	cpi	r24, 0x25	; 37
 55a:	29 f4       	brne	.+10     	; 0x566 <vfprintf+0x56>
 55c:	b7 01       	movw	r22, r14
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 564:	e7 cf       	rjmp	.-50     	; 0x534 <vfprintf+0x24>
 566:	51 2c       	mov	r5, r1
 568:	31 2c       	mov	r3, r1
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	20 32       	cpi	r18, 0x20	; 32
 56e:	a0 f4       	brcc	.+40     	; 0x598 <vfprintf+0x88>
 570:	8b 32       	cpi	r24, 0x2B	; 43
 572:	69 f0       	breq	.+26     	; 0x58e <vfprintf+0x7e>
 574:	30 f4       	brcc	.+12     	; 0x582 <vfprintf+0x72>
 576:	80 32       	cpi	r24, 0x20	; 32
 578:	59 f0       	breq	.+22     	; 0x590 <vfprintf+0x80>
 57a:	83 32       	cpi	r24, 0x23	; 35
 57c:	69 f4       	brne	.+26     	; 0x598 <vfprintf+0x88>
 57e:	20 61       	ori	r18, 0x10	; 16
 580:	2c c0       	rjmp	.+88     	; 0x5da <vfprintf+0xca>
 582:	8d 32       	cpi	r24, 0x2D	; 45
 584:	39 f0       	breq	.+14     	; 0x594 <vfprintf+0x84>
 586:	80 33       	cpi	r24, 0x30	; 48
 588:	39 f4       	brne	.+14     	; 0x598 <vfprintf+0x88>
 58a:	21 60       	ori	r18, 0x01	; 1
 58c:	26 c0       	rjmp	.+76     	; 0x5da <vfprintf+0xca>
 58e:	22 60       	ori	r18, 0x02	; 2
 590:	24 60       	ori	r18, 0x04	; 4
 592:	23 c0       	rjmp	.+70     	; 0x5da <vfprintf+0xca>
 594:	28 60       	ori	r18, 0x08	; 8
 596:	21 c0       	rjmp	.+66     	; 0x5da <vfprintf+0xca>
 598:	27 fd       	sbrc	r18, 7
 59a:	27 c0       	rjmp	.+78     	; 0x5ea <vfprintf+0xda>
 59c:	30 ed       	ldi	r19, 0xD0	; 208
 59e:	38 0f       	add	r19, r24
 5a0:	3a 30       	cpi	r19, 0x0A	; 10
 5a2:	78 f4       	brcc	.+30     	; 0x5c2 <vfprintf+0xb2>
 5a4:	26 ff       	sbrs	r18, 6
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <vfprintf+0xa4>
 5a8:	fa e0       	ldi	r31, 0x0A	; 10
 5aa:	5f 9e       	mul	r5, r31
 5ac:	30 0d       	add	r19, r0
 5ae:	11 24       	eor	r1, r1
 5b0:	53 2e       	mov	r5, r19
 5b2:	13 c0       	rjmp	.+38     	; 0x5da <vfprintf+0xca>
 5b4:	8a e0       	ldi	r24, 0x0A	; 10
 5b6:	38 9e       	mul	r3, r24
 5b8:	30 0d       	add	r19, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	33 2e       	mov	r3, r19
 5be:	20 62       	ori	r18, 0x20	; 32
 5c0:	0c c0       	rjmp	.+24     	; 0x5da <vfprintf+0xca>
 5c2:	8e 32       	cpi	r24, 0x2E	; 46
 5c4:	21 f4       	brne	.+8      	; 0x5ce <vfprintf+0xbe>
 5c6:	26 fd       	sbrc	r18, 6
 5c8:	6b c1       	rjmp	.+726    	; 0x8a0 <vfprintf+0x390>
 5ca:	20 64       	ori	r18, 0x40	; 64
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <vfprintf+0xca>
 5ce:	8c 36       	cpi	r24, 0x6C	; 108
 5d0:	11 f4       	brne	.+4      	; 0x5d6 <vfprintf+0xc6>
 5d2:	20 68       	ori	r18, 0x80	; 128
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0xca>
 5d6:	88 36       	cpi	r24, 0x68	; 104
 5d8:	41 f4       	brne	.+16     	; 0x5ea <vfprintf+0xda>
 5da:	f6 01       	movw	r30, r12
 5dc:	93 fd       	sbrc	r25, 3
 5de:	85 91       	lpm	r24, Z+
 5e0:	93 ff       	sbrs	r25, 3
 5e2:	81 91       	ld	r24, Z+
 5e4:	6f 01       	movw	r12, r30
 5e6:	81 11       	cpse	r24, r1
 5e8:	c1 cf       	rjmp	.-126    	; 0x56c <vfprintf+0x5c>
 5ea:	98 2f       	mov	r25, r24
 5ec:	9f 7d       	andi	r25, 0xDF	; 223
 5ee:	95 54       	subi	r25, 0x45	; 69
 5f0:	93 30       	cpi	r25, 0x03	; 3
 5f2:	28 f4       	brcc	.+10     	; 0x5fe <vfprintf+0xee>
 5f4:	0c 5f       	subi	r16, 0xFC	; 252
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	ff e3       	ldi	r31, 0x3F	; 63
 5fa:	f9 83       	std	Y+1, r31	; 0x01
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <vfprintf+0x108>
 5fe:	83 36       	cpi	r24, 0x63	; 99
 600:	31 f0       	breq	.+12     	; 0x60e <vfprintf+0xfe>
 602:	83 37       	cpi	r24, 0x73	; 115
 604:	71 f0       	breq	.+28     	; 0x622 <vfprintf+0x112>
 606:	83 35       	cpi	r24, 0x53	; 83
 608:	09 f0       	breq	.+2      	; 0x60c <vfprintf+0xfc>
 60a:	5b c0       	rjmp	.+182    	; 0x6c2 <vfprintf+0x1b2>
 60c:	22 c0       	rjmp	.+68     	; 0x652 <vfprintf+0x142>
 60e:	f8 01       	movw	r30, r16
 610:	80 81       	ld	r24, Z
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	0e 5f       	subi	r16, 0xFE	; 254
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	44 24       	eor	r4, r4
 61a:	43 94       	inc	r4
 61c:	51 2c       	mov	r5, r1
 61e:	54 01       	movw	r10, r8
 620:	15 c0       	rjmp	.+42     	; 0x64c <vfprintf+0x13c>
 622:	38 01       	movw	r6, r16
 624:	f2 e0       	ldi	r31, 0x02	; 2
 626:	6f 0e       	add	r6, r31
 628:	71 1c       	adc	r7, r1
 62a:	f8 01       	movw	r30, r16
 62c:	a0 80       	ld	r10, Z
 62e:	b1 80       	ldd	r11, Z+1	; 0x01
 630:	26 ff       	sbrs	r18, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <vfprintf+0x12a>
 634:	65 2d       	mov	r22, r5
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <vfprintf+0x12e>
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	c5 01       	movw	r24, r10
 640:	2c 87       	std	Y+12, r18	; 0x0c
 642:	0e 94 65 04 	call	0x8ca	; 0x8ca <strnlen>
 646:	2c 01       	movw	r4, r24
 648:	83 01       	movw	r16, r6
 64a:	2c 85       	ldd	r18, Y+12	; 0x0c
 64c:	2f 77       	andi	r18, 0x7F	; 127
 64e:	22 2e       	mov	r2, r18
 650:	17 c0       	rjmp	.+46     	; 0x680 <vfprintf+0x170>
 652:	38 01       	movw	r6, r16
 654:	f2 e0       	ldi	r31, 0x02	; 2
 656:	6f 0e       	add	r6, r31
 658:	71 1c       	adc	r7, r1
 65a:	f8 01       	movw	r30, r16
 65c:	a0 80       	ld	r10, Z
 65e:	b1 80       	ldd	r11, Z+1	; 0x01
 660:	26 ff       	sbrs	r18, 6
 662:	03 c0       	rjmp	.+6      	; 0x66a <vfprintf+0x15a>
 664:	65 2d       	mov	r22, r5
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <vfprintf+0x15e>
 66a:	6f ef       	ldi	r22, 0xFF	; 255
 66c:	7f ef       	ldi	r23, 0xFF	; 255
 66e:	c5 01       	movw	r24, r10
 670:	2c 87       	std	Y+12, r18	; 0x0c
 672:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <strnlen_P>
 676:	2c 01       	movw	r4, r24
 678:	2c 85       	ldd	r18, Y+12	; 0x0c
 67a:	20 68       	ori	r18, 0x80	; 128
 67c:	22 2e       	mov	r2, r18
 67e:	83 01       	movw	r16, r6
 680:	23 fc       	sbrc	r2, 3
 682:	1b c0       	rjmp	.+54     	; 0x6ba <vfprintf+0x1aa>
 684:	83 2d       	mov	r24, r3
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	48 16       	cp	r4, r24
 68a:	59 06       	cpc	r5, r25
 68c:	b0 f4       	brcc	.+44     	; 0x6ba <vfprintf+0x1aa>
 68e:	b7 01       	movw	r22, r14
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 698:	3a 94       	dec	r3
 69a:	f4 cf       	rjmp	.-24     	; 0x684 <vfprintf+0x174>
 69c:	f5 01       	movw	r30, r10
 69e:	27 fc       	sbrc	r2, 7
 6a0:	85 91       	lpm	r24, Z+
 6a2:	27 fe       	sbrs	r2, 7
 6a4:	81 91       	ld	r24, Z+
 6a6:	5f 01       	movw	r10, r30
 6a8:	b7 01       	movw	r22, r14
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 6b0:	31 10       	cpse	r3, r1
 6b2:	3a 94       	dec	r3
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	4f 1a       	sub	r4, r31
 6b8:	51 08       	sbc	r5, r1
 6ba:	41 14       	cp	r4, r1
 6bc:	51 04       	cpc	r5, r1
 6be:	71 f7       	brne	.-36     	; 0x69c <vfprintf+0x18c>
 6c0:	e5 c0       	rjmp	.+458    	; 0x88c <vfprintf+0x37c>
 6c2:	84 36       	cpi	r24, 0x64	; 100
 6c4:	11 f0       	breq	.+4      	; 0x6ca <vfprintf+0x1ba>
 6c6:	89 36       	cpi	r24, 0x69	; 105
 6c8:	39 f5       	brne	.+78     	; 0x718 <vfprintf+0x208>
 6ca:	f8 01       	movw	r30, r16
 6cc:	27 ff       	sbrs	r18, 7
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <vfprintf+0x1ce>
 6d0:	60 81       	ld	r22, Z
 6d2:	71 81       	ldd	r23, Z+1	; 0x01
 6d4:	82 81       	ldd	r24, Z+2	; 0x02
 6d6:	93 81       	ldd	r25, Z+3	; 0x03
 6d8:	0c 5f       	subi	r16, 0xFC	; 252
 6da:	1f 4f       	sbci	r17, 0xFF	; 255
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <vfprintf+0x1de>
 6de:	60 81       	ld	r22, Z
 6e0:	71 81       	ldd	r23, Z+1	; 0x01
 6e2:	88 27       	eor	r24, r24
 6e4:	77 fd       	sbrc	r23, 7
 6e6:	80 95       	com	r24
 6e8:	98 2f       	mov	r25, r24
 6ea:	0e 5f       	subi	r16, 0xFE	; 254
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	2f 76       	andi	r18, 0x6F	; 111
 6f0:	b2 2e       	mov	r11, r18
 6f2:	97 ff       	sbrs	r25, 7
 6f4:	09 c0       	rjmp	.+18     	; 0x708 <vfprintf+0x1f8>
 6f6:	90 95       	com	r25
 6f8:	80 95       	com	r24
 6fa:	70 95       	com	r23
 6fc:	61 95       	neg	r22
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	20 68       	ori	r18, 0x80	; 128
 706:	b2 2e       	mov	r11, r18
 708:	2a e0       	ldi	r18, 0x0A	; 10
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	a4 01       	movw	r20, r8
 70e:	0e 94 a2 04 	call	0x944	; 0x944 <__ultoa_invert>
 712:	a8 2e       	mov	r10, r24
 714:	a8 18       	sub	r10, r8
 716:	44 c0       	rjmp	.+136    	; 0x7a0 <vfprintf+0x290>
 718:	85 37       	cpi	r24, 0x75	; 117
 71a:	29 f4       	brne	.+10     	; 0x726 <vfprintf+0x216>
 71c:	2f 7e       	andi	r18, 0xEF	; 239
 71e:	b2 2e       	mov	r11, r18
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	25 c0       	rjmp	.+74     	; 0x770 <vfprintf+0x260>
 726:	f2 2f       	mov	r31, r18
 728:	f9 7f       	andi	r31, 0xF9	; 249
 72a:	bf 2e       	mov	r11, r31
 72c:	8f 36       	cpi	r24, 0x6F	; 111
 72e:	c1 f0       	breq	.+48     	; 0x760 <vfprintf+0x250>
 730:	18 f4       	brcc	.+6      	; 0x738 <vfprintf+0x228>
 732:	88 35       	cpi	r24, 0x58	; 88
 734:	79 f0       	breq	.+30     	; 0x754 <vfprintf+0x244>
 736:	b4 c0       	rjmp	.+360    	; 0x8a0 <vfprintf+0x390>
 738:	80 37       	cpi	r24, 0x70	; 112
 73a:	19 f0       	breq	.+6      	; 0x742 <vfprintf+0x232>
 73c:	88 37       	cpi	r24, 0x78	; 120
 73e:	21 f0       	breq	.+8      	; 0x748 <vfprintf+0x238>
 740:	af c0       	rjmp	.+350    	; 0x8a0 <vfprintf+0x390>
 742:	2f 2f       	mov	r18, r31
 744:	20 61       	ori	r18, 0x10	; 16
 746:	b2 2e       	mov	r11, r18
 748:	b4 fe       	sbrs	r11, 4
 74a:	0d c0       	rjmp	.+26     	; 0x766 <vfprintf+0x256>
 74c:	8b 2d       	mov	r24, r11
 74e:	84 60       	ori	r24, 0x04	; 4
 750:	b8 2e       	mov	r11, r24
 752:	09 c0       	rjmp	.+18     	; 0x766 <vfprintf+0x256>
 754:	24 ff       	sbrs	r18, 4
 756:	0a c0       	rjmp	.+20     	; 0x76c <vfprintf+0x25c>
 758:	9f 2f       	mov	r25, r31
 75a:	96 60       	ori	r25, 0x06	; 6
 75c:	b9 2e       	mov	r11, r25
 75e:	06 c0       	rjmp	.+12     	; 0x76c <vfprintf+0x25c>
 760:	28 e0       	ldi	r18, 0x08	; 8
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	05 c0       	rjmp	.+10     	; 0x770 <vfprintf+0x260>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x260>
 76c:	20 e1       	ldi	r18, 0x10	; 16
 76e:	32 e0       	ldi	r19, 0x02	; 2
 770:	f8 01       	movw	r30, r16
 772:	b7 fe       	sbrs	r11, 7
 774:	07 c0       	rjmp	.+14     	; 0x784 <vfprintf+0x274>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	0c 5f       	subi	r16, 0xFC	; 252
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	06 c0       	rjmp	.+12     	; 0x790 <vfprintf+0x280>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 5f       	subi	r16, 0xFE	; 254
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	a4 01       	movw	r20, r8
 792:	0e 94 a2 04 	call	0x944	; 0x944 <__ultoa_invert>
 796:	a8 2e       	mov	r10, r24
 798:	a8 18       	sub	r10, r8
 79a:	fb 2d       	mov	r31, r11
 79c:	ff 77       	andi	r31, 0x7F	; 127
 79e:	bf 2e       	mov	r11, r31
 7a0:	b6 fe       	sbrs	r11, 6
 7a2:	0b c0       	rjmp	.+22     	; 0x7ba <vfprintf+0x2aa>
 7a4:	2b 2d       	mov	r18, r11
 7a6:	2e 7f       	andi	r18, 0xFE	; 254
 7a8:	a5 14       	cp	r10, r5
 7aa:	50 f4       	brcc	.+20     	; 0x7c0 <vfprintf+0x2b0>
 7ac:	b4 fe       	sbrs	r11, 4
 7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <vfprintf+0x2b4>
 7b0:	b2 fc       	sbrc	r11, 2
 7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <vfprintf+0x2b4>
 7b4:	2b 2d       	mov	r18, r11
 7b6:	2e 7e       	andi	r18, 0xEE	; 238
 7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <vfprintf+0x2b4>
 7ba:	7a 2c       	mov	r7, r10
 7bc:	2b 2d       	mov	r18, r11
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <vfprintf+0x2b6>
 7c0:	7a 2c       	mov	r7, r10
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <vfprintf+0x2b6>
 7c4:	75 2c       	mov	r7, r5
 7c6:	24 ff       	sbrs	r18, 4
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <vfprintf+0x2d4>
 7ca:	fe 01       	movw	r30, r28
 7cc:	ea 0d       	add	r30, r10
 7ce:	f1 1d       	adc	r31, r1
 7d0:	80 81       	ld	r24, Z
 7d2:	80 33       	cpi	r24, 0x30	; 48
 7d4:	11 f4       	brne	.+4      	; 0x7da <vfprintf+0x2ca>
 7d6:	29 7e       	andi	r18, 0xE9	; 233
 7d8:	09 c0       	rjmp	.+18     	; 0x7ec <vfprintf+0x2dc>
 7da:	22 ff       	sbrs	r18, 2
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x2da>
 7de:	73 94       	inc	r7
 7e0:	73 94       	inc	r7
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <vfprintf+0x2dc>
 7e4:	82 2f       	mov	r24, r18
 7e6:	86 78       	andi	r24, 0x86	; 134
 7e8:	09 f0       	breq	.+2      	; 0x7ec <vfprintf+0x2dc>
 7ea:	73 94       	inc	r7
 7ec:	23 fd       	sbrc	r18, 3
 7ee:	13 c0       	rjmp	.+38     	; 0x816 <vfprintf+0x306>
 7f0:	20 ff       	sbrs	r18, 0
 7f2:	06 c0       	rjmp	.+12     	; 0x800 <vfprintf+0x2f0>
 7f4:	5a 2c       	mov	r5, r10
 7f6:	73 14       	cp	r7, r3
 7f8:	18 f4       	brcc	.+6      	; 0x800 <vfprintf+0x2f0>
 7fa:	53 0c       	add	r5, r3
 7fc:	57 18       	sub	r5, r7
 7fe:	73 2c       	mov	r7, r3
 800:	73 14       	cp	r7, r3
 802:	68 f4       	brcc	.+26     	; 0x81e <vfprintf+0x30e>
 804:	b7 01       	movw	r22, r14
 806:	80 e2       	ldi	r24, 0x20	; 32
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	2c 87       	std	Y+12, r18	; 0x0c
 80c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 810:	73 94       	inc	r7
 812:	2c 85       	ldd	r18, Y+12	; 0x0c
 814:	f5 cf       	rjmp	.-22     	; 0x800 <vfprintf+0x2f0>
 816:	73 14       	cp	r7, r3
 818:	10 f4       	brcc	.+4      	; 0x81e <vfprintf+0x30e>
 81a:	37 18       	sub	r3, r7
 81c:	01 c0       	rjmp	.+2      	; 0x820 <vfprintf+0x310>
 81e:	31 2c       	mov	r3, r1
 820:	24 ff       	sbrs	r18, 4
 822:	12 c0       	rjmp	.+36     	; 0x848 <vfprintf+0x338>
 824:	b7 01       	movw	r22, r14
 826:	80 e3       	ldi	r24, 0x30	; 48
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	2c 87       	std	Y+12, r18	; 0x0c
 82c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 830:	2c 85       	ldd	r18, Y+12	; 0x0c
 832:	22 ff       	sbrs	r18, 2
 834:	17 c0       	rjmp	.+46     	; 0x864 <vfprintf+0x354>
 836:	21 ff       	sbrs	r18, 1
 838:	03 c0       	rjmp	.+6      	; 0x840 <vfprintf+0x330>
 83a:	88 e5       	ldi	r24, 0x58	; 88
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0x334>
 840:	88 e7       	ldi	r24, 0x78	; 120
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	b7 01       	movw	r22, r14
 846:	0c c0       	rjmp	.+24     	; 0x860 <vfprintf+0x350>
 848:	82 2f       	mov	r24, r18
 84a:	86 78       	andi	r24, 0x86	; 134
 84c:	59 f0       	breq	.+22     	; 0x864 <vfprintf+0x354>
 84e:	21 fd       	sbrc	r18, 1
 850:	02 c0       	rjmp	.+4      	; 0x856 <vfprintf+0x346>
 852:	80 e2       	ldi	r24, 0x20	; 32
 854:	01 c0       	rjmp	.+2      	; 0x858 <vfprintf+0x348>
 856:	8b e2       	ldi	r24, 0x2B	; 43
 858:	27 fd       	sbrc	r18, 7
 85a:	8d e2       	ldi	r24, 0x2D	; 45
 85c:	b7 01       	movw	r22, r14
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 864:	a5 14       	cp	r10, r5
 866:	38 f4       	brcc	.+14     	; 0x876 <vfprintf+0x366>
 868:	b7 01       	movw	r22, r14
 86a:	80 e3       	ldi	r24, 0x30	; 48
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 872:	5a 94       	dec	r5
 874:	f7 cf       	rjmp	.-18     	; 0x864 <vfprintf+0x354>
 876:	aa 94       	dec	r10
 878:	f4 01       	movw	r30, r8
 87a:	ea 0d       	add	r30, r10
 87c:	f1 1d       	adc	r31, r1
 87e:	80 81       	ld	r24, Z
 880:	b7 01       	movw	r22, r14
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 888:	a1 10       	cpse	r10, r1
 88a:	f5 cf       	rjmp	.-22     	; 0x876 <vfprintf+0x366>
 88c:	33 20       	and	r3, r3
 88e:	09 f4       	brne	.+2      	; 0x892 <vfprintf+0x382>
 890:	51 ce       	rjmp	.-862    	; 0x534 <vfprintf+0x24>
 892:	b7 01       	movw	r22, r14
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fputc>
 89c:	3a 94       	dec	r3
 89e:	f6 cf       	rjmp	.-20     	; 0x88c <vfprintf+0x37c>
 8a0:	f7 01       	movw	r30, r14
 8a2:	86 81       	ldd	r24, Z+6	; 0x06
 8a4:	97 81       	ldd	r25, Z+7	; 0x07
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <vfprintf+0x39c>
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	9f ef       	ldi	r25, 0xFF	; 255
 8ac:	2c 96       	adiw	r28, 0x0c	; 12
 8ae:	e2 e1       	ldi	r30, 0x12	; 18
 8b0:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__epilogue_restores__>

000008b4 <strnlen_P>:
 8b4:	fc 01       	movw	r30, r24
 8b6:	05 90       	lpm	r0, Z+
 8b8:	61 50       	subi	r22, 0x01	; 1
 8ba:	70 40       	sbci	r23, 0x00	; 0
 8bc:	01 10       	cpse	r0, r1
 8be:	d8 f7       	brcc	.-10     	; 0x8b6 <strnlen_P+0x2>
 8c0:	80 95       	com	r24
 8c2:	90 95       	com	r25
 8c4:	8e 0f       	add	r24, r30
 8c6:	9f 1f       	adc	r25, r31
 8c8:	08 95       	ret

000008ca <strnlen>:
 8ca:	fc 01       	movw	r30, r24
 8cc:	61 50       	subi	r22, 0x01	; 1
 8ce:	70 40       	sbci	r23, 0x00	; 0
 8d0:	01 90       	ld	r0, Z+
 8d2:	01 10       	cpse	r0, r1
 8d4:	d8 f7       	brcc	.-10     	; 0x8cc <strnlen+0x2>
 8d6:	80 95       	com	r24
 8d8:	90 95       	com	r25
 8da:	8e 0f       	add	r24, r30
 8dc:	9f 1f       	adc	r25, r31
 8de:	08 95       	ret

000008e0 <fputc>:
 8e0:	0f 93       	push	r16
 8e2:	1f 93       	push	r17
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	18 2f       	mov	r17, r24
 8ea:	09 2f       	mov	r16, r25
 8ec:	eb 01       	movw	r28, r22
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	81 fd       	sbrc	r24, 1
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <fputc+0x1a>
 8f4:	8f ef       	ldi	r24, 0xFF	; 255
 8f6:	9f ef       	ldi	r25, 0xFF	; 255
 8f8:	20 c0       	rjmp	.+64     	; 0x93a <__stack+0x3b>
 8fa:	82 ff       	sbrs	r24, 2
 8fc:	10 c0       	rjmp	.+32     	; 0x91e <__stack+0x1f>
 8fe:	4e 81       	ldd	r20, Y+6	; 0x06
 900:	5f 81       	ldd	r21, Y+7	; 0x07
 902:	2c 81       	ldd	r18, Y+4	; 0x04
 904:	3d 81       	ldd	r19, Y+5	; 0x05
 906:	42 17       	cp	r20, r18
 908:	53 07       	cpc	r21, r19
 90a:	7c f4       	brge	.+30     	; 0x92a <__stack+0x2b>
 90c:	e8 81       	ld	r30, Y
 90e:	f9 81       	ldd	r31, Y+1	; 0x01
 910:	9f 01       	movw	r18, r30
 912:	2f 5f       	subi	r18, 0xFF	; 255
 914:	3f 4f       	sbci	r19, 0xFF	; 255
 916:	39 83       	std	Y+1, r19	; 0x01
 918:	28 83       	st	Y, r18
 91a:	10 83       	st	Z, r17
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__stack+0x2b>
 91e:	e8 85       	ldd	r30, Y+8	; 0x08
 920:	f9 85       	ldd	r31, Y+9	; 0x09
 922:	81 2f       	mov	r24, r17
 924:	09 95       	icall
 926:	89 2b       	or	r24, r25
 928:	29 f7       	brne	.-54     	; 0x8f4 <fputc+0x14>
 92a:	2e 81       	ldd	r18, Y+6	; 0x06
 92c:	3f 81       	ldd	r19, Y+7	; 0x07
 92e:	2f 5f       	subi	r18, 0xFF	; 255
 930:	3f 4f       	sbci	r19, 0xFF	; 255
 932:	3f 83       	std	Y+7, r19	; 0x07
 934:	2e 83       	std	Y+6, r18	; 0x06
 936:	81 2f       	mov	r24, r17
 938:	90 2f       	mov	r25, r16
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	08 95       	ret

00000944 <__ultoa_invert>:
 944:	fa 01       	movw	r30, r20
 946:	aa 27       	eor	r26, r26
 948:	28 30       	cpi	r18, 0x08	; 8
 94a:	51 f1       	breq	.+84     	; 0x9a0 <__ultoa_invert+0x5c>
 94c:	20 31       	cpi	r18, 0x10	; 16
 94e:	81 f1       	breq	.+96     	; 0x9b0 <__ultoa_invert+0x6c>
 950:	e8 94       	clt
 952:	6f 93       	push	r22
 954:	6e 7f       	andi	r22, 0xFE	; 254
 956:	6e 5f       	subi	r22, 0xFE	; 254
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	af 4f       	sbci	r26, 0xFF	; 255
 960:	b1 e0       	ldi	r27, 0x01	; 1
 962:	3e d0       	rcall	.+124    	; 0x9e0 <__ultoa_invert+0x9c>
 964:	b4 e0       	ldi	r27, 0x04	; 4
 966:	3c d0       	rcall	.+120    	; 0x9e0 <__ultoa_invert+0x9c>
 968:	67 0f       	add	r22, r23
 96a:	78 1f       	adc	r23, r24
 96c:	89 1f       	adc	r24, r25
 96e:	9a 1f       	adc	r25, r26
 970:	a1 1d       	adc	r26, r1
 972:	68 0f       	add	r22, r24
 974:	79 1f       	adc	r23, r25
 976:	8a 1f       	adc	r24, r26
 978:	91 1d       	adc	r25, r1
 97a:	a1 1d       	adc	r26, r1
 97c:	6a 0f       	add	r22, r26
 97e:	71 1d       	adc	r23, r1
 980:	81 1d       	adc	r24, r1
 982:	91 1d       	adc	r25, r1
 984:	a1 1d       	adc	r26, r1
 986:	20 d0       	rcall	.+64     	; 0x9c8 <__ultoa_invert+0x84>
 988:	09 f4       	brne	.+2      	; 0x98c <__ultoa_invert+0x48>
 98a:	68 94       	set
 98c:	3f 91       	pop	r19
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	26 9f       	mul	r18, r22
 992:	11 24       	eor	r1, r1
 994:	30 19       	sub	r19, r0
 996:	30 5d       	subi	r19, 0xD0	; 208
 998:	31 93       	st	Z+, r19
 99a:	de f6       	brtc	.-74     	; 0x952 <__ultoa_invert+0xe>
 99c:	cf 01       	movw	r24, r30
 99e:	08 95       	ret
 9a0:	46 2f       	mov	r20, r22
 9a2:	47 70       	andi	r20, 0x07	; 7
 9a4:	40 5d       	subi	r20, 0xD0	; 208
 9a6:	41 93       	st	Z+, r20
 9a8:	b3 e0       	ldi	r27, 0x03	; 3
 9aa:	0f d0       	rcall	.+30     	; 0x9ca <__ultoa_invert+0x86>
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__ultoa_invert+0x5c>
 9ae:	f6 cf       	rjmp	.-20     	; 0x99c <__ultoa_invert+0x58>
 9b0:	46 2f       	mov	r20, r22
 9b2:	4f 70       	andi	r20, 0x0F	; 15
 9b4:	40 5d       	subi	r20, 0xD0	; 208
 9b6:	4a 33       	cpi	r20, 0x3A	; 58
 9b8:	18 f0       	brcs	.+6      	; 0x9c0 <__ultoa_invert+0x7c>
 9ba:	49 5d       	subi	r20, 0xD9	; 217
 9bc:	31 fd       	sbrc	r19, 1
 9be:	40 52       	subi	r20, 0x20	; 32
 9c0:	41 93       	st	Z+, r20
 9c2:	02 d0       	rcall	.+4      	; 0x9c8 <__ultoa_invert+0x84>
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__ultoa_invert+0x6c>
 9c6:	ea cf       	rjmp	.-44     	; 0x99c <__ultoa_invert+0x58>
 9c8:	b4 e0       	ldi	r27, 0x04	; 4
 9ca:	a6 95       	lsr	r26
 9cc:	97 95       	ror	r25
 9ce:	87 95       	ror	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	ba 95       	dec	r27
 9d6:	c9 f7       	brne	.-14     	; 0x9ca <__ultoa_invert+0x86>
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	61 05       	cpc	r22, r1
 9dc:	71 05       	cpc	r23, r1
 9de:	08 95       	ret
 9e0:	9b 01       	movw	r18, r22
 9e2:	ac 01       	movw	r20, r24
 9e4:	0a 2e       	mov	r0, r26
 9e6:	06 94       	lsr	r0
 9e8:	57 95       	ror	r21
 9ea:	47 95       	ror	r20
 9ec:	37 95       	ror	r19
 9ee:	27 95       	ror	r18
 9f0:	ba 95       	dec	r27
 9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__ultoa_invert+0xa2>
 9f4:	62 0f       	add	r22, r18
 9f6:	73 1f       	adc	r23, r19
 9f8:	84 1f       	adc	r24, r20
 9fa:	95 1f       	adc	r25, r21
 9fc:	a0 1d       	adc	r26, r0
 9fe:	08 95       	ret

00000a00 <__prologue_saves__>:
 a00:	2f 92       	push	r2
 a02:	3f 92       	push	r3
 a04:	4f 92       	push	r4
 a06:	5f 92       	push	r5
 a08:	6f 92       	push	r6
 a0a:	7f 92       	push	r7
 a0c:	8f 92       	push	r8
 a0e:	9f 92       	push	r9
 a10:	af 92       	push	r10
 a12:	bf 92       	push	r11
 a14:	cf 92       	push	r12
 a16:	df 92       	push	r13
 a18:	ef 92       	push	r14
 a1a:	ff 92       	push	r15
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	cd b7       	in	r28, 0x3d	; 61
 a26:	de b7       	in	r29, 0x3e	; 62
 a28:	ca 1b       	sub	r28, r26
 a2a:	db 0b       	sbc	r29, r27
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	09 94       	ijmp

00000a38 <__epilogue_restores__>:
 a38:	2a 88       	ldd	r2, Y+18	; 0x12
 a3a:	39 88       	ldd	r3, Y+17	; 0x11
 a3c:	48 88       	ldd	r4, Y+16	; 0x10
 a3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a40:	6e 84       	ldd	r6, Y+14	; 0x0e
 a42:	7d 84       	ldd	r7, Y+13	; 0x0d
 a44:	8c 84       	ldd	r8, Y+12	; 0x0c
 a46:	9b 84       	ldd	r9, Y+11	; 0x0b
 a48:	aa 84       	ldd	r10, Y+10	; 0x0a
 a4a:	b9 84       	ldd	r11, Y+9	; 0x09
 a4c:	c8 84       	ldd	r12, Y+8	; 0x08
 a4e:	df 80       	ldd	r13, Y+7	; 0x07
 a50:	ee 80       	ldd	r14, Y+6	; 0x06
 a52:	fd 80       	ldd	r15, Y+5	; 0x05
 a54:	0c 81       	ldd	r16, Y+4	; 0x04
 a56:	1b 81       	ldd	r17, Y+3	; 0x03
 a58:	aa 81       	ldd	r26, Y+2	; 0x02
 a5a:	b9 81       	ldd	r27, Y+1	; 0x01
 a5c:	ce 0f       	add	r28, r30
 a5e:	d1 1d       	adc	r29, r1
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	f8 94       	cli
 a64:	de bf       	out	0x3e, r29	; 62
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	ed 01       	movw	r28, r26
 a6c:	08 95       	ret

00000a6e <_exit>:
 a6e:	f8 94       	cli

00000a70 <__stop_program>:
 a70:	ff cf       	rjmp	.-2      	; 0xa70 <__stop_program>
