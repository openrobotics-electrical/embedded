
P0005_v2_drivetrain_rev1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000048e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800116  00800116  00000538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c22  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057e  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057f  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e7  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c6  00000000  00000000  00002707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_18>
  4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_19>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_20>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 02 	call	0x414	; 0x414 <main>
  9e:	0c 94 45 02 	jmp	0x48a	; 0x48a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
volatile uint8_t Analog::analogHigh = 0;
volatile uint8_t Analog::analogLow = 0;
volatile uint8_t Analog::lastChannel = 0; // Channels 0-7 for ATmega328P

ISR(ADC_vect) 
{	
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	Analog::analogLow = ADCL;
  b2:	80 91 78 00 	lds	r24, 0x0078
  b6:	80 93 16 01 	sts	0x0116, r24
	Analog::analogHigh = ADCH;
  ba:	80 91 79 00 	lds	r24, 0x0079
  be:	80 93 17 01 	sts	0x0117, r24
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <_ZN6Analog13selectChannelEh>:

void Analog::selectChannel (uint8_t n) 
{		
	DDRC = DDRC & ~_BV(n);
  ce:	97 b1       	in	r25, 0x07	; 7
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	9a 01       	movw	r18, r20
  d6:	08 2e       	mov	r0, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN6Analog13selectChannelEh+0x10>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <_ZN6Analog13selectChannelEh+0xc>
  e2:	20 95       	com	r18
  e4:	29 23       	and	r18, r25
  e6:	27 b9       	out	0x07, r18	; 7
	ADMUX  = _BV(REFS0) | n; // AREF = AVCC
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 93 7c 00 	sts	0x007C, r24
	//ADMUX  = n; // uses AREF voltage, channel n selected
	ADCSRA = _BV(ADATE) | _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
  ee:	8f ea       	ldi	r24, 0xAF	; 175
  f0:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // free running
  f4:	10 92 7b 00 	sts	0x007B, r1
  f8:	08 95       	ret

000000fa <_Z34modular8_set_digital_bus_directionh>:
	return (PIND & DMASK) | (PINB & BMASK);
}

void modular8_set_digital_bus_direction(uint8_t dir)
{
	DDRD = (dir & DMASK) | (DDRD & ~DMASK);
  fa:	9a b1       	in	r25, 0x0a	; 10
  fc:	28 2f       	mov	r18, r24
  fe:	2c 7f       	andi	r18, 0xFC	; 252
 100:	93 70       	andi	r25, 0x03	; 3
 102:	92 2b       	or	r25, r18
 104:	9a b9       	out	0x0a, r25	; 10
	DDRB = (dir & BMASK) | (DDRB & ~BMASK);
 106:	94 b1       	in	r25, 0x04	; 4
 108:	83 70       	andi	r24, 0x03	; 3
 10a:	9c 7f       	andi	r25, 0xFC	; 252
 10c:	89 2b       	or	r24, r25
 10e:	84 b9       	out	0x04, r24	; 4
 110:	08 95       	ret

00000112 <__vector_20>:

volatile uint8_t* _S3P_transmitting;
volatile uint8_t _S3P_charsLeft = 0, _S3P_charsToSend = 0;

ISR(USART_TX_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	D2OFF;
 122:	2c 98       	cbi	0x05, 4	; 5
	DON;
 124:	2d 9a       	sbi	0x05, 5	; 5
	
	UCSR0B &= ~_BV(TXCIE0); // disables TX complete interrupt
 126:	e1 ec       	ldi	r30, 0xC1	; 193
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8f 7b       	andi	r24, 0xBF	; 191
 12e:	80 83       	st	Z, r24
	_S3P_TX_DISABLE();
 130:	2a 98       	cbi	0x05, 2	; 5
 132:	80 81       	ld	r24, Z
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	80 83       	st	Z, r24
	
	DOFF;
 138:	2d 98       	cbi	0x05, 5	; 5
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_19>:
	
	D2OFF;
}

ISR(USART_UDRE_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	D2ON;
 15c:	2c 9a       	sbi	0x05, 4	; 5
	DON;
 15e:	2d 9a       	sbi	0x05, 5	; 5
	
	UDR0 = _S3P_transmitting[_S3P_charsToSend - _S3P_charsLeft];
 160:	e0 91 18 01 	lds	r30, 0x0118
 164:	80 91 19 01 	lds	r24, 0x0119
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e8 1b       	sub	r30, r24
 16c:	f1 09       	sbc	r31, r1
 16e:	80 91 1a 01 	lds	r24, 0x011A
 172:	90 91 1b 01 	lds	r25, 0x011B
 176:	e8 0f       	add	r30, r24
 178:	f9 1f       	adc	r31, r25
 17a:	80 81       	ld	r24, Z
 17c:	80 93 c6 00 	sts	0x00C6, r24
	_S3P_charsLeft--;
 180:	80 91 19 01 	lds	r24, 0x0119
 184:	81 50       	subi	r24, 0x01	; 1
 186:	80 93 19 01 	sts	0x0119, r24
	
	if(_S3P_charsLeft == 0)
 18a:	80 91 19 01 	lds	r24, 0x0119
 18e:	81 11       	cpse	r24, r1
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <__vector_19+0x58>
	{
		UCSR0B &= ~_BV(UDRIE0);  // disable buffer empty interrupt
 192:	e1 ec       	ldi	r30, 0xC1	; 193
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8f 7d       	andi	r24, 0xDF	; 223
 19a:	80 83       	st	Z, r24
		UCSR0B |= _BV(TXCIE0); // enables TX complete interrupt
 19c:	80 81       	ld	r24, Z
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	80 83       	st	Z, r24
	}
	
	D2OFF;
 1a2:	2c 98       	cbi	0x05, 4	; 5
	DOFF;
 1a4:	2d 98       	cbi	0x05, 5	; 5
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <_ZN3S3P4initEPKvhPVvhS3_h>:
		uint8_t delimiterSize,
		volatile void* in,
		uint8_t inSize,
		volatile void* out,
		uint8_t outSize)
{	
 1b8:	ef 92       	push	r14
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
	_S3P_outputSize = outSize;
}

void S3P::setDelimiter(const void* delimiter, uint8_t delimiterSize)
{
	_S3P_delimiter = (uint8_t*)delimiter;
 1be:	90 93 26 01 	sts	0x0126, r25
 1c2:	80 93 25 01 	sts	0x0125, r24
	_S3P_delimiterSize = delimiterSize;
 1c6:	60 93 24 01 	sts	0x0124, r22
		volatile void* in,
		uint8_t inSize,
		volatile void* out,
		uint8_t outSize)
{
	_S3P_input = (volatile uint8_t*)in;
 1ca:	50 93 23 01 	sts	0x0123, r21
 1ce:	40 93 22 01 	sts	0x0122, r20
	_S3P_inputSize = inSize;
 1d2:	20 93 20 01 	sts	0x0120, r18
	_S3P_output = (volatile uint8_t*)out;
 1d6:	10 93 1f 01 	sts	0x011F, r17
 1da:	00 93 1e 01 	sts	0x011E, r16
	_S3P_outputSize = outSize;
 1de:	e0 92 1d 01 	sts	0x011D, r14
		uint8_t outSize)
{	
	setDelimiter(delimiter, delimiterSize);
	setbuffers(in, inSize, out, outSize);
	
	DDRB |= _BV(TXDEN_PIN) + _BV(5);
 1e2:	84 b1       	in	r24, 0x04	; 4
 1e4:	84 62       	ori	r24, 0x24	; 36
 1e6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~_BV(TXDEN_PIN);
 1e8:	2a 98       	cbi	0x05, 2	; 5
	
	UBRR0H = 0;
 1ea:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 30;// 115200 baud 7; // 250000 baud
 1ee:	8e e1       	ldi	r24, 0x1E	; 30
 1f0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = _BV(U2X0); // Double speed UART
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0); // Receive interrupt, RX/TX enable
 1fa:	88 e9       	ldi	r24, 0x98	; 152
 1fc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data, no parity, 1 stop bit
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	80 93 c2 00 	sts	0x00C2, r24
}
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <_ZN3S3P8transmitEPVvh>:
void S3P::transmit(volatile void* toTransmit, uint8_t charCount) 
{
	// sends between 1 and 255 chars
	// uses USART_TX and USART_UDRE interrupts to advance through chars
	
	_S3P_transmitting = (volatile uint8_t*)toTransmit;
 20e:	90 93 1b 01 	sts	0x011B, r25
 212:	80 93 1a 01 	sts	0x011A, r24
	_S3P_charsToSend = charCount;
 216:	60 93 18 01 	sts	0x0118, r22
	_S3P_charsLeft = _S3P_charsToSend - 1;
 21a:	80 91 18 01 	lds	r24, 0x0118
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	80 93 19 01 	sts	0x0119, r24
	
	_S3P_TX_ENABLE();
 224:	e1 ec       	ldi	r30, 0xC1	; 193
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
 22e:	2a 9a       	sbi	0x05, 2	; 5
	
	UDR0 = _S3P_transmitting[0]; // start transmission of first char
 230:	e0 91 1a 01 	lds	r30, 0x011A
 234:	f0 91 1b 01 	lds	r31, 0x011B
 238:	80 81       	ld	r24, Z
 23a:	80 93 c6 00 	sts	0x00C6, r24
	
	if (_S3P_charsLeft > 0)
 23e:	80 91 19 01 	lds	r24, 0x0119
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <_ZN3S3P8transmitEPVvh+0x44>
	{
		UCSR0B |= _BV(UDRIE0); // enable buffer empty interrupt
 246:	e1 ec       	ldi	r30, 0xC1	; 193
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret
	}
	else
	{
		UCSR0B |= _BV(TXCIE0); // enables TX complete interrupt
 252:	e1 ec       	ldi	r30, 0xC1	; 193
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	80 83       	st	Z, r24
 25c:	08 95       	ret

0000025e <_ZN3S3P8transmitEv>:
	}
}

void S3P::transmit()
{
	transmit(_S3P_output, _S3P_outputSize);
 25e:	60 91 1d 01 	lds	r22, 0x011D
 262:	80 91 1e 01 	lds	r24, 0x011E
 266:	90 91 1f 01 	lds	r25, 0x011F
 26a:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN3S3P8transmitEPVvh>
 26e:	08 95       	ret

00000270 <__vector_18>:
	
	DOFF;
}

ISR(USART_RX_vect)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	D2ON;
 292:	2c 9a       	sbi	0x05, 4	; 5
	DOFF;
 294:	2d 98       	cbi	0x05, 5	; 5
	
	char received = UDR0; // clears flag
 296:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(_S3P_memoryIndex < _S3P_delimiterSize)
 29a:	90 91 1c 01 	lds	r25, 0x011C
 29e:	80 91 24 01 	lds	r24, 0x0124
 2a2:	98 17       	cp	r25, r24
 2a4:	98 f4       	brcc	.+38     	; 0x2cc <__vector_18+0x5c>
	{
		_S3P_memoryIndex = (received == _S3P_delimiter[_S3P_memoryIndex])? 
 2a6:	80 91 1c 01 	lds	r24, 0x011C
 2aa:	e0 91 25 01 	lds	r30, 0x0125
 2ae:	f0 91 26 01 	lds	r31, 0x0126
 2b2:	e8 0f       	add	r30, r24
 2b4:	f1 1d       	adc	r31, r1
			_S3P_memoryIndex + 1 : 0;
 2b6:	80 81       	ld	r24, Z
 2b8:	82 13       	cpse	r24, r18
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <__vector_18+0x54>
 2bc:	80 91 1c 01 	lds	r24, 0x011C
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <__vector_18+0x56>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	80 93 1c 01 	sts	0x011C, r24
 2ca:	14 c0       	rjmp	.+40     	; 0x2f4 <__vector_18+0x84>
	}
	else if(_S3P_inputIndex < _S3P_inputSize)
 2cc:	90 91 21 01 	lds	r25, 0x0121
 2d0:	80 91 20 01 	lds	r24, 0x0120
 2d4:	98 17       	cp	r25, r24
 2d6:	70 f4       	brcc	.+28     	; 0x2f4 <__vector_18+0x84>
	{
		_S3P_input[_S3P_inputIndex] = received;
 2d8:	80 91 21 01 	lds	r24, 0x0121
 2dc:	e0 91 22 01 	lds	r30, 0x0122
 2e0:	f0 91 23 01 	lds	r31, 0x0123
 2e4:	e8 0f       	add	r30, r24
 2e6:	f1 1d       	adc	r31, r1
 2e8:	20 83       	st	Z, r18
		_S3P_inputIndex++;
 2ea:	80 91 21 01 	lds	r24, 0x0121
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	80 93 21 01 	sts	0x0121, r24
	}
	if(_S3P_inputIndex == _S3P_inputSize)
 2f4:	90 91 21 01 	lds	r25, 0x0121
 2f8:	80 91 20 01 	lds	r24, 0x0120
 2fc:	98 13       	cpse	r25, r24
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <__vector_18+0xa0>
	{
		_S3P_memoryIndex = 0;
 300:	10 92 1c 01 	sts	0x011C, r1
		_S3P_inputIndex = 0;
 304:	10 92 21 01 	sts	0x0121, r1
		D2ON;
 308:	2c 9a       	sbi	0x05, 4	; 5
		S3P::transmit();
 30a:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN3S3P8transmitEv>
		D2OFF;
 30e:	2c 98       	cbi	0x05, 4	; 5
	}
	
	D2OFF;
 310:	2c 98       	cbi	0x05, 4	; 5
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_14>:
};

uint8_t PWM_count;
int8_t PWM_signal;

ISR(TIMER0_COMPA_vect) {
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
	
	// 128-step resolution PWM 
	
	if((PWM_count = (PWM_count + 1) % 128) == 0) {
 34a:	80 91 28 01 	lds	r24, 0x0128
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	8f 77       	andi	r24, 0x7F	; 127
 354:	90 78       	andi	r25, 0x80	; 128
 356:	ac 01       	movw	r20, r24
 358:	80 93 28 01 	sts	0x0128, r24
 35c:	81 11       	cpse	r24, r1
 35e:	09 c0       	rjmp	.+18     	; 0x372 <__vector_14+0x3e>
		
		measured_vel = encoder_count;
 360:	80 91 2c 01 	lds	r24, 0x012C
 364:	80 93 2b 01 	sts	0x012B, r24
		encoder_count = 0;	
 368:	10 92 2c 01 	sts	0x012C, r1
		counted = true;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 29 01 	sts	0x0129, r24
	}
	
	PORTD = PWM_signal > PWM_count? 
 372:	20 91 27 01 	lds	r18, 0x0127
 376:	33 27       	eor	r19, r19
 378:	27 fd       	sbrc	r18, 7
 37a:	30 95       	com	r19
 37c:	ca 01       	movw	r24, r20
 37e:	99 27       	eor	r25, r25
		PIND | MOTOR_PIN : PIND & ~MOTOR_PIN;
 380:	82 17       	cp	r24, r18
 382:	93 07       	cpc	r25, r19
 384:	1c f4       	brge	.+6      	; 0x38c <__vector_14+0x58>
 386:	89 b1       	in	r24, 0x09	; 9
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	02 c0       	rjmp	.+4      	; 0x390 <__vector_14+0x5c>
 38c:	89 b1       	in	r24, 0x09	; 9
 38e:	87 7f       	andi	r24, 0xF7	; 247
 390:	8b b9       	out	0x0b, r24	; 11
}
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_3>:

ISR(PCINT0_vect) {
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	
	PORTD = PIND | _BV(PD5);
 3bc:	89 b1       	in	r24, 0x09	; 9
 3be:	80 62       	ori	r24, 0x20	; 32
 3c0:	8b b9       	out	0x0b, r24	; 11
	encoder_count += encoder_matrix[PINB & 0b11][last_state];
 3c2:	83 b1       	in	r24, 0x03	; 3
 3c4:	e0 91 2a 01 	lds	r30, 0x012A
 3c8:	20 91 2c 01 	lds	r18, 0x012C
 3cc:	83 70       	andi	r24, 0x03	; 3
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	94 e0       	ldi	r25, 0x04	; 4
 3d2:	89 9f       	mul	r24, r25
 3d4:	e0 0d       	add	r30, r0
 3d6:	f1 1d       	adc	r31, r1
 3d8:	11 24       	eor	r1, r1
 3da:	e0 50       	subi	r30, 0x00	; 0
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	80 81       	ld	r24, Z
 3e0:	99 27       	eor	r25, r25
 3e2:	87 fd       	sbrc	r24, 7
 3e4:	90 95       	com	r25
 3e6:	82 0f       	add	r24, r18
 3e8:	91 1d       	adc	r25, r1
 3ea:	27 fd       	sbrc	r18, 7
 3ec:	9a 95       	dec	r25
 3ee:	80 93 2c 01 	sts	0x012C, r24
	last_state = PINB & 0b11;
 3f2:	83 b1       	in	r24, 0x03	; 3
 3f4:	83 70       	andi	r24, 0x03	; 3
 3f6:	80 93 2a 01 	sts	0x012A, r24
	PORTD = PIND & ~_BV(PD5);
 3fa:	89 b1       	in	r24, 0x09	; 9
 3fc:	8f 7d       	andi	r24, 0xDF	; 223
 3fe:	8b b9       	out	0x0b, r24	; 11
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <main>:

int main(void) 
{
	DDRB = 0xfc;
 414:	8c ef       	ldi	r24, 0xFC	; 252
 416:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff; // PORTD as outputs
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	8a b9       	out	0x0a, r24	; 10
	
	PCICR = _BV(PCIE0); // allow PCINT0-7 interrupts
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 = _BV(PCINT1) | _BV(PCINT0); // trigger interrupts on changes to PB0 and PB1 
 422:	83 e0       	ldi	r24, 0x03	; 3
 424:	80 93 6b 00 	sts	0x006B, r24

	TCCR0A = _BV(WGM01); // CTC mode
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = PRESCALER_8;
 42c:	85 bd       	out	0x25, r24	; 37
	OCR0A = TIMER_COUNT; // calculated above to give 4/663 of a second
 42e:	9d e5       	ldi	r25, 0x5D	; 93
 430:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = _BV(OCIE1A); // enable timer interrupt
 432:	80 93 6e 00 	sts	0x006E, r24
	
	// Sets the buffers to the structs in local "dataStructures.h" and initializes UART
	S3P::init(DATA_STRUCTURE_REF);
 436:	68 94       	set
 438:	ee 24       	eor	r14, r14
 43a:	e4 f8       	bld	r14, 4
 43c:	0d e2       	ldi	r16, 0x2D	; 45
 43e:	11 e0       	ldi	r17, 0x01	; 1
 440:	23 e0       	ldi	r18, 0x03	; 3
 442:	4d e3       	ldi	r20, 0x3D	; 61
 444:	51 e0       	ldi	r21, 0x01	; 1
 446:	65 e0       	ldi	r22, 0x05	; 5
 448:	80 e1       	ldi	r24, 0x10	; 16
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN3S3P4initEPKvhPVvhS3_h>
	
	sei(); // set interrupts
 450:	78 94       	sei
	
	DDRC = 0x3f;
 452:	8f e3       	ldi	r24, 0x3F	; 63
 454:	87 b9       	out	0x07, r24	; 7
	
	modular8_set_digital_bus_direction(0xff);
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z34modular8_set_digital_bus_directionh>
	
	dataIn.status = 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 3f 01 	sts	0x013F, r24
	
	Analog::selectChannel(5);
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	0e 94 67 00 	call	0xce	; 0xce <_ZN6Analog13selectChannelEh>
	// Analog::startConversion();
	
	dataOut.output[0] = (volatile char)'a';
 468:	81 e6       	ldi	r24, 0x61	; 97
 46a:	80 93 2d 01 	sts	0x012D, r24
	dataOut.output[15] = (volatile char)'z';
 46e:	8a e7       	ldi	r24, 0x7A	; 122
 470:	80 93 3c 01 	sts	0x013C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	8f e7       	ldi	r24, 0x7F	; 127
 478:	94 e0       	ldi	r25, 0x04	; 4
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <main+0x66>
 482:	00 c0       	rjmp	.+0      	; 0x484 <main+0x70>
 484:	00 00       	nop
	{
		// sprintf((char*)dataOut.output, "status:%d", dataIn.status);
		// ATOMIC(modular8_set_digital_bus(dataIn.status));
		
		_delay_ms(DELAY);
		PORTB = 0;
 486:	15 b8       	out	0x05, r1	; 5
 488:	f5 cf       	rjmp	.-22     	; 0x474 <main+0x60>

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
