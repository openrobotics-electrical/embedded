
arm_servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  0000024c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000638  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000347  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027d  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000118  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000419  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003d6  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  000017ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  9e:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
	return (((((FOSC * 10) / (16L * baud)) + 5) / 10) - 1);
}

void USART_Init(unsigned int ubrr) {
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (0 << USBS0)|(3 << UCSZ00);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <__vector_21>:

volatile uint8_t analogLow, analogHigh;

//------------------INTERRUPT SERVICE ROUTINES

ISR(ADC_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
	
	analogLow = ADCL;
  c8:	80 91 78 00 	lds	r24, 0x0078
  cc:	80 93 01 01 	sts	0x0101, r24
	analogHigh = ADCH;
  d0:	80 91 79 00 	lds	r24, 0x0079
  d4:	80 93 00 01 	sts	0x0100, r24
}
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <main>:

//------------------MAIN

int main(void) {
	
	USART_Init(convertBaud(COM_SPEED));
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	
	
		DDRB = 0b11110000;
  ec:	80 ef       	ldi	r24, 0xF0	; 240
  ee:	84 b9       	out	0x04, r24	; 4
		DDRC = 0b00000000;
  f0:	17 b8       	out	0x07, r1	; 7
		DDRD = 0b11111111;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a b9       	out	0x0a, r24	; 10
		sei();
  f6:	78 94       	sei

//------------------FUNCTIONS

void setBitTo(uint8_t bit, uint8_t value, volatile uint8_t *reg) {
	*reg = (value << bit) | (*reg & (0xff - (1 << bit)));
  f8:	40 98       	cbi	0x08, 0	; 8
//------STATIC FUNCTIONS
	
		static void selectChannel (uint8_t n) {
		
			setBitTo(n, 0, &PORTC);
			ADMUX  = 0b01100000 | n; // port n ADC selected
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA = 0b10001011; // on, 2x clock
 100:	8b e8       	ldi	r24, 0x8B	; 139
 102:	80 93 7a 00 	sts	0x007A, r24
			ADCSRB = 0b00000000; // free running
 106:	10 92 7b 00 	sts	0x007B, r1
}

//------------------FUNCTIONS

void setBitTo(uint8_t bit, uint8_t value, volatile uint8_t *reg) {
	*reg = (value << bit) | (*reg & (0xff - (1 << bit)));
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
			
			//PORTD =  PORTD ^ 0x04;
			
			Analog::startConversion();
			adc_value =Analog::getValue();
			angle = (adc_value*30)/1024;
 10e:	0f 2e       	mov	r0, r31
 110:	fe e1       	ldi	r31, 0x1E	; 30
 112:	ef 2e       	mov	r14, r31
 114:	f0 2d       	mov	r31, r0
			{
		
				PORTD = PORTD ^ 0x08;
				for (i = 0; i < angle; i++) _delay_us(100);
				PORTD = PORTD & 0x00;
				for (i = 0; i < Period-angle; i++) _delay_us(100);	
 116:	0f 2e       	mov	r0, r31
 118:	f8 ec       	ldi	r31, 0xC8	; 200
 11a:	cf 2e       	mov	r12, r31
 11c:	d1 2c       	mov	r13, r1
 11e:	f0 2d       	mov	r31, r0
 120:	0f 2e       	mov	r0, r31
 122:	f4 e6       	ldi	r31, 0x64	; 100
 124:	ff 2e       	mov	r15, r31
 126:	f0 2d       	mov	r31, r0
 128:	00 e0       	ldi	r16, 0x00	; 0
			angle = (adc_value*30)/1024;
		
			for (j = 0; j < 100; j++)
			{
		
				PORTD = PORTD ^ 0x08;
 12a:	18 e0       	ldi	r17, 0x08	; 8
				for (i = 0; i < angle; i++) _delay_us(100);
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
	
		static void startConversion () { setBitTo(ADSC, 1, &ADCSRA); }
	
		static bool conversionComplete () { return isBitSet(ADSC, &ADCSRA)? false : true; }
		
		static uint16_t getValue () { return ((analogHigh << 2) | (analogLow >> 6)); }
 136:	80 91 00 01 	lds	r24, 0x0100
 13a:	20 91 01 01 	lds	r18, 0x0101
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	23 2f       	mov	r18, r19
 144:	00 0c       	add	r0, r0
 146:	22 1f       	adc	r18, r18
 148:	33 0b       	sbc	r19, r19
 14a:	00 0c       	add	r0, r0
 14c:	22 1f       	adc	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	82 2b       	or	r24, r18
 15c:	93 2b       	or	r25, r19
			
			//PORTD =  PORTD ^ 0x04;
			
			Analog::startConversion();
			adc_value =Analog::getValue();
			angle = (adc_value*30)/1024;
 15e:	e8 9e       	mul	r14, r24
 160:	90 01       	movw	r18, r0
 162:	e9 9e       	mul	r14, r25
 164:	30 0d       	add	r19, r0
 166:	11 24       	eor	r1, r1
 168:	23 2f       	mov	r18, r19
 16a:	33 27       	eor	r19, r19
 16c:	26 95       	lsr	r18
 16e:	26 95       	lsr	r18
			{
		
				PORTD = PORTD ^ 0x08;
				for (i = 0; i < angle; i++) _delay_us(100);
				PORTD = PORTD & 0x00;
				for (i = 0; i < Period-angle; i++) _delay_us(100);	
 170:	a6 01       	movw	r20, r12
 172:	42 1b       	sub	r20, r18
 174:	53 0b       	sbc	r21, r19
 176:	6f 2d       	mov	r22, r15
 178:	70 2f       	mov	r23, r16
			angle = (adc_value*30)/1024;
		
			for (j = 0; j < 100; j++)
			{
		
				PORTD = PORTD ^ 0x08;
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	81 27       	eor	r24, r17
 17e:	8b b9       	out	0x0b, r24	; 11
				for (i = 0; i < angle; i++) _delay_us(100);
 180:	21 15       	cp	r18, r1
 182:	31 05       	cpc	r19, r1
 184:	11 f1       	breq	.+68     	; 0x1ca <main+0xe6>
 186:	8d 2f       	mov	r24, r29
 188:	9c 2f       	mov	r25, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	af e8       	ldi	r26, 0x8F	; 143
 18c:	b1 e0       	ldi	r27, 0x01	; 1
 18e:	11 97       	sbiw	r26, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0xaa>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0xb0>
 194:	00 00       	nop
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	82 17       	cp	r24, r18
 19a:	93 07       	cpc	r25, r19
 19c:	b1 f7       	brne	.-20     	; 0x18a <main+0xa6>
				PORTD = PORTD & 0x00;
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	1b b8       	out	0x0b, r1	; 11
				for (i = 0; i < Period-angle; i++) _delay_us(100);	
 1a2:	41 15       	cp	r20, r1
 1a4:	51 05       	cpc	r21, r1
 1a6:	99 f4       	brne	.+38     	; 0x1ce <main+0xea>
 1a8:	0a c0       	rjmp	.+20     	; 0x1be <main+0xda>
 1aa:	af e8       	ldi	r26, 0x8F	; 143
 1ac:	b1 e0       	ldi	r27, 0x01	; 1
 1ae:	11 97       	sbiw	r26, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xca>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xd0>
 1b4:	00 00       	nop
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	84 17       	cp	r24, r20
 1ba:	95 07       	cpc	r25, r21
 1bc:	b0 f3       	brcs	.-20     	; 0x1aa <main+0xc6>
 1be:	61 50       	subi	r22, 0x01	; 1
 1c0:	71 09       	sbc	r23, r1
			
			Analog::startConversion();
			adc_value =Analog::getValue();
			angle = (adc_value*30)/1024;
		
			for (j = 0; j < 100; j++)
 1c2:	61 15       	cp	r22, r1
 1c4:	71 05       	cpc	r23, r1
 1c6:	c9 f6       	brne	.-78     	; 0x17a <main+0x96>
 1c8:	b3 cf       	rjmp	.-154    	; 0x130 <main+0x4c>
			{
		
				PORTD = PORTD ^ 0x08;
				for (i = 0; i < angle; i++) _delay_us(100);
				PORTD = PORTD & 0x00;
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	1b b8       	out	0x0b, r1	; 11
		
			for (j = 0; j < 100; j++)
			{
		
				PORTD = PORTD ^ 0x08;
				for (i = 0; i < angle; i++) _delay_us(100);
 1ce:	8d 2f       	mov	r24, r29
 1d0:	9c 2f       	mov	r25, r28
 1d2:	eb cf       	rjmp	.-42     	; 0x1aa <main+0xc6>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
