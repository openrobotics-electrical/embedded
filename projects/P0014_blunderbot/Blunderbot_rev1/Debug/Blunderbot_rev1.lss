
Blunderbot_rev1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000a90  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  00800132  00800132  00000b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185d  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051c  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  00002a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a1  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046c  00000000  00000000  000039e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003e55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__dtors_end>
   2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	33 c1       	rjmp	.+614    	; 0x26e <__vector_3>
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	39 c0       	rjmp	.+114    	; 0x8a <__bad_interrupt>
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	37 c0       	rjmp	.+110    	; 0x8a <__bad_interrupt>
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	31 c0       	rjmp	.+98     	; 0x8a <__bad_interrupt>
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	2f c0       	rjmp	.+94     	; 0x8a <__bad_interrupt>
  2c:	98 c0       	rjmp	.+304    	; 0x15e <__vector_22>
  2e:	2d c0       	rjmp	.+90     	; 0x8a <__bad_interrupt>
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__vector_24>
  32:	2b c0       	rjmp	.+86     	; 0x8a <__bad_interrupt>
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	29 c0       	rjmp	.+82     	; 0x8a <__bad_interrupt>
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	27 c0       	rjmp	.+78     	; 0x8a <__bad_interrupt>

0000003c <__ctors_start>:
  3c:	8d 02       	muls	r24, r29

0000003e <__ctors_end>:
  3e:	d2 03       	fmuls	r21, r18

00000040 <__dtors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf ef       	ldi	r28, 0xFF	; 255
  46:	d1 e0       	ldi	r29, 0x01	; 1
  48:	de bf       	out	0x3e, r29	; 62
  4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_copy_data>:
  4c:	11 e0       	ldi	r17, 0x01	; 1
  4e:	a0 e0       	ldi	r26, 0x00	; 0
  50:	b1 e0       	ldi	r27, 0x01	; 1
  52:	e0 e9       	ldi	r30, 0x90	; 144
  54:	fa e0       	ldi	r31, 0x0A	; 10
  56:	02 c0       	rjmp	.+4      	; 0x5c <__do_copy_data+0x10>
  58:	05 90       	lpm	r0, Z+
  5a:	0d 92       	st	X+, r0
  5c:	a2 33       	cpi	r26, 0x32	; 50
  5e:	b1 07       	cpc	r27, r17
  60:	d9 f7       	brne	.-10     	; 0x58 <__do_copy_data+0xc>

00000062 <__do_clear_bss>:
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	a2 e3       	ldi	r26, 0x32	; 50
  66:	b1 e0       	ldi	r27, 0x01	; 1
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a7 3e       	cpi	r26, 0xE7	; 231
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	cf e1       	ldi	r28, 0x1F	; 31
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	03 c0       	rjmp	.+6      	; 0x80 <__do_global_ctors+0xe>
  7a:	21 97       	sbiw	r28, 0x01	; 1
  7c:	fe 01       	movw	r30, r28
  7e:	c9 d3       	rcall	.+1938   	; 0x812 <__tablejump2__>
  80:	ce 31       	cpi	r28, 0x1E	; 30
  82:	d1 07       	cpc	r29, r17
  84:	d1 f7       	brne	.-12     	; 0x7a <__do_global_ctors+0x8>
  86:	cf d1       	rcall	.+926    	; 0x426 <main>
  88:	f7 c4       	rjmp	.+2542   	; 0xa78 <__do_global_dtors>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <_ZN6timers10Timer16bit5startEv>:
	volatile uint8_t *const base_address; // Child classes must initialize this

public:
	virtual uint16_t count() = 0;

	void inline start() { *(base_address-1) |= prescale; }
  8c:	dc 01       	movw	r26, r24
  8e:	13 96       	adiw	r26, 0x03	; 3
  90:	ed 91       	ld	r30, X+
  92:	fc 91       	ld	r31, X
  94:	14 97       	sbiw	r26, 0x04	; 4
  96:	92 91       	ld	r25, -Z
  98:	12 96       	adiw	r26, 0x02	; 2
  9a:	8c 91       	ld	r24, X
  9c:	89 2b       	or	r24, r25
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <_ZN6timers10Timer16bit4stopEv>:
	void inline stop() { *(base_address-1) &= ~PRESCALER_MASK; }
  a2:	dc 01       	movw	r26, r24
  a4:	13 96       	adiw	r26, 0x03	; 3
  a6:	ed 91       	ld	r30, X+
  a8:	fc 91       	ld	r31, X
  aa:	14 97       	sbiw	r26, 0x04	; 4
  ac:	82 91       	ld	r24, -Z
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <_ZN6timers10Timer16bit10is_runningEv>:
	bool inline is_running() { return *(base_address-1) & PRESCALER_MASK; }
  b4:	dc 01       	movw	r26, r24
  b6:	13 96       	adiw	r26, 0x03	; 3
  b8:	ed 91       	ld	r30, X+
  ba:	fc 91       	ld	r31, X
  bc:	14 97       	sbiw	r26, 0x04	; 4
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	90 81       	ld	r25, Z
  c2:	97 70       	andi	r25, 0x07	; 7
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	09 f4       	brne	.+2      	; 0xca <_ZN6timers10Timer16bit10is_runningEv+0x16>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret

000000cc <_ZN6timers6Timer15countEv>:
public:
	Timer1(Prescaler pre) : Timer16bit(pre, &TCCR1A) {
		TCCR1A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
		TCCR1B = (1<<WGM13) | (1<<WGM12);
	}
	uint16_t count() { return TCNT1; }
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	9d b5       	in	r25, 0x2d	; 45
  d0:	08 95       	ret

000000d2 <_ZN6timers6Timer15clearEv>:
	void clear() { TCNT1 = 0; }
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	1c bc       	out	0x2c, r1	; 44
  d6:	08 95       	ret

000000d8 <_ZN6timers6Timer25countEv>:
public:
	Timer2(Prescaler pre) : Timer16bit(pre, &TCCR2A) {
		TCCR2A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
		TCCR2B = (1<<WGM13) | (1<<WGM12);		
	}
	uint16_t count() { return TCNT2; }
  d8:	80 91 c6 00 	lds	r24, 0x00C6
  dc:	90 91 c7 00 	lds	r25, 0x00C7
  e0:	08 95       	ret

000000e2 <_ZN6timers6Timer25clearEv>:
	void clear() { TCNT2 = 0; }
  e2:	10 92 c7 00 	sts	0x00C7, r1
  e6:	10 92 c6 00 	sts	0x00C6, r1
  ea:	08 95       	ret

000000ec <_ZN8io_manip6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
  ec:	08 95       	ret

000000ee <_ZN8io_manip5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
  ee:	08 95       	ret

000000f0 <_ZN8io_manip5InputD0Ev>:
	return p;
}

void operator delete(void * p) // or delete(void *, std::size_t)
{
	free(p);
  f0:	2b d4       	rcall	.+2134   	; 0x948 <free>
  f2:	08 95       	ret

000000f4 <_ZN8io_manip6OutputD0Ev>:
  f4:	29 d4       	rcall	.+2130   	; 0x948 <free>
  f6:	08 95       	ret

000000f8 <__vector_24>:

const uint8_t RX_BUFFER_SIZE(16);
volatile char receiving[RX_BUFFER_SIZE];
volatile uint8_t rx_index(0), rx_head(0), chars_unread(0);

ISR(USART0_TX_vect) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	cli();
 10a:	f8 94       	cli
	if (chars_left > 0) {	
 10c:	80 91 d0 01 	lds	r24, 0x01D0
 110:	88 23       	and	r24, r24
 112:	d9 f0       	breq	.+54     	; 0x14a <__vector_24+0x52>
		UDR0 = transmitting[tx_head];	
 114:	e0 91 d1 01 	lds	r30, 0x01D1
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ed 52       	subi	r30, 0x2D	; 45
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	80 81       	ld	r24, Z
 120:	80 93 80 00 	sts	0x0080, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
 124:	80 91 d1 01 	lds	r24, 0x01D1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	90 78       	andi	r25, 0x80	; 128
 130:	99 23       	and	r25, r25
 132:	24 f4       	brge	.+8      	; 0x13c <__vector_24+0x44>
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	80 6f       	ori	r24, 0xF0	; 240
 138:	9f 6f       	ori	r25, 0xFF	; 255
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	80 93 d1 01 	sts	0x01D1, r24
		chars_left--;
 140:	80 91 d0 01 	lds	r24, 0x01D0
 144:	81 50       	subi	r24, 0x01	; 1
 146:	80 93 d0 01 	sts	0x01D0, r24
	}
	sei();
 14a:	78 94       	sei
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_22>:

ISR(USART0_RX_vect) {	
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	cli();
 170:	f8 94       	cli
	UCSR0A &= ~_BV(RXC0); // clear flag
 172:	e6 e8       	ldi	r30, 0x86	; 134
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8f 77       	andi	r24, 0x7F	; 127
 17a:	80 83       	st	Z, r24
	receiving[rx_index] = UDR0;
 17c:	e0 91 bf 01 	lds	r30, 0x01BF
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 91 80 00 	lds	r24, 0x0080
 186:	e0 54       	subi	r30, 0x40	; 64
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	80 83       	st	Z, r24
	rx_index = (rx_index + 1) % RX_BUFFER_SIZE;
 18c:	80 91 bf 01 	lds	r24, 0x01BF
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	90 78       	andi	r25, 0x80	; 128
 198:	99 23       	and	r25, r25
 19a:	24 f4       	brge	.+8      	; 0x1a4 <__vector_22+0x46>
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	80 6f       	ori	r24, 0xF0	; 240
 1a0:	9f 6f       	ori	r25, 0xFF	; 255
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	80 93 bf 01 	sts	0x01BF, r24
	chars_unread++;
 1a8:	80 91 be 01 	lds	r24, 0x01BE
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 be 01 	sts	0x01BE, r24
	sei();
 1b2:	78 94       	sei
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_Z11serial_initv>:

void serial_init() {
	UBRR0H = 0;
 1c6:	10 92 82 00 	sts	0x0082, r1
	UBRR0L = 16; // BAUD 115200
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	80 93 81 00 	sts	0x0081, r24
	UCSR0A = _BV(U2X0);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 86 00 	sts	0x0086, r24
	UCSR0B = _BV(TXCIE0) | _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
 1d6:	88 ed       	ldi	r24, 0xD8	; 216
 1d8:	80 93 85 00 	sts	0x0085, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	80 93 84 00 	sts	0x0084, r24
 1e2:	08 95       	ret

000001e4 <_Z15serial_transmitPch>:

void serial_transmit(char* s, uint8_t char_count) {
	// sends between 1 and 255 chars if large enough buffer allocated
	// does not prevent against buffer overwrites, increase
	// buffer size if needed
	cli();
 1e4:	f8 94       	cli
	for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
 1e6:	66 23       	and	r22, r22
 1e8:	21 f1       	breq	.+72     	; 0x232 <__stack+0x33>
 1ea:	dc 01       	movw	r26, r24
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	26 0f       	add	r18, r22
 1f0:	42 2f       	mov	r20, r18
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	4f 5f       	subi	r20, 0xFF	; 255
 1f6:	5f 4f       	sbci	r21, 0xFF	; 255
 1f8:	48 0f       	add	r20, r24
 1fa:	59 1f       	adc	r21, r25
		transmitting[tx_index] = s[chars_added];
 1fc:	e0 91 d2 01 	lds	r30, 0x01D2
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	9d 91       	ld	r25, X+
 204:	ed 52       	subi	r30, 0x2D	; 45
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	90 83       	st	Z, r25
		tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
 20a:	20 91 d2 01 	lds	r18, 0x01D2
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	2f 70       	andi	r18, 0x0F	; 15
 216:	30 78       	andi	r19, 0x80	; 128
 218:	33 23       	and	r19, r19
 21a:	34 f4       	brge	.+12     	; 0x228 <__stack+0x29>
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	31 09       	sbc	r19, r1
 220:	20 6f       	ori	r18, 0xF0	; 240
 222:	3f 6f       	ori	r19, 0xFF	; 255
 224:	2f 5f       	subi	r18, 0xFF	; 255
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	20 93 d2 01 	sts	0x01D2, r18
void serial_transmit(char* s, uint8_t char_count) {
	// sends between 1 and 255 chars if large enough buffer allocated
	// does not prevent against buffer overwrites, increase
	// buffer size if needed
	cli();
	for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
 22c:	a4 17       	cp	r26, r20
 22e:	b5 07       	cpc	r27, r21
 230:	29 f7       	brne	.-54     	; 0x1fc <_Z15serial_transmitPch+0x18>
		transmitting[tx_index] = s[chars_added];
		tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
	} 
	UDR0 = transmitting[tx_head];
 232:	e0 91 d1 01 	lds	r30, 0x01D1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ed 52       	subi	r30, 0x2D	; 45
 23a:	fe 4f       	sbci	r31, 0xFE	; 254
 23c:	80 81       	ld	r24, Z
 23e:	80 93 80 00 	sts	0x0080, r24
	tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
 242:	80 91 d1 01 	lds	r24, 0x01D1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	90 78       	andi	r25, 0x80	; 128
 24e:	99 23       	and	r25, r25
 250:	24 f4       	brge	.+8      	; 0x25a <__stack+0x5b>
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	80 6f       	ori	r24, 0xF0	; 240
 256:	9f 6f       	ori	r25, 0xFF	; 255
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	80 93 d1 01 	sts	0x01D1, r24
	chars_left += (char_count - 1);
 25e:	80 91 d0 01 	lds	r24, 0x01D0
 262:	81 50       	subi	r24, 0x01	; 1
 264:	68 0f       	add	r22, r24
 266:	60 93 d0 01 	sts	0x01D0, r22
	sei();
 26a:	78 94       	sei
 26c:	08 95       	ret

0000026e <__vector_3>:
using timers::Prescaler;

Timer1 timer1(Prescaler::PRESCALER_8);
Timer2 timer2(Prescaler::PRESCALER_8);

ISR(PCINT1_vect) {
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	cli();
 294:	f8 94       	cli
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
	virtual ~GPIO() {}
	
public:	
	bool inline is_set() { return *port_in & pin_mask; }
 296:	e0 e6       	ldi	r30, 0x60	; 96
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	a6 81       	ldd	r26, Z+6	; 0x06
 29c:	b7 81       	ldd	r27, Z+7	; 0x07
 29e:	9c 91       	ld	r25, X
 2a0:	81 85       	ldd	r24, Z+9	; 0x09
 2a2:	89 23       	and	r24, r25
	if(echo1.is_set()) {
 2a4:	d9 f0       	breq	.+54     	; 0x2dc <__vector_3+0x6e>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 2a6:	a8 e8       	ldi	r26, 0x88	; 136
 2a8:	b1 e0       	ldi	r27, 0x01	; 1
 2aa:	12 96       	adiw	r26, 0x02	; 2
 2ac:	ed 91       	ld	r30, X+
 2ae:	fc 91       	ld	r31, X
 2b0:	13 97       	sbiw	r26, 0x03	; 3
 2b2:	90 81       	ld	r25, Z
 2b4:	19 96       	adiw	r26, 0x09	; 9
 2b6:	8c 91       	ld	r24, X
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
 2bc:	10 92 c7 00 	sts	0x00C7, r1
 2c0:	10 92 c6 00 	sts	0x00C6, r1
	volatile uint8_t *const base_address; // Child classes must initialize this

public:
	virtual uint16_t count() = 0;

	void inline start() { *(base_address-1) |= prescale; }
 2c4:	a2 e4       	ldi	r26, 0x42	; 66
 2c6:	b1 e0       	ldi	r27, 0x01	; 1
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	ed 91       	ld	r30, X+
 2cc:	fc 91       	ld	r31, X
 2ce:	14 97       	sbiw	r26, 0x04	; 4
 2d0:	92 91       	ld	r25, -Z
 2d2:	12 96       	adiw	r26, 0x02	; 2
 2d4:	8c 91       	ld	r24, X
 2d6:	89 2b       	or	r24, r25
 2d8:	80 83       	st	Z, r24
 2da:	5c c0       	rjmp	.+184    	; 0x394 <__vector_3+0x126>
	void inline clear() { *port_out &= ~pin_mask; }
 2dc:	a8 e8       	ldi	r26, 0x88	; 136
 2de:	b1 e0       	ldi	r27, 0x01	; 1
 2e0:	12 96       	adiw	r26, 0x02	; 2
 2e2:	ed 91       	ld	r30, X+
 2e4:	fc 91       	ld	r31, X
 2e6:	13 97       	sbiw	r26, 0x03	; 3
 2e8:	90 81       	ld	r25, Z
 2ea:	19 96       	adiw	r26, 0x09	; 9
 2ec:	8c 91       	ld	r24, X
 2ee:	80 95       	com	r24
 2f0:	89 23       	and	r24, r25
 2f2:	80 83       	st	Z, r24
	void inline stop() { *(base_address-1) &= ~PRESCALER_MASK; }
 2f4:	e0 91 45 01 	lds	r30, 0x0145
 2f8:	f0 91 46 01 	lds	r31, 0x0146
 2fc:	82 91       	ld	r24, -Z
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	80 83       	st	Z, r24
public:
	Timer2(Prescaler pre) : Timer16bit(pre, &TCCR2A) {
		TCCR2A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
		TCCR2B = (1<<WGM13) | (1<<WGM12);		
	}
	uint16_t count() { return TCNT2; }
 302:	00 91 c6 00 	lds	r16, 0x00C6
 306:	10 91 c7 00 	lds	r17, 0x00C7
		timer2.clear();
		timer2.start();
	} else { 
		sck.clear();
		timer2.stop();
		echo1_time = (static_cast<uint32_t>(timer2.count()) * 331) / 2000; // ms
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	a8 01       	movw	r20, r16
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	66 1f       	adc	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	66 1f       	adc	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	db 01       	movw	r26, r22
 324:	ca 01       	movw	r24, r20
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	aa 1f       	adc	r26, r26
 32c:	bb 1f       	adc	r27, r27
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	aa 1f       	adc	r26, r26
 334:	bb 1f       	adc	r27, r27
 336:	84 0f       	add	r24, r20
 338:	95 1f       	adc	r25, r21
 33a:	a6 1f       	adc	r26, r22
 33c:	b7 1f       	adc	r27, r23
 33e:	80 0f       	add	r24, r16
 340:	91 1f       	adc	r25, r17
 342:	a2 1f       	adc	r26, r18
 344:	b3 1f       	adc	r27, r19
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	aa 1f       	adc	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	80 1b       	sub	r24, r16
 358:	91 0b       	sbc	r25, r17
 35a:	a2 0b       	sbc	r26, r18
 35c:	b3 0b       	sbc	r27, r19
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	aa 1f       	adc	r26, r26
 364:	bb 1f       	adc	r27, r27
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	bc 01       	movw	r22, r24
 370:	cd 01       	movw	r24, r26
 372:	60 1b       	sub	r22, r16
 374:	71 0b       	sbc	r23, r17
 376:	82 0b       	sbc	r24, r18
 378:	93 0b       	sbc	r25, r19
 37a:	20 ed       	ldi	r18, 0xD0	; 208
 37c:	37 e0       	ldi	r19, 0x07	; 7
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	25 d2       	rcall	.+1098   	; 0x7ce <__udivmodsi4>
 384:	20 93 ba 01 	sts	0x01BA, r18
 388:	30 93 bb 01 	sts	0x01BB, r19
 38c:	40 93 bc 01 	sts	0x01BC, r20
 390:	50 93 bd 01 	sts	0x01BD, r21
	}
	sei();
 394:	78 94       	sei
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <_Z15sample_distancev>:
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
	virtual ~GPIO() {}
	
public:	
	bool inline is_set() { return *port_in & pin_mask; }
 3bc:	e0 e6       	ldi	r30, 0x60	; 96
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	a6 81       	ldd	r26, Z+6	; 0x06
 3c2:	b7 81       	ldd	r27, Z+7	; 0x07
 3c4:	9c 91       	ld	r25, X
 3c6:	81 85       	ldd	r24, Z+9	; 0x09
 3c8:	89 23       	and	r24, r25

uint16_t sample_distance() {
	if(!echo1.is_set())
 3ca:	59 f4       	brne	.+22     	; 0x3e2 <_Z15sample_distancev+0x26>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 3cc:	aa e6       	ldi	r26, 0x6A	; 106
 3ce:	b1 e0       	ldi	r27, 0x01	; 1
 3d0:	12 96       	adiw	r26, 0x02	; 2
 3d2:	ed 91       	ld	r30, X+
 3d4:	fc 91       	ld	r31, X
 3d6:	13 97       	sbiw	r26, 0x03	; 3
 3d8:	90 81       	ld	r25, Z
 3da:	19 96       	adiw	r26, 0x09	; 9
 3dc:	8c 91       	ld	r24, X
 3de:	89 2b       	or	r24, r25
 3e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e2:	25 e3       	ldi	r18, 0x35	; 53
 3e4:	2a 95       	dec	r18
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <_Z15sample_distancev+0x28>
 3e8:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
 3ea:	aa e6       	ldi	r26, 0x6A	; 106
 3ec:	b1 e0       	ldi	r27, 0x01	; 1
 3ee:	12 96       	adiw	r26, 0x02	; 2
 3f0:	ed 91       	ld	r30, X+
 3f2:	fc 91       	ld	r31, X
 3f4:	13 97       	sbiw	r26, 0x03	; 3
 3f6:	90 81       	ld	r25, Z
 3f8:	19 96       	adiw	r26, 0x09	; 9
 3fa:	8c 91       	ld	r24, X
 3fc:	80 95       	com	r24
 3fe:	89 23       	and	r24, r25
 400:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	90 e7       	ldi	r25, 0x70	; 112
 406:	22 e0       	ldi	r18, 0x02	; 2
 408:	81 50       	subi	r24, 0x01	; 1
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	20 40       	sbci	r18, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <_Z15sample_distancev+0x4c>
 410:	00 c0       	rjmp	.+0      	; 0x412 <_Z15sample_distancev+0x56>
 412:	00 00       	nop
		trig1.set();
	_delay_us(20);
	trig1.clear();
	_delay_ms(100);
	return echo1_time;
 414:	80 91 ba 01 	lds	r24, 0x01BA
 418:	90 91 bb 01 	lds	r25, 0x01BB
 41c:	a0 91 bc 01 	lds	r26, 0x01BC
 420:	b0 91 bd 01 	lds	r27, 0x01BD
}
 424:	08 95       	ret

00000426 <main>:
}
*/
char message[16];

int main(void) {
	OSCCAL0 = 0x47;
 426:	87 e4       	ldi	r24, 0x47	; 71
 428:	80 93 74 00 	sts	0x0074, r24

	TOCPMSA1 = (1<<TOCC5S0) | (1<<TOCC4S0);
 42c:	85 e0       	ldi	r24, 0x05	; 5
 42e:	80 93 68 00 	sts	0x0068, r24
	TOCPMCOE = (1<<TOCC5OE) | (1<<TOCC4OE);
 432:	80 e3       	ldi	r24, 0x30	; 48
 434:	80 93 66 00 	sts	0x0066, r24
	
	ICR1 = 20000; // Period us
 438:	80 e2       	ldi	r24, 0x20	; 32
 43a:	9e e4       	ldi	r25, 0x4E	; 78
 43c:	95 bd       	out	0x25, r25	; 37
 43e:	84 bd       	out	0x24, r24	; 36
	
	TCCR2A = 0;
 440:	10 92 ca 00 	sts	0x00CA, r1
	TCCR2B = 0;
 444:	10 92 c9 00 	sts	0x00C9, r1
	
	PCMSK1 = (1<<PCINT8);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	80 bd       	out	0x20, r24	; 32
	GIMSK = (1<<PCIE1);
 44c:	80 e2       	ldi	r24, 0x20	; 32
 44e:	8b bf       	out	0x3b, r24	; 59
	sei();
 450:	78 94       	sei
	
	uint16_t last_distance = 0;
	
	serial_init();
 452:	b9 de       	rcall	.-654    	; 0x1c6 <_Z11serial_initv>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 454:	0f 2e       	mov	r0, r31
 456:	f2 e9       	ldi	r31, 0x92	; 146
 458:	ef 2e       	mov	r14, r31
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	ff 2e       	mov	r15, r31
 45e:	f0 2d       	mov	r31, r0
		txden.set();		
		last_distance = sample_distance();
		//for (auto &c : message)
		//	c = 0;
		cli();
		message[0] = (char)((last_distance / 10000) % 10) + '0';
 460:	c2 e3       	ldi	r28, 0x32	; 50
 462:	d1 e0       	ldi	r29, 0x01	; 1
 464:	0f 2e       	mov	r0, r31
 466:	f0 e1       	ldi	r31, 0x10	; 16
 468:	af 2e       	mov	r10, r31
 46a:	f7 e2       	ldi	r31, 0x27	; 39
 46c:	bf 2e       	mov	r11, r31
 46e:	f0 2d       	mov	r31, r0
 470:	0f 2e       	mov	r0, r31
 472:	fa e0       	ldi	r31, 0x0A	; 10
 474:	8f 2e       	mov	r8, r31
 476:	91 2c       	mov	r9, r1
 478:	f0 2d       	mov	r31, r0
		message[1] = (char)((last_distance / 1000) % 10) + '0';
 47a:	0f 2e       	mov	r0, r31
 47c:	f8 ee       	ldi	r31, 0xE8	; 232
 47e:	cf 2e       	mov	r12, r31
 480:	f3 e0       	ldi	r31, 0x03	; 3
 482:	df 2e       	mov	r13, r31
 484:	f0 2d       	mov	r31, r0
		message[2] = (char)((last_distance / 100) % 10) + '0';
 486:	0f 2e       	mov	r0, r31
 488:	f4 e6       	ldi	r31, 0x64	; 100
 48a:	6f 2e       	mov	r6, r31
 48c:	71 2c       	mov	r7, r1
 48e:	f0 2d       	mov	r31, r0
		message[3] = (char)((last_distance / 10) % 10) + '0';
		message[4] = (char)(last_distance % 10) + '0';
		message[5] = '\n';
 490:	0f 2e       	mov	r0, r31
 492:	fa e0       	ldi	r31, 0x0A	; 10
 494:	5f 2e       	mov	r5, r31
 496:	f0 2d       	mov	r31, r0
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
 498:	08 e8       	ldi	r16, 0x88	; 136
 49a:	11 e0       	ldi	r17, 0x01	; 1
	void inline set() { *port_out |= pin_mask; }
 49c:	d7 01       	movw	r26, r14
 49e:	12 96       	adiw	r26, 0x02	; 2
 4a0:	ed 91       	ld	r30, X+
 4a2:	fc 91       	ld	r31, X
 4a4:	13 97       	sbiw	r26, 0x03	; 3
 4a6:	90 81       	ld	r25, Z
 4a8:	19 96       	adiw	r26, 0x09	; 9
 4aa:	8c 91       	ld	r24, X
 4ac:	89 2b       	or	r24, r25
 4ae:	80 83       	st	Z, r24
	
	serial_init();
    while (1) 
    {
		txden.set();		
		last_distance = sample_distance();
 4b0:	85 df       	rcall	.-246    	; 0x3bc <_Z15sample_distancev>
 4b2:	9c 01       	movw	r18, r24
		//for (auto &c : message)
		//	c = 0;
		cli();
 4b4:	f8 94       	cli
		message[0] = (char)((last_distance / 10000) % 10) + '0';
 4b6:	b5 01       	movw	r22, r10
 4b8:	76 d1       	rcall	.+748    	; 0x7a6 <__udivmodhi4>
 4ba:	cb 01       	movw	r24, r22
 4bc:	b4 01       	movw	r22, r8
 4be:	73 d1       	rcall	.+742    	; 0x7a6 <__udivmodhi4>
 4c0:	80 5d       	subi	r24, 0xD0	; 208
 4c2:	88 83       	st	Y, r24
		message[1] = (char)((last_distance / 1000) % 10) + '0';
 4c4:	c9 01       	movw	r24, r18
 4c6:	b6 01       	movw	r22, r12
 4c8:	6e d1       	rcall	.+732    	; 0x7a6 <__udivmodhi4>
 4ca:	cb 01       	movw	r24, r22
 4cc:	b4 01       	movw	r22, r8
 4ce:	6b d1       	rcall	.+726    	; 0x7a6 <__udivmodhi4>
 4d0:	80 5d       	subi	r24, 0xD0	; 208
 4d2:	89 83       	std	Y+1, r24	; 0x01
		message[2] = (char)((last_distance / 100) % 10) + '0';
 4d4:	c9 01       	movw	r24, r18
 4d6:	b3 01       	movw	r22, r6
 4d8:	66 d1       	rcall	.+716    	; 0x7a6 <__udivmodhi4>
 4da:	cb 01       	movw	r24, r22
 4dc:	b4 01       	movw	r22, r8
 4de:	63 d1       	rcall	.+710    	; 0x7a6 <__udivmodhi4>
 4e0:	80 5d       	subi	r24, 0xD0	; 208
 4e2:	8a 83       	std	Y+2, r24	; 0x02
		message[3] = (char)((last_distance / 10) % 10) + '0';
 4e4:	c9 01       	movw	r24, r18
 4e6:	b4 01       	movw	r22, r8
 4e8:	5e d1       	rcall	.+700    	; 0x7a6 <__udivmodhi4>
 4ea:	28 2f       	mov	r18, r24
 4ec:	cb 01       	movw	r24, r22
 4ee:	b4 01       	movw	r22, r8
 4f0:	5a d1       	rcall	.+692    	; 0x7a6 <__udivmodhi4>
 4f2:	80 5d       	subi	r24, 0xD0	; 208
 4f4:	8b 83       	std	Y+3, r24	; 0x03
		message[4] = (char)(last_distance % 10) + '0';
 4f6:	20 5d       	subi	r18, 0xD0	; 208
 4f8:	2c 83       	std	Y+4, r18	; 0x04
		message[5] = '\n';
 4fa:	5d 82       	std	Y+5, r5	; 0x05
		sei();
 4fc:	78 94       	sei
		//sprintf(message, "[%u]\n", last_distance);
		//sprintf(message, "DOPE! yeahh\n");
		
		serial_transmit(message, 6);
 4fe:	66 e0       	ldi	r22, 0x06	; 6
 500:	ce 01       	movw	r24, r28
 502:	70 de       	rcall	.-800    	; 0x1e4 <_Z15serial_transmitPch>
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
 504:	d8 01       	movw	r26, r16
 506:	12 96       	adiw	r26, 0x02	; 2
 508:	ed 91       	ld	r30, X+
 50a:	fc 91       	ld	r31, X
 50c:	13 97       	sbiw	r26, 0x03	; 3
 50e:	90 81       	ld	r25, Z
 510:	19 96       	adiw	r26, 0x09	; 9
 512:	8c 91       	ld	r24, X
 514:	89 27       	eor	r24, r25
 516:	80 83       	st	Z, r24
 518:	c1 cf       	rjmp	.-126    	; 0x49c <main+0x76>

0000051a <_GLOBAL__sub_I__Znwj>:
			if (distance3 > last_distance)
			move_forward();
		} 
		*/
    }
}
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 522:	e0 eb       	ldi	r30, 0xB0	; 176
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	6b e3       	ldi	r22, 0x3B	; 59
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	73 83       	std	Z+3, r23	; 0x03
 52c:	62 83       	std	Z+2, r22	; 0x02
 52e:	4a e3       	ldi	r20, 0x3A	; 58
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	55 83       	std	Z+5, r21	; 0x05
 534:	44 83       	std	Z+4, r20	; 0x04
 536:	29 e3       	ldi	r18, 0x39	; 57
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	37 83       	std	Z+7, r19	; 0x07
 53c:	26 83       	std	Z+6, r18	; 0x06
 53e:	10 86       	std	Z+8, r1	; 0x08
 540:	11 e0       	ldi	r17, 0x01	; 1
 542:	11 87       	std	Z+9, r17	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 544:	86 e2       	ldi	r24, 0x26	; 38
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	91 83       	std	Z+1, r25	; 0x01
 54a:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
 54c:	d8 98       	cbi	0x1b, 0	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 54e:	d0 9a       	sbi	0x1a, 0	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 550:	a6 ea       	ldi	r26, 0xA6	; 166
 552:	b1 e0       	ldi	r27, 0x01	; 1
 554:	13 96       	adiw	r26, 0x03	; 3
 556:	7c 93       	st	X, r23
 558:	6e 93       	st	-X, r22
 55a:	12 97       	sbiw	r26, 0x02	; 2
 55c:	15 96       	adiw	r26, 0x05	; 5
 55e:	5c 93       	st	X, r21
 560:	4e 93       	st	-X, r20
 562:	14 97       	sbiw	r26, 0x04	; 4
 564:	17 96       	adiw	r26, 0x07	; 7
 566:	3c 93       	st	X, r19
 568:	2e 93       	st	-X, r18
 56a:	16 97       	sbiw	r26, 0x06	; 6
 56c:	18 96       	adiw	r26, 0x08	; 8
 56e:	1c 93       	st	X, r17
 570:	18 97       	sbiw	r26, 0x08	; 8
 572:	e2 e0       	ldi	r30, 0x02	; 2
 574:	19 96       	adiw	r26, 0x09	; 9
 576:	ec 93       	st	X, r30
 578:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 57a:	8d 93       	st	X+, r24
 57c:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 57e:	d9 98       	cbi	0x1b, 1	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 580:	d1 9a       	sbi	0x1a, 1	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 582:	ac e9       	ldi	r26, 0x9C	; 156
 584:	b1 e0       	ldi	r27, 0x01	; 1
 586:	13 96       	adiw	r26, 0x03	; 3
 588:	7c 93       	st	X, r23
 58a:	6e 93       	st	-X, r22
 58c:	12 97       	sbiw	r26, 0x02	; 2
 58e:	15 96       	adiw	r26, 0x05	; 5
 590:	5c 93       	st	X, r21
 592:	4e 93       	st	-X, r20
 594:	14 97       	sbiw	r26, 0x04	; 4
 596:	17 96       	adiw	r26, 0x07	; 7
 598:	3c 93       	st	X, r19
 59a:	2e 93       	st	-X, r18
 59c:	16 97       	sbiw	r26, 0x06	; 6
 59e:	18 96       	adiw	r26, 0x08	; 8
 5a0:	ec 93       	st	X, r30
 5a2:	18 97       	sbiw	r26, 0x08	; 8
 5a4:	f4 e0       	ldi	r31, 0x04	; 4
 5a6:	19 96       	adiw	r26, 0x09	; 9
 5a8:	fc 93       	st	X, r31
 5aa:	19 97       	sbiw	r26, 0x09	; 9
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 5ac:	ce e2       	ldi	r28, 0x2E	; 46
 5ae:	d1 e0       	ldi	r29, 0x01	; 1
 5b0:	cd 93       	st	X+, r28
 5b2:	dc 93       	st	X, r29
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 5b4:	d2 98       	cbi	0x1a, 2	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 5b6:	a2 e9       	ldi	r26, 0x92	; 146
 5b8:	b1 e0       	ldi	r27, 0x01	; 1
 5ba:	13 96       	adiw	r26, 0x03	; 3
 5bc:	7c 93       	st	X, r23
 5be:	6e 93       	st	-X, r22
 5c0:	12 97       	sbiw	r26, 0x02	; 2
 5c2:	15 96       	adiw	r26, 0x05	; 5
 5c4:	5c 93       	st	X, r21
 5c6:	4e 93       	st	-X, r20
 5c8:	14 97       	sbiw	r26, 0x04	; 4
 5ca:	17 96       	adiw	r26, 0x07	; 7
 5cc:	3c 93       	st	X, r19
 5ce:	2e 93       	st	-X, r18
 5d0:	16 97       	sbiw	r26, 0x06	; 6
 5d2:	03 e0       	ldi	r16, 0x03	; 3
 5d4:	18 96       	adiw	r26, 0x08	; 8
 5d6:	0c 93       	st	X, r16
 5d8:	18 97       	sbiw	r26, 0x08	; 8
 5da:	08 e0       	ldi	r16, 0x08	; 8
 5dc:	19 96       	adiw	r26, 0x09	; 9
 5de:	0c 93       	st	X, r16
 5e0:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 5e2:	8d 93       	st	X+, r24
 5e4:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 5e6:	db 98       	cbi	0x1b, 3	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 5e8:	d3 9a       	sbi	0x1a, 3	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 5ea:	a8 e8       	ldi	r26, 0x88	; 136
 5ec:	b1 e0       	ldi	r27, 0x01	; 1
 5ee:	13 96       	adiw	r26, 0x03	; 3
 5f0:	7c 93       	st	X, r23
 5f2:	6e 93       	st	-X, r22
 5f4:	12 97       	sbiw	r26, 0x02	; 2
 5f6:	15 96       	adiw	r26, 0x05	; 5
 5f8:	5c 93       	st	X, r21
 5fa:	4e 93       	st	-X, r20
 5fc:	14 97       	sbiw	r26, 0x04	; 4
 5fe:	17 96       	adiw	r26, 0x07	; 7
 600:	3c 93       	st	X, r19
 602:	2e 93       	st	-X, r18
 604:	16 97       	sbiw	r26, 0x06	; 6
 606:	18 96       	adiw	r26, 0x08	; 8
 608:	fc 93       	st	X, r31
 60a:	18 97       	sbiw	r26, 0x08	; 8
 60c:	00 e1       	ldi	r16, 0x10	; 16
 60e:	19 96       	adiw	r26, 0x09	; 9
 610:	0c 93       	st	X, r16
 612:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 614:	8d 93       	st	X+, r24
 616:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 618:	dc 98       	cbi	0x1b, 4	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 61a:	d4 9a       	sbi	0x1a, 4	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 61c:	ae e7       	ldi	r26, 0x7E	; 126
 61e:	b1 e0       	ldi	r27, 0x01	; 1
 620:	13 96       	adiw	r26, 0x03	; 3
 622:	7c 93       	st	X, r23
 624:	6e 93       	st	-X, r22
 626:	12 97       	sbiw	r26, 0x02	; 2
 628:	15 96       	adiw	r26, 0x05	; 5
 62a:	5c 93       	st	X, r21
 62c:	4e 93       	st	-X, r20
 62e:	14 97       	sbiw	r26, 0x04	; 4
 630:	17 96       	adiw	r26, 0x07	; 7
 632:	3c 93       	st	X, r19
 634:	2e 93       	st	-X, r18
 636:	16 97       	sbiw	r26, 0x06	; 6
 638:	05 e0       	ldi	r16, 0x05	; 5
 63a:	18 96       	adiw	r26, 0x08	; 8
 63c:	0c 93       	st	X, r16
 63e:	18 97       	sbiw	r26, 0x08	; 8
 640:	00 e2       	ldi	r16, 0x20	; 32
 642:	19 96       	adiw	r26, 0x09	; 9
 644:	0c 93       	st	X, r16
 646:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 648:	8d 93       	st	X+, r24
 64a:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 64c:	dd 98       	cbi	0x1b, 5	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 64e:	d5 9a       	sbi	0x1a, 5	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 650:	a4 e7       	ldi	r26, 0x74	; 116
 652:	b1 e0       	ldi	r27, 0x01	; 1
 654:	13 96       	adiw	r26, 0x03	; 3
 656:	7c 93       	st	X, r23
 658:	6e 93       	st	-X, r22
 65a:	12 97       	sbiw	r26, 0x02	; 2
 65c:	15 96       	adiw	r26, 0x05	; 5
 65e:	5c 93       	st	X, r21
 660:	4e 93       	st	-X, r20
 662:	14 97       	sbiw	r26, 0x04	; 4
 664:	17 96       	adiw	r26, 0x07	; 7
 666:	3c 93       	st	X, r19
 668:	2e 93       	st	-X, r18
 66a:	16 97       	sbiw	r26, 0x06	; 6
 66c:	06 e0       	ldi	r16, 0x06	; 6
 66e:	18 96       	adiw	r26, 0x08	; 8
 670:	0c 93       	st	X, r16
 672:	18 97       	sbiw	r26, 0x08	; 8
 674:	00 e4       	ldi	r16, 0x40	; 64
 676:	19 96       	adiw	r26, 0x09	; 9
 678:	0c 93       	st	X, r16
 67a:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 67c:	8d 93       	st	X+, r24
 67e:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 680:	de 98       	cbi	0x1b, 6	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 682:	d6 9a       	sbi	0x1a, 6	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 684:	aa e6       	ldi	r26, 0x6A	; 106
 686:	b1 e0       	ldi	r27, 0x01	; 1
 688:	13 96       	adiw	r26, 0x03	; 3
 68a:	7c 93       	st	X, r23
 68c:	6e 93       	st	-X, r22
 68e:	12 97       	sbiw	r26, 0x02	; 2
 690:	15 96       	adiw	r26, 0x05	; 5
 692:	5c 93       	st	X, r21
 694:	4e 93       	st	-X, r20
 696:	14 97       	sbiw	r26, 0x04	; 4
 698:	17 96       	adiw	r26, 0x07	; 7
 69a:	3c 93       	st	X, r19
 69c:	2e 93       	st	-X, r18
 69e:	16 97       	sbiw	r26, 0x06	; 6
 6a0:	27 e0       	ldi	r18, 0x07	; 7
 6a2:	18 96       	adiw	r26, 0x08	; 8
 6a4:	2c 93       	st	X, r18
 6a6:	18 97       	sbiw	r26, 0x08	; 8
 6a8:	20 e8       	ldi	r18, 0x80	; 128
 6aa:	19 96       	adiw	r26, 0x09	; 9
 6ac:	2c 93       	st	X, r18
 6ae:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 6b0:	8d 93       	st	X+, r24
 6b2:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 6b4:	df 98       	cbi	0x1b, 7	; 27
		// Set pin in port to output
		*port_dir |= pin_mask;
 6b6:	d7 9a       	sbi	0x1a, 7	; 26
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 6b8:	a0 e6       	ldi	r26, 0x60	; 96
 6ba:	b1 e0       	ldi	r27, 0x01	; 1
 6bc:	68 e3       	ldi	r22, 0x38	; 56
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	13 96       	adiw	r26, 0x03	; 3
 6c2:	7c 93       	st	X, r23
 6c4:	6e 93       	st	-X, r22
 6c6:	12 97       	sbiw	r26, 0x02	; 2
 6c8:	47 e3       	ldi	r20, 0x37	; 55
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	15 96       	adiw	r26, 0x05	; 5
 6ce:	5c 93       	st	X, r21
 6d0:	4e 93       	st	-X, r20
 6d2:	14 97       	sbiw	r26, 0x04	; 4
 6d4:	26 e3       	ldi	r18, 0x36	; 54
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	17 96       	adiw	r26, 0x07	; 7
 6da:	3c 93       	st	X, r19
 6dc:	2e 93       	st	-X, r18
 6de:	16 97       	sbiw	r26, 0x06	; 6
 6e0:	18 96       	adiw	r26, 0x08	; 8
 6e2:	1c 92       	st	X, r1
 6e4:	18 97       	sbiw	r26, 0x08	; 8
 6e6:	19 96       	adiw	r26, 0x09	; 9
 6e8:	1c 93       	st	X, r17
 6ea:	19 97       	sbiw	r26, 0x09	; 9
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 6ec:	cd 93       	st	X+, r28
 6ee:	dc 93       	st	X, r29
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 6f0:	b8 98       	cbi	0x17, 0	; 23
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 6f2:	a6 e5       	ldi	r26, 0x56	; 86
 6f4:	b1 e0       	ldi	r27, 0x01	; 1
 6f6:	13 96       	adiw	r26, 0x03	; 3
 6f8:	7c 93       	st	X, r23
 6fa:	6e 93       	st	-X, r22
 6fc:	12 97       	sbiw	r26, 0x02	; 2
 6fe:	15 96       	adiw	r26, 0x05	; 5
 700:	5c 93       	st	X, r21
 702:	4e 93       	st	-X, r20
 704:	14 97       	sbiw	r26, 0x04	; 4
 706:	17 96       	adiw	r26, 0x07	; 7
 708:	3c 93       	st	X, r19
 70a:	2e 93       	st	-X, r18
 70c:	16 97       	sbiw	r26, 0x06	; 6
 70e:	18 96       	adiw	r26, 0x08	; 8
 710:	1c 93       	st	X, r17
 712:	18 97       	sbiw	r26, 0x08	; 8
 714:	19 96       	adiw	r26, 0x09	; 9
 716:	ec 93       	st	X, r30
 718:	19 97       	sbiw	r26, 0x09	; 9
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 71a:	8d 93       	st	X+, r24
 71c:	9c 93       	st	X, r25
		// Set output low
		*port_out &= ~pin_mask;
 71e:	c1 98       	cbi	0x18, 1	; 24
		// Set pin in port to output
		*port_dir |= pin_mask;
 720:	b9 9a       	sbi	0x17, 1	; 23
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 722:	ac e4       	ldi	r26, 0x4C	; 76
 724:	b1 e0       	ldi	r27, 0x01	; 1
 726:	13 96       	adiw	r26, 0x03	; 3
 728:	7c 93       	st	X, r23
 72a:	6e 93       	st	-X, r22
 72c:	12 97       	sbiw	r26, 0x02	; 2
 72e:	15 96       	adiw	r26, 0x05	; 5
 730:	5c 93       	st	X, r21
 732:	4e 93       	st	-X, r20
 734:	14 97       	sbiw	r26, 0x04	; 4
 736:	17 96       	adiw	r26, 0x07	; 7
 738:	3c 93       	st	X, r19
 73a:	2e 93       	st	-X, r18
 73c:	16 97       	sbiw	r26, 0x06	; 6
 73e:	18 96       	adiw	r26, 0x08	; 8
 740:	ec 93       	st	X, r30
 742:	18 97       	sbiw	r26, 0x08	; 8
 744:	19 96       	adiw	r26, 0x09	; 9
 746:	fc 93       	st	X, r31
 748:	19 97       	sbiw	r26, 0x09	; 9
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 74a:	cd 93       	st	X+, r28
 74c:	dc 93       	st	X, r29
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 74e:	ba 98       	cbi	0x17, 2	; 23
};

class GenericTimer {
protected:
	Prescaler prescale;
	GenericTimer(Prescaler pre) : prescale(pre) {}	
 750:	a7 e4       	ldi	r26, 0x47	; 71
 752:	b1 e0       	ldi	r27, 0x01	; 1
 754:	12 96       	adiw	r26, 0x02	; 2
 756:	ec 93       	st	X, r30
 758:	12 97       	sbiw	r26, 0x02	; 2
};

class Timer16bit : public GenericTimer {
protected:
	Timer16bit(Prescaler pre, volatile uint8_t *const base) 
			: GenericTimer(pre), base_address(base) {}
 75a:	8f e4       	ldi	r24, 0x4F	; 79
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	14 96       	adiw	r26, 0x04	; 4
 760:	9c 93       	st	X, r25
 762:	8e 93       	st	-X, r24
 764:	13 97       	sbiw	r26, 0x03	; 3
	void clear() { TCNT0 = 0; }
};

class Timer1 : public Timer16bit {
public:
	Timer1(Prescaler pre) : Timer16bit(pre, &TCCR1A) {
 766:	8a e0       	ldi	r24, 0x0A	; 10
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	8d 93       	st	X+, r24
 76c:	9c 93       	st	X, r25
		TCCR1A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
 76e:	92 ea       	ldi	r25, 0xA2	; 162
 770:	9f bd       	out	0x2f, r25	; 47
		TCCR1B = (1<<WGM13) | (1<<WGM12);
 772:	88 e1       	ldi	r24, 0x18	; 24
 774:	8e bd       	out	0x2e, r24	; 46
};

class GenericTimer {
protected:
	Prescaler prescale;
	GenericTimer(Prescaler pre) : prescale(pre) {}	
 776:	a2 e4       	ldi	r26, 0x42	; 66
 778:	b1 e0       	ldi	r27, 0x01	; 1
 77a:	12 96       	adiw	r26, 0x02	; 2
 77c:	ec 93       	st	X, r30
 77e:	12 97       	sbiw	r26, 0x02	; 2
};

class Timer16bit : public GenericTimer {
protected:
	Timer16bit(Prescaler pre, volatile uint8_t *const base) 
			: GenericTimer(pre), base_address(base) {}
 780:	ea ec       	ldi	r30, 0xCA	; 202
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	14 96       	adiw	r26, 0x04	; 4
 786:	fc 93       	st	X, r31
 788:	ee 93       	st	-X, r30
 78a:	13 97       	sbiw	r26, 0x03	; 3
	void clear() { TCNT1 = 0; }
};

class Timer2 : public Timer16bit {
public:
	Timer2(Prescaler pre) : Timer16bit(pre, &TCCR2A) {
 78c:	28 e1       	ldi	r18, 0x18	; 24
 78e:	31 e0       	ldi	r19, 0x01	; 1
 790:	2d 93       	st	X+, r18
 792:	3c 93       	st	X, r19
		TCCR2A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
 794:	90 83       	st	Z, r25
		TCCR2B = (1<<WGM13) | (1<<WGM12);		
 796:	80 93 c9 00 	sts	0x00C9, r24
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	08 95       	ret

000007a4 <_GLOBAL__sub_D__Znwj>:
 7a4:	08 95       	ret

000007a6 <__udivmodhi4>:
 7a6:	aa 1b       	sub	r26, r26
 7a8:	bb 1b       	sub	r27, r27
 7aa:	51 e1       	ldi	r21, 0x11	; 17
 7ac:	07 c0       	rjmp	.+14     	; 0x7bc <__udivmodhi4_ep>

000007ae <__udivmodhi4_loop>:
 7ae:	aa 1f       	adc	r26, r26
 7b0:	bb 1f       	adc	r27, r27
 7b2:	a6 17       	cp	r26, r22
 7b4:	b7 07       	cpc	r27, r23
 7b6:	10 f0       	brcs	.+4      	; 0x7bc <__udivmodhi4_ep>
 7b8:	a6 1b       	sub	r26, r22
 7ba:	b7 0b       	sbc	r27, r23

000007bc <__udivmodhi4_ep>:
 7bc:	88 1f       	adc	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	5a 95       	dec	r21
 7c2:	a9 f7       	brne	.-22     	; 0x7ae <__udivmodhi4_loop>
 7c4:	80 95       	com	r24
 7c6:	90 95       	com	r25
 7c8:	bc 01       	movw	r22, r24
 7ca:	cd 01       	movw	r24, r26
 7cc:	08 95       	ret

000007ce <__udivmodsi4>:
 7ce:	a1 e2       	ldi	r26, 0x21	; 33
 7d0:	1a 2e       	mov	r1, r26
 7d2:	aa 1b       	sub	r26, r26
 7d4:	bb 1b       	sub	r27, r27
 7d6:	fd 01       	movw	r30, r26
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <__udivmodsi4_ep>

000007da <__udivmodsi4_loop>:
 7da:	aa 1f       	adc	r26, r26
 7dc:	bb 1f       	adc	r27, r27
 7de:	ee 1f       	adc	r30, r30
 7e0:	ff 1f       	adc	r31, r31
 7e2:	a2 17       	cp	r26, r18
 7e4:	b3 07       	cpc	r27, r19
 7e6:	e4 07       	cpc	r30, r20
 7e8:	f5 07       	cpc	r31, r21
 7ea:	20 f0       	brcs	.+8      	; 0x7f4 <__udivmodsi4_ep>
 7ec:	a2 1b       	sub	r26, r18
 7ee:	b3 0b       	sbc	r27, r19
 7f0:	e4 0b       	sbc	r30, r20
 7f2:	f5 0b       	sbc	r31, r21

000007f4 <__udivmodsi4_ep>:
 7f4:	66 1f       	adc	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	1a 94       	dec	r1
 7fe:	69 f7       	brne	.-38     	; 0x7da <__udivmodsi4_loop>
 800:	60 95       	com	r22
 802:	70 95       	com	r23
 804:	80 95       	com	r24
 806:	90 95       	com	r25
 808:	9b 01       	movw	r18, r22
 80a:	ac 01       	movw	r20, r24
 80c:	bd 01       	movw	r22, r26
 80e:	cf 01       	movw	r24, r30
 810:	08 95       	ret

00000812 <__tablejump2__>:
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	05 90       	lpm	r0, Z+
 818:	f4 91       	lpm	r31, Z
 81a:	e0 2d       	mov	r30, r0
 81c:	09 94       	ijmp

0000081e <malloc>:
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	82 30       	cpi	r24, 0x02	; 2
 824:	91 05       	cpc	r25, r1
 826:	10 f4       	brcc	.+4      	; 0x82c <malloc+0xe>
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	e0 91 e5 01 	lds	r30, 0x01E5
 830:	f0 91 e6 01 	lds	r31, 0x01E6
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	c0 e0       	ldi	r28, 0x00	; 0
 83a:	d0 e0       	ldi	r29, 0x00	; 0
 83c:	30 97       	sbiw	r30, 0x00	; 0
 83e:	11 f1       	breq	.+68     	; 0x884 <malloc+0x66>
 840:	40 81       	ld	r20, Z
 842:	51 81       	ldd	r21, Z+1	; 0x01
 844:	48 17       	cp	r20, r24
 846:	59 07       	cpc	r21, r25
 848:	c0 f0       	brcs	.+48     	; 0x87a <malloc+0x5c>
 84a:	48 17       	cp	r20, r24
 84c:	59 07       	cpc	r21, r25
 84e:	61 f4       	brne	.+24     	; 0x868 <malloc+0x4a>
 850:	82 81       	ldd	r24, Z+2	; 0x02
 852:	93 81       	ldd	r25, Z+3	; 0x03
 854:	20 97       	sbiw	r28, 0x00	; 0
 856:	19 f0       	breq	.+6      	; 0x85e <malloc+0x40>
 858:	9b 83       	std	Y+3, r25	; 0x03
 85a:	8a 83       	std	Y+2, r24	; 0x02
 85c:	2b c0       	rjmp	.+86     	; 0x8b4 <malloc+0x96>
 85e:	90 93 e6 01 	sts	0x01E6, r25
 862:	80 93 e5 01 	sts	0x01E5, r24
 866:	26 c0       	rjmp	.+76     	; 0x8b4 <malloc+0x96>
 868:	21 15       	cp	r18, r1
 86a:	31 05       	cpc	r19, r1
 86c:	19 f0       	breq	.+6      	; 0x874 <malloc+0x56>
 86e:	42 17       	cp	r20, r18
 870:	53 07       	cpc	r21, r19
 872:	18 f4       	brcc	.+6      	; 0x87a <malloc+0x5c>
 874:	9a 01       	movw	r18, r20
 876:	be 01       	movw	r22, r28
 878:	df 01       	movw	r26, r30
 87a:	ef 01       	movw	r28, r30
 87c:	02 80       	ldd	r0, Z+2	; 0x02
 87e:	f3 81       	ldd	r31, Z+3	; 0x03
 880:	e0 2d       	mov	r30, r0
 882:	dc cf       	rjmp	.-72     	; 0x83c <malloc+0x1e>
 884:	21 15       	cp	r18, r1
 886:	31 05       	cpc	r19, r1
 888:	09 f1       	breq	.+66     	; 0x8cc <malloc+0xae>
 88a:	28 1b       	sub	r18, r24
 88c:	39 0b       	sbc	r19, r25
 88e:	24 30       	cpi	r18, 0x04	; 4
 890:	31 05       	cpc	r19, r1
 892:	90 f4       	brcc	.+36     	; 0x8b8 <malloc+0x9a>
 894:	12 96       	adiw	r26, 0x02	; 2
 896:	8d 91       	ld	r24, X+
 898:	9c 91       	ld	r25, X
 89a:	13 97       	sbiw	r26, 0x03	; 3
 89c:	61 15       	cp	r22, r1
 89e:	71 05       	cpc	r23, r1
 8a0:	21 f0       	breq	.+8      	; 0x8aa <malloc+0x8c>
 8a2:	fb 01       	movw	r30, r22
 8a4:	93 83       	std	Z+3, r25	; 0x03
 8a6:	82 83       	std	Z+2, r24	; 0x02
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <malloc+0x94>
 8aa:	90 93 e6 01 	sts	0x01E6, r25
 8ae:	80 93 e5 01 	sts	0x01E5, r24
 8b2:	fd 01       	movw	r30, r26
 8b4:	32 96       	adiw	r30, 0x02	; 2
 8b6:	44 c0       	rjmp	.+136    	; 0x940 <malloc+0x122>
 8b8:	fd 01       	movw	r30, r26
 8ba:	e2 0f       	add	r30, r18
 8bc:	f3 1f       	adc	r31, r19
 8be:	81 93       	st	Z+, r24
 8c0:	91 93       	st	Z+, r25
 8c2:	22 50       	subi	r18, 0x02	; 2
 8c4:	31 09       	sbc	r19, r1
 8c6:	2d 93       	st	X+, r18
 8c8:	3c 93       	st	X, r19
 8ca:	3a c0       	rjmp	.+116    	; 0x940 <malloc+0x122>
 8cc:	20 91 e3 01 	lds	r18, 0x01E3
 8d0:	30 91 e4 01 	lds	r19, 0x01E4
 8d4:	23 2b       	or	r18, r19
 8d6:	41 f4       	brne	.+16     	; 0x8e8 <malloc+0xca>
 8d8:	20 91 02 01 	lds	r18, 0x0102
 8dc:	30 91 03 01 	lds	r19, 0x0103
 8e0:	30 93 e4 01 	sts	0x01E4, r19
 8e4:	20 93 e3 01 	sts	0x01E3, r18
 8e8:	20 91 00 01 	lds	r18, 0x0100
 8ec:	30 91 01 01 	lds	r19, 0x0101
 8f0:	21 15       	cp	r18, r1
 8f2:	31 05       	cpc	r19, r1
 8f4:	41 f4       	brne	.+16     	; 0x906 <malloc+0xe8>
 8f6:	2d b7       	in	r18, 0x3d	; 61
 8f8:	3e b7       	in	r19, 0x3e	; 62
 8fa:	40 91 04 01 	lds	r20, 0x0104
 8fe:	50 91 05 01 	lds	r21, 0x0105
 902:	24 1b       	sub	r18, r20
 904:	35 0b       	sbc	r19, r21
 906:	e0 91 e3 01 	lds	r30, 0x01E3
 90a:	f0 91 e4 01 	lds	r31, 0x01E4
 90e:	e2 17       	cp	r30, r18
 910:	f3 07       	cpc	r31, r19
 912:	a0 f4       	brcc	.+40     	; 0x93c <malloc+0x11e>
 914:	2e 1b       	sub	r18, r30
 916:	3f 0b       	sbc	r19, r31
 918:	28 17       	cp	r18, r24
 91a:	39 07       	cpc	r19, r25
 91c:	78 f0       	brcs	.+30     	; 0x93c <malloc+0x11e>
 91e:	ac 01       	movw	r20, r24
 920:	4e 5f       	subi	r20, 0xFE	; 254
 922:	5f 4f       	sbci	r21, 0xFF	; 255
 924:	24 17       	cp	r18, r20
 926:	35 07       	cpc	r19, r21
 928:	48 f0       	brcs	.+18     	; 0x93c <malloc+0x11e>
 92a:	4e 0f       	add	r20, r30
 92c:	5f 1f       	adc	r21, r31
 92e:	50 93 e4 01 	sts	0x01E4, r21
 932:	40 93 e3 01 	sts	0x01E3, r20
 936:	81 93       	st	Z+, r24
 938:	91 93       	st	Z+, r25
 93a:	02 c0       	rjmp	.+4      	; 0x940 <malloc+0x122>
 93c:	e0 e0       	ldi	r30, 0x00	; 0
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	cf 01       	movw	r24, r30
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	08 95       	ret

00000948 <free>:
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	09 f4       	brne	.+2      	; 0x956 <free+0xe>
 954:	8c c0       	rjmp	.+280    	; 0xa6e <free+0x126>
 956:	fc 01       	movw	r30, r24
 958:	32 97       	sbiw	r30, 0x02	; 2
 95a:	13 82       	std	Z+3, r1	; 0x03
 95c:	12 82       	std	Z+2, r1	; 0x02
 95e:	00 91 e5 01 	lds	r16, 0x01E5
 962:	10 91 e6 01 	lds	r17, 0x01E6
 966:	01 15       	cp	r16, r1
 968:	11 05       	cpc	r17, r1
 96a:	81 f4       	brne	.+32     	; 0x98c <free+0x44>
 96c:	20 81       	ld	r18, Z
 96e:	31 81       	ldd	r19, Z+1	; 0x01
 970:	82 0f       	add	r24, r18
 972:	93 1f       	adc	r25, r19
 974:	20 91 e3 01 	lds	r18, 0x01E3
 978:	30 91 e4 01 	lds	r19, 0x01E4
 97c:	28 17       	cp	r18, r24
 97e:	39 07       	cpc	r19, r25
 980:	79 f5       	brne	.+94     	; 0x9e0 <free+0x98>
 982:	f0 93 e4 01 	sts	0x01E4, r31
 986:	e0 93 e3 01 	sts	0x01E3, r30
 98a:	71 c0       	rjmp	.+226    	; 0xa6e <free+0x126>
 98c:	d8 01       	movw	r26, r16
 98e:	40 e0       	ldi	r20, 0x00	; 0
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	ae 17       	cp	r26, r30
 994:	bf 07       	cpc	r27, r31
 996:	50 f4       	brcc	.+20     	; 0x9ac <free+0x64>
 998:	12 96       	adiw	r26, 0x02	; 2
 99a:	2d 91       	ld	r18, X+
 99c:	3c 91       	ld	r19, X
 99e:	13 97       	sbiw	r26, 0x03	; 3
 9a0:	ad 01       	movw	r20, r26
 9a2:	21 15       	cp	r18, r1
 9a4:	31 05       	cpc	r19, r1
 9a6:	09 f1       	breq	.+66     	; 0x9ea <free+0xa2>
 9a8:	d9 01       	movw	r26, r18
 9aa:	f3 cf       	rjmp	.-26     	; 0x992 <free+0x4a>
 9ac:	9d 01       	movw	r18, r26
 9ae:	da 01       	movw	r26, r20
 9b0:	33 83       	std	Z+3, r19	; 0x03
 9b2:	22 83       	std	Z+2, r18	; 0x02
 9b4:	60 81       	ld	r22, Z
 9b6:	71 81       	ldd	r23, Z+1	; 0x01
 9b8:	86 0f       	add	r24, r22
 9ba:	97 1f       	adc	r25, r23
 9bc:	82 17       	cp	r24, r18
 9be:	93 07       	cpc	r25, r19
 9c0:	69 f4       	brne	.+26     	; 0x9dc <free+0x94>
 9c2:	ec 01       	movw	r28, r24
 9c4:	28 81       	ld	r18, Y
 9c6:	39 81       	ldd	r19, Y+1	; 0x01
 9c8:	26 0f       	add	r18, r22
 9ca:	37 1f       	adc	r19, r23
 9cc:	2e 5f       	subi	r18, 0xFE	; 254
 9ce:	3f 4f       	sbci	r19, 0xFF	; 255
 9d0:	31 83       	std	Z+1, r19	; 0x01
 9d2:	20 83       	st	Z, r18
 9d4:	8a 81       	ldd	r24, Y+2	; 0x02
 9d6:	9b 81       	ldd	r25, Y+3	; 0x03
 9d8:	93 83       	std	Z+3, r25	; 0x03
 9da:	82 83       	std	Z+2, r24	; 0x02
 9dc:	45 2b       	or	r20, r21
 9de:	29 f4       	brne	.+10     	; 0x9ea <free+0xa2>
 9e0:	f0 93 e6 01 	sts	0x01E6, r31
 9e4:	e0 93 e5 01 	sts	0x01E5, r30
 9e8:	42 c0       	rjmp	.+132    	; 0xa6e <free+0x126>
 9ea:	13 96       	adiw	r26, 0x03	; 3
 9ec:	fc 93       	st	X, r31
 9ee:	ee 93       	st	-X, r30
 9f0:	12 97       	sbiw	r26, 0x02	; 2
 9f2:	ed 01       	movw	r28, r26
 9f4:	49 91       	ld	r20, Y+
 9f6:	59 91       	ld	r21, Y+
 9f8:	9e 01       	movw	r18, r28
 9fa:	24 0f       	add	r18, r20
 9fc:	35 1f       	adc	r19, r21
 9fe:	e2 17       	cp	r30, r18
 a00:	f3 07       	cpc	r31, r19
 a02:	71 f4       	brne	.+28     	; 0xa20 <free+0xd8>
 a04:	80 81       	ld	r24, Z
 a06:	91 81       	ldd	r25, Z+1	; 0x01
 a08:	84 0f       	add	r24, r20
 a0a:	95 1f       	adc	r25, r21
 a0c:	02 96       	adiw	r24, 0x02	; 2
 a0e:	11 96       	adiw	r26, 0x01	; 1
 a10:	9c 93       	st	X, r25
 a12:	8e 93       	st	-X, r24
 a14:	82 81       	ldd	r24, Z+2	; 0x02
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	13 96       	adiw	r26, 0x03	; 3
 a1a:	9c 93       	st	X, r25
 a1c:	8e 93       	st	-X, r24
 a1e:	12 97       	sbiw	r26, 0x02	; 2
 a20:	e0 e0       	ldi	r30, 0x00	; 0
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	d8 01       	movw	r26, r16
 a26:	12 96       	adiw	r26, 0x02	; 2
 a28:	8d 91       	ld	r24, X+
 a2a:	9c 91       	ld	r25, X
 a2c:	13 97       	sbiw	r26, 0x03	; 3
 a2e:	00 97       	sbiw	r24, 0x00	; 0
 a30:	19 f0       	breq	.+6      	; 0xa38 <free+0xf0>
 a32:	f8 01       	movw	r30, r16
 a34:	8c 01       	movw	r16, r24
 a36:	f6 cf       	rjmp	.-20     	; 0xa24 <free+0xdc>
 a38:	8d 91       	ld	r24, X+
 a3a:	9c 91       	ld	r25, X
 a3c:	98 01       	movw	r18, r16
 a3e:	2e 5f       	subi	r18, 0xFE	; 254
 a40:	3f 4f       	sbci	r19, 0xFF	; 255
 a42:	82 0f       	add	r24, r18
 a44:	93 1f       	adc	r25, r19
 a46:	20 91 e3 01 	lds	r18, 0x01E3
 a4a:	30 91 e4 01 	lds	r19, 0x01E4
 a4e:	28 17       	cp	r18, r24
 a50:	39 07       	cpc	r19, r25
 a52:	69 f4       	brne	.+26     	; 0xa6e <free+0x126>
 a54:	30 97       	sbiw	r30, 0x00	; 0
 a56:	29 f4       	brne	.+10     	; 0xa62 <free+0x11a>
 a58:	10 92 e6 01 	sts	0x01E6, r1
 a5c:	10 92 e5 01 	sts	0x01E5, r1
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <free+0x11e>
 a62:	13 82       	std	Z+3, r1	; 0x03
 a64:	12 82       	std	Z+2, r1	; 0x02
 a66:	10 93 e4 01 	sts	0x01E4, r17
 a6a:	00 93 e3 01 	sts	0x01E3, r16
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	08 95       	ret

00000a78 <__do_global_dtors>:
 a78:	10 e0       	ldi	r17, 0x00	; 0
 a7a:	cf e1       	ldi	r28, 0x1F	; 31
 a7c:	d0 e0       	ldi	r29, 0x00	; 0
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <__do_global_dtors+0xe>
 a80:	fe 01       	movw	r30, r28
 a82:	c7 de       	rcall	.-626    	; 0x812 <__tablejump2__>
 a84:	21 96       	adiw	r28, 0x01	; 1
 a86:	c0 32       	cpi	r28, 0x20	; 32
 a88:	d1 07       	cpc	r29, r17
 a8a:	d1 f7       	brne	.-12     	; 0xa80 <__do_global_dtors+0x8>
 a8c:	f8 94       	cli

00000a8e <__stop_program>:
 a8e:	ff cf       	rjmp	.-2      	; 0xa8e <__stop_program>
