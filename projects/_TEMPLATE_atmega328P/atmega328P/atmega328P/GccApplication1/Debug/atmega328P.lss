
atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000064a  000006de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  00800116  00800116  000006f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012db  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053a  00000000  00000000  00001ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000389  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000985  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000516  00000000  00000000  00002ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000033d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_18>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_20>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_21>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	06 01       	movw	r0, r12

0000006a <__ctors_end>:
  6a:	d2 01       	movw	r26, r4

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ea e4       	ldi	r30, 0x4A	; 74
  80:	f6 e0       	ldi	r31, 0x06	; 6
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a6 31       	cpi	r26, 0x16	; 22
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a6 e1       	ldi	r26, 0x16	; 22
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	af 3a       	cpi	r26, 0xAF	; 175
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 03 01 	call	0x206	; 0x206 <main>
  b8:	0c 94 18 03 	jmp	0x630	; 0x630 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
  c0:	08 95       	ret

000000c2 <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
  c2:	08 95       	ret

000000c4 <_ZN6opbots5InputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
  c4:	0e 94 80 02 	call	0x500	; 0x500 <free>
  c8:	08 95       	ret

000000ca <_ZN6opbots6OutputD0Ev>:
  ca:	0e 94 80 02 	call	0x500	; 0x500 <free>
  ce:	08 95       	ret

000000d0 <__vector_21>:

} /* end of namespace opbots */

using namespace opbots;

ISR(ADC_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	cli();
  dc:	f8 94       	cli
	Analog::analog_low = ADCL;
  de:	80 91 78 00 	lds	r24, 0x0078
  e2:	80 93 a8 01 	sts	0x01A8, r24
	Analog::analogHigh = ADCH;
  e6:	80 91 79 00 	lds	r24, 0x0079
  ea:	80 93 a9 01 	sts	0x01A9, r24
	Analog::new_value = true;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 aa 01 	sts	0x01AA, r24
	sei();
  f4:	78 94       	sei
};
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_20>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
 118:	f8 94       	cli
		if (Serial::chars_left > 0) {
 11a:	80 91 86 01 	lds	r24, 0x0186
 11e:	88 23       	and	r24, r24
 120:	e1 f0       	breq	.+56     	; 0x15a <__vector_20+0x58>
			if (serial_port == 0) {
				UDR0 = Serial::transmitting[Serial::tx_head];
 122:	e0 91 87 01 	lds	r30, 0x0187
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e8 57       	subi	r30, 0x78	; 120
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	80 81       	ld	r24, Z
 12e:	80 93 c6 00 	sts	0x00C6, r24
#ifdef _AVR_ATTINY841_H_INCLUDED 
			else if (serial_port == 1) {
				UDR1 = Serial::transmitting[Serial::tx_head];
			}
#endif
			Serial::tx_head = (Serial::tx_head + 1) % TX_BUFFER_SIZE;
 132:	80 91 87 01 	lds	r24, 0x0187
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	8f 71       	andi	r24, 0x1F	; 31
 13c:	90 78       	andi	r25, 0x80	; 128
 13e:	99 23       	and	r25, r25
 140:	24 f4       	brge	.+8      	; 0x14a <__vector_20+0x48>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	80 6e       	ori	r24, 0xE0	; 224
 146:	9f 6f       	ori	r25, 0xFF	; 255
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	80 93 87 01 	sts	0x0187, r24
			Serial::chars_left--;
 14e:	80 91 86 01 	lds	r24, 0x0186
 152:	81 50       	subi	r24, 0x01	; 1
 154:	80 93 86 01 	sts	0x0186, r24
 158:	0d c0       	rjmp	.+26     	; 0x174 <__vector_20+0x72>
		} else {
			if (Serial::txden[serial_port] != nullptr) {
 15a:	e0 91 84 01 	lds	r30, 0x0184
 15e:	f0 91 85 01 	lds	r31, 0x0185
 162:	30 97       	sbiw	r30, 0x00	; 0
 164:	39 f0       	breq	.+14     	; 0x174 <__vector_20+0x72>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
 166:	a2 81       	ldd	r26, Z+2	; 0x02
 168:	b3 81       	ldd	r27, Z+3	; 0x03
 16a:	9c 91       	ld	r25, X
 16c:	81 85       	ldd	r24, Z+9	; 0x09
 16e:	80 95       	com	r24
 170:	89 23       	and	r24, r25
 172:	8c 93       	st	X, r24
		} else {
			if (Serial::txden[serial_port] != nullptr) {
				Serial::txden[serial_port]->clear();
			}
		}
		sei();
 174:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_18>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
 19c:	f8 94       	cli
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
 19e:	e0 ec       	ldi	r30, 0xC0	; 192
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 77       	andi	r24, 0x7F	; 127
 1a6:	80 83       	st	Z, r24
			PORTB = ~PORTB;
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	80 95       	com	r24
 1ac:	85 b9       	out	0x05, r24	; 5
#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
		}
#endif
		sei();
 1ae:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <_Z15startup_routineh>:
Input current_pin(&PORTC,6); // 0.2 V per amp
Input voltage_pin(&PORTC,7); // 0.2 V per volt

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(uint8_t loops=1) {	
 1c0:	44 e3       	ldi	r20, 0x34	; 52
 1c2:	51 e0       	ldi	r21, 0x01	; 1
 1c4:	2d e3       	ldi	r18, 0x3D	; 61
 1c6:	31 e0       	ldi	r19, 0x01	; 1
	while (--loops >= 0) {
 1c8:	1b c0       	rjmp	.+54     	; 0x200 <_Z15startup_routineh+0x40>
	BUFFER_OVERFLOW=3,
	OVER_VOLTAGE=4,
	OVER_CURRENT=5
};
	
class GPIO {
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	88 81       	ld	r24, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
 1d4:	90 81       	ld	r25, Z
 1d6:	98 2b       	or	r25, r24
 1d8:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	6f ef       	ldi	r22, 0xFF	; 255
 1dc:	70 e7       	ldi	r23, 0x70	; 112
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	61 50       	subi	r22, 0x01	; 1
 1e2:	70 40       	sbci	r23, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <_Z15startup_routineh+0x20>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z15startup_routineh+0x2a>
 1ea:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
 1ec:	90 81       	ld	r25, Z
 1ee:	80 95       	com	r24
 1f0:	89 23       	and	r24, r25
 1f2:	80 83       	st	Z, r24
 1f4:	1a 96       	adiw	r26, 0x0a	; 10
 1f6:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	aa 37       	cpi	r26, 0x7A	; 122
 1fc:	b6 07       	cpc	r27, r22
 1fe:	29 f7       	brne	.-54     	; 0x1ca <_Z15startup_routineh+0xa>
 200:	da 01       	movw	r26, r20
 202:	e9 01       	movw	r28, r18
 204:	e2 cf       	rjmp	.-60     	; 0x1ca <_Z15startup_routineh+0xa>

00000206 <main>:
};

State current_state(IDLE);

int main(void) {
	startup_routine(2);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z15startup_routineh>

0000020c <_GLOBAL__sub_I__Znwj>:
			sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
			Serial::transmit(message, 10);
			_delay_ms(500);
		}
    }
}
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 21c:	ea e7       	ldi	r30, 0x7A	; 122
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	65 e2       	ldi	r22, 0x25	; 37
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	73 83       	std	Z+3, r23	; 0x03
 226:	62 83       	std	Z+2, r22	; 0x02
 228:	44 e2       	ldi	r20, 0x24	; 36
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	55 83       	std	Z+5, r21	; 0x05
 22e:	44 83       	std	Z+4, r20	; 0x04
 230:	23 e2       	ldi	r18, 0x23	; 35
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	37 83       	std	Z+7, r19	; 0x07
 236:	26 83       	std	Z+6, r18	; 0x06
 238:	10 86       	std	Z+8, r1	; 0x08
 23a:	a1 e0       	ldi	r26, 0x01	; 1
 23c:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	91 83       	std	Z+1, r25	; 0x01
 244:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
 246:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
 248:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 24a:	e4 e3       	ldi	r30, 0x34	; 52
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	73 83       	std	Z+3, r23	; 0x03
 250:	62 83       	std	Z+2, r22	; 0x02
 252:	55 83       	std	Z+5, r21	; 0x05
 254:	44 83       	std	Z+4, r20	; 0x04
 256:	37 83       	std	Z+7, r19	; 0x07
 258:	26 83       	std	Z+6, r18	; 0x06
 25a:	10 86       	std	Z+8, r1	; 0x08
 25c:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 25e:	91 83       	std	Z+1, r25	; 0x01
 260:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
 262:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
 264:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 266:	68 e2       	ldi	r22, 0x28	; 40
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	75 87       	std	Z+13, r23	; 0x0d
 26c:	64 87       	std	Z+12, r22	; 0x0c
 26e:	47 e2       	ldi	r20, 0x27	; 39
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	57 87       	std	Z+15, r21	; 0x0f
 274:	46 87       	std	Z+14, r20	; 0x0e
 276:	26 e2       	ldi	r18, 0x26	; 38
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	31 8b       	std	Z+17, r19	; 0x11
 27c:	20 8b       	std	Z+16, r18	; 0x10
 27e:	b3 e0       	ldi	r27, 0x03	; 3
 280:	b2 8b       	std	Z+18, r27	; 0x12
 282:	b8 e0       	ldi	r27, 0x08	; 8
 284:	b3 8b       	std	Z+19, r27	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 286:	93 87       	std	Z+11, r25	; 0x0b
 288:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
 28a:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
 28c:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 28e:	0f 2e       	mov	r0, r31
 290:	fb e2       	ldi	r31, 0x2B	; 43
 292:	ef 2e       	mov	r14, r31
 294:	f1 2c       	mov	r15, r1
 296:	f0 2d       	mov	r31, r0
 298:	f7 8a       	std	Z+23, r15	; 0x17
 29a:	e6 8a       	std	Z+22, r14	; 0x16
 29c:	0a e2       	ldi	r16, 0x2A	; 42
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	11 8f       	std	Z+25, r17	; 0x19
 2a2:	00 8f       	std	Z+24, r16	; 0x18
 2a4:	c9 e2       	ldi	r28, 0x29	; 41
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	d3 8f       	std	Z+27, r29	; 0x1b
 2aa:	c2 8f       	std	Z+26, r28	; 0x1a
 2ac:	68 94       	set
 2ae:	dd 24       	eor	r13, r13
 2b0:	d1 f8       	bld	r13, 1
 2b2:	d4 8e       	std	Z+28, r13	; 0x1c
 2b4:	b4 e0       	ldi	r27, 0x04	; 4
 2b6:	b5 8f       	std	Z+29, r27	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 2b8:	95 8b       	std	Z+21, r25	; 0x15
 2ba:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
 2bc:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
 2be:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 2c0:	f1 a2       	std	Z+33, r15	; 0x21
 2c2:	e0 a2       	std	Z+32, r14	; 0x20
 2c4:	13 a3       	std	Z+35, r17	; 0x23
 2c6:	02 a3       	std	Z+34, r16	; 0x22
 2c8:	d5 a3       	std	Z+37, r29	; 0x25
 2ca:	c4 a3       	std	Z+36, r28	; 0x24
 2cc:	b6 a3       	std	Z+38, r27	; 0x26
 2ce:	68 94       	set
 2d0:	cc 24       	eor	r12, r12
 2d2:	c4 f8       	bld	r12, 4
 2d4:	c7 a2       	std	Z+39, r12	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 2d6:	97 8f       	std	Z+31, r25	; 0x1f
 2d8:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
 2da:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
 2dc:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 2de:	73 a7       	std	Z+43, r23	; 0x2b
 2e0:	62 a7       	std	Z+42, r22	; 0x2a
 2e2:	55 a7       	std	Z+45, r21	; 0x2d
 2e4:	44 a7       	std	Z+44, r20	; 0x2c
 2e6:	37 a7       	std	Z+47, r19	; 0x2f
 2e8:	26 a7       	std	Z+46, r18	; 0x2e
 2ea:	10 aa       	std	Z+48, r1	; 0x30
 2ec:	a1 ab       	std	Z+49, r26	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 2ee:	91 a7       	std	Z+41, r25	; 0x29
 2f0:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
 2f2:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
 2f4:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 2f6:	75 ab       	std	Z+53, r23	; 0x35
 2f8:	64 ab       	std	Z+52, r22	; 0x34
 2fa:	57 ab       	std	Z+55, r21	; 0x37
 2fc:	46 ab       	std	Z+54, r20	; 0x36
 2fe:	31 af       	std	Z+57, r19	; 0x39
 300:	20 af       	std	Z+56, r18	; 0x38
 302:	a2 af       	std	Z+58, r26	; 0x3a
 304:	d3 ae       	std	Z+59, r13	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 306:	93 ab       	std	Z+51, r25	; 0x33
 308:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
 30a:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
 30c:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 30e:	70 93 73 01 	sts	0x0173, r23
 312:	60 93 72 01 	sts	0x0172, r22
 316:	50 93 75 01 	sts	0x0175, r21
 31a:	40 93 74 01 	sts	0x0174, r20
 31e:	30 93 77 01 	sts	0x0177, r19
 322:	20 93 76 01 	sts	0x0176, r18
 326:	d0 92 78 01 	sts	0x0178, r13
 32a:	b0 93 79 01 	sts	0x0179, r27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 32e:	95 af       	std	Z+61, r25	; 0x3d
 330:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
 332:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
 334:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 336:	ea e2       	ldi	r30, 0x2A	; 42
 338:	f1 e0       	ldi	r31, 0x01	; 1
 33a:	f3 82       	std	Z+3, r15	; 0x03
 33c:	e2 82       	std	Z+2, r14	; 0x02
 33e:	15 83       	std	Z+5, r17	; 0x05
 340:	04 83       	std	Z+4, r16	; 0x04
 342:	d7 83       	std	Z+7, r29	; 0x07
 344:	c6 83       	std	Z+6, r28	; 0x06
 346:	b7 e0       	ldi	r27, 0x07	; 7
 348:	b0 87       	std	Z+8, r27	; 0x08
 34a:	a0 e8       	ldi	r26, 0x80	; 128
 34c:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
 34e:	91 83       	std	Z+1, r25	; 0x01
 350:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
 352:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
 354:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 356:	e0 e2       	ldi	r30, 0x20	; 32
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	73 83       	std	Z+3, r23	; 0x03
 35c:	62 83       	std	Z+2, r22	; 0x02
 35e:	55 83       	std	Z+5, r21	; 0x05
 360:	44 83       	std	Z+4, r20	; 0x04
 362:	37 83       	std	Z+7, r19	; 0x07
 364:	26 83       	std	Z+6, r18	; 0x06
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	80 87       	std	Z+8, r24	; 0x08
 36a:	80 e4       	ldi	r24, 0x40	; 64
 36c:	81 87       	std	Z+9, r24	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 36e:	82 e1       	ldi	r24, 0x12	; 18
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	91 83       	std	Z+1, r25	; 0x01
 374:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 376:	3e 98       	cbi	0x07, 6	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
 378:	e6 e1       	ldi	r30, 0x16	; 22
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	73 83       	std	Z+3, r23	; 0x03
 37e:	62 83       	std	Z+2, r22	; 0x02
 380:	55 83       	std	Z+5, r21	; 0x05
 382:	44 83       	std	Z+4, r20	; 0x04
 384:	37 83       	std	Z+7, r19	; 0x07
 386:	26 83       	std	Z+6, r18	; 0x06
 388:	b0 87       	std	Z+8, r27	; 0x08
 38a:	a1 87       	std	Z+9, r26	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
 38c:	91 83       	std	Z+1, r25	; 0x01
 38e:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
 390:	3f 98       	cbi	0x07, 7	; 7
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	08 95       	ret

000003a4 <_GLOBAL__sub_D__Znwj>:
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
#include "opbots.h"
#include <stdio.h>
using namespace opbots;

Output err_led(&PORTB,PORTB0);
Output enable[] = {
 3a8:	ca e7       	ldi	r28, 0x7A	; 122
 3aa:	d1 e0       	ldi	r29, 0x01	; 1
 3ac:	2a 97       	sbiw	r28, 0x0a	; 10
 3ae:	e8 81       	ld	r30, Y
 3b0:	f9 81       	ldd	r31, Y+1	; 0x01
 3b2:	01 90       	ld	r0, Z+
 3b4:	f0 81       	ld	r31, Z
 3b6:	e0 2d       	mov	r30, r0
 3b8:	ce 01       	movw	r24, r28
 3ba:	09 95       	icall
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	c4 33       	cpi	r28, 0x34	; 52
 3c0:	d8 07       	cpc	r29, r24
 3c2:	a1 f7       	brne	.-24     	; 0x3ac <_GLOBAL__sub_D__Znwj+0x8>
			sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
			Serial::transmit(message, 10);
			_delay_ms(500);
		}
    }
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <__tablejump2__>:
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	05 90       	lpm	r0, Z+
 3d0:	f4 91       	lpm	r31, Z
 3d2:	e0 2d       	mov	r30, r0
 3d4:	09 94       	ijmp

000003d6 <malloc>:
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	91 05       	cpc	r25, r1
 3de:	10 f4       	brcc	.+4      	; 0x3e4 <malloc+0xe>
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	e0 91 ad 01 	lds	r30, 0x01AD
 3e8:	f0 91 ae 01 	lds	r31, 0x01AE
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
 3f4:	30 97       	sbiw	r30, 0x00	; 0
 3f6:	11 f1       	breq	.+68     	; 0x43c <malloc+0x66>
 3f8:	40 81       	ld	r20, Z
 3fa:	51 81       	ldd	r21, Z+1	; 0x01
 3fc:	48 17       	cp	r20, r24
 3fe:	59 07       	cpc	r21, r25
 400:	c0 f0       	brcs	.+48     	; 0x432 <malloc+0x5c>
 402:	48 17       	cp	r20, r24
 404:	59 07       	cpc	r21, r25
 406:	61 f4       	brne	.+24     	; 0x420 <malloc+0x4a>
 408:	82 81       	ldd	r24, Z+2	; 0x02
 40a:	93 81       	ldd	r25, Z+3	; 0x03
 40c:	20 97       	sbiw	r28, 0x00	; 0
 40e:	19 f0       	breq	.+6      	; 0x416 <malloc+0x40>
 410:	9b 83       	std	Y+3, r25	; 0x03
 412:	8a 83       	std	Y+2, r24	; 0x02
 414:	2b c0       	rjmp	.+86     	; 0x46c <malloc+0x96>
 416:	90 93 ae 01 	sts	0x01AE, r25
 41a:	80 93 ad 01 	sts	0x01AD, r24
 41e:	26 c0       	rjmp	.+76     	; 0x46c <malloc+0x96>
 420:	21 15       	cp	r18, r1
 422:	31 05       	cpc	r19, r1
 424:	19 f0       	breq	.+6      	; 0x42c <malloc+0x56>
 426:	42 17       	cp	r20, r18
 428:	53 07       	cpc	r21, r19
 42a:	18 f4       	brcc	.+6      	; 0x432 <malloc+0x5c>
 42c:	9a 01       	movw	r18, r20
 42e:	be 01       	movw	r22, r28
 430:	df 01       	movw	r26, r30
 432:	ef 01       	movw	r28, r30
 434:	02 80       	ldd	r0, Z+2	; 0x02
 436:	f3 81       	ldd	r31, Z+3	; 0x03
 438:	e0 2d       	mov	r30, r0
 43a:	dc cf       	rjmp	.-72     	; 0x3f4 <malloc+0x1e>
 43c:	21 15       	cp	r18, r1
 43e:	31 05       	cpc	r19, r1
 440:	09 f1       	breq	.+66     	; 0x484 <malloc+0xae>
 442:	28 1b       	sub	r18, r24
 444:	39 0b       	sbc	r19, r25
 446:	24 30       	cpi	r18, 0x04	; 4
 448:	31 05       	cpc	r19, r1
 44a:	90 f4       	brcc	.+36     	; 0x470 <malloc+0x9a>
 44c:	12 96       	adiw	r26, 0x02	; 2
 44e:	8d 91       	ld	r24, X+
 450:	9c 91       	ld	r25, X
 452:	13 97       	sbiw	r26, 0x03	; 3
 454:	61 15       	cp	r22, r1
 456:	71 05       	cpc	r23, r1
 458:	21 f0       	breq	.+8      	; 0x462 <malloc+0x8c>
 45a:	fb 01       	movw	r30, r22
 45c:	93 83       	std	Z+3, r25	; 0x03
 45e:	82 83       	std	Z+2, r24	; 0x02
 460:	04 c0       	rjmp	.+8      	; 0x46a <malloc+0x94>
 462:	90 93 ae 01 	sts	0x01AE, r25
 466:	80 93 ad 01 	sts	0x01AD, r24
 46a:	fd 01       	movw	r30, r26
 46c:	32 96       	adiw	r30, 0x02	; 2
 46e:	44 c0       	rjmp	.+136    	; 0x4f8 <malloc+0x122>
 470:	fd 01       	movw	r30, r26
 472:	e2 0f       	add	r30, r18
 474:	f3 1f       	adc	r31, r19
 476:	81 93       	st	Z+, r24
 478:	91 93       	st	Z+, r25
 47a:	22 50       	subi	r18, 0x02	; 2
 47c:	31 09       	sbc	r19, r1
 47e:	2d 93       	st	X+, r18
 480:	3c 93       	st	X, r19
 482:	3a c0       	rjmp	.+116    	; 0x4f8 <malloc+0x122>
 484:	20 91 ab 01 	lds	r18, 0x01AB
 488:	30 91 ac 01 	lds	r19, 0x01AC
 48c:	23 2b       	or	r18, r19
 48e:	41 f4       	brne	.+16     	; 0x4a0 <malloc+0xca>
 490:	20 91 02 01 	lds	r18, 0x0102
 494:	30 91 03 01 	lds	r19, 0x0103
 498:	30 93 ac 01 	sts	0x01AC, r19
 49c:	20 93 ab 01 	sts	0x01AB, r18
 4a0:	20 91 00 01 	lds	r18, 0x0100
 4a4:	30 91 01 01 	lds	r19, 0x0101
 4a8:	21 15       	cp	r18, r1
 4aa:	31 05       	cpc	r19, r1
 4ac:	41 f4       	brne	.+16     	; 0x4be <malloc+0xe8>
 4ae:	2d b7       	in	r18, 0x3d	; 61
 4b0:	3e b7       	in	r19, 0x3e	; 62
 4b2:	40 91 04 01 	lds	r20, 0x0104
 4b6:	50 91 05 01 	lds	r21, 0x0105
 4ba:	24 1b       	sub	r18, r20
 4bc:	35 0b       	sbc	r19, r21
 4be:	e0 91 ab 01 	lds	r30, 0x01AB
 4c2:	f0 91 ac 01 	lds	r31, 0x01AC
 4c6:	e2 17       	cp	r30, r18
 4c8:	f3 07       	cpc	r31, r19
 4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <malloc+0x11e>
 4cc:	2e 1b       	sub	r18, r30
 4ce:	3f 0b       	sbc	r19, r31
 4d0:	28 17       	cp	r18, r24
 4d2:	39 07       	cpc	r19, r25
 4d4:	78 f0       	brcs	.+30     	; 0x4f4 <malloc+0x11e>
 4d6:	ac 01       	movw	r20, r24
 4d8:	4e 5f       	subi	r20, 0xFE	; 254
 4da:	5f 4f       	sbci	r21, 0xFF	; 255
 4dc:	24 17       	cp	r18, r20
 4de:	35 07       	cpc	r19, r21
 4e0:	48 f0       	brcs	.+18     	; 0x4f4 <malloc+0x11e>
 4e2:	4e 0f       	add	r20, r30
 4e4:	5f 1f       	adc	r21, r31
 4e6:	50 93 ac 01 	sts	0x01AC, r21
 4ea:	40 93 ab 01 	sts	0x01AB, r20
 4ee:	81 93       	st	Z+, r24
 4f0:	91 93       	st	Z+, r25
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <malloc+0x122>
 4f4:	e0 e0       	ldi	r30, 0x00	; 0
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	cf 01       	movw	r24, r30
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <free>:
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	09 f4       	brne	.+2      	; 0x50e <free+0xe>
 50c:	8c c0       	rjmp	.+280    	; 0x626 <free+0x126>
 50e:	fc 01       	movw	r30, r24
 510:	32 97       	sbiw	r30, 0x02	; 2
 512:	13 82       	std	Z+3, r1	; 0x03
 514:	12 82       	std	Z+2, r1	; 0x02
 516:	00 91 ad 01 	lds	r16, 0x01AD
 51a:	10 91 ae 01 	lds	r17, 0x01AE
 51e:	01 15       	cp	r16, r1
 520:	11 05       	cpc	r17, r1
 522:	81 f4       	brne	.+32     	; 0x544 <free+0x44>
 524:	20 81       	ld	r18, Z
 526:	31 81       	ldd	r19, Z+1	; 0x01
 528:	82 0f       	add	r24, r18
 52a:	93 1f       	adc	r25, r19
 52c:	20 91 ab 01 	lds	r18, 0x01AB
 530:	30 91 ac 01 	lds	r19, 0x01AC
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	79 f5       	brne	.+94     	; 0x598 <free+0x98>
 53a:	f0 93 ac 01 	sts	0x01AC, r31
 53e:	e0 93 ab 01 	sts	0x01AB, r30
 542:	71 c0       	rjmp	.+226    	; 0x626 <free+0x126>
 544:	d8 01       	movw	r26, r16
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	ae 17       	cp	r26, r30
 54c:	bf 07       	cpc	r27, r31
 54e:	50 f4       	brcc	.+20     	; 0x564 <free+0x64>
 550:	12 96       	adiw	r26, 0x02	; 2
 552:	2d 91       	ld	r18, X+
 554:	3c 91       	ld	r19, X
 556:	13 97       	sbiw	r26, 0x03	; 3
 558:	ad 01       	movw	r20, r26
 55a:	21 15       	cp	r18, r1
 55c:	31 05       	cpc	r19, r1
 55e:	09 f1       	breq	.+66     	; 0x5a2 <free+0xa2>
 560:	d9 01       	movw	r26, r18
 562:	f3 cf       	rjmp	.-26     	; 0x54a <free+0x4a>
 564:	9d 01       	movw	r18, r26
 566:	da 01       	movw	r26, r20
 568:	33 83       	std	Z+3, r19	; 0x03
 56a:	22 83       	std	Z+2, r18	; 0x02
 56c:	60 81       	ld	r22, Z
 56e:	71 81       	ldd	r23, Z+1	; 0x01
 570:	86 0f       	add	r24, r22
 572:	97 1f       	adc	r25, r23
 574:	82 17       	cp	r24, r18
 576:	93 07       	cpc	r25, r19
 578:	69 f4       	brne	.+26     	; 0x594 <free+0x94>
 57a:	ec 01       	movw	r28, r24
 57c:	28 81       	ld	r18, Y
 57e:	39 81       	ldd	r19, Y+1	; 0x01
 580:	26 0f       	add	r18, r22
 582:	37 1f       	adc	r19, r23
 584:	2e 5f       	subi	r18, 0xFE	; 254
 586:	3f 4f       	sbci	r19, 0xFF	; 255
 588:	31 83       	std	Z+1, r19	; 0x01
 58a:	20 83       	st	Z, r18
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	9b 81       	ldd	r25, Y+3	; 0x03
 590:	93 83       	std	Z+3, r25	; 0x03
 592:	82 83       	std	Z+2, r24	; 0x02
 594:	45 2b       	or	r20, r21
 596:	29 f4       	brne	.+10     	; 0x5a2 <free+0xa2>
 598:	f0 93 ae 01 	sts	0x01AE, r31
 59c:	e0 93 ad 01 	sts	0x01AD, r30
 5a0:	42 c0       	rjmp	.+132    	; 0x626 <free+0x126>
 5a2:	13 96       	adiw	r26, 0x03	; 3
 5a4:	fc 93       	st	X, r31
 5a6:	ee 93       	st	-X, r30
 5a8:	12 97       	sbiw	r26, 0x02	; 2
 5aa:	ed 01       	movw	r28, r26
 5ac:	49 91       	ld	r20, Y+
 5ae:	59 91       	ld	r21, Y+
 5b0:	9e 01       	movw	r18, r28
 5b2:	24 0f       	add	r18, r20
 5b4:	35 1f       	adc	r19, r21
 5b6:	e2 17       	cp	r30, r18
 5b8:	f3 07       	cpc	r31, r19
 5ba:	71 f4       	brne	.+28     	; 0x5d8 <free+0xd8>
 5bc:	80 81       	ld	r24, Z
 5be:	91 81       	ldd	r25, Z+1	; 0x01
 5c0:	84 0f       	add	r24, r20
 5c2:	95 1f       	adc	r25, r21
 5c4:	02 96       	adiw	r24, 0x02	; 2
 5c6:	11 96       	adiw	r26, 0x01	; 1
 5c8:	9c 93       	st	X, r25
 5ca:	8e 93       	st	-X, r24
 5cc:	82 81       	ldd	r24, Z+2	; 0x02
 5ce:	93 81       	ldd	r25, Z+3	; 0x03
 5d0:	13 96       	adiw	r26, 0x03	; 3
 5d2:	9c 93       	st	X, r25
 5d4:	8e 93       	st	-X, r24
 5d6:	12 97       	sbiw	r26, 0x02	; 2
 5d8:	e0 e0       	ldi	r30, 0x00	; 0
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	d8 01       	movw	r26, r16
 5de:	12 96       	adiw	r26, 0x02	; 2
 5e0:	8d 91       	ld	r24, X+
 5e2:	9c 91       	ld	r25, X
 5e4:	13 97       	sbiw	r26, 0x03	; 3
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	19 f0       	breq	.+6      	; 0x5f0 <free+0xf0>
 5ea:	f8 01       	movw	r30, r16
 5ec:	8c 01       	movw	r16, r24
 5ee:	f6 cf       	rjmp	.-20     	; 0x5dc <free+0xdc>
 5f0:	8d 91       	ld	r24, X+
 5f2:	9c 91       	ld	r25, X
 5f4:	98 01       	movw	r18, r16
 5f6:	2e 5f       	subi	r18, 0xFE	; 254
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
 5fa:	82 0f       	add	r24, r18
 5fc:	93 1f       	adc	r25, r19
 5fe:	20 91 ab 01 	lds	r18, 0x01AB
 602:	30 91 ac 01 	lds	r19, 0x01AC
 606:	28 17       	cp	r18, r24
 608:	39 07       	cpc	r19, r25
 60a:	69 f4       	brne	.+26     	; 0x626 <free+0x126>
 60c:	30 97       	sbiw	r30, 0x00	; 0
 60e:	29 f4       	brne	.+10     	; 0x61a <free+0x11a>
 610:	10 92 ae 01 	sts	0x01AE, r1
 614:	10 92 ad 01 	sts	0x01AD, r1
 618:	02 c0       	rjmp	.+4      	; 0x61e <free+0x11e>
 61a:	13 82       	std	Z+3, r1	; 0x03
 61c:	12 82       	std	Z+2, r1	; 0x02
 61e:	10 93 ac 01 	sts	0x01AC, r17
 622:	00 93 ab 01 	sts	0x01AB, r16
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <__do_global_dtors>:
 630:	10 e0       	ldi	r17, 0x00	; 0
 632:	c5 e3       	ldi	r28, 0x35	; 53
 634:	d0 e0       	ldi	r29, 0x00	; 0
 636:	04 c0       	rjmp	.+8      	; 0x640 <__do_global_dtors+0x10>
 638:	fe 01       	movw	r30, r28
 63a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__tablejump2__>
 63e:	21 96       	adiw	r28, 0x01	; 1
 640:	c6 33       	cpi	r28, 0x36	; 54
 642:	d1 07       	cpc	r29, r17
 644:	c9 f7       	brne	.-14     	; 0x638 <__do_global_dtors+0x8>
 646:	f8 94       	cli

00000648 <__stop_program>:
 648:	ff cf       	rjmp	.-2      	; 0x648 <__stop_program>
