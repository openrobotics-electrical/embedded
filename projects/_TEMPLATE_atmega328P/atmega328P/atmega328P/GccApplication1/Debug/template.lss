
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000010b6  0000114a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c2  00800140  00800140  0000118a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001647  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057a  00000000  00000000  00002907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000440  00000000  00000000  00002e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000995  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a9  00000000  00000000  00003e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000045be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_18>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_20>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_21>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	28 03       	fmul	r18, r16

0000006a <__ctors_end>:
      6a:	f4 03       	fmuls	r23, r20

0000006c <__dtors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e6 eb       	ldi	r30, 0xB6	; 182
      80:	f0 e1       	ldi	r31, 0x10	; 16
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	a0 34       	cpi	r26, 0x40	; 64
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	22 e0       	ldi	r18, 0x02	; 2
      90:	a0 e4       	ldi	r26, 0x40	; 64
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a2 30       	cpi	r26, 0x02	; 2
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c5 e3       	ldi	r28, 0x35	; 53
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 43 04 	call	0x886	; 0x886 <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 18 01 	call	0x230	; 0x230 <main>
      b8:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__do_global_dtors>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
      c0:	08 95       	ret

000000c2 <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
      c2:	08 95       	ret

000000c4 <_ZN6opbots5InputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
      c4:	0e 94 de 04 	call	0x9bc	; 0x9bc <free>
      c8:	08 95       	ret

000000ca <_ZN6opbots6OutputD0Ev>:
      ca:	0e 94 de 04 	call	0x9bc	; 0x9bc <free>
      ce:	08 95       	ret

000000d0 <__vector_21>:
volatile uint8_t Serial::rx_index(0), Serial::rx_head(0), Serial::chars_unread(0);
} /* end of namespace opbots */

using namespace opbots;

ISR(ADC_vect) {
      d0:	1f 92       	push	r1
      d2:	0f 92       	push	r0
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	0f 92       	push	r0
      d8:	11 24       	eor	r1, r1
      da:	8f 93       	push	r24
	cli();
      dc:	f8 94       	cli
	Analog::analogLow = ADCL;
      de:	80 91 78 00 	lds	r24, 0x0078
      e2:	80 93 fb 01 	sts	0x01FB, r24
	Analog::analogHigh = ADCH;
      e6:	80 91 79 00 	lds	r24, 0x0079
      ea:	80 93 fc 01 	sts	0x01FC, r24
	Analog::newValue = true;
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 93 fd 01 	sts	0x01FD, r24
	sei();
      f4:	78 94       	sei
};
      f6:	8f 91       	pop	r24
      f8:	0f 90       	pop	r0
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	0f 90       	pop	r0
      fe:	1f 90       	pop	r1
     100:	18 95       	reti

00000102 <__vector_20>:

ISR(USART_TX_vect) {
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	8f 93       	push	r24
     10e:	9f 93       	push	r25
     110:	ef 93       	push	r30
     112:	ff 93       	push	r31
	cli();
     114:	f8 94       	cli
	if (Serial::chars_left > 0) {
     116:	80 91 d8 01 	lds	r24, 0x01D8
     11a:	88 23       	and	r24, r24
     11c:	d9 f0       	breq	.+54     	; 0x154 <__vector_20+0x52>
		UDR0 = Serial::transmitting[Serial::tx_head];
     11e:	e0 91 d9 01 	lds	r30, 0x01D9
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	e5 51       	subi	r30, 0x15	; 21
     126:	fe 4f       	sbci	r31, 0xFE	; 254
     128:	80 81       	ld	r24, Z
     12a:	80 93 c6 00 	sts	0x00C6, r24
		Serial::tx_head = (Serial::tx_head + 1) % TX_BUFFER_SIZE;
     12e:	80 91 d9 01 	lds	r24, 0x01D9
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	8f 70       	andi	r24, 0x0F	; 15
     138:	90 78       	andi	r25, 0x80	; 128
     13a:	99 23       	and	r25, r25
     13c:	24 f4       	brge	.+8      	; 0x146 <__vector_20+0x44>
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	80 6f       	ori	r24, 0xF0	; 240
     142:	9f 6f       	ori	r25, 0xFF	; 255
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	80 93 d9 01 	sts	0x01D9, r24
		Serial::chars_left--;
     14a:	80 91 d8 01 	lds	r24, 0x01D8
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	80 93 d8 01 	sts	0x01D8, r24
	}
	sei();
     154:	78 94       	sei
};
     156:	ff 91       	pop	r31
     158:	ef 91       	pop	r30
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <__vector_18>:

ISR(USART_RX_vect) {
     168:	1f 92       	push	r1
     16a:	0f 92       	push	r0
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	11 24       	eor	r1, r1
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
	cli();
     17a:	f8 94       	cli
	UCSR0A &= ~_BV(RXC0); // clear flag
     17c:	e0 ec       	ldi	r30, 0xC0	; 192
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	8f 77       	andi	r24, 0x7F	; 127
     184:	80 83       	st	Z, r24
	Serial::receiving[Serial::rx_index] = UDR0;
     186:	e0 91 d7 01 	lds	r30, 0x01D7
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 91 c6 00 	lds	r24, 0x00C6
     190:	e5 52       	subi	r30, 0x25	; 37
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	80 83       	st	Z, r24
	Serial::rx_index = (Serial::rx_index + 1) % RX_BUFFER_SIZE;
     196:	80 91 d7 01 	lds	r24, 0x01D7
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	8f 70       	andi	r24, 0x0F	; 15
     1a0:	90 78       	andi	r25, 0x80	; 128
     1a2:	99 23       	and	r25, r25
     1a4:	24 f4       	brge	.+8      	; 0x1ae <__vector_18+0x46>
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	80 6f       	ori	r24, 0xF0	; 240
     1aa:	9f 6f       	ori	r25, 0xFF	; 255
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	80 93 d7 01 	sts	0x01D7, r24
	Serial::chars_unread++;
     1b2:	80 91 d6 01 	lds	r24, 0x01D6
     1b6:	8f 5f       	subi	r24, 0xFF	; 255
     1b8:	80 93 d6 01 	sts	0x01D6, r24
	sei();
     1bc:	78 94       	sei
};
     1be:	ff 91       	pop	r31
     1c0:	ef 91       	pop	r30
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	0f 90       	pop	r0
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	0f 90       	pop	r0
     1cc:	1f 90       	pop	r1
     1ce:	18 95       	reti

000001d0 <_Z15startup_routinei>:
Input current_pin(&PORTC, PIN7); // 0.2 V per amp
Input voltage_pin(&PORTC, PIN6); // 0.2 V per volt

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	ac 01       	movw	r20, r24
     1da:	06 e8       	ldi	r16, 0x86	; 134
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	6f e8       	ldi	r22, 0x8F	; 143
     1e0:	71 e0       	ldi	r23, 0x01	; 1
	while (--loops >= 0) {
     1e2:	1b c0       	rjmp	.+54     	; 0x21a <_Z15startup_routinei+0x4a>
	NULL_POINTER=1,
	OVER_VOLTAGE=2,
	OVER_CURRENT=3
};
	
class GPIO {
     1e4:	12 96       	adiw	r26, 0x02	; 2
     1e6:	ed 91       	ld	r30, X+
     1e8:	fc 91       	ld	r31, X
     1ea:	13 97       	sbiw	r26, 0x03	; 3
     1ec:	98 81       	ld	r25, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     1ee:	20 81       	ld	r18, Z
     1f0:	29 2b       	or	r18, r25
     1f2:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	2f ef       	ldi	r18, 0xFF	; 255
     1f6:	30 e7       	ldi	r19, 0x70	; 112
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	30 40       	sbci	r19, 0x00	; 0
     1fe:	80 40       	sbci	r24, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <_Z15startup_routinei+0x2a>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_Z15startup_routinei+0x34>
     204:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
     206:	20 81       	ld	r18, Z
     208:	90 95       	com	r25
     20a:	92 23       	and	r25, r18
     20c:	90 83       	st	Z, r25
     20e:	1a 96       	adiw	r26, 0x0a	; 10
     210:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	ac 3c       	cpi	r26, 0xCC	; 204
     216:	b2 07       	cpc	r27, r18
     218:	29 f7       	brne	.-54     	; 0x1e4 <_Z15startup_routinei+0x14>
Input voltage_pin(&PORTC, PIN6); // 0.2 V per volt

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
	while (--loops >= 0) {
     21a:	41 50       	subi	r20, 0x01	; 1
     21c:	51 09       	sbc	r21, r1
     21e:	1a f0       	brmi	.+6      	; 0x226 <_Z15startup_routinei+0x56>
     220:	d8 01       	movw	r26, r16
     222:	eb 01       	movw	r28, r22
     224:	df cf       	rjmp	.-66     	; 0x1e4 <_Z15startup_routinei+0x14>
			out.set();
			_delay_ms(delay_time/2);
			out.clear();
		}
	}
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	08 95       	ret

00000230 <main>:
char message[16];
uint16_t volts_reading, volts, centivolts;
uint16_t amps_reading, amps, centiamps;
uint32_t watts_raw, watts, centiwatts;

int main(void) {
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	00 d0       	rcall	.+0      	; 0x236 <main+0x6>
     236:	1f 92       	push	r1
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	startup_routine(2);
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z15startup_routinei>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     244:	ac e7       	ldi	r26, 0x7C	; 124
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	12 96       	adiw	r26, 0x02	; 2
     24a:	ed 91       	ld	r30, X+
     24c:	fc 91       	ld	r31, X
     24e:	13 97       	sbiw	r26, 0x03	; 3
     250:	90 81       	ld	r25, Z
     252:	19 96       	adiw	r26, 0x09	; 9
     254:	8c 91       	ld	r24, X
     256:	89 2b       	or	r24, r25
     258:	80 83       	st	Z, r24
	volatile static uint8_t analogHigh;
	volatile static uint8_t analogLow;
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
     25a:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
     25c:	87 e4       	ldi	r24, 0x47	; 71
     25e:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     262:	8f e8       	ldi	r24, 0x8F	; 143
     264:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB = 0; // free running
     268:	10 92 7b 00 	sts	0x007B, r1
	volatile static uint8_t tx_index, tx_head, chars_left;
	volatile static char receiving[];
	volatile static uint8_t rx_index, rx_head, chars_unread;
	
	static void init() {
		UBRR0H = 0;
     26c:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = 16; // BAUD 115200
     270:	80 e1       	ldi	r24, 0x10	; 16
     272:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A = _BV(U2X0);
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	80 93 c0 00 	sts	0x00C0, r24
		UCSR0B = _BV(TXCIE0) | _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
     27c:	88 ed       	ldi	r24, 0xD8	; 216
     27e:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     282:	86 e0       	ldi	r24, 0x06	; 6
     284:	80 93 c2 00 	sts	0x00C2, r24
	txden.set();
	
	Analog::selectChannel(PIN7);
	Serial::init();
	sei(); // Enable interrupts
     288:	78 94       	sei
     28a:	0f 2e       	mov	r0, r31
     28c:	f5 ed       	ldi	r31, 0xD5	; 213
     28e:	cf 2e       	mov	r12, r31
     290:	f1 e0       	ldi	r31, 0x01	; 1
     292:	df 2e       	mov	r13, r31
     294:	f0 2d       	mov	r31, r0
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     296:	0f 2e       	mov	r0, r31
     298:	fa e7       	ldi	r31, 0x7A	; 122
     29a:	ef 2e       	mov	r14, r31
     29c:	f1 2c       	mov	r15, r1
     29e:	f0 2d       	mov	r31, r0
     2a0:	2f e8       	ldi	r18, 0x8F	; 143
     2a2:	29 83       	std	Y+1, r18	; 0x01
		Analog::selectChannel(PIN6);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
		volts_reading = Analog::getValue();
		adc_scale<MAX_ADC_UNITS>(volts_reading, &amps, &centiamps);
		sprintf(message, "%2u.%02u A\r\n", amps, centiamps);
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f8 e5       	ldi	r31, 0x58	; 88
     2a8:	2f 2e       	mov	r2, r31
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	3f 2e       	mov	r3, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	02 e6       	ldi	r16, 0x62	; 98
     2b2:	11 e0       	ldi	r17, 0x01	; 1
     2b4:	e9 e9       	ldi	r30, 0x99	; 153
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	df 01       	movw	r26, r30
     2ba:	17 97       	sbiw	r26, 0x07	; 7
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     2bc:	0d 90       	ld	r0, X+
     2be:	bc 91       	ld	r27, X
     2c0:	a0 2d       	mov	r26, r0
     2c2:	9c 91       	ld	r25, X
     2c4:	80 81       	ld	r24, Z
     2c6:	89 27       	eor	r24, r25
     2c8:	8c 93       	st	X, r24
     2ca:	3a 96       	adiw	r30, 0x0a	; 10
	Analog::selectChannel(PIN7);
	Serial::init();
	sei(); // Enable interrupts
	
    while (1) {
		for (int i=1; i<=6; ++i) enable[i].toggle();
     2cc:	ec 15       	cp	r30, r12
     2ce:	fd 05       	cpc	r31, r13
     2d0:	99 f7       	brne	.-26     	; 0x2b8 <main+0x88>
	volatile static uint8_t analogHigh;
	volatile static uint8_t analogLow;
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
     2d2:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
     2d4:	e6 e4       	ldi	r30, 0x46	; 70
     2d6:	ac e7       	ldi	r26, 0x7C	; 124
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	ec 93       	st	X, r30
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     2dc:	e9 81       	ldd	r30, Y+1	; 0x01
     2de:	d7 01       	movw	r26, r14
     2e0:	ec 93       	st	X, r30
		ADCSRB = 0; // free running
     2e2:	ab e7       	ldi	r26, 0x7B	; 123
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	1c 92       	st	X, r1
	}
	static void autoTriggerEnable(bool enabled) {
		ADCSRA = enabled? ADCSRA | _BV(ADATE) : ADCSRA & ~_BV(ADATE);
	}
	static void startConversion() {
		newValue = false;
     2e8:	10 92 fd 01 	sts	0x01FD, r1
		ADCSRA |= _BV(ADSC); 
     2ec:	f7 01       	movw	r30, r14
     2ee:	80 81       	ld	r24, Z
     2f0:	80 64       	ori	r24, 0x40	; 64
     2f2:	80 83       	st	Z, r24
	}
	static void stopConversion() { ADCSRA &= ~_BV(ADSC); }
	static bool inline conversionComplete() { return newValue; }
     2f4:	80 91 fd 01 	lds	r24, 0x01FD
		
		Analog::selectChannel(PIN6);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
     2f8:	88 23       	and	r24, r24
     2fa:	e1 f3       	breq	.-8      	; 0x2f4 <main+0xc4>
	static uint16_t inline getValue () { 
		return ((Analog::analogHigh << 8)) | (Analog::analogLow); 
     2fc:	80 91 fc 01 	lds	r24, 0x01FC
     300:	20 91 fb 01 	lds	r18, 0x01FB
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	38 2b       	or	r19, r24
		volts_reading = Analog::getValue();
     308:	30 93 57 01 	sts	0x0157, r19
     30c:	20 93 56 01 	sts	0x0156, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     310:	a0 e4       	ldi	r26, 0x40	; 64
     312:	b6 e0       	ldi	r27, 0x06	; 6
     314:	0e 94 29 04 	call	0x852	; 0x852 <__umulhisi3>
     318:	2b 01       	movw	r4, r22
     31a:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     31c:	9b 01       	movw	r18, r22
     31e:	ac 01       	movw	r20, r24
     320:	44 27       	eor	r20, r20
     322:	55 27       	eor	r21, r21
     324:	a4 e6       	ldi	r26, 0x64	; 100
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	0e 94 38 04 	call	0x870	; 0x870 <__muluhisi3>
     32c:	90 93 4d 01 	sts	0x014D, r25
     330:	80 93 4c 01 	sts	0x014C, r24
	}
	temp_result = temp_result >> 16;
     334:	c3 01       	movw	r24, r6
     336:	aa 27       	eor	r26, r26
     338:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     33a:	80 93 4e 01 	sts	0x014E, r24
     33e:	90 93 4f 01 	sts	0x014F, r25
		Analog::selectChannel(PIN6);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
		volts_reading = Analog::getValue();
		adc_scale<MAX_ADC_UNITS>(volts_reading, &amps, &centiamps);
		sprintf(message, "%2u.%02u A\r\n", amps, centiamps);
     342:	20 91 4d 01 	lds	r18, 0x014D
     346:	2f 93       	push	r18
     348:	20 91 4c 01 	lds	r18, 0x014C
     34c:	2f 93       	push	r18
     34e:	9f 93       	push	r25
     350:	8f 93       	push	r24
     352:	a6 e0       	ldi	r26, 0x06	; 6
     354:	b1 e0       	ldi	r27, 0x01	; 1
     356:	bf 93       	push	r27
     358:	af 93       	push	r26
     35a:	3f 92       	push	r3
     35c:	2f 92       	push	r2
     35e:	0e 94 76 05 	call	0xaec	; 0xaec <sprintf>
	}
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     362:	f8 94       	cli
     364:	3b 82       	std	Y+3, r3	; 0x03
     366:	2a 82       	std	Y+2, r2	; 0x02
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	d1 01       	movw	r26, r2
     374:	91 01       	movw	r18, r2
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = s[chars_added];
     376:	e0 91 da 01 	lds	r30, 0x01DA
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	8d 91       	ld	r24, X+
     37e:	e5 51       	subi	r30, 0x15	; 21
     380:	fe 4f       	sbci	r31, 0xFE	; 254
     382:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     384:	80 91 da 01 	lds	r24, 0x01DA
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	90 78       	andi	r25, 0x80	; 128
     390:	99 23       	and	r25, r25
     392:	24 f4       	brge	.+8      	; 0x39c <main+0x16c>
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	80 6f       	ori	r24, 0xF0	; 240
     398:	9f 6f       	ori	r25, 0xFF	; 255
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	80 93 da 01 	sts	0x01DA, r24
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     3a0:	a0 17       	cp	r26, r16
     3a2:	b1 07       	cpc	r27, r17
     3a4:	41 f7       	brne	.-48     	; 0x376 <main+0x146>
     3a6:	3b 83       	std	Y+3, r19	; 0x03
     3a8:	2a 83       	std	Y+2, r18	; 0x02
			transmitting[tx_index] = s[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		} 
		UDR0 = transmitting[tx_head];
     3aa:	e0 91 d9 01 	lds	r30, 0x01D9
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	e5 51       	subi	r30, 0x15	; 21
     3b2:	fe 4f       	sbci	r31, 0xFE	; 254
     3b4:	80 81       	ld	r24, Z
     3b6:	a6 ec       	ldi	r26, 0xC6	; 198
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     3bc:	80 91 d9 01 	lds	r24, 0x01D9
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	8f 70       	andi	r24, 0x0F	; 15
     3c6:	90 78       	andi	r25, 0x80	; 128
     3c8:	99 23       	and	r25, r25
     3ca:	24 f4       	brge	.+8      	; 0x3d4 <main+0x1a4>
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	80 6f       	ori	r24, 0xF0	; 240
     3d0:	9f 6f       	ori	r25, 0xFF	; 255
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	80 93 d9 01 	sts	0x01D9, r24
		chars_left += (char_count - 1);
     3d8:	80 91 d8 01 	lds	r24, 0x01D8
     3dc:	87 5f       	subi	r24, 0xF7	; 247
     3de:	80 93 d8 01 	sts	0x01D8, r24
		sei();
     3e2:	78 94       	sei
     3e4:	bf ef       	ldi	r27, 0xFF	; 255
     3e6:	e9 e6       	ldi	r30, 0x69	; 105
     3e8:	f8 e1       	ldi	r31, 0x18	; 24
     3ea:	b1 50       	subi	r27, 0x01	; 1
     3ec:	e0 40       	sbci	r30, 0x00	; 0
     3ee:	f0 40       	sbci	r31, 0x00	; 0
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0x1ba>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x1c4>
     3f4:	00 00       	nop
	volatile static uint8_t analogHigh;
	volatile static uint8_t analogLow;
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
     3f6:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
     3f8:	e7 e4       	ldi	r30, 0x47	; 71
     3fa:	ac e7       	ldi	r26, 0x7C	; 124
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	ec 93       	st	X, r30
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     400:	ef e8       	ldi	r30, 0x8F	; 143
     402:	d7 01       	movw	r26, r14
     404:	ec 93       	st	X, r30
		ADCSRB = 0; // free running
     406:	ab e7       	ldi	r26, 0x7B	; 123
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	1c 92       	st	X, r1
	}
	static void autoTriggerEnable(bool enabled) {
		ADCSRA = enabled? ADCSRA | _BV(ADATE) : ADCSRA & ~_BV(ADATE);
	}
	static void startConversion() {
		newValue = false;
     40c:	10 92 fd 01 	sts	0x01FD, r1
		ADCSRA |= _BV(ADSC); 
     410:	f7 01       	movw	r30, r14
     412:	80 81       	ld	r24, Z
     414:	80 64       	ori	r24, 0x40	; 64
     416:	80 83       	st	Z, r24
     418:	2a 81       	ldd	r18, Y+2	; 0x02
     41a:	3b 81       	ldd	r19, Y+3	; 0x03
	}
	static void stopConversion() { ADCSRA &= ~_BV(ADSC); }
	static bool inline conversionComplete() { return newValue; }
     41c:	80 91 fd 01 	lds	r24, 0x01FD
		Serial::transmit(message, 10);
		_delay_ms(500);
		
		Analog::selectChannel(PIN7);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
     420:	88 23       	and	r24, r24
     422:	e1 f3       	breq	.-8      	; 0x41c <main+0x1ec>
     424:	3b 83       	std	Y+3, r19	; 0x03
     426:	2a 83       	std	Y+2, r18	; 0x02
	static uint16_t inline getValue () { 
		return ((Analog::analogHigh << 8)) | (Analog::analogLow); 
     428:	80 91 fc 01 	lds	r24, 0x01FC
     42c:	20 91 fb 01 	lds	r18, 0x01FB
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	38 2b       	or	r19, r24
		amps_reading = Analog::getValue();
     434:	30 93 51 01 	sts	0x0151, r19
     438:	20 93 50 01 	sts	0x0150, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     43c:	a0 e4       	ldi	r26, 0x40	; 64
     43e:	b6 e0       	ldi	r27, 0x06	; 6
     440:	0e 94 29 04 	call	0x852	; 0x852 <__umulhisi3>
     444:	2b 01       	movw	r4, r22
     446:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     448:	9b 01       	movw	r18, r22
     44a:	ac 01       	movw	r20, r24
     44c:	44 27       	eor	r20, r20
     44e:	55 27       	eor	r21, r21
     450:	a4 e6       	ldi	r26, 0x64	; 100
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	0e 94 38 04 	call	0x870	; 0x870 <__muluhisi3>
     458:	90 93 53 01 	sts	0x0153, r25
     45c:	80 93 52 01 	sts	0x0152, r24
	}
	temp_result = temp_result >> 16;
     460:	c3 01       	movw	r24, r6
     462:	aa 27       	eor	r26, r26
     464:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     466:	80 93 54 01 	sts	0x0154, r24
     46a:	90 93 55 01 	sts	0x0155, r25
		Analog::selectChannel(PIN7);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
		amps_reading = Analog::getValue();
		adc_scale<MAX_ADC_UNITS>(amps_reading, &volts, &centivolts);
		sprintf(message, "%2u.%02u V\r\n", volts, centivolts);
     46e:	20 91 53 01 	lds	r18, 0x0153
     472:	2f 93       	push	r18
     474:	20 91 52 01 	lds	r18, 0x0152
     478:	2f 93       	push	r18
     47a:	9f 93       	push	r25
     47c:	8f 93       	push	r24
     47e:	a3 e1       	ldi	r26, 0x13	; 19
     480:	b1 e0       	ldi	r27, 0x01	; 1
     482:	bf 93       	push	r27
     484:	af 93       	push	r26
     486:	3f 92       	push	r3
     488:	2f 92       	push	r2
     48a:	0e 94 76 05 	call	0xaec	; 0xaec <sprintf>
	}
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     48e:	f8 94       	cli
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	d1 01       	movw	r26, r2
     49c:	2a 81       	ldd	r18, Y+2	; 0x02
     49e:	3b 81       	ldd	r19, Y+3	; 0x03
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = s[chars_added];
     4a0:	e0 91 da 01 	lds	r30, 0x01DA
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	8d 91       	ld	r24, X+
     4a8:	e5 51       	subi	r30, 0x15	; 21
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     4ae:	80 91 da 01 	lds	r24, 0x01DA
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	8f 70       	andi	r24, 0x0F	; 15
     4b8:	90 78       	andi	r25, 0x80	; 128
     4ba:	99 23       	and	r25, r25
     4bc:	24 f4       	brge	.+8      	; 0x4c6 <main+0x296>
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	80 6f       	ori	r24, 0xF0	; 240
     4c2:	9f 6f       	ori	r25, 0xFF	; 255
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	80 93 da 01 	sts	0x01DA, r24
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     4ca:	0a 17       	cp	r16, r26
     4cc:	1b 07       	cpc	r17, r27
     4ce:	41 f7       	brne	.-48     	; 0x4a0 <main+0x270>
     4d0:	3b 83       	std	Y+3, r19	; 0x03
     4d2:	2a 83       	std	Y+2, r18	; 0x02
			transmitting[tx_index] = s[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		} 
		UDR0 = transmitting[tx_head];
     4d4:	e0 91 d9 01 	lds	r30, 0x01D9
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	e5 51       	subi	r30, 0x15	; 21
     4dc:	fe 4f       	sbci	r31, 0xFE	; 254
     4de:	80 81       	ld	r24, Z
     4e0:	a6 ec       	ldi	r26, 0xC6	; 198
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     4e6:	80 91 d9 01 	lds	r24, 0x01D9
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	8f 70       	andi	r24, 0x0F	; 15
     4f0:	90 78       	andi	r25, 0x80	; 128
     4f2:	99 23       	and	r25, r25
     4f4:	24 f4       	brge	.+8      	; 0x4fe <main+0x2ce>
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	80 6f       	ori	r24, 0xF0	; 240
     4fa:	9f 6f       	ori	r25, 0xFF	; 255
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	80 93 d9 01 	sts	0x01D9, r24
		chars_left += (char_count - 1);
     502:	80 91 d8 01 	lds	r24, 0x01D8
     506:	87 5f       	subi	r24, 0xF7	; 247
     508:	80 93 d8 01 	sts	0x01D8, r24
		sei();
     50c:	78 94       	sei
     50e:	bf ef       	ldi	r27, 0xFF	; 255
     510:	e9 e6       	ldi	r30, 0x69	; 105
     512:	f8 e1       	ldi	r31, 0x18	; 24
     514:	b1 50       	subi	r27, 0x01	; 1
     516:	e0 40       	sbci	r30, 0x00	; 0
     518:	f0 40       	sbci	r31, 0x00	; 0
     51a:	e1 f7       	brne	.-8      	; 0x514 <main+0x2e4>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <main+0x2ee>
     51e:	00 00       	nop
		Serial::transmit(message, 10);
		_delay_ms(500);
		
		watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     520:	20 91 50 01 	lds	r18, 0x0150
     524:	30 91 51 01 	lds	r19, 0x0151
     528:	a0 91 56 01 	lds	r26, 0x0156
     52c:	b0 91 57 01 	lds	r27, 0x0157
     530:	0e 94 29 04 	call	0x852	; 0x852 <__umulhisi3>
     534:	4b 01       	movw	r8, r22
     536:	5c 01       	movw	r10, r24
     538:	60 93 48 01 	sts	0x0148, r22
     53c:	70 93 49 01 	sts	0x0149, r23
     540:	80 93 4a 01 	sts	0x014A, r24
     544:	90 93 4b 01 	sts	0x014B, r25
		watts = (watts_raw * 39) >> 16;
     548:	a7 e2       	ldi	r26, 0x27	; 39
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	9b 01       	movw	r18, r22
     54e:	ac 01       	movw	r20, r24
     550:	0e 94 38 04 	call	0x870	; 0x870 <__muluhisi3>
     554:	2c 01       	movw	r4, r24
     556:	66 24       	eor	r6, r6
     558:	77 24       	eor	r7, r7
     55a:	40 92 44 01 	sts	0x0144, r4
     55e:	50 92 45 01 	sts	0x0145, r5
     562:	60 92 46 01 	sts	0x0146, r6
     566:	70 92 47 01 	sts	0x0147, r7
		centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
     56a:	a0 e9       	ldi	r26, 0x90	; 144
     56c:	b6 e0       	ldi	r27, 0x06	; 6
     56e:	a3 01       	movw	r20, r6
     570:	92 01       	movw	r18, r4
     572:	0e 94 38 04 	call	0x870	; 0x870 <__muluhisi3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	c5 01       	movw	r24, r10
     57c:	b4 01       	movw	r22, r8
     57e:	0e 94 07 04 	call	0x80e	; 0x80e <__udivmodsi4>
     582:	9b 01       	movw	r18, r22
     584:	ac 01       	movw	r20, r24
     586:	ad e3       	ldi	r26, 0x3D	; 61
     588:	bf e0       	ldi	r27, 0x0F	; 15
     58a:	0e 94 38 04 	call	0x870	; 0x870 <__muluhisi3>
     58e:	aa 27       	eor	r26, r26
     590:	bb 27       	eor	r27, r27
     592:	80 93 40 01 	sts	0x0140, r24
     596:	90 93 41 01 	sts	0x0141, r25
     59a:	a0 93 42 01 	sts	0x0142, r26
     59e:	b0 93 43 01 	sts	0x0143, r27
		sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
     5a2:	bf 93       	push	r27
     5a4:	af 93       	push	r26
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	7f 92       	push	r7
     5ac:	6f 92       	push	r6
     5ae:	5f 92       	push	r5
     5b0:	4f 92       	push	r4
     5b2:	a0 e2       	ldi	r26, 0x20	; 32
     5b4:	b1 e0       	ldi	r27, 0x01	; 1
     5b6:	bf 93       	push	r27
     5b8:	af 93       	push	r26
     5ba:	3f 92       	push	r3
     5bc:	2f 92       	push	r2
     5be:	0e 94 76 05 	call	0xaec	; 0xaec <sprintf>
	}
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     5c2:	f8 94       	cli
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	aa 81       	ldd	r26, Y+2	; 0x02
     5d0:	bb 81       	ldd	r27, Y+3	; 0x03
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = s[chars_added];
     5d2:	e0 91 da 01 	lds	r30, 0x01DA
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	8d 91       	ld	r24, X+
     5da:	e5 51       	subi	r30, 0x15	; 21
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     5e0:	80 91 da 01 	lds	r24, 0x01DA
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	8f 70       	andi	r24, 0x0F	; 15
     5ea:	90 78       	andi	r25, 0x80	; 128
     5ec:	99 23       	and	r25, r25
     5ee:	24 f4       	brge	.+8      	; 0x5f8 <main+0x3c8>
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	80 6f       	ori	r24, 0xF0	; 240
     5f4:	9f 6f       	ori	r25, 0xFF	; 255
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	80 93 da 01 	sts	0x01DA, r24
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     5fc:	0a 17       	cp	r16, r26
     5fe:	1b 07       	cpc	r17, r27
     600:	41 f7       	brne	.-48     	; 0x5d2 <main+0x3a2>
			transmitting[tx_index] = s[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		} 
		UDR0 = transmitting[tx_head];
     602:	e0 91 d9 01 	lds	r30, 0x01D9
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	e5 51       	subi	r30, 0x15	; 21
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	80 81       	ld	r24, Z
     60e:	a6 ec       	ldi	r26, 0xC6	; 198
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     614:	80 91 d9 01 	lds	r24, 0x01D9
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	8f 70       	andi	r24, 0x0F	; 15
     61e:	90 78       	andi	r25, 0x80	; 128
     620:	99 23       	and	r25, r25
     622:	24 f4       	brge	.+8      	; 0x62c <main+0x3fc>
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	80 6f       	ori	r24, 0xF0	; 240
     628:	9f 6f       	ori	r25, 0xFF	; 255
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	80 93 d9 01 	sts	0x01D9, r24
		chars_left += (char_count - 1);
     630:	80 91 d8 01 	lds	r24, 0x01D8
     634:	87 5f       	subi	r24, 0xF7	; 247
     636:	80 93 d8 01 	sts	0x01D8, r24
		sei();
     63a:	78 94       	sei
     63c:	bf ef       	ldi	r27, 0xFF	; 255
     63e:	e9 e6       	ldi	r30, 0x69	; 105
     640:	f8 e1       	ldi	r31, 0x18	; 24
     642:	b1 50       	subi	r27, 0x01	; 1
     644:	e0 40       	sbci	r30, 0x00	; 0
     646:	f0 40       	sbci	r31, 0x00	; 0
     648:	e1 f7       	brne	.-8      	; 0x642 <main+0x412>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x41c>
     64c:	00 00       	nop
     64e:	32 ce       	rjmp	.-924    	; 0x2b4 <main+0x84>

00000650 <_GLOBAL__sub_I__Znwj>:
		Serial::transmit(message, 10);
		_delay_ms(500);
    }
}
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     660:	ec ec       	ldi	r30, 0xCC	; 204
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	65 e2       	ldi	r22, 0x25	; 37
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	73 83       	std	Z+3, r23	; 0x03
     66a:	62 83       	std	Z+2, r22	; 0x02
     66c:	44 e2       	ldi	r20, 0x24	; 36
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	55 83       	std	Z+5, r21	; 0x05
     672:	44 83       	std	Z+4, r20	; 0x04
     674:	23 e2       	ldi	r18, 0x23	; 35
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	37 83       	std	Z+7, r19	; 0x07
     67a:	26 83       	std	Z+6, r18	; 0x06
     67c:	10 86       	std	Z+8, r1	; 0x08
     67e:	a1 e0       	ldi	r26, 0x01	; 1
     680:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     682:	83 e3       	ldi	r24, 0x33	; 51
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	91 83       	std	Z+1, r25	; 0x01
     688:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     68a:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     68c:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     68e:	e6 e8       	ldi	r30, 0x86	; 134
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	73 83       	std	Z+3, r23	; 0x03
     694:	62 83       	std	Z+2, r22	; 0x02
     696:	55 83       	std	Z+5, r21	; 0x05
     698:	44 83       	std	Z+4, r20	; 0x04
     69a:	37 83       	std	Z+7, r19	; 0x07
     69c:	26 83       	std	Z+6, r18	; 0x06
     69e:	10 86       	std	Z+8, r1	; 0x08
     6a0:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     6a2:	91 83       	std	Z+1, r25	; 0x01
     6a4:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     6a6:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     6a8:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     6aa:	68 e2       	ldi	r22, 0x28	; 40
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	75 87       	std	Z+13, r23	; 0x0d
     6b0:	64 87       	std	Z+12, r22	; 0x0c
     6b2:	47 e2       	ldi	r20, 0x27	; 39
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	57 87       	std	Z+15, r21	; 0x0f
     6b8:	46 87       	std	Z+14, r20	; 0x0e
     6ba:	26 e2       	ldi	r18, 0x26	; 38
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	31 8b       	std	Z+17, r19	; 0x11
     6c0:	20 8b       	std	Z+16, r18	; 0x10
     6c2:	b3 e0       	ldi	r27, 0x03	; 3
     6c4:	b2 8b       	std	Z+18, r27	; 0x12
     6c6:	b8 e0       	ldi	r27, 0x08	; 8
     6c8:	b3 8b       	std	Z+19, r27	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     6ca:	93 87       	std	Z+11, r25	; 0x0b
     6cc:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     6ce:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     6d0:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     6d2:	0f 2e       	mov	r0, r31
     6d4:	fb e2       	ldi	r31, 0x2B	; 43
     6d6:	ef 2e       	mov	r14, r31
     6d8:	f1 2c       	mov	r15, r1
     6da:	f0 2d       	mov	r31, r0
     6dc:	f7 8a       	std	Z+23, r15	; 0x17
     6de:	e6 8a       	std	Z+22, r14	; 0x16
     6e0:	0a e2       	ldi	r16, 0x2A	; 42
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	11 8f       	std	Z+25, r17	; 0x19
     6e6:	00 8f       	std	Z+24, r16	; 0x18
     6e8:	c9 e2       	ldi	r28, 0x29	; 41
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
     6ec:	d3 8f       	std	Z+27, r29	; 0x1b
     6ee:	c2 8f       	std	Z+26, r28	; 0x1a
     6f0:	68 94       	set
     6f2:	dd 24       	eor	r13, r13
     6f4:	d1 f8       	bld	r13, 1
     6f6:	d4 8e       	std	Z+28, r13	; 0x1c
     6f8:	b4 e0       	ldi	r27, 0x04	; 4
     6fa:	b5 8f       	std	Z+29, r27	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     6fc:	95 8b       	std	Z+21, r25	; 0x15
     6fe:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     700:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     702:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     704:	f1 a2       	std	Z+33, r15	; 0x21
     706:	e0 a2       	std	Z+32, r14	; 0x20
     708:	13 a3       	std	Z+35, r17	; 0x23
     70a:	02 a3       	std	Z+34, r16	; 0x22
     70c:	d5 a3       	std	Z+37, r29	; 0x25
     70e:	c4 a3       	std	Z+36, r28	; 0x24
     710:	b6 a3       	std	Z+38, r27	; 0x26
     712:	68 94       	set
     714:	cc 24       	eor	r12, r12
     716:	c4 f8       	bld	r12, 4
     718:	c7 a2       	std	Z+39, r12	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     71a:	97 8f       	std	Z+31, r25	; 0x1f
     71c:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     71e:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     720:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     722:	73 a7       	std	Z+43, r23	; 0x2b
     724:	62 a7       	std	Z+42, r22	; 0x2a
     726:	55 a7       	std	Z+45, r21	; 0x2d
     728:	44 a7       	std	Z+44, r20	; 0x2c
     72a:	37 a7       	std	Z+47, r19	; 0x2f
     72c:	26 a7       	std	Z+46, r18	; 0x2e
     72e:	10 aa       	std	Z+48, r1	; 0x30
     730:	a1 ab       	std	Z+49, r26	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     732:	91 a7       	std	Z+41, r25	; 0x29
     734:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     736:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     738:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     73a:	75 ab       	std	Z+53, r23	; 0x35
     73c:	64 ab       	std	Z+52, r22	; 0x34
     73e:	57 ab       	std	Z+55, r21	; 0x37
     740:	46 ab       	std	Z+54, r20	; 0x36
     742:	31 af       	std	Z+57, r19	; 0x39
     744:	20 af       	std	Z+56, r18	; 0x38
     746:	a2 af       	std	Z+58, r26	; 0x3a
     748:	d3 ae       	std	Z+59, r13	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     74a:	93 ab       	std	Z+51, r25	; 0x33
     74c:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     74e:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     750:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     752:	70 93 c5 01 	sts	0x01C5, r23
     756:	60 93 c4 01 	sts	0x01C4, r22
     75a:	50 93 c7 01 	sts	0x01C7, r21
     75e:	40 93 c6 01 	sts	0x01C6, r20
     762:	30 93 c9 01 	sts	0x01C9, r19
     766:	20 93 c8 01 	sts	0x01C8, r18
     76a:	d0 92 ca 01 	sts	0x01CA, r13
     76e:	b0 93 cb 01 	sts	0x01CB, r27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     772:	95 af       	std	Z+61, r25	; 0x3d
     774:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
     776:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     778:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     77a:	ec e7       	ldi	r30, 0x7C	; 124
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	f3 82       	std	Z+3, r15	; 0x03
     780:	e2 82       	std	Z+2, r14	; 0x02
     782:	15 83       	std	Z+5, r17	; 0x05
     784:	04 83       	std	Z+4, r16	; 0x04
     786:	d7 83       	std	Z+7, r29	; 0x07
     788:	c6 83       	std	Z+6, r28	; 0x06
     78a:	b7 e0       	ldi	r27, 0x07	; 7
     78c:	b0 87       	std	Z+8, r27	; 0x08
     78e:	a0 e8       	ldi	r26, 0x80	; 128
     790:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     792:	91 83       	std	Z+1, r25	; 0x01
     794:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     796:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     798:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     79a:	e2 e7       	ldi	r30, 0x72	; 114
     79c:	f1 e0       	ldi	r31, 0x01	; 1
     79e:	73 83       	std	Z+3, r23	; 0x03
     7a0:	62 83       	std	Z+2, r22	; 0x02
     7a2:	55 83       	std	Z+5, r21	; 0x05
     7a4:	44 83       	std	Z+4, r20	; 0x04
     7a6:	37 83       	std	Z+7, r19	; 0x07
     7a8:	26 83       	std	Z+6, r18	; 0x06
     7aa:	b0 87       	std	Z+8, r27	; 0x08
     7ac:	a1 87       	std	Z+9, r26	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     7ae:	8b e3       	ldi	r24, 0x3B	; 59
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	91 83       	std	Z+1, r25	; 0x01
     7b4:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     7b6:	3f 98       	cbi	0x07, 7	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     7b8:	e8 e6       	ldi	r30, 0x68	; 104
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	73 83       	std	Z+3, r23	; 0x03
     7be:	62 83       	std	Z+2, r22	; 0x02
     7c0:	55 83       	std	Z+5, r21	; 0x05
     7c2:	44 83       	std	Z+4, r20	; 0x04
     7c4:	37 83       	std	Z+7, r19	; 0x07
     7c6:	26 83       	std	Z+6, r18	; 0x06
     7c8:	26 e0       	ldi	r18, 0x06	; 6
     7ca:	20 87       	std	Z+8, r18	; 0x08
     7cc:	20 e4       	ldi	r18, 0x40	; 64
     7ce:	21 87       	std	Z+9, r18	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     7d4:	3e 98       	cbi	0x07, 6	; 7
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	08 95       	ret

000007e8 <_GLOBAL__sub_D__Znwj>:
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
using namespace opbots;

const uint8_t ERR(0);

Output err_led(&PORTB, PIN0);
Output enable[] = {
     7ec:	cc ec       	ldi	r28, 0xCC	; 204
     7ee:	d1 e0       	ldi	r29, 0x01	; 1
     7f0:	2a 97       	sbiw	r28, 0x0a	; 10
     7f2:	e8 81       	ld	r30, Y
     7f4:	f9 81       	ldd	r31, Y+1	; 0x01
     7f6:	01 90       	ld	r0, Z+
     7f8:	f0 81       	ld	r31, Z
     7fa:	e0 2d       	mov	r30, r0
     7fc:	ce 01       	movw	r24, r28
     7fe:	09 95       	icall
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	c6 38       	cpi	r28, 0x86	; 134
     804:	d8 07       	cpc	r29, r24
     806:	a1 f7       	brne	.-24     	; 0x7f0 <_GLOBAL__sub_D__Znwj+0x8>
		centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
		sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
		Serial::transmit(message, 10);
		_delay_ms(500);
    }
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <__udivmodsi4>:
     80e:	a1 e2       	ldi	r26, 0x21	; 33
     810:	1a 2e       	mov	r1, r26
     812:	aa 1b       	sub	r26, r26
     814:	bb 1b       	sub	r27, r27
     816:	fd 01       	movw	r30, r26
     818:	0d c0       	rjmp	.+26     	; 0x834 <__udivmodsi4_ep>

0000081a <__udivmodsi4_loop>:
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
     81e:	ee 1f       	adc	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	a2 17       	cp	r26, r18
     824:	b3 07       	cpc	r27, r19
     826:	e4 07       	cpc	r30, r20
     828:	f5 07       	cpc	r31, r21
     82a:	20 f0       	brcs	.+8      	; 0x834 <__udivmodsi4_ep>
     82c:	a2 1b       	sub	r26, r18
     82e:	b3 0b       	sbc	r27, r19
     830:	e4 0b       	sbc	r30, r20
     832:	f5 0b       	sbc	r31, r21

00000834 <__udivmodsi4_ep>:
     834:	66 1f       	adc	r22, r22
     836:	77 1f       	adc	r23, r23
     838:	88 1f       	adc	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	1a 94       	dec	r1
     83e:	69 f7       	brne	.-38     	; 0x81a <__udivmodsi4_loop>
     840:	60 95       	com	r22
     842:	70 95       	com	r23
     844:	80 95       	com	r24
     846:	90 95       	com	r25
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	bd 01       	movw	r22, r26
     84e:	cf 01       	movw	r24, r30
     850:	08 95       	ret

00000852 <__umulhisi3>:
     852:	a2 9f       	mul	r26, r18
     854:	b0 01       	movw	r22, r0
     856:	b3 9f       	mul	r27, r19
     858:	c0 01       	movw	r24, r0
     85a:	a3 9f       	mul	r26, r19
     85c:	70 0d       	add	r23, r0
     85e:	81 1d       	adc	r24, r1
     860:	11 24       	eor	r1, r1
     862:	91 1d       	adc	r25, r1
     864:	b2 9f       	mul	r27, r18
     866:	70 0d       	add	r23, r0
     868:	81 1d       	adc	r24, r1
     86a:	11 24       	eor	r1, r1
     86c:	91 1d       	adc	r25, r1
     86e:	08 95       	ret

00000870 <__muluhisi3>:
     870:	0e 94 29 04 	call	0x852	; 0x852 <__umulhisi3>
     874:	a5 9f       	mul	r26, r21
     876:	90 0d       	add	r25, r0
     878:	b4 9f       	mul	r27, r20
     87a:	90 0d       	add	r25, r0
     87c:	a4 9f       	mul	r26, r20
     87e:	80 0d       	add	r24, r0
     880:	91 1d       	adc	r25, r1
     882:	11 24       	eor	r1, r1
     884:	08 95       	ret

00000886 <__tablejump2__>:
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	05 90       	lpm	r0, Z+
     88c:	f4 91       	lpm	r31, Z
     88e:	e0 2d       	mov	r30, r0
     890:	09 94       	ijmp

00000892 <malloc>:
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	91 05       	cpc	r25, r1
     89a:	10 f4       	brcc	.+4      	; 0x8a0 <malloc+0xe>
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	e0 91 00 02 	lds	r30, 0x0200
     8a4:	f0 91 01 02 	lds	r31, 0x0201
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	c0 e0       	ldi	r28, 0x00	; 0
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
     8b0:	30 97       	sbiw	r30, 0x00	; 0
     8b2:	11 f1       	breq	.+68     	; 0x8f8 <malloc+0x66>
     8b4:	40 81       	ld	r20, Z
     8b6:	51 81       	ldd	r21, Z+1	; 0x01
     8b8:	48 17       	cp	r20, r24
     8ba:	59 07       	cpc	r21, r25
     8bc:	c0 f0       	brcs	.+48     	; 0x8ee <malloc+0x5c>
     8be:	48 17       	cp	r20, r24
     8c0:	59 07       	cpc	r21, r25
     8c2:	61 f4       	brne	.+24     	; 0x8dc <malloc+0x4a>
     8c4:	82 81       	ldd	r24, Z+2	; 0x02
     8c6:	93 81       	ldd	r25, Z+3	; 0x03
     8c8:	20 97       	sbiw	r28, 0x00	; 0
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <malloc+0x40>
     8cc:	9b 83       	std	Y+3, r25	; 0x03
     8ce:	8a 83       	std	Y+2, r24	; 0x02
     8d0:	2b c0       	rjmp	.+86     	; 0x928 <__stack+0x29>
     8d2:	90 93 01 02 	sts	0x0201, r25
     8d6:	80 93 00 02 	sts	0x0200, r24
     8da:	26 c0       	rjmp	.+76     	; 0x928 <__stack+0x29>
     8dc:	21 15       	cp	r18, r1
     8de:	31 05       	cpc	r19, r1
     8e0:	19 f0       	breq	.+6      	; 0x8e8 <malloc+0x56>
     8e2:	42 17       	cp	r20, r18
     8e4:	53 07       	cpc	r21, r19
     8e6:	18 f4       	brcc	.+6      	; 0x8ee <malloc+0x5c>
     8e8:	9a 01       	movw	r18, r20
     8ea:	be 01       	movw	r22, r28
     8ec:	df 01       	movw	r26, r30
     8ee:	ef 01       	movw	r28, r30
     8f0:	02 80       	ldd	r0, Z+2	; 0x02
     8f2:	f3 81       	ldd	r31, Z+3	; 0x03
     8f4:	e0 2d       	mov	r30, r0
     8f6:	dc cf       	rjmp	.-72     	; 0x8b0 <malloc+0x1e>
     8f8:	21 15       	cp	r18, r1
     8fa:	31 05       	cpc	r19, r1
     8fc:	09 f1       	breq	.+66     	; 0x940 <__stack+0x41>
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	24 30       	cpi	r18, 0x04	; 4
     904:	31 05       	cpc	r19, r1
     906:	90 f4       	brcc	.+36     	; 0x92c <__stack+0x2d>
     908:	12 96       	adiw	r26, 0x02	; 2
     90a:	8d 91       	ld	r24, X+
     90c:	9c 91       	ld	r25, X
     90e:	13 97       	sbiw	r26, 0x03	; 3
     910:	61 15       	cp	r22, r1
     912:	71 05       	cpc	r23, r1
     914:	21 f0       	breq	.+8      	; 0x91e <__stack+0x1f>
     916:	fb 01       	movw	r30, r22
     918:	93 83       	std	Z+3, r25	; 0x03
     91a:	82 83       	std	Z+2, r24	; 0x02
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
     91e:	90 93 01 02 	sts	0x0201, r25
     922:	80 93 00 02 	sts	0x0200, r24
     926:	fd 01       	movw	r30, r26
     928:	32 96       	adiw	r30, 0x02	; 2
     92a:	44 c0       	rjmp	.+136    	; 0x9b4 <__stack+0xb5>
     92c:	fd 01       	movw	r30, r26
     92e:	e2 0f       	add	r30, r18
     930:	f3 1f       	adc	r31, r19
     932:	81 93       	st	Z+, r24
     934:	91 93       	st	Z+, r25
     936:	22 50       	subi	r18, 0x02	; 2
     938:	31 09       	sbc	r19, r1
     93a:	2d 93       	st	X+, r18
     93c:	3c 93       	st	X, r19
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__stack+0xb5>
     940:	20 91 fe 01 	lds	r18, 0x01FE
     944:	30 91 ff 01 	lds	r19, 0x01FF
     948:	23 2b       	or	r18, r19
     94a:	41 f4       	brne	.+16     	; 0x95c <__stack+0x5d>
     94c:	20 91 02 01 	lds	r18, 0x0102
     950:	30 91 03 01 	lds	r19, 0x0103
     954:	30 93 ff 01 	sts	0x01FF, r19
     958:	20 93 fe 01 	sts	0x01FE, r18
     95c:	20 91 00 01 	lds	r18, 0x0100
     960:	30 91 01 01 	lds	r19, 0x0101
     964:	21 15       	cp	r18, r1
     966:	31 05       	cpc	r19, r1
     968:	41 f4       	brne	.+16     	; 0x97a <__stack+0x7b>
     96a:	2d b7       	in	r18, 0x3d	; 61
     96c:	3e b7       	in	r19, 0x3e	; 62
     96e:	40 91 04 01 	lds	r20, 0x0104
     972:	50 91 05 01 	lds	r21, 0x0105
     976:	24 1b       	sub	r18, r20
     978:	35 0b       	sbc	r19, r21
     97a:	e0 91 fe 01 	lds	r30, 0x01FE
     97e:	f0 91 ff 01 	lds	r31, 0x01FF
     982:	e2 17       	cp	r30, r18
     984:	f3 07       	cpc	r31, r19
     986:	a0 f4       	brcc	.+40     	; 0x9b0 <__stack+0xb1>
     988:	2e 1b       	sub	r18, r30
     98a:	3f 0b       	sbc	r19, r31
     98c:	28 17       	cp	r18, r24
     98e:	39 07       	cpc	r19, r25
     990:	78 f0       	brcs	.+30     	; 0x9b0 <__stack+0xb1>
     992:	ac 01       	movw	r20, r24
     994:	4e 5f       	subi	r20, 0xFE	; 254
     996:	5f 4f       	sbci	r21, 0xFF	; 255
     998:	24 17       	cp	r18, r20
     99a:	35 07       	cpc	r19, r21
     99c:	48 f0       	brcs	.+18     	; 0x9b0 <__stack+0xb1>
     99e:	4e 0f       	add	r20, r30
     9a0:	5f 1f       	adc	r21, r31
     9a2:	50 93 ff 01 	sts	0x01FF, r21
     9a6:	40 93 fe 01 	sts	0x01FE, r20
     9aa:	81 93       	st	Z+, r24
     9ac:	91 93       	st	Z+, r25
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
     9b0:	e0 e0       	ldi	r30, 0x00	; 0
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	cf 01       	movw	r24, r30
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <free>:
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	09 f4       	brne	.+2      	; 0x9ca <free+0xe>
     9c8:	8c c0       	rjmp	.+280    	; 0xae2 <free+0x126>
     9ca:	fc 01       	movw	r30, r24
     9cc:	32 97       	sbiw	r30, 0x02	; 2
     9ce:	13 82       	std	Z+3, r1	; 0x03
     9d0:	12 82       	std	Z+2, r1	; 0x02
     9d2:	00 91 00 02 	lds	r16, 0x0200
     9d6:	10 91 01 02 	lds	r17, 0x0201
     9da:	01 15       	cp	r16, r1
     9dc:	11 05       	cpc	r17, r1
     9de:	81 f4       	brne	.+32     	; 0xa00 <free+0x44>
     9e0:	20 81       	ld	r18, Z
     9e2:	31 81       	ldd	r19, Z+1	; 0x01
     9e4:	82 0f       	add	r24, r18
     9e6:	93 1f       	adc	r25, r19
     9e8:	20 91 fe 01 	lds	r18, 0x01FE
     9ec:	30 91 ff 01 	lds	r19, 0x01FF
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	79 f5       	brne	.+94     	; 0xa54 <free+0x98>
     9f6:	f0 93 ff 01 	sts	0x01FF, r31
     9fa:	e0 93 fe 01 	sts	0x01FE, r30
     9fe:	71 c0       	rjmp	.+226    	; 0xae2 <free+0x126>
     a00:	d8 01       	movw	r26, r16
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	ae 17       	cp	r26, r30
     a08:	bf 07       	cpc	r27, r31
     a0a:	50 f4       	brcc	.+20     	; 0xa20 <free+0x64>
     a0c:	12 96       	adiw	r26, 0x02	; 2
     a0e:	2d 91       	ld	r18, X+
     a10:	3c 91       	ld	r19, X
     a12:	13 97       	sbiw	r26, 0x03	; 3
     a14:	ad 01       	movw	r20, r26
     a16:	21 15       	cp	r18, r1
     a18:	31 05       	cpc	r19, r1
     a1a:	09 f1       	breq	.+66     	; 0xa5e <free+0xa2>
     a1c:	d9 01       	movw	r26, r18
     a1e:	f3 cf       	rjmp	.-26     	; 0xa06 <free+0x4a>
     a20:	9d 01       	movw	r18, r26
     a22:	da 01       	movw	r26, r20
     a24:	33 83       	std	Z+3, r19	; 0x03
     a26:	22 83       	std	Z+2, r18	; 0x02
     a28:	60 81       	ld	r22, Z
     a2a:	71 81       	ldd	r23, Z+1	; 0x01
     a2c:	86 0f       	add	r24, r22
     a2e:	97 1f       	adc	r25, r23
     a30:	82 17       	cp	r24, r18
     a32:	93 07       	cpc	r25, r19
     a34:	69 f4       	brne	.+26     	; 0xa50 <free+0x94>
     a36:	ec 01       	movw	r28, r24
     a38:	28 81       	ld	r18, Y
     a3a:	39 81       	ldd	r19, Y+1	; 0x01
     a3c:	26 0f       	add	r18, r22
     a3e:	37 1f       	adc	r19, r23
     a40:	2e 5f       	subi	r18, 0xFE	; 254
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	31 83       	std	Z+1, r19	; 0x01
     a46:	20 83       	st	Z, r18
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	9b 81       	ldd	r25, Y+3	; 0x03
     a4c:	93 83       	std	Z+3, r25	; 0x03
     a4e:	82 83       	std	Z+2, r24	; 0x02
     a50:	45 2b       	or	r20, r21
     a52:	29 f4       	brne	.+10     	; 0xa5e <free+0xa2>
     a54:	f0 93 01 02 	sts	0x0201, r31
     a58:	e0 93 00 02 	sts	0x0200, r30
     a5c:	42 c0       	rjmp	.+132    	; 0xae2 <free+0x126>
     a5e:	13 96       	adiw	r26, 0x03	; 3
     a60:	fc 93       	st	X, r31
     a62:	ee 93       	st	-X, r30
     a64:	12 97       	sbiw	r26, 0x02	; 2
     a66:	ed 01       	movw	r28, r26
     a68:	49 91       	ld	r20, Y+
     a6a:	59 91       	ld	r21, Y+
     a6c:	9e 01       	movw	r18, r28
     a6e:	24 0f       	add	r18, r20
     a70:	35 1f       	adc	r19, r21
     a72:	e2 17       	cp	r30, r18
     a74:	f3 07       	cpc	r31, r19
     a76:	71 f4       	brne	.+28     	; 0xa94 <free+0xd8>
     a78:	80 81       	ld	r24, Z
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	84 0f       	add	r24, r20
     a7e:	95 1f       	adc	r25, r21
     a80:	02 96       	adiw	r24, 0x02	; 2
     a82:	11 96       	adiw	r26, 0x01	; 1
     a84:	9c 93       	st	X, r25
     a86:	8e 93       	st	-X, r24
     a88:	82 81       	ldd	r24, Z+2	; 0x02
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	13 96       	adiw	r26, 0x03	; 3
     a8e:	9c 93       	st	X, r25
     a90:	8e 93       	st	-X, r24
     a92:	12 97       	sbiw	r26, 0x02	; 2
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	d8 01       	movw	r26, r16
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	13 97       	sbiw	r26, 0x03	; 3
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	19 f0       	breq	.+6      	; 0xaac <free+0xf0>
     aa6:	f8 01       	movw	r30, r16
     aa8:	8c 01       	movw	r16, r24
     aaa:	f6 cf       	rjmp	.-20     	; 0xa98 <free+0xdc>
     aac:	8d 91       	ld	r24, X+
     aae:	9c 91       	ld	r25, X
     ab0:	98 01       	movw	r18, r16
     ab2:	2e 5f       	subi	r18, 0xFE	; 254
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	20 91 fe 01 	lds	r18, 0x01FE
     abe:	30 91 ff 01 	lds	r19, 0x01FF
     ac2:	28 17       	cp	r18, r24
     ac4:	39 07       	cpc	r19, r25
     ac6:	69 f4       	brne	.+26     	; 0xae2 <free+0x126>
     ac8:	30 97       	sbiw	r30, 0x00	; 0
     aca:	29 f4       	brne	.+10     	; 0xad6 <free+0x11a>
     acc:	10 92 01 02 	sts	0x0201, r1
     ad0:	10 92 00 02 	sts	0x0200, r1
     ad4:	02 c0       	rjmp	.+4      	; 0xada <free+0x11e>
     ad6:	13 82       	std	Z+3, r1	; 0x03
     ad8:	12 82       	std	Z+2, r1	; 0x02
     ada:	10 93 ff 01 	sts	0x01FF, r17
     ade:	00 93 fe 01 	sts	0x01FE, r16
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	08 95       	ret

00000aec <sprintf>:
     aec:	ae e0       	ldi	r26, 0x0E	; 14
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	ec e7       	ldi	r30, 0x7C	; 124
     af2:	f5 e0       	ldi	r31, 0x05	; 5
     af4:	0c 94 25 08 	jmp	0x104a	; 0x104a <__prologue_saves__+0x1c>
     af8:	0d 89       	ldd	r16, Y+21	; 0x15
     afa:	1e 89       	ldd	r17, Y+22	; 0x16
     afc:	86 e0       	ldi	r24, 0x06	; 6
     afe:	8c 83       	std	Y+4, r24	; 0x04
     b00:	1a 83       	std	Y+2, r17	; 0x02
     b02:	09 83       	std	Y+1, r16	; 0x01
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f e7       	ldi	r25, 0x7F	; 127
     b08:	9e 83       	std	Y+6, r25	; 0x06
     b0a:	8d 83       	std	Y+5, r24	; 0x05
     b0c:	ae 01       	movw	r20, r28
     b0e:	47 5e       	subi	r20, 0xE7	; 231
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	6f 89       	ldd	r22, Y+23	; 0x17
     b14:	78 8d       	ldd	r23, Y+24	; 0x18
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 99 05 	call	0xb32	; 0xb32 <vfprintf>
     b1e:	2f 81       	ldd	r18, Y+7	; 0x07
     b20:	38 85       	ldd	r19, Y+8	; 0x08
     b22:	f8 01       	movw	r30, r16
     b24:	e2 0f       	add	r30, r18
     b26:	f3 1f       	adc	r31, r19
     b28:	10 82       	st	Z, r1
     b2a:	2e 96       	adiw	r28, 0x0e	; 14
     b2c:	e4 e0       	ldi	r30, 0x04	; 4
     b2e:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__epilogue_restores__+0x1c>

00000b32 <vfprintf>:
     b32:	ac e0       	ldi	r26, 0x0C	; 12
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ef e9       	ldi	r30, 0x9F	; 159
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	0c 94 17 08 	jmp	0x102e	; 0x102e <__prologue_saves__>
     b3e:	7c 01       	movw	r14, r24
     b40:	6b 01       	movw	r12, r22
     b42:	8a 01       	movw	r16, r20
     b44:	fc 01       	movw	r30, r24
     b46:	17 82       	std	Z+7, r1	; 0x07
     b48:	16 82       	std	Z+6, r1	; 0x06
     b4a:	83 81       	ldd	r24, Z+3	; 0x03
     b4c:	81 ff       	sbrs	r24, 1
     b4e:	bd c1       	rjmp	.+890    	; 0xeca <vfprintf+0x398>
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	4c 01       	movw	r8, r24
     b56:	f7 01       	movw	r30, r14
     b58:	93 81       	ldd	r25, Z+3	; 0x03
     b5a:	f6 01       	movw	r30, r12
     b5c:	93 fd       	sbrc	r25, 3
     b5e:	85 91       	lpm	r24, Z+
     b60:	93 ff       	sbrs	r25, 3
     b62:	81 91       	ld	r24, Z+
     b64:	6f 01       	movw	r12, r30
     b66:	88 23       	and	r24, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <vfprintf+0x3a>
     b6a:	ab c1       	rjmp	.+854    	; 0xec2 <vfprintf+0x390>
     b6c:	85 32       	cpi	r24, 0x25	; 37
     b6e:	39 f4       	brne	.+14     	; 0xb7e <vfprintf+0x4c>
     b70:	93 fd       	sbrc	r25, 3
     b72:	85 91       	lpm	r24, Z+
     b74:	93 ff       	sbrs	r25, 3
     b76:	81 91       	ld	r24, Z+
     b78:	6f 01       	movw	r12, r30
     b7a:	85 32       	cpi	r24, 0x25	; 37
     b7c:	29 f4       	brne	.+10     	; 0xb88 <vfprintf+0x56>
     b7e:	b7 01       	movw	r22, r14
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     b86:	e7 cf       	rjmp	.-50     	; 0xb56 <vfprintf+0x24>
     b88:	51 2c       	mov	r5, r1
     b8a:	31 2c       	mov	r3, r1
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	20 32       	cpi	r18, 0x20	; 32
     b90:	a0 f4       	brcc	.+40     	; 0xbba <vfprintf+0x88>
     b92:	8b 32       	cpi	r24, 0x2B	; 43
     b94:	69 f0       	breq	.+26     	; 0xbb0 <vfprintf+0x7e>
     b96:	30 f4       	brcc	.+12     	; 0xba4 <vfprintf+0x72>
     b98:	80 32       	cpi	r24, 0x20	; 32
     b9a:	59 f0       	breq	.+22     	; 0xbb2 <vfprintf+0x80>
     b9c:	83 32       	cpi	r24, 0x23	; 35
     b9e:	69 f4       	brne	.+26     	; 0xbba <vfprintf+0x88>
     ba0:	20 61       	ori	r18, 0x10	; 16
     ba2:	2c c0       	rjmp	.+88     	; 0xbfc <vfprintf+0xca>
     ba4:	8d 32       	cpi	r24, 0x2D	; 45
     ba6:	39 f0       	breq	.+14     	; 0xbb6 <vfprintf+0x84>
     ba8:	80 33       	cpi	r24, 0x30	; 48
     baa:	39 f4       	brne	.+14     	; 0xbba <vfprintf+0x88>
     bac:	21 60       	ori	r18, 0x01	; 1
     bae:	26 c0       	rjmp	.+76     	; 0xbfc <vfprintf+0xca>
     bb0:	22 60       	ori	r18, 0x02	; 2
     bb2:	24 60       	ori	r18, 0x04	; 4
     bb4:	23 c0       	rjmp	.+70     	; 0xbfc <vfprintf+0xca>
     bb6:	28 60       	ori	r18, 0x08	; 8
     bb8:	21 c0       	rjmp	.+66     	; 0xbfc <vfprintf+0xca>
     bba:	27 fd       	sbrc	r18, 7
     bbc:	27 c0       	rjmp	.+78     	; 0xc0c <vfprintf+0xda>
     bbe:	30 ed       	ldi	r19, 0xD0	; 208
     bc0:	38 0f       	add	r19, r24
     bc2:	3a 30       	cpi	r19, 0x0A	; 10
     bc4:	78 f4       	brcc	.+30     	; 0xbe4 <vfprintf+0xb2>
     bc6:	26 ff       	sbrs	r18, 6
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <vfprintf+0xa4>
     bca:	fa e0       	ldi	r31, 0x0A	; 10
     bcc:	5f 9e       	mul	r5, r31
     bce:	30 0d       	add	r19, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	53 2e       	mov	r5, r19
     bd4:	13 c0       	rjmp	.+38     	; 0xbfc <vfprintf+0xca>
     bd6:	8a e0       	ldi	r24, 0x0A	; 10
     bd8:	38 9e       	mul	r3, r24
     bda:	30 0d       	add	r19, r0
     bdc:	11 24       	eor	r1, r1
     bde:	33 2e       	mov	r3, r19
     be0:	20 62       	ori	r18, 0x20	; 32
     be2:	0c c0       	rjmp	.+24     	; 0xbfc <vfprintf+0xca>
     be4:	8e 32       	cpi	r24, 0x2E	; 46
     be6:	21 f4       	brne	.+8      	; 0xbf0 <vfprintf+0xbe>
     be8:	26 fd       	sbrc	r18, 6
     bea:	6b c1       	rjmp	.+726    	; 0xec2 <vfprintf+0x390>
     bec:	20 64       	ori	r18, 0x40	; 64
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <vfprintf+0xca>
     bf0:	8c 36       	cpi	r24, 0x6C	; 108
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <vfprintf+0xc6>
     bf4:	20 68       	ori	r18, 0x80	; 128
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0xca>
     bf8:	88 36       	cpi	r24, 0x68	; 104
     bfa:	41 f4       	brne	.+16     	; 0xc0c <vfprintf+0xda>
     bfc:	f6 01       	movw	r30, r12
     bfe:	93 fd       	sbrc	r25, 3
     c00:	85 91       	lpm	r24, Z+
     c02:	93 ff       	sbrs	r25, 3
     c04:	81 91       	ld	r24, Z+
     c06:	6f 01       	movw	r12, r30
     c08:	81 11       	cpse	r24, r1
     c0a:	c1 cf       	rjmp	.-126    	; 0xb8e <vfprintf+0x5c>
     c0c:	98 2f       	mov	r25, r24
     c0e:	9f 7d       	andi	r25, 0xDF	; 223
     c10:	95 54       	subi	r25, 0x45	; 69
     c12:	93 30       	cpi	r25, 0x03	; 3
     c14:	28 f4       	brcc	.+10     	; 0xc20 <vfprintf+0xee>
     c16:	0c 5f       	subi	r16, 0xFC	; 252
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	ff e3       	ldi	r31, 0x3F	; 63
     c1c:	f9 83       	std	Y+1, r31	; 0x01
     c1e:	0d c0       	rjmp	.+26     	; 0xc3a <vfprintf+0x108>
     c20:	83 36       	cpi	r24, 0x63	; 99
     c22:	31 f0       	breq	.+12     	; 0xc30 <vfprintf+0xfe>
     c24:	83 37       	cpi	r24, 0x73	; 115
     c26:	71 f0       	breq	.+28     	; 0xc44 <vfprintf+0x112>
     c28:	83 35       	cpi	r24, 0x53	; 83
     c2a:	09 f0       	breq	.+2      	; 0xc2e <vfprintf+0xfc>
     c2c:	5b c0       	rjmp	.+182    	; 0xce4 <vfprintf+0x1b2>
     c2e:	22 c0       	rjmp	.+68     	; 0xc74 <vfprintf+0x142>
     c30:	f8 01       	movw	r30, r16
     c32:	80 81       	ld	r24, Z
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	0e 5f       	subi	r16, 0xFE	; 254
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	44 24       	eor	r4, r4
     c3c:	43 94       	inc	r4
     c3e:	51 2c       	mov	r5, r1
     c40:	54 01       	movw	r10, r8
     c42:	15 c0       	rjmp	.+42     	; 0xc6e <vfprintf+0x13c>
     c44:	38 01       	movw	r6, r16
     c46:	f2 e0       	ldi	r31, 0x02	; 2
     c48:	6f 0e       	add	r6, r31
     c4a:	71 1c       	adc	r7, r1
     c4c:	f8 01       	movw	r30, r16
     c4e:	a0 80       	ld	r10, Z
     c50:	b1 80       	ldd	r11, Z+1	; 0x01
     c52:	26 ff       	sbrs	r18, 6
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <vfprintf+0x12a>
     c56:	65 2d       	mov	r22, r5
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x12e>
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	7f ef       	ldi	r23, 0xFF	; 255
     c60:	c5 01       	movw	r24, r10
     c62:	2c 87       	std	Y+12, r18	; 0x0c
     c64:	0e 94 76 07 	call	0xeec	; 0xeec <strnlen>
     c68:	2c 01       	movw	r4, r24
     c6a:	83 01       	movw	r16, r6
     c6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c6e:	2f 77       	andi	r18, 0x7F	; 127
     c70:	22 2e       	mov	r2, r18
     c72:	17 c0       	rjmp	.+46     	; 0xca2 <vfprintf+0x170>
     c74:	38 01       	movw	r6, r16
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	6f 0e       	add	r6, r31
     c7a:	71 1c       	adc	r7, r1
     c7c:	f8 01       	movw	r30, r16
     c7e:	a0 80       	ld	r10, Z
     c80:	b1 80       	ldd	r11, Z+1	; 0x01
     c82:	26 ff       	sbrs	r18, 6
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <vfprintf+0x15a>
     c86:	65 2d       	mov	r22, r5
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <vfprintf+0x15e>
     c8c:	6f ef       	ldi	r22, 0xFF	; 255
     c8e:	7f ef       	ldi	r23, 0xFF	; 255
     c90:	c5 01       	movw	r24, r10
     c92:	2c 87       	std	Y+12, r18	; 0x0c
     c94:	0e 94 6b 07 	call	0xed6	; 0xed6 <strnlen_P>
     c98:	2c 01       	movw	r4, r24
     c9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     c9c:	20 68       	ori	r18, 0x80	; 128
     c9e:	22 2e       	mov	r2, r18
     ca0:	83 01       	movw	r16, r6
     ca2:	23 fc       	sbrc	r2, 3
     ca4:	1b c0       	rjmp	.+54     	; 0xcdc <vfprintf+0x1aa>
     ca6:	83 2d       	mov	r24, r3
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	48 16       	cp	r4, r24
     cac:	59 06       	cpc	r5, r25
     cae:	b0 f4       	brcc	.+44     	; 0xcdc <vfprintf+0x1aa>
     cb0:	b7 01       	movw	r22, r14
     cb2:	80 e2       	ldi	r24, 0x20	; 32
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     cba:	3a 94       	dec	r3
     cbc:	f4 cf       	rjmp	.-24     	; 0xca6 <vfprintf+0x174>
     cbe:	f5 01       	movw	r30, r10
     cc0:	27 fc       	sbrc	r2, 7
     cc2:	85 91       	lpm	r24, Z+
     cc4:	27 fe       	sbrs	r2, 7
     cc6:	81 91       	ld	r24, Z+
     cc8:	5f 01       	movw	r10, r30
     cca:	b7 01       	movw	r22, r14
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     cd2:	31 10       	cpse	r3, r1
     cd4:	3a 94       	dec	r3
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	4f 1a       	sub	r4, r31
     cda:	51 08       	sbc	r5, r1
     cdc:	41 14       	cp	r4, r1
     cde:	51 04       	cpc	r5, r1
     ce0:	71 f7       	brne	.-36     	; 0xcbe <vfprintf+0x18c>
     ce2:	e5 c0       	rjmp	.+458    	; 0xeae <vfprintf+0x37c>
     ce4:	84 36       	cpi	r24, 0x64	; 100
     ce6:	11 f0       	breq	.+4      	; 0xcec <vfprintf+0x1ba>
     ce8:	89 36       	cpi	r24, 0x69	; 105
     cea:	39 f5       	brne	.+78     	; 0xd3a <vfprintf+0x208>
     cec:	f8 01       	movw	r30, r16
     cee:	27 ff       	sbrs	r18, 7
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <vfprintf+0x1ce>
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	0c 5f       	subi	r16, 0xFC	; 252
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <vfprintf+0x1de>
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	07 2e       	mov	r0, r23
     d06:	00 0c       	add	r0, r0
     d08:	88 0b       	sbc	r24, r24
     d0a:	99 0b       	sbc	r25, r25
     d0c:	0e 5f       	subi	r16, 0xFE	; 254
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	2f 76       	andi	r18, 0x6F	; 111
     d12:	72 2e       	mov	r7, r18
     d14:	97 ff       	sbrs	r25, 7
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <vfprintf+0x1f8>
     d18:	90 95       	com	r25
     d1a:	80 95       	com	r24
     d1c:	70 95       	com	r23
     d1e:	61 95       	neg	r22
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	8f 4f       	sbci	r24, 0xFF	; 255
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	20 68       	ori	r18, 0x80	; 128
     d28:	72 2e       	mov	r7, r18
     d2a:	2a e0       	ldi	r18, 0x0A	; 10
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	a4 01       	movw	r20, r8
     d30:	0e 94 b9 07 	call	0xf72	; 0xf72 <__ultoa_invert>
     d34:	a8 2e       	mov	r10, r24
     d36:	a8 18       	sub	r10, r8
     d38:	44 c0       	rjmp	.+136    	; 0xdc2 <vfprintf+0x290>
     d3a:	85 37       	cpi	r24, 0x75	; 117
     d3c:	29 f4       	brne	.+10     	; 0xd48 <vfprintf+0x216>
     d3e:	2f 7e       	andi	r18, 0xEF	; 239
     d40:	b2 2e       	mov	r11, r18
     d42:	2a e0       	ldi	r18, 0x0A	; 10
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	25 c0       	rjmp	.+74     	; 0xd92 <vfprintf+0x260>
     d48:	f2 2f       	mov	r31, r18
     d4a:	f9 7f       	andi	r31, 0xF9	; 249
     d4c:	bf 2e       	mov	r11, r31
     d4e:	8f 36       	cpi	r24, 0x6F	; 111
     d50:	c1 f0       	breq	.+48     	; 0xd82 <vfprintf+0x250>
     d52:	18 f4       	brcc	.+6      	; 0xd5a <vfprintf+0x228>
     d54:	88 35       	cpi	r24, 0x58	; 88
     d56:	79 f0       	breq	.+30     	; 0xd76 <vfprintf+0x244>
     d58:	b4 c0       	rjmp	.+360    	; 0xec2 <vfprintf+0x390>
     d5a:	80 37       	cpi	r24, 0x70	; 112
     d5c:	19 f0       	breq	.+6      	; 0xd64 <vfprintf+0x232>
     d5e:	88 37       	cpi	r24, 0x78	; 120
     d60:	21 f0       	breq	.+8      	; 0xd6a <vfprintf+0x238>
     d62:	af c0       	rjmp	.+350    	; 0xec2 <vfprintf+0x390>
     d64:	2f 2f       	mov	r18, r31
     d66:	20 61       	ori	r18, 0x10	; 16
     d68:	b2 2e       	mov	r11, r18
     d6a:	b4 fe       	sbrs	r11, 4
     d6c:	0d c0       	rjmp	.+26     	; 0xd88 <vfprintf+0x256>
     d6e:	8b 2d       	mov	r24, r11
     d70:	84 60       	ori	r24, 0x04	; 4
     d72:	b8 2e       	mov	r11, r24
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <vfprintf+0x256>
     d76:	24 ff       	sbrs	r18, 4
     d78:	0a c0       	rjmp	.+20     	; 0xd8e <vfprintf+0x25c>
     d7a:	9f 2f       	mov	r25, r31
     d7c:	96 60       	ori	r25, 0x06	; 6
     d7e:	b9 2e       	mov	r11, r25
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0x25c>
     d82:	28 e0       	ldi	r18, 0x08	; 8
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <vfprintf+0x260>
     d88:	20 e1       	ldi	r18, 0x10	; 16
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x260>
     d8e:	20 e1       	ldi	r18, 0x10	; 16
     d90:	32 e0       	ldi	r19, 0x02	; 2
     d92:	f8 01       	movw	r30, r16
     d94:	b7 fe       	sbrs	r11, 7
     d96:	07 c0       	rjmp	.+14     	; 0xda6 <vfprintf+0x274>
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	0c 5f       	subi	r16, 0xFC	; 252
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <vfprintf+0x280>
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 5f       	subi	r16, 0xFE	; 254
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	a4 01       	movw	r20, r8
     db4:	0e 94 b9 07 	call	0xf72	; 0xf72 <__ultoa_invert>
     db8:	a8 2e       	mov	r10, r24
     dba:	a8 18       	sub	r10, r8
     dbc:	fb 2d       	mov	r31, r11
     dbe:	ff 77       	andi	r31, 0x7F	; 127
     dc0:	7f 2e       	mov	r7, r31
     dc2:	76 fe       	sbrs	r7, 6
     dc4:	0b c0       	rjmp	.+22     	; 0xddc <vfprintf+0x2aa>
     dc6:	37 2d       	mov	r19, r7
     dc8:	3e 7f       	andi	r19, 0xFE	; 254
     dca:	a5 14       	cp	r10, r5
     dcc:	50 f4       	brcc	.+20     	; 0xde2 <vfprintf+0x2b0>
     dce:	74 fe       	sbrs	r7, 4
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <vfprintf+0x2b4>
     dd2:	72 fc       	sbrc	r7, 2
     dd4:	08 c0       	rjmp	.+16     	; 0xde6 <vfprintf+0x2b4>
     dd6:	37 2d       	mov	r19, r7
     dd8:	3e 7e       	andi	r19, 0xEE	; 238
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <vfprintf+0x2b4>
     ddc:	ba 2c       	mov	r11, r10
     dde:	37 2d       	mov	r19, r7
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <vfprintf+0x2b6>
     de2:	ba 2c       	mov	r11, r10
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <vfprintf+0x2b6>
     de6:	b5 2c       	mov	r11, r5
     de8:	34 ff       	sbrs	r19, 4
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <vfprintf+0x2d4>
     dec:	fe 01       	movw	r30, r28
     dee:	ea 0d       	add	r30, r10
     df0:	f1 1d       	adc	r31, r1
     df2:	80 81       	ld	r24, Z
     df4:	80 33       	cpi	r24, 0x30	; 48
     df6:	11 f4       	brne	.+4      	; 0xdfc <vfprintf+0x2ca>
     df8:	39 7e       	andi	r19, 0xE9	; 233
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <vfprintf+0x2dc>
     dfc:	32 ff       	sbrs	r19, 2
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <vfprintf+0x2da>
     e00:	b3 94       	inc	r11
     e02:	b3 94       	inc	r11
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <vfprintf+0x2dc>
     e06:	83 2f       	mov	r24, r19
     e08:	86 78       	andi	r24, 0x86	; 134
     e0a:	09 f0       	breq	.+2      	; 0xe0e <vfprintf+0x2dc>
     e0c:	b3 94       	inc	r11
     e0e:	33 fd       	sbrc	r19, 3
     e10:	13 c0       	rjmp	.+38     	; 0xe38 <vfprintf+0x306>
     e12:	30 ff       	sbrs	r19, 0
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <vfprintf+0x2f0>
     e16:	5a 2c       	mov	r5, r10
     e18:	b3 14       	cp	r11, r3
     e1a:	18 f4       	brcc	.+6      	; 0xe22 <vfprintf+0x2f0>
     e1c:	53 0c       	add	r5, r3
     e1e:	5b 18       	sub	r5, r11
     e20:	b3 2c       	mov	r11, r3
     e22:	b3 14       	cp	r11, r3
     e24:	68 f4       	brcc	.+26     	; 0xe40 <vfprintf+0x30e>
     e26:	b7 01       	movw	r22, r14
     e28:	80 e2       	ldi	r24, 0x20	; 32
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	3c 87       	std	Y+12, r19	; 0x0c
     e2e:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     e32:	b3 94       	inc	r11
     e34:	3c 85       	ldd	r19, Y+12	; 0x0c
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <vfprintf+0x2f0>
     e38:	b3 14       	cp	r11, r3
     e3a:	10 f4       	brcc	.+4      	; 0xe40 <vfprintf+0x30e>
     e3c:	3b 18       	sub	r3, r11
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <vfprintf+0x310>
     e40:	31 2c       	mov	r3, r1
     e42:	34 ff       	sbrs	r19, 4
     e44:	12 c0       	rjmp	.+36     	; 0xe6a <vfprintf+0x338>
     e46:	b7 01       	movw	r22, r14
     e48:	80 e3       	ldi	r24, 0x30	; 48
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	3c 87       	std	Y+12, r19	; 0x0c
     e4e:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     e52:	3c 85       	ldd	r19, Y+12	; 0x0c
     e54:	32 ff       	sbrs	r19, 2
     e56:	17 c0       	rjmp	.+46     	; 0xe86 <vfprintf+0x354>
     e58:	31 fd       	sbrc	r19, 1
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <vfprintf+0x330>
     e5c:	88 e7       	ldi	r24, 0x78	; 120
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x334>
     e62:	88 e5       	ldi	r24, 0x58	; 88
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	b7 01       	movw	r22, r14
     e68:	0c c0       	rjmp	.+24     	; 0xe82 <vfprintf+0x350>
     e6a:	83 2f       	mov	r24, r19
     e6c:	86 78       	andi	r24, 0x86	; 134
     e6e:	59 f0       	breq	.+22     	; 0xe86 <vfprintf+0x354>
     e70:	31 ff       	sbrs	r19, 1
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <vfprintf+0x346>
     e74:	8b e2       	ldi	r24, 0x2B	; 43
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <vfprintf+0x348>
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	37 fd       	sbrc	r19, 7
     e7c:	8d e2       	ldi	r24, 0x2D	; 45
     e7e:	b7 01       	movw	r22, r14
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     e86:	a5 14       	cp	r10, r5
     e88:	38 f4       	brcc	.+14     	; 0xe98 <vfprintf+0x366>
     e8a:	b7 01       	movw	r22, r14
     e8c:	80 e3       	ldi	r24, 0x30	; 48
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     e94:	5a 94       	dec	r5
     e96:	f7 cf       	rjmp	.-18     	; 0xe86 <vfprintf+0x354>
     e98:	aa 94       	dec	r10
     e9a:	f4 01       	movw	r30, r8
     e9c:	ea 0d       	add	r30, r10
     e9e:	f1 1d       	adc	r31, r1
     ea0:	80 81       	ld	r24, Z
     ea2:	b7 01       	movw	r22, r14
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     eaa:	a1 10       	cpse	r10, r1
     eac:	f5 cf       	rjmp	.-22     	; 0xe98 <vfprintf+0x366>
     eae:	33 20       	and	r3, r3
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <vfprintf+0x382>
     eb2:	51 ce       	rjmp	.-862    	; 0xb56 <vfprintf+0x24>
     eb4:	b7 01       	movw	r22, r14
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 81 07 	call	0xf02	; 0xf02 <fputc>
     ebe:	3a 94       	dec	r3
     ec0:	f6 cf       	rjmp	.-20     	; 0xeae <vfprintf+0x37c>
     ec2:	f7 01       	movw	r30, r14
     ec4:	86 81       	ldd	r24, Z+6	; 0x06
     ec6:	97 81       	ldd	r25, Z+7	; 0x07
     ec8:	02 c0       	rjmp	.+4      	; 0xece <vfprintf+0x39c>
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	9f ef       	ldi	r25, 0xFF	; 255
     ece:	2c 96       	adiw	r28, 0x0c	; 12
     ed0:	e2 e1       	ldi	r30, 0x12	; 18
     ed2:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__epilogue_restores__>

00000ed6 <strnlen_P>:
     ed6:	fc 01       	movw	r30, r24
     ed8:	05 90       	lpm	r0, Z+
     eda:	61 50       	subi	r22, 0x01	; 1
     edc:	70 40       	sbci	r23, 0x00	; 0
     ede:	01 10       	cpse	r0, r1
     ee0:	d8 f7       	brcc	.-10     	; 0xed8 <strnlen_P+0x2>
     ee2:	80 95       	com	r24
     ee4:	90 95       	com	r25
     ee6:	8e 0f       	add	r24, r30
     ee8:	9f 1f       	adc	r25, r31
     eea:	08 95       	ret

00000eec <strnlen>:
     eec:	fc 01       	movw	r30, r24
     eee:	61 50       	subi	r22, 0x01	; 1
     ef0:	70 40       	sbci	r23, 0x00	; 0
     ef2:	01 90       	ld	r0, Z+
     ef4:	01 10       	cpse	r0, r1
     ef6:	d8 f7       	brcc	.-10     	; 0xeee <strnlen+0x2>
     ef8:	80 95       	com	r24
     efa:	90 95       	com	r25
     efc:	8e 0f       	add	r24, r30
     efe:	9f 1f       	adc	r25, r31
     f00:	08 95       	ret

00000f02 <fputc>:
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	fb 01       	movw	r30, r22
     f0c:	23 81       	ldd	r18, Z+3	; 0x03
     f0e:	21 fd       	sbrc	r18, 1
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <fputc+0x16>
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	28 c0       	rjmp	.+80     	; 0xf68 <fputc+0x66>
     f18:	22 ff       	sbrs	r18, 2
     f1a:	16 c0       	rjmp	.+44     	; 0xf48 <fputc+0x46>
     f1c:	46 81       	ldd	r20, Z+6	; 0x06
     f1e:	57 81       	ldd	r21, Z+7	; 0x07
     f20:	24 81       	ldd	r18, Z+4	; 0x04
     f22:	35 81       	ldd	r19, Z+5	; 0x05
     f24:	42 17       	cp	r20, r18
     f26:	53 07       	cpc	r21, r19
     f28:	44 f4       	brge	.+16     	; 0xf3a <fputc+0x38>
     f2a:	a0 81       	ld	r26, Z
     f2c:	b1 81       	ldd	r27, Z+1	; 0x01
     f2e:	9d 01       	movw	r18, r26
     f30:	2f 5f       	subi	r18, 0xFF	; 255
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
     f38:	8c 93       	st	X, r24
     f3a:	26 81       	ldd	r18, Z+6	; 0x06
     f3c:	37 81       	ldd	r19, Z+7	; 0x07
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	37 83       	std	Z+7, r19	; 0x07
     f44:	26 83       	std	Z+6, r18	; 0x06
     f46:	10 c0       	rjmp	.+32     	; 0xf68 <fputc+0x66>
     f48:	eb 01       	movw	r28, r22
     f4a:	09 2f       	mov	r16, r25
     f4c:	18 2f       	mov	r17, r24
     f4e:	00 84       	ldd	r0, Z+8	; 0x08
     f50:	f1 85       	ldd	r31, Z+9	; 0x09
     f52:	e0 2d       	mov	r30, r0
     f54:	09 95       	icall
     f56:	89 2b       	or	r24, r25
     f58:	e1 f6       	brne	.-72     	; 0xf12 <fputc+0x10>
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	9f 81       	ldd	r25, Y+7	; 0x07
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	9f 83       	std	Y+7, r25	; 0x07
     f62:	8e 83       	std	Y+6, r24	; 0x06
     f64:	81 2f       	mov	r24, r17
     f66:	90 2f       	mov	r25, r16
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	08 95       	ret

00000f72 <__ultoa_invert>:
     f72:	fa 01       	movw	r30, r20
     f74:	aa 27       	eor	r26, r26
     f76:	28 30       	cpi	r18, 0x08	; 8
     f78:	51 f1       	breq	.+84     	; 0xfce <__ultoa_invert+0x5c>
     f7a:	20 31       	cpi	r18, 0x10	; 16
     f7c:	81 f1       	breq	.+96     	; 0xfde <__ultoa_invert+0x6c>
     f7e:	e8 94       	clt
     f80:	6f 93       	push	r22
     f82:	6e 7f       	andi	r22, 0xFE	; 254
     f84:	6e 5f       	subi	r22, 0xFE	; 254
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	8f 4f       	sbci	r24, 0xFF	; 255
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	af 4f       	sbci	r26, 0xFF	; 255
     f8e:	b1 e0       	ldi	r27, 0x01	; 1
     f90:	3e d0       	rcall	.+124    	; 0x100e <__ultoa_invert+0x9c>
     f92:	b4 e0       	ldi	r27, 0x04	; 4
     f94:	3c d0       	rcall	.+120    	; 0x100e <__ultoa_invert+0x9c>
     f96:	67 0f       	add	r22, r23
     f98:	78 1f       	adc	r23, r24
     f9a:	89 1f       	adc	r24, r25
     f9c:	9a 1f       	adc	r25, r26
     f9e:	a1 1d       	adc	r26, r1
     fa0:	68 0f       	add	r22, r24
     fa2:	79 1f       	adc	r23, r25
     fa4:	8a 1f       	adc	r24, r26
     fa6:	91 1d       	adc	r25, r1
     fa8:	a1 1d       	adc	r26, r1
     faa:	6a 0f       	add	r22, r26
     fac:	71 1d       	adc	r23, r1
     fae:	81 1d       	adc	r24, r1
     fb0:	91 1d       	adc	r25, r1
     fb2:	a1 1d       	adc	r26, r1
     fb4:	20 d0       	rcall	.+64     	; 0xff6 <__ultoa_invert+0x84>
     fb6:	09 f4       	brne	.+2      	; 0xfba <__ultoa_invert+0x48>
     fb8:	68 94       	set
     fba:	3f 91       	pop	r19
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	26 9f       	mul	r18, r22
     fc0:	11 24       	eor	r1, r1
     fc2:	30 19       	sub	r19, r0
     fc4:	30 5d       	subi	r19, 0xD0	; 208
     fc6:	31 93       	st	Z+, r19
     fc8:	de f6       	brtc	.-74     	; 0xf80 <__ultoa_invert+0xe>
     fca:	cf 01       	movw	r24, r30
     fcc:	08 95       	ret
     fce:	46 2f       	mov	r20, r22
     fd0:	47 70       	andi	r20, 0x07	; 7
     fd2:	40 5d       	subi	r20, 0xD0	; 208
     fd4:	41 93       	st	Z+, r20
     fd6:	b3 e0       	ldi	r27, 0x03	; 3
     fd8:	0f d0       	rcall	.+30     	; 0xff8 <__ultoa_invert+0x86>
     fda:	c9 f7       	brne	.-14     	; 0xfce <__ultoa_invert+0x5c>
     fdc:	f6 cf       	rjmp	.-20     	; 0xfca <__ultoa_invert+0x58>
     fde:	46 2f       	mov	r20, r22
     fe0:	4f 70       	andi	r20, 0x0F	; 15
     fe2:	40 5d       	subi	r20, 0xD0	; 208
     fe4:	4a 33       	cpi	r20, 0x3A	; 58
     fe6:	18 f0       	brcs	.+6      	; 0xfee <__ultoa_invert+0x7c>
     fe8:	49 5d       	subi	r20, 0xD9	; 217
     fea:	31 fd       	sbrc	r19, 1
     fec:	40 52       	subi	r20, 0x20	; 32
     fee:	41 93       	st	Z+, r20
     ff0:	02 d0       	rcall	.+4      	; 0xff6 <__ultoa_invert+0x84>
     ff2:	a9 f7       	brne	.-22     	; 0xfde <__ultoa_invert+0x6c>
     ff4:	ea cf       	rjmp	.-44     	; 0xfca <__ultoa_invert+0x58>
     ff6:	b4 e0       	ldi	r27, 0x04	; 4
     ff8:	a6 95       	lsr	r26
     ffa:	97 95       	ror	r25
     ffc:	87 95       	ror	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	ba 95       	dec	r27
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__ultoa_invert+0x86>
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	61 05       	cpc	r22, r1
    100a:	71 05       	cpc	r23, r1
    100c:	08 95       	ret
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	0a 2e       	mov	r0, r26
    1014:	06 94       	lsr	r0
    1016:	57 95       	ror	r21
    1018:	47 95       	ror	r20
    101a:	37 95       	ror	r19
    101c:	27 95       	ror	r18
    101e:	ba 95       	dec	r27
    1020:	c9 f7       	brne	.-14     	; 0x1014 <__ultoa_invert+0xa2>
    1022:	62 0f       	add	r22, r18
    1024:	73 1f       	adc	r23, r19
    1026:	84 1f       	adc	r24, r20
    1028:	95 1f       	adc	r25, r21
    102a:	a0 1d       	adc	r26, r0
    102c:	08 95       	ret

0000102e <__prologue_saves__>:
    102e:	2f 92       	push	r2
    1030:	3f 92       	push	r3
    1032:	4f 92       	push	r4
    1034:	5f 92       	push	r5
    1036:	6f 92       	push	r6
    1038:	7f 92       	push	r7
    103a:	8f 92       	push	r8
    103c:	9f 92       	push	r9
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	ca 1b       	sub	r28, r26
    1058:	db 0b       	sbc	r29, r27
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	09 94       	ijmp

00001066 <__epilogue_restores__>:
    1066:	2a 88       	ldd	r2, Y+18	; 0x12
    1068:	39 88       	ldd	r3, Y+17	; 0x11
    106a:	48 88       	ldd	r4, Y+16	; 0x10
    106c:	5f 84       	ldd	r5, Y+15	; 0x0f
    106e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1070:	7d 84       	ldd	r7, Y+13	; 0x0d
    1072:	8c 84       	ldd	r8, Y+12	; 0x0c
    1074:	9b 84       	ldd	r9, Y+11	; 0x0b
    1076:	aa 84       	ldd	r10, Y+10	; 0x0a
    1078:	b9 84       	ldd	r11, Y+9	; 0x09
    107a:	c8 84       	ldd	r12, Y+8	; 0x08
    107c:	df 80       	ldd	r13, Y+7	; 0x07
    107e:	ee 80       	ldd	r14, Y+6	; 0x06
    1080:	fd 80       	ldd	r15, Y+5	; 0x05
    1082:	0c 81       	ldd	r16, Y+4	; 0x04
    1084:	1b 81       	ldd	r17, Y+3	; 0x03
    1086:	aa 81       	ldd	r26, Y+2	; 0x02
    1088:	b9 81       	ldd	r27, Y+1	; 0x01
    108a:	ce 0f       	add	r28, r30
    108c:	d1 1d       	adc	r29, r1
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	ed 01       	movw	r28, r26
    109a:	08 95       	ret

0000109c <__do_global_dtors>:
    109c:	10 e0       	ldi	r17, 0x00	; 0
    109e:	c5 e3       	ldi	r28, 0x35	; 53
    10a0:	d0 e0       	ldi	r29, 0x00	; 0
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <__do_global_dtors+0x10>
    10a4:	fe 01       	movw	r30, r28
    10a6:	0e 94 43 04 	call	0x886	; 0x886 <__tablejump2__>
    10aa:	21 96       	adiw	r28, 0x01	; 1
    10ac:	c6 33       	cpi	r28, 0x36	; 54
    10ae:	d1 07       	cpc	r29, r17
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__do_global_dtors+0x8>
    10b2:	f8 94       	cli

000010b4 <__stop_program>:
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <__stop_program>
