
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000202  00800100  00001adc  00001b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  00800302  00800302  00001d72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025d5  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  000044d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000766  00000000  00000000  00004bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00005340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e8d  00000000  00000000  00005738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f21  00000000  00000000  000065c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000074e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__dtors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_18>
      4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      50:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_20>
      54:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_21>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	07 06       	cpc	r0, r23
      6a:	13 06       	cpc	r1, r19
      6c:	13 06       	cpc	r1, r19
      6e:	13 06       	cpc	r1, r19
      70:	13 06       	cpc	r1, r19
      72:	13 06       	cpc	r1, r19
      74:	13 06       	cpc	r1, r19
      76:	13 06       	cpc	r1, r19
      78:	13 06       	cpc	r1, r19
      7a:	13 06       	cpc	r1, r19
      7c:	13 06       	cpc	r1, r19
      7e:	13 06       	cpc	r1, r19
      80:	13 06       	cpc	r1, r19
      82:	13 06       	cpc	r1, r19
      84:	13 06       	cpc	r1, r19
      86:	13 06       	cpc	r1, r19
      88:	57 04       	cpc	r5, r7
      8a:	6c 04       	cpc	r6, r12
      8c:	81 04       	cpc	r8, r1
      8e:	96 04       	cpc	r9, r6
      90:	ab 04       	cpc	r10, r11
      92:	c0 04       	cpc	r12, r0
      94:	13 06       	cpc	r1, r19
      96:	13 06       	cpc	r1, r19
      98:	13 06       	cpc	r1, r19
      9a:	13 06       	cpc	r1, r19
      9c:	13 06       	cpc	r1, r19
      9e:	13 06       	cpc	r1, r19
      a0:	13 06       	cpc	r1, r19
      a2:	13 06       	cpc	r1, r19
      a4:	13 06       	cpc	r1, r19
      a6:	13 06       	cpc	r1, r19
      a8:	13 06       	cpc	r1, r19
      aa:	13 06       	cpc	r1, r19
      ac:	13 06       	cpc	r1, r19
      ae:	13 06       	cpc	r1, r19
      b0:	13 06       	cpc	r1, r19
      b2:	13 06       	cpc	r1, r19
      b4:	13 06       	cpc	r1, r19
      b6:	13 06       	cpc	r1, r19
      b8:	13 06       	cpc	r1, r19
      ba:	13 06       	cpc	r1, r19
      bc:	13 06       	cpc	r1, r19
      be:	13 06       	cpc	r1, r19
      c0:	13 06       	cpc	r1, r19
      c2:	13 06       	cpc	r1, r19
      c4:	13 06       	cpc	r1, r19
      c6:	13 06       	cpc	r1, r19
      c8:	13 06       	cpc	r1, r19
      ca:	13 06       	cpc	r1, r19
      cc:	13 06       	cpc	r1, r19
      ce:	13 06       	cpc	r1, r19
      d0:	13 06       	cpc	r1, r19
      d2:	13 06       	cpc	r1, r19
      d4:	13 06       	cpc	r1, r19
      d6:	13 06       	cpc	r1, r19
      d8:	13 06       	cpc	r1, r19
      da:	13 06       	cpc	r1, r19
      dc:	13 06       	cpc	r1, r19
      de:	13 06       	cpc	r1, r19
      e0:	13 06       	cpc	r1, r19
      e2:	13 06       	cpc	r1, r19
      e4:	13 06       	cpc	r1, r19
      e6:	13 06       	cpc	r1, r19
      e8:	d3 04       	cpc	r13, r3
      ea:	13 06       	cpc	r1, r19
      ec:	13 06       	cpc	r1, r19
      ee:	13 06       	cpc	r1, r19
      f0:	13 06       	cpc	r1, r19
      f2:	13 06       	cpc	r1, r19
      f4:	13 06       	cpc	r1, r19
      f6:	13 06       	cpc	r1, r19
      f8:	13 06       	cpc	r1, r19
      fa:	13 06       	cpc	r1, r19
      fc:	13 06       	cpc	r1, r19
      fe:	13 06       	cpc	r1, r19
     100:	13 06       	cpc	r1, r19
     102:	13 06       	cpc	r1, r19
     104:	13 06       	cpc	r1, r19
     106:	13 06       	cpc	r1, r19
     108:	13 06       	cpc	r1, r19
     10a:	13 06       	cpc	r1, r19
     10c:	13 06       	cpc	r1, r19
     10e:	13 06       	cpc	r1, r19
     110:	13 06       	cpc	r1, r19
     112:	24 05       	cpc	r18, r4
     114:	75 05       	cpc	r23, r5

00000116 <__ctors_start>:
     116:	4f 07       	cpc	r20, r31

00000118 <__ctors_end>:
     118:	f2 08       	sbc	r15, r2

0000011a <__dtors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf ef       	ldi	r28, 0xFF	; 255
     120:	d8 e0       	ldi	r29, 0x08	; 8
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	13 e0       	ldi	r17, 0x03	; 3
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	ec ed       	ldi	r30, 0xDC	; 220
     12e:	fa e1       	ldi	r31, 0x1A	; 26
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
     132:	05 90       	lpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a2 30       	cpi	r26, 0x02	; 2
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
     13c:	24 e0       	ldi	r18, 0x04	; 4
     13e:	a2 e0       	ldi	r26, 0x02	; 2
     140:	b3 e0       	ldi	r27, 0x03	; 3
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	ad 37       	cpi	r26, 0x7D	; 125
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>

0000014c <__do_global_ctors>:
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	cc e8       	ldi	r28, 0x8C	; 140
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	04 c0       	rjmp	.+8      	; 0x15c <__do_global_ctors+0x10>
     154:	21 97       	sbiw	r28, 0x01	; 1
     156:	fe 01       	movw	r30, r28
     158:	0e 94 33 09 	call	0x1266	; 0x1266 <__tablejump2__>
     15c:	cb 38       	cpi	r28, 0x8B	; 139
     15e:	d1 07       	cpc	r29, r17
     160:	c9 f7       	brne	.-14     	; 0x154 <__do_global_ctors+0x8>
     162:	0e 94 f3 06 	call	0xde6	; 0xde6 <main>
     166:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__do_global_dtors>

0000016a <__bad_interrupt>:
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
     16e:	08 95       	ret

00000170 <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
     170:	08 95       	ret

00000172 <_Z14error_functionv>:
		}
	}
}

// Turns all power outputs off, pass this function to default _error_function
void error_function() {
     172:	e3 e3       	ldi	r30, 0x33	; 51
     174:	f4 e0       	ldi	r31, 0x04	; 4
     176:	2f e6       	ldi	r18, 0x6F	; 111
     178:	34 e0       	ldi	r19, 0x04	; 4
     17a:	df 01       	movw	r26, r30
     17c:	17 97       	sbiw	r26, 0x07	; 7
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     17e:	0d 90       	ld	r0, X+
     180:	bc 91       	ld	r27, X
     182:	a0 2d       	mov	r26, r0
     184:	9c 91       	ld	r25, X
     186:	80 81       	ld	r24, Z
     188:	80 95       	com	r24
     18a:	89 23       	and	r24, r25
     18c:	8c 93       	st	X, r24
     18e:	3a 96       	adiw	r30, 0x0a	; 10
	for (int i(1); i <= 6; ++i) enable[i].clear();
     190:	e2 17       	cp	r30, r18
     192:	f3 07       	cpc	r31, r19
     194:	91 f7       	brne	.-28     	; 0x17a <_Z14error_functionv+0x8>
}
     196:	08 95       	ret

00000198 <_Z18error_led_functionv>:
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     198:	a0 e2       	ldi	r26, 0x20	; 32
     19a:	b4 e0       	ldi	r27, 0x04	; 4
     19c:	12 96       	adiw	r26, 0x02	; 2
     19e:	ed 91       	ld	r30, X+
     1a0:	fc 91       	ld	r31, X
     1a2:	13 97       	sbiw	r26, 0x03	; 3
     1a4:	90 81       	ld	r25, Z
     1a6:	19 96       	adiw	r26, 0x09	; 9
     1a8:	8c 91       	ld	r24, X
     1aa:	89 27       	eor	r24, r25
     1ac:	80 83       	st	Z, r24
     1ae:	08 95       	ret

000001b0 <_Z22state_update_variablesPV7PduData>:
	}
	check_voltage = !check_voltage;
	data->current_state = State::IDLE;
}

void state_update_variables(volatile PduData* data) {
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	fc 01       	movw	r30, r24
	if (data->incoming.enable_status != data->last_enable_status) {
     1b6:	93 89       	ldd	r25, Z+19	; 0x13
     1b8:	86 81       	ldd	r24, Z+6	; 0x06
     1ba:	98 17       	cp	r25, r24
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <_Z22state_update_variablesPV7PduData+0x10>
     1be:	ad c0       	rjmp	.+346    	; 0x31a <_Z22state_update_variablesPV7PduData+0x16a>
     1c0:	c0 e2       	ldi	r28, 0x20	; 32
     1c2:	d4 e0       	ldi	r29, 0x04	; 4
     1c4:	63 e3       	ldi	r22, 0x33	; 51
     1c6:	74 e0       	ldi	r23, 0x04	; 4
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
		for(int i(1); i <= 6; ++i) {
			if (data->incoming.enable_status & (1<<(i-1))) {
     1cc:	83 89       	ldd	r24, Z+19	; 0x13
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	02 2e       	mov	r0, r18
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <_Z22state_update_variablesPV7PduData+0x28>
     1d4:	95 95       	asr	r25
     1d6:	87 95       	ror	r24
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <_Z22state_update_variablesPV7PduData+0x24>
     1dc:	80 ff       	sbrs	r24, 0
     1de:	0a c0       	rjmp	.+20     	; 0x1f4 <_Z22state_update_variablesPV7PduData+0x44>
	void inline set() { *port_out |= pin_mask; }
     1e0:	4c 85       	ldd	r20, Y+12	; 0x0c
     1e2:	5d 85       	ldd	r21, Y+13	; 0x0d
     1e4:	da 01       	movw	r26, r20
     1e6:	9c 91       	ld	r25, X
     1e8:	db 01       	movw	r26, r22
     1ea:	8c 91       	ld	r24, X
     1ec:	89 2b       	or	r24, r25
     1ee:	da 01       	movw	r26, r20
     1f0:	8c 93       	st	X, r24
     1f2:	0a c0       	rjmp	.+20     	; 0x208 <_Z22state_update_variablesPV7PduData+0x58>
	void inline clear() { *port_out &= ~pin_mask; }
     1f4:	4c 85       	ldd	r20, Y+12	; 0x0c
     1f6:	5d 85       	ldd	r21, Y+13	; 0x0d
     1f8:	da 01       	movw	r26, r20
     1fa:	9c 91       	ld	r25, X
     1fc:	db 01       	movw	r26, r22
     1fe:	8c 91       	ld	r24, X
     200:	80 95       	com	r24
     202:	89 23       	and	r24, r25
     204:	da 01       	movw	r26, r20
     206:	8c 93       	st	X, r24
     208:	2f 5f       	subi	r18, 0xFF	; 255
     20a:	3f 4f       	sbci	r19, 0xFF	; 255
     20c:	2a 96       	adiw	r28, 0x0a	; 10
     20e:	66 5f       	subi	r22, 0xF6	; 246
     210:	7f 4f       	sbci	r23, 0xFF	; 255
	data->current_state = State::IDLE;
}

void state_update_variables(volatile PduData* data) {
	if (data->incoming.enable_status != data->last_enable_status) {
		for(int i(1); i <= 6; ++i) {
     212:	26 30       	cpi	r18, 0x06	; 6
     214:	31 05       	cpc	r19, r1
     216:	d1 f6       	brne	.-76     	; 0x1cc <_Z22state_update_variablesPV7PduData+0x1c>
				enable[i].set();
				} else {
				enable[i].clear();
			}
		}
		data->last_enable_status = data->incoming.enable_status;
     218:	83 89       	ldd	r24, Z+19	; 0x13
     21a:	86 83       	std	Z+6, r24	; 0x06
     21c:	7e c0       	rjmp	.+252    	; 0x31a <_Z22state_update_variablesPV7PduData+0x16a>
	}
	for(int i(0); i < 6; ++i) {
		if (data->incoming.pwm_status & (1<<i)) {
     21e:	24 89       	ldd	r18, Z+20	; 0x14
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	04 2e       	mov	r0, r20
     224:	02 c0       	rjmp	.+4      	; 0x22a <_Z22state_update_variablesPV7PduData+0x7a>
     226:	35 95       	asr	r19
     228:	27 95       	ror	r18
     22a:	0a 94       	dec	r0
     22c:	e2 f7       	brpl	.-8      	; 0x226 <_Z22state_update_variablesPV7PduData+0x76>
     22e:	20 ff       	sbrs	r18, 0
     230:	13 c0       	rjmp	.+38     	; 0x258 <_Z22state_update_variablesPV7PduData+0xa8>
			data->current_pwm[i] = data->incoming.pwm[i];
     232:	da 01       	movw	r26, r20
     234:	11 96       	adiw	r26, 0x01	; 1
     236:	aa 0f       	add	r26, r26
     238:	bb 1f       	adc	r27, r27
     23a:	ae 0f       	add	r26, r30
     23c:	bf 1f       	adc	r27, r31
     23e:	53 96       	adiw	r26, 0x13	; 19
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	54 97       	sbiw	r26, 0x14	; 20
     246:	da 01       	movw	r26, r20
     248:	aa 0f       	add	r26, r26
     24a:	bb 1f       	adc	r27, r27
     24c:	ae 0f       	add	r26, r30
     24e:	bf 1f       	adc	r27, r31
     250:	18 96       	adiw	r26, 0x08	; 8
     252:	9c 93       	st	X, r25
     254:	8e 93       	st	-X, r24
     256:	17 97       	sbiw	r26, 0x07	; 7
				enable[i].clear();
			}
		}
		data->last_enable_status = data->incoming.enable_status;
	}
	for(int i(0); i < 6; ++i) {
     258:	4f 5f       	subi	r20, 0xFF	; 255
     25a:	5f 4f       	sbci	r21, 0xFF	; 255
     25c:	46 30       	cpi	r20, 0x06	; 6
     25e:	51 05       	cpc	r21, r1
     260:	f1 f6       	brne	.-68     	; 0x21e <_Z22state_update_variablesPV7PduData+0x6e>
		if (data->incoming.pwm_status & (1<<i)) {
			data->current_pwm[i] = data->incoming.pwm[i];
		} 
	}
	if (data->current_pwm[0] > 0) {
     262:	87 81       	ldd	r24, Z+7	; 0x07
     264:	90 85       	ldd	r25, Z+8	; 0x08
     266:	89 2b       	or	r24, r25
     268:	79 f0       	breq	.+30     	; 0x288 <_Z22state_update_variablesPV7PduData+0xd8>
		TCCR0B |= PRESCALER2_256;
     26a:	85 b5       	in	r24, 0x25	; 37
     26c:	86 60       	ori	r24, 0x06	; 6
     26e:	85 bd       	out	0x25, r24	; 37
		OCR0A = data->current_pwm[0]/32;
     270:	87 81       	ldd	r24, Z+7	; 0x07
     272:	90 85       	ldd	r25, Z+8	; 0x08
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	92 95       	swap	r25
     27a:	82 95       	swap	r24
     27c:	8f 70       	andi	r24, 0x0F	; 15
     27e:	89 27       	eor	r24, r25
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	89 27       	eor	r24, r25
     284:	87 bd       	out	0x27, r24	; 39
     286:	03 c0       	rjmp	.+6      	; 0x28e <_Z22state_update_variablesPV7PduData+0xde>
	} else {
		TCCR0B &= ~PRESCALER2_MASK;
     288:	85 b5       	in	r24, 0x25	; 37
     28a:	88 7f       	andi	r24, 0xF8	; 248
     28c:	85 bd       	out	0x25, r24	; 37
	}
	if (data->current_pwm[1] > 0) {
     28e:	81 85       	ldd	r24, Z+9	; 0x09
     290:	92 85       	ldd	r25, Z+10	; 0x0a
     292:	89 2b       	or	r24, r25
     294:	79 f0       	breq	.+30     	; 0x2b4 <_Z22state_update_variablesPV7PduData+0x104>
		TCCR0B |= PRESCALER2_256;
     296:	85 b5       	in	r24, 0x25	; 37
     298:	86 60       	ori	r24, 0x06	; 6
     29a:	85 bd       	out	0x25, r24	; 37
		OCR0B = data->current_pwm[1]/32;
     29c:	81 85       	ldd	r24, Z+9	; 0x09
     29e:	92 85       	ldd	r25, Z+10	; 0x0a
     2a0:	96 95       	lsr	r25
     2a2:	87 95       	ror	r24
     2a4:	92 95       	swap	r25
     2a6:	82 95       	swap	r24
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	89 27       	eor	r24, r25
     2ac:	9f 70       	andi	r25, 0x0F	; 15
     2ae:	89 27       	eor	r24, r25
     2b0:	88 bd       	out	0x28, r24	; 40
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <_Z22state_update_variablesPV7PduData+0x10a>
	} else {
		TCCR0B &= ~PRESCALER2_MASK;
     2b4:	85 b5       	in	r24, 0x25	; 37
     2b6:	88 7f       	andi	r24, 0xF8	; 248
     2b8:	85 bd       	out	0x25, r24	; 37
	}
	if (data->current_pwm[2] > 0) {
     2ba:	83 85       	ldd	r24, Z+11	; 0x0b
     2bc:	94 85       	ldd	r25, Z+12	; 0x0c
     2be:	89 2b       	or	r24, r25
     2c0:	71 f0       	breq	.+28     	; 0x2de <_Z22state_update_variablesPV7PduData+0x12e>
		TCCR1B |= PRESCALER1_8;
     2c2:	a1 e8       	ldi	r26, 0x81	; 129
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	8c 91       	ld	r24, X
     2c8:	82 60       	ori	r24, 0x02	; 2
     2ca:	8c 93       	st	X, r24
		OCR1A = data->current_pwm[2]*2;
     2cc:	83 85       	ldd	r24, Z+11	; 0x0b
     2ce:	94 85       	ldd	r25, Z+12	; 0x0c
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	90 93 89 00 	sts	0x0089, r25
     2d8:	80 93 88 00 	sts	0x0088, r24
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <_Z22state_update_variablesPV7PduData+0x138>
	} else {
		TCCR1B &= ~PRESCALER1_MASK;
     2de:	a1 e8       	ldi	r26, 0x81	; 129
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	8c 91       	ld	r24, X
     2e4:	88 7f       	andi	r24, 0xF8	; 248
     2e6:	8c 93       	st	X, r24
	}
	if (data->current_pwm[3] > 0) {
     2e8:	85 85       	ldd	r24, Z+13	; 0x0d
     2ea:	96 85       	ldd	r25, Z+14	; 0x0e
     2ec:	89 2b       	or	r24, r25
     2ee:	71 f0       	breq	.+28     	; 0x30c <_Z22state_update_variablesPV7PduData+0x15c>
		TCCR1B |= PRESCALER1_8;
     2f0:	a1 e8       	ldi	r26, 0x81	; 129
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8c 91       	ld	r24, X
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	8c 93       	st	X, r24
		OCR1B = data->current_pwm[3]*2;
     2fa:	85 85       	ldd	r24, Z+13	; 0x0d
     2fc:	96 85       	ldd	r25, Z+14	; 0x0e
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	90 93 8b 00 	sts	0x008B, r25
     306:	80 93 8a 00 	sts	0x008A, r24
     30a:	05 c0       	rjmp	.+10     	; 0x316 <_Z22state_update_variablesPV7PduData+0x166>
	} else {
		TCCR1B &= ~PRESCALER1_MASK;
     30c:	a1 e8       	ldi	r26, 0x81	; 129
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	8c 91       	ld	r24, X
     312:	88 7f       	andi	r24, 0xF8	; 248
     314:	8c 93       	st	X, r24
	}
	data->current_state = State::IDLE;
     316:	15 82       	std	Z+5, r1	; 0x05
     318:	03 c0       	rjmp	.+6      	; 0x320 <_Z22state_update_variablesPV7PduData+0x170>
	check_voltage = !check_voltage;
	data->current_state = State::IDLE;
}

void state_update_variables(volatile PduData* data) {
	if (data->incoming.enable_status != data->last_enable_status) {
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	7f cf       	rjmp	.-258    	; 0x21e <_Z22state_update_variablesPV7PduData+0x6e>
		OCR1B = data->current_pwm[3]*2;
	} else {
		TCCR1B &= ~PRESCALER1_MASK;
	}
	data->current_state = State::IDLE;
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <_Z13state_receivePV7PduData>:
	sei(); // Re-enable interrupts
		
	if (char_available) immediate_function(c);
}

void state_receive(volatile PduData* data) {
     326:	dc 01       	movw	r26, r24
	cli(); // Pause interrupts while reading available char
     328:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     32a:	90 91 6b 04 	lds	r25, 0x046B
     32e:	99 23       	and	r25, r25
     330:	71 f0       	breq	.+28     	; 0x34e <_Z13state_receivePV7PduData+0x28>
			rx[0].head--;
     332:	91 50       	subi	r25, 0x01	; 1
     334:	e8 e6       	ldi	r30, 0x68	; 104
     336:	f4 e0       	ldi	r31, 0x04	; 4
     338:	93 83       	std	Z+3, r25	; 0x03
			ok = true;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	80 93 05 03 	sts	0x0305, r24
			return rx[0].buffer[rx[0].head];
     340:	01 90       	ld	r0, Z+
     342:	f0 81       	ld	r31, Z
     344:	e0 2d       	mov	r30, r0
     346:	e9 0f       	add	r30, r25
     348:	f1 1d       	adc	r31, r1
     34a:	80 81       	ld	r24, Z
     34c:	03 c0       	rjmp	.+6      	; 0x354 <_Z13state_receivePV7PduData+0x2e>
		} else {
			ok = false;
     34e:	10 92 05 03 	sts	0x0305, r1
			return '\0';
     352:	80 e0       	ldi	r24, 0x00	; 0
	char c(Serial::get_char(char_available));
	sei(); // Re-enable interrupts
     354:	78 94       	sei
	
	static uint8_t i(0);
	if (char_available) {
     356:	90 91 05 03 	lds	r25, 0x0305
     35a:	99 23       	and	r25, r25
     35c:	89 f0       	breq	.+34     	; 0x380 <_Z13state_receivePV7PduData+0x5a>
		((char*)(&(data->incoming)))[i] = c;
     35e:	90 91 02 03 	lds	r25, 0x0302
     362:	fd 01       	movw	r30, r26
     364:	e9 0f       	add	r30, r25
     366:	f1 1d       	adc	r31, r1
     368:	83 8b       	std	Z+19, r24	; 0x13
		i++;
     36a:	9f 5f       	subi	r25, 0xFF	; 255
		if (i == sizeof(data->incoming)) {	
     36c:	9e 30       	cpi	r25, 0x0E	; 14
     36e:	19 f0       	breq	.+6      	; 0x376 <_Z13state_receivePV7PduData+0x50>
	sei(); // Re-enable interrupts
	
	static uint8_t i(0);
	if (char_available) {
		((char*)(&(data->incoming)))[i] = c;
		i++;
     370:	90 93 02 03 	sts	0x0302, r25
     374:	08 95       	ret
		if (i == sizeof(data->incoming)) {	
			i = 0;
     376:	10 92 02 03 	sts	0x0302, r1
			data->current_state = State::UPDATE_VARIABLES;
     37a:	85 e0       	ldi	r24, 0x05	; 5
     37c:	15 96       	adiw	r26, 0x05	; 5
     37e:	8c 93       	st	X, r24
     380:	08 95       	ret

00000382 <_Z16state_update_adcPV7PduData>:
				stage = 0;
		}
	}
}

void state_update_adc(volatile PduData* data) {
     382:	fc 01       	movw	r30, r24
	static bool check_voltage(true);
	if (check_voltage) {
     384:	80 91 06 01 	lds	r24, 0x0106
     388:	88 23       	and	r24, r24
     38a:	e1 f0       	breq	.+56     	; 0x3c4 <_Z16state_update_adcPV7PduData+0x42>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     38c:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     38e:	86 e4       	ldi	r24, 0x46	; 70
     390:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     394:	aa e7       	ldi	r26, 0x7A	; 122
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	8f e8       	ldi	r24, 0x8F	; 143
     39a:	8c 93       	st	X, r24
		ADCSRB = 0; // free running
     39c:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     3a0:	10 92 74 04 	sts	0x0474, r1
		ADCSRA |= 1<<(ADSC); 
     3a4:	8c 91       	ld	r24, X
     3a6:	80 64       	ori	r24, 0x40	; 64
     3a8:	8c 93       	st	X, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     3aa:	90 91 74 04 	lds	r25, 0x0474
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     3ae:	99 23       	and	r25, r25
     3b0:	e1 f3       	breq	.-8      	; 0x3aa <_Z16state_update_adcPV7PduData+0x28>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     3b2:	20 91 73 04 	lds	r18, 0x0473
     3b6:	80 91 72 04 	lds	r24, 0x0472
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	92 2b       	or	r25, r18
		data->outgoing.voltage_reading = Analog::immediate_read(6);
     3be:	92 a3       	std	Z+34, r25	; 0x22
     3c0:	81 a3       	std	Z+33, r24	; 0x21
     3c2:	1b c0       	rjmp	.+54     	; 0x3fa <_Z16state_update_adcPV7PduData+0x78>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     3c4:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     3c6:	87 e4       	ldi	r24, 0x47	; 71
     3c8:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     3cc:	aa e7       	ldi	r26, 0x7A	; 122
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	8f e8       	ldi	r24, 0x8F	; 143
     3d2:	8c 93       	st	X, r24
		ADCSRB = 0; // free running
     3d4:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     3d8:	10 92 74 04 	sts	0x0474, r1
		ADCSRA |= 1<<(ADSC); 
     3dc:	8c 91       	ld	r24, X
     3de:	80 64       	ori	r24, 0x40	; 64
     3e0:	8c 93       	st	X, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     3e2:	90 91 74 04 	lds	r25, 0x0474
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     3e6:	99 23       	and	r25, r25
     3e8:	e1 f3       	breq	.-8      	; 0x3e2 <_Z16state_update_adcPV7PduData+0x60>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     3ea:	80 91 73 04 	lds	r24, 0x0473
     3ee:	20 91 72 04 	lds	r18, 0x0472
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	38 2b       	or	r19, r24
	} else {
		data->outgoing.current_reading = Analog::immediate_read(7);
     3f6:	34 a3       	std	Z+36, r19	; 0x24
     3f8:	23 a3       	std	Z+35, r18	; 0x23
	}
	check_voltage = !check_voltage;
     3fa:	80 91 06 01 	lds	r24, 0x0106
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	98 27       	eor	r25, r24
     402:	90 93 06 01 	sts	0x0106, r25
	data->current_state = State::IDLE;
     406:	15 82       	std	Z+5, r1	; 0x05
     408:	08 95       	ret

0000040a <_ZN6opbots5InputD0Ev>:
	}
	return p;
}

void operator delete(void * p) {
	free(p);
     40a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <free>
     40e:	08 95       	ret

00000410 <_ZN6opbots6OutputD0Ev>:
     410:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <free>
     414:	08 95       	ret

00000416 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>:
	OVER_VOLTAGE=5,
	OVER_CURRENT=6,
	TEST=7
};

void _raise_error(ErrorType error) {
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
	cli();
     422:	f8 94       	cli
	uint16_t delay_time(100);
	if (_error_function != nullptr && _error_led_function != nullptr) {
     424:	e0 91 77 04 	lds	r30, 0x0477
     428:	f0 91 78 04 	lds	r31, 0x0478
     42c:	30 97       	sbiw	r30, 0x00	; 0
     42e:	d1 f1       	breq	.+116    	; 0x4a4 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     430:	20 91 75 04 	lds	r18, 0x0475
     434:	30 91 76 04 	lds	r19, 0x0476
     438:	23 2b       	or	r18, r19
     43a:	a1 f1       	breq	.+104    	; 0x4a4 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     43c:	08 2f       	mov	r16, r24
		// Call user-defined error function
		_error_function();	
     43e:	09 95       	icall
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	e1 2c       	mov	r14, r1
     444:	f1 2c       	mov	r15, r1
     446:	10 16       	cp	r1, r16
     448:	11 06       	cpc	r1, r17
     44a:	14 f5       	brge	.+68     	; 0x490 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x7a>
     44c:	ce 2d       	mov	r28, r14
     44e:	df 2d       	mov	r29, r15
				_error_led_function();
     450:	e0 91 75 04 	lds	r30, 0x0475
     454:	f0 91 76 04 	lds	r31, 0x0476
     458:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45a:	9f ef       	ldi	r25, 0xFF	; 255
     45c:	21 ee       	ldi	r18, 0xE1	; 225
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	91 50       	subi	r25, 0x01	; 1
     462:	20 40       	sbci	r18, 0x00	; 0
     464:	80 40       	sbci	r24, 0x00	; 0
     466:	e1 f7       	brne	.-8      	; 0x460 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x4a>
     468:	00 c0       	rjmp	.+0      	; 0x46a <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x54>
     46a:	00 00       	nop
				_delay_ms(delay_time);
				_error_led_function();
     46c:	e0 91 75 04 	lds	r30, 0x0475
     470:	f0 91 76 04 	lds	r31, 0x0476
     474:	09 95       	icall
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	29 e6       	ldi	r18, 0x69	; 105
     47a:	88 e1       	ldi	r24, 0x18	; 24
     47c:	91 50       	subi	r25, 0x01	; 1
     47e:	20 40       	sbci	r18, 0x00	; 0
     480:	80 40       	sbci	r24, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x66>
     484:	00 c0       	rjmp	.+0      	; 0x486 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x70>
     486:	00 00       	nop
	if (_error_function != nullptr && _error_led_function != nullptr) {
		// Call user-defined error function
		_error_function();	
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     488:	21 96       	adiw	r28, 0x01	; 1
     48a:	c0 17       	cp	r28, r16
     48c:	d1 07       	cpc	r29, r17
     48e:	01 f7       	brne	.-64     	; 0x450 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x3a>
     490:	9f ef       	ldi	r25, 0xFF	; 255
     492:	23 ed       	ldi	r18, 0xD3	; 211
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	91 50       	subi	r25, 0x01	; 1
     498:	20 40       	sbci	r18, 0x00	; 0
     49a:	80 40       	sbci	r24, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x80>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8a>
     4a0:	00 00       	nop
     4a2:	d1 cf       	rjmp	.-94     	; 0x446 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x30>
				_delay_ms(5*delay_time);
			}
			_delay_ms(10*delay_time);
		}
	}
	sei();
     4a4:	78 94       	sei
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	08 95       	ret

000004b4 <_Z13state_respondPV7PduData>:
			data->current_state = State::UPDATE_VARIABLES;
		}
	}
}

void state_respond(volatile PduData* data) {
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	ec 01       	movw	r28, r24
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     4ba:	e0 91 66 04 	lds	r30, 0x0466
     4be:	f0 91 67 04 	lds	r31, 0x0467
     4c2:	30 97       	sbiw	r30, 0x00	; 0
     4c4:	49 f0       	breq	.+18     	; 0x4d8 <_Z13state_respondPV7PduData+0x24>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     4c6:	a2 81       	ldd	r26, Z+2	; 0x02
     4c8:	b3 81       	ldd	r27, Z+3	; 0x03
     4ca:	8c 91       	ld	r24, X
     4cc:	91 85       	ldd	r25, Z+9	; 0x09
     4ce:	98 2b       	or	r25, r24
     4d0:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     4d2:	88 e4       	ldi	r24, 0x48	; 72
     4d4:	80 93 c1 00 	sts	0x00C1, r24
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     4d8:	80 91 6f 04 	lds	r24, 0x046F
     4dc:	84 30       	cpi	r24, 0x04	; 4
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <_Z13state_respondPV7PduData+0x32>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     4e6:	ed e6       	ldi	r30, 0x6D	; 109
     4e8:	f4 e0       	ldi	r31, 0x04	; 4
     4ea:	a0 81       	ld	r26, Z
     4ec:	b1 81       	ldd	r27, Z+1	; 0x01
     4ee:	49 a1       	ldd	r20, Y+33	; 0x21
     4f0:	5a a1       	ldd	r21, Y+34	; 0x22
     4f2:	6b a1       	ldd	r22, Y+35	; 0x23
     4f4:	7c a1       	ldd	r23, Y+36	; 0x24
     4f6:	4d 93       	st	X+, r20
     4f8:	5d 93       	st	X+, r21
     4fa:	6d 93       	st	X+, r22
     4fc:	7c 93       	st	X, r23
     4fe:	13 97       	sbiw	r26, 0x03	; 3
				tx[0].head = 0;
     500:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	84 83       	std	Z+4, r24	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     506:	01 90       	ld	r0, Z+
     508:	f0 81       	ld	r31, Z
     50a:	e0 2d       	mov	r30, r0
     50c:	80 81       	ld	r24, Z
     50e:	80 93 c6 00 	sts	0x00C6, r24
	Serial::transmit((char*)(&(data->outgoing)),sizeof(data->outgoing));
	data->current_state = State::IDLE;
     512:	1d 82       	std	Y+5, r1	; 0x05
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <__vector_21>:

void operator delete(void * p) {
	free(p);
}

ISR(ADC_vect) {
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	8f 93       	push	r24
	cli();
     526:	f8 94       	cli
	Analog::analog_low = ADCL;
     528:	80 91 78 00 	lds	r24, 0x0078
     52c:	80 93 72 04 	sts	0x0472, r24
	Analog::analogHigh = ADCH;
     530:	80 91 79 00 	lds	r24, 0x0079
     534:	80 93 73 04 	sts	0x0473, r24
	Analog::new_value = true;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 74 04 	sts	0x0474, r24
	sei();
     53e:	78 94       	sei
};
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <__vector_20>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	ef 93       	push	r30
     560:	ff 93       	push	r31
			ok = false;
			return '\0';
		}
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
     562:	f8 94       	cli
		tx[serial_port].head++;
     564:	ed e6       	ldi	r30, 0x6D	; 109
     566:	f4 e0       	ldi	r31, 0x04	; 4
     568:	83 81       	ldd	r24, Z+3	; 0x03
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	83 83       	std	Z+3, r24	; 0x03
		if (tx[serial_port].head < tx[serial_port].tail) {
     56e:	94 81       	ldd	r25, Z+4	; 0x04
     570:	89 17       	cp	r24, r25
     572:	50 f4       	brcc	.+20     	; 0x588 <__vector_20+0x3c>
			if (serial_port == 0) {
				UDR0 = char(tx[serial_port].buffer[tx[serial_port].head]);
     574:	e0 91 6d 04 	lds	r30, 0x046D
     578:	f0 91 6e 04 	lds	r31, 0x046E
     57c:	e8 0f       	add	r30, r24
     57e:	f1 1d       	adc	r31, r1
     580:	80 81       	ld	r24, Z
     582:	80 93 c6 00 	sts	0x00C6, r24
     586:	10 c0       	rjmp	.+32     	; 0x5a8 <__vector_20+0x5c>
			else if (serial_port == 1) {
				UDR1 = 'x';
			}
			#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
     588:	e0 91 66 04 	lds	r30, 0x0466
     58c:	f0 91 67 04 	lds	r31, 0x0467
     590:	30 97       	sbiw	r30, 0x00	; 0
     592:	51 f0       	breq	.+20     	; 0x5a8 <__vector_20+0x5c>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     594:	a2 81       	ldd	r26, Z+2	; 0x02
     596:	b3 81       	ldd	r27, Z+3	; 0x03
     598:	9c 91       	ld	r25, X
     59a:	81 85       	ldd	r24, Z+9	; 0x09
     59c:	80 95       	com	r24
     59e:	89 23       	and	r24, r25
     5a0:	8c 93       	st	X, r24
			}
			#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
				Serial::txden[serial_port]->clear();
				UCSR0B = 1<<(RXCIE0) | 1<<(RXEN0);
     5a2:	80 e9       	ldi	r24, 0x90	; 144
     5a4:	80 93 c1 00 	sts	0x00C1, r24
			}
		}
		sei();
     5a8:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_18>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
     5e2:	f8 94       	cli
		PORTB ^= 1<<4; // MISO
     5e4:	95 b1       	in	r25, 0x05	; 5
     5e6:	80 e1       	ldi	r24, 0x10	; 16
     5e8:	89 27       	eor	r24, r25
     5ea:	85 b9       	out	0x05, r24	; 5
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
     5ec:	e0 ec       	ldi	r30, 0xC0	; 192
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	8f 77       	andi	r24, 0x7F	; 127
     5f4:	80 83       	st	Z, r24
			if (rx[serial_port].head < rx[serial_port].size) {
     5f6:	e8 e6       	ldi	r30, 0x68	; 104
     5f8:	f4 e0       	ldi	r31, 0x04	; 4
     5fa:	83 81       	ldd	r24, Z+3	; 0x03
     5fc:	92 81       	ldd	r25, Z+2	; 0x02
     5fe:	89 17       	cp	r24, r25
     600:	58 f4       	brcc	.+22     	; 0x618 <__vector_18+0x58>
				rx[serial_port].buffer[rx[serial_port].head] = UDR0;
     602:	90 91 c6 00 	lds	r25, 0x00C6
     606:	a0 81       	ld	r26, Z
     608:	b1 81       	ldd	r27, Z+1	; 0x01
     60a:	a8 0f       	add	r26, r24
     60c:	b1 1d       	adc	r27, r1
     60e:	9c 93       	st	X, r25
				rx[serial_port].head++;
     610:	83 81       	ldd	r24, Z+3	; 0x03
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	83 83       	std	Z+3, r24	; 0x03
     616:	03 c0       	rjmp	.+6      	; 0x61e <__vector_18+0x5e>
			} else {
				_raise_error(ErrorType::BUFFER_OVERFLOW_RX);
     618:	84 e0       	ldi	r24, 0x04	; 4
     61a:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
		#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
		}
		#endif
		sei();
     61e:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <_Z15startup_routinei>:
Input  reset(&PORTC,6);

//Timer1 timer1(Prescaler::PRESCALER_8);

// Flashes err light and power outputs on briefly
void startup_routine(int loops=1) {	
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ac 01       	movw	r20, r24
     64c:	00 e2       	ldi	r16, 0x20	; 32
     64e:	14 e0       	ldi	r17, 0x04	; 4
     650:	69 e2       	ldi	r22, 0x29	; 41
     652:	74 e0       	ldi	r23, 0x04	; 4
	while (--loops >= 0) {
     654:	1b c0       	rjmp	.+54     	; 0x68c <_Z15startup_routinei+0x4a>
		}
	}
	sei();
}
	
class GPIO {
     656:	12 96       	adiw	r26, 0x02	; 2
     658:	ed 91       	ld	r30, X+
     65a:	fc 91       	ld	r31, X
     65c:	13 97       	sbiw	r26, 0x03	; 3
     65e:	98 81       	ld	r25, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     660:	20 81       	ld	r18, Z
     662:	29 2b       	or	r18, r25
     664:	20 83       	st	Z, r18
     666:	2f ef       	ldi	r18, 0xFF	; 255
     668:	30 e7       	ldi	r19, 0x70	; 112
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	30 40       	sbci	r19, 0x00	; 0
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	e1 f7       	brne	.-8      	; 0x66c <_Z15startup_routinei+0x2a>
     674:	00 c0       	rjmp	.+0      	; 0x676 <_Z15startup_routinei+0x34>
     676:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
     678:	20 81       	ld	r18, Z
     67a:	90 95       	com	r25
     67c:	92 23       	and	r25, r18
     67e:	90 83       	st	Z, r25
     680:	1a 96       	adiw	r26, 0x0a	; 10
     682:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
     684:	24 e0       	ldi	r18, 0x04	; 4
     686:	a6 36       	cpi	r26, 0x66	; 102
     688:	b2 07       	cpc	r27, r18
     68a:	29 f7       	brne	.-54     	; 0x656 <_Z15startup_routinei+0x14>

//Timer1 timer1(Prescaler::PRESCALER_8);

// Flashes err light and power outputs on briefly
void startup_routine(int loops=1) {	
	while (--loops >= 0) {
     68c:	41 50       	subi	r20, 0x01	; 1
     68e:	51 09       	sbc	r21, r1
     690:	1a f0       	brmi	.+6      	; 0x698 <_Z15startup_routinei+0x56>
     692:	d8 01       	movw	r26, r16
     694:	eb 01       	movw	r28, r22
     696:	df cf       	rjmp	.-66     	; 0x656 <_Z15startup_routinei+0x14>
			out.set();
			_delay_ms(50);
			out.clear();
		}
	}
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <_Z7processc>:
	state_respond,
	state_update_variables,
	state_update_adc
};

void process(char c) {
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
	switch(c) {
     6aa:	8a 33       	cpi	r24, 0x3A	; 58
     6ac:	31 f0       	breq	.+12     	; 0x6ba <_Z7processc+0x18>
     6ae:	8f 33       	cpi	r24, 0x3F	; 63
     6b0:	51 f0       	breq	.+20     	; 0x6c6 <_Z7processc+0x24>
     6b2:	81 32       	cpi	r24, 0x21	; 33
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <_Z7processc+0x16>
     6b6:	61 c0       	rjmp	.+194    	; 0x77a <_Z7processc+0xd8>
     6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <_Z7processc+0x30>
		case ':':
			pduData.current_state = State::RECEIVE;
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	80 93 1a 01 	sts	0x011A, r24
			message[0] = 0;
     6c0:	10 92 1e 03 	sts	0x031E, r1
			break;
     6c4:	63 c0       	rjmp	.+198    	; 0x78c <_Z7processc+0xea>
		case '?':
			pduData.current_state = State::RESPOND;
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	80 93 1a 01 	sts	0x011A, r24
			message[0] = 0;
     6cc:	10 92 1e 03 	sts	0x031E, r1
			break;
     6d0:	5d c0       	rjmp	.+186    	; 0x78c <_Z7processc+0xea>
		case '!':
			pduData.current_state = State::IMMEDIATE;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 1a 01 	sts	0x011A, r24
				"\r\nImmediate mode on\r\n"
				"---------------\r\n"
				"Valid commands:\r\n"
				"---------------\r\n"
				"[1-6]: toggle enables\r\n"
			);
     6d8:	80 e6       	ldi	r24, 0x60	; 96
     6da:	ea e5       	ldi	r30, 0x5A	; 90
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	ae e1       	ldi	r26, 0x1E	; 30
     6e0:	b3 e0       	ldi	r27, 0x03	; 3
     6e2:	01 90       	ld	r0, Z+
     6e4:	0d 92       	st	X+, r0
     6e6:	8a 95       	dec	r24
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <_Z7processc+0x40>
			Serial::transmit(message,strlen(message));
     6ea:	ee e1       	ldi	r30, 0x1E	; 30
     6ec:	f3 e0       	ldi	r31, 0x03	; 3
     6ee:	01 90       	ld	r0, Z+
     6f0:	00 20       	and	r0, r0
     6f2:	e9 f7       	brne	.-6      	; 0x6ee <_Z7processc+0x4c>
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	ef 01       	movw	r28, r30
     6f8:	ce 51       	subi	r28, 0x1E	; 30
     6fa:	d3 40       	sbci	r29, 0x03	; 3
     6fc:	8c 2f       	mov	r24, r28
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
	}
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
     6fe:	cc 23       	and	r28, r28
     700:	51 f1       	breq	.+84     	; 0x756 <_Z7processc+0xb4>
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     702:	e0 91 66 04 	lds	r30, 0x0466
     706:	f0 91 67 04 	lds	r31, 0x0467
     70a:	30 97       	sbiw	r30, 0x00	; 0
     70c:	49 f0       	breq	.+18     	; 0x720 <_Z7processc+0x7e>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     70e:	a2 81       	ldd	r26, Z+2	; 0x02
     710:	b3 81       	ldd	r27, Z+3	; 0x03
     712:	2c 91       	ld	r18, X
     714:	91 85       	ldd	r25, Z+9	; 0x09
     716:	92 2b       	or	r25, r18
     718:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     71a:	98 e4       	ldi	r25, 0x48	; 72
     71c:	90 93 c1 00 	sts	0x00C1, r25
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     720:	90 91 6f 04 	lds	r25, 0x046F
     724:	98 17       	cp	r25, r24
     726:	18 f4       	brcc	.+6      	; 0x72e <_Z7processc+0x8c>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     72e:	0d e6       	ldi	r16, 0x6D	; 109
     730:	14 e0       	ldi	r17, 0x04	; 4
     732:	ae 01       	movw	r20, r28
     734:	55 27       	eor	r21, r21
     736:	6e e1       	ldi	r22, 0x1E	; 30
     738:	73 e0       	ldi	r23, 0x03	; 3
     73a:	d8 01       	movw	r26, r16
     73c:	8d 91       	ld	r24, X+
     73e:	9c 91       	ld	r25, X
     740:	0e 94 80 0a 	call	0x1500	; 0x1500 <memcpy>
				tx[0].head = 0;
     744:	f8 01       	movw	r30, r16
     746:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     748:	c4 83       	std	Z+4, r28	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     74a:	01 90       	ld	r0, Z+
     74c:	f0 81       	ld	r31, Z
     74e:	e0 2d       	mov	r30, r0
     750:	80 81       	ld	r24, Z
     752:	80 93 c6 00 	sts	0x00C6, r24
			#endif
		}
	}
	static bool transmission_complete(const uint8_t serial_port=0) {
		cli();
		const bool ret(tx[serial_port].head >= tx[serial_port].tail);
     756:	ed e6       	ldi	r30, 0x6D	; 109
     758:	f4 e0       	ldi	r31, 0x04	; 4
			}
			#endif
		}
	}
	static bool transmission_complete(const uint8_t serial_port=0) {
		cli();
     75a:	f8 94       	cli
		const bool ret(tx[serial_port].head >= tx[serial_port].tail);
     75c:	93 81       	ldd	r25, Z+3	; 0x03
     75e:	84 81       	ldd	r24, Z+4	; 0x04
		sei();
     760:	78 94       	sei
			while (!Serial::transmission_complete()) {
     762:	98 17       	cp	r25, r24
     764:	d0 f3       	brcs	.-12     	; 0x75a <_Z7processc+0xb8>
				"[a]  : print current\r\n"
				"[v]  : print voltage\r\n"
				"[w]  : print power\r\n"
				"[!]  : exit immediate mode\r\n"
				"[s]  : servo test (unimpl.)\r\n"
			);
     766:	8a e7       	ldi	r24, 0x7A	; 122
     768:	ea eb       	ldi	r30, 0xBA	; 186
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	ae e1       	ldi	r26, 0x1E	; 30
     76e:	b3 e0       	ldi	r27, 0x03	; 3
     770:	01 90       	ld	r0, Z+
     772:	0d 92       	st	X+, r0
     774:	8a 95       	dec	r24
     776:	e1 f7       	brne	.-8      	; 0x770 <_Z7processc+0xce>
			break;
     778:	09 c0       	rjmp	.+18     	; 0x78c <_Z7processc+0xea>
		default:
			sprintf(message,"Bad command\r\n");
     77a:	8e e0       	ldi	r24, 0x0E	; 14
     77c:	e4 e3       	ldi	r30, 0x34	; 52
     77e:	f2 e0       	ldi	r31, 0x02	; 2
     780:	ae e1       	ldi	r26, 0x1E	; 30
     782:	b3 e0       	ldi	r27, 0x03	; 3
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <_Z7processc+0xe2>
			break;
	}
	Serial::transmit(message,strlen(message));
     78c:	ee e1       	ldi	r30, 0x1E	; 30
     78e:	f3 e0       	ldi	r31, 0x03	; 3
     790:	01 90       	ld	r0, Z+
     792:	00 20       	and	r0, r0
     794:	e9 f7       	brne	.-6      	; 0x790 <_Z7processc+0xee>
     796:	31 97       	sbiw	r30, 0x01	; 1
     798:	ef 01       	movw	r28, r30
     79a:	ce 51       	subi	r28, 0x1E	; 30
     79c:	d3 40       	sbci	r29, 0x03	; 3
     79e:	8c 2f       	mov	r24, r28
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
	}
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
     7a0:	cc 23       	and	r28, r28
     7a2:	51 f1       	breq	.+84     	; 0x7f8 <_Z7processc+0x156>
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     7a4:	e0 91 66 04 	lds	r30, 0x0466
     7a8:	f0 91 67 04 	lds	r31, 0x0467
     7ac:	30 97       	sbiw	r30, 0x00	; 0
     7ae:	49 f0       	breq	.+18     	; 0x7c2 <_Z7processc+0x120>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     7b0:	a2 81       	ldd	r26, Z+2	; 0x02
     7b2:	b3 81       	ldd	r27, Z+3	; 0x03
     7b4:	2c 91       	ld	r18, X
     7b6:	91 85       	ldd	r25, Z+9	; 0x09
     7b8:	92 2b       	or	r25, r18
     7ba:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     7bc:	98 e4       	ldi	r25, 0x48	; 72
     7be:	90 93 c1 00 	sts	0x00C1, r25
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     7c2:	90 91 6f 04 	lds	r25, 0x046F
     7c6:	98 17       	cp	r25, r24
     7c8:	18 f4       	brcc	.+6      	; 0x7d0 <_Z7processc+0x12e>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     7d0:	0d e6       	ldi	r16, 0x6D	; 109
     7d2:	14 e0       	ldi	r17, 0x04	; 4
     7d4:	ae 01       	movw	r20, r28
     7d6:	55 27       	eor	r21, r21
     7d8:	6e e1       	ldi	r22, 0x1E	; 30
     7da:	73 e0       	ldi	r23, 0x03	; 3
     7dc:	d8 01       	movw	r26, r16
     7de:	8d 91       	ld	r24, X+
     7e0:	9c 91       	ld	r25, X
     7e2:	0e 94 80 0a 	call	0x1500	; 0x1500 <memcpy>
				tx[0].head = 0;
     7e6:	f8 01       	movw	r30, r16
     7e8:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     7ea:	c4 83       	std	Z+4, r28	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     7ec:	01 90       	ld	r0, Z+
     7ee:	f0 81       	ld	r31, Z
     7f0:	e0 2d       	mov	r30, r0
     7f2:	80 81       	ld	r24, Z
     7f4:	80 93 c6 00 	sts	0x00C6, r24
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <_Z10state_idlePV7PduData>:

void immediate_function(char c);
void process(char c);
bool char_available(false);

void state_idle(volatile PduData* data) {
     802:	fc 01       	movw	r30, r24
	static uint16_t stage(0);
	data->current_state = State::UPDATE_ADC; // Will update ADC by default
     804:	86 e0       	ldi	r24, 0x06	; 6
     806:	85 83       	std	Z+5, r24	; 0x05
	
	cli(); // Pause interrupts while reading available char
     808:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     80a:	90 91 6b 04 	lds	r25, 0x046B
     80e:	99 23       	and	r25, r25
     810:	81 f0       	breq	.+32     	; 0x832 <_Z10state_idlePV7PduData+0x30>
			rx[0].head--;
     812:	91 50       	subi	r25, 0x01	; 1
     814:	a8 e6       	ldi	r26, 0x68	; 104
     816:	b4 e0       	ldi	r27, 0x04	; 4
     818:	13 96       	adiw	r26, 0x03	; 3
     81a:	9c 93       	st	X, r25
     81c:	13 97       	sbiw	r26, 0x03	; 3
			ok = true;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 05 03 	sts	0x0305, r24
			return rx[0].buffer[rx[0].head];
     824:	0d 90       	ld	r0, X+
     826:	bc 91       	ld	r27, X
     828:	a0 2d       	mov	r26, r0
     82a:	a9 0f       	add	r26, r25
     82c:	b1 1d       	adc	r27, r1
     82e:	8c 91       	ld	r24, X
     830:	03 c0       	rjmp	.+6      	; 0x838 <_Z10state_idlePV7PduData+0x36>
		} else {
			ok = false;
     832:	10 92 05 03 	sts	0x0305, r1
			return '\0';
     836:	80 e0       	ldi	r24, 0x00	; 0
	char c(Serial::get_char(char_available));
	sei(); // Re-enable interrupts
     838:	78 94       	sei
	
	if (char_available) {
     83a:	90 91 05 03 	lds	r25, 0x0305
     83e:	99 23       	and	r25, r25
     840:	f1 f0       	breq	.+60     	; 0x87e <_Z10state_idlePV7PduData+0x7c>
		if (stage == sizeof(data->name)-1) {
     842:	20 91 03 03 	lds	r18, 0x0303
     846:	30 91 04 03 	lds	r19, 0x0304
     84a:	24 30       	cpi	r18, 0x04	; 4
     84c:	31 05       	cpc	r19, r1
     84e:	39 f4       	brne	.+14     	; 0x85e <_Z10state_idlePV7PduData+0x5c>
			process(c);
     850:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z7processc>
			stage = 0;
     854:	10 92 04 03 	sts	0x0304, r1
     858:	10 92 03 03 	sts	0x0303, r1
     85c:	08 95       	ret
		} else {
			if (c == data->name[stage])
     85e:	e2 0f       	add	r30, r18
     860:	f3 1f       	adc	r31, r19
     862:	90 81       	ld	r25, Z
     864:	98 13       	cpse	r25, r24
     866:	07 c0       	rjmp	.+14     	; 0x876 <_Z10state_idlePV7PduData+0x74>
				stage++;
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	30 93 04 03 	sts	0x0304, r19
     870:	20 93 03 03 	sts	0x0303, r18
     874:	08 95       	ret
			else
				stage = 0;
     876:	10 92 04 03 	sts	0x0304, r1
     87a:	10 92 03 03 	sts	0x0303, r1
     87e:	08 95       	ret

00000880 <_Z18immediate_functionc>:
			break;
	}
	Serial::transmit(message,strlen(message));
}

void immediate_function(char c) {
     880:	8f 92       	push	r8
     882:	9f 92       	push	r9
     884:	af 92       	push	r10
     886:	bf 92       	push	r11
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
	switch(c) {
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	fc 01       	movw	r30, r24
     89c:	b1 97       	sbiw	r30, 0x21	; 33
     89e:	e7 35       	cpi	r30, 0x57	; 87
     8a0:	f1 05       	cpc	r31, r1
     8a2:	08 f0       	brcs	.+2      	; 0x8a6 <_Z18immediate_functionc+0x26>
     8a4:	c0 c1       	rjmp	.+896    	; 0xc26 <__stack+0x327>
     8a6:	ec 5c       	subi	r30, 0xCC	; 204
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__tablejump2__>
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     8ae:	a0 e2       	ldi	r26, 0x20	; 32
     8b0:	b4 e0       	ldi	r27, 0x04	; 4
     8b2:	1c 96       	adiw	r26, 0x0c	; 12
     8b4:	ed 91       	ld	r30, X+
     8b6:	fc 91       	ld	r31, X
     8b8:	1d 97       	sbiw	r26, 0x0d	; 13
     8ba:	90 81       	ld	r25, Z
     8bc:	53 96       	adiw	r26, 0x13	; 19
     8be:	8c 91       	ld	r24, X
     8c0:	89 27       	eor	r24, r25
     8c2:	80 83       	st	Z, r24
		case '1':
			enable[1].toggle();
			sprintf(message,"Enable 1 toggled\r\n");
     8c4:	83 e1       	ldi	r24, 0x13	; 19
     8c6:	e2 e4       	ldi	r30, 0x42	; 66
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	ae e1       	ldi	r26, 0x1E	; 30
     8cc:	b3 e0       	ldi	r27, 0x03	; 3
     8ce:	01 90       	ld	r0, Z+
     8d0:	0d 92       	st	X+, r0
     8d2:	8a 95       	dec	r24
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <_Z18immediate_functionc+0x4e>
			break;
     8d6:	b0 c1       	rjmp	.+864    	; 0xc38 <__stack+0x339>
     8d8:	a0 e2       	ldi	r26, 0x20	; 32
     8da:	b4 e0       	ldi	r27, 0x04	; 4
     8dc:	56 96       	adiw	r26, 0x16	; 22
     8de:	ed 91       	ld	r30, X+
     8e0:	fc 91       	ld	r31, X
     8e2:	57 97       	sbiw	r26, 0x17	; 23
     8e4:	90 81       	ld	r25, Z
     8e6:	5d 96       	adiw	r26, 0x1d	; 29
     8e8:	8c 91       	ld	r24, X
     8ea:	89 27       	eor	r24, r25
     8ec:	80 83       	st	Z, r24
		case '2':
			enable[2].toggle();
			sprintf(message,"Enable 2 toggled\r\n");
     8ee:	83 e1       	ldi	r24, 0x13	; 19
     8f0:	e5 e5       	ldi	r30, 0x55	; 85
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	ae e1       	ldi	r26, 0x1E	; 30
     8f6:	b3 e0       	ldi	r27, 0x03	; 3
     8f8:	01 90       	ld	r0, Z+
     8fa:	0d 92       	st	X+, r0
     8fc:	8a 95       	dec	r24
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <_Z18immediate_functionc+0x78>
			break;
     900:	9b c1       	rjmp	.+822    	; 0xc38 <__stack+0x339>
     902:	a0 e2       	ldi	r26, 0x20	; 32
     904:	b4 e0       	ldi	r27, 0x04	; 4
     906:	90 96       	adiw	r26, 0x20	; 32
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	91 97       	sbiw	r26, 0x21	; 33
     90e:	90 81       	ld	r25, Z
     910:	97 96       	adiw	r26, 0x27	; 39
     912:	8c 91       	ld	r24, X
     914:	89 27       	eor	r24, r25
     916:	80 83       	st	Z, r24
		case '3':
			enable[3].toggle();
			sprintf(message,"Enable 3 toggled\r\n");
     918:	83 e1       	ldi	r24, 0x13	; 19
     91a:	e8 e6       	ldi	r30, 0x68	; 104
     91c:	f2 e0       	ldi	r31, 0x02	; 2
     91e:	ae e1       	ldi	r26, 0x1E	; 30
     920:	b3 e0       	ldi	r27, 0x03	; 3
     922:	01 90       	ld	r0, Z+
     924:	0d 92       	st	X+, r0
     926:	8a 95       	dec	r24
     928:	e1 f7       	brne	.-8      	; 0x922 <__stack+0x23>
			break;
     92a:	86 c1       	rjmp	.+780    	; 0xc38 <__stack+0x339>
     92c:	a0 e2       	ldi	r26, 0x20	; 32
     92e:	b4 e0       	ldi	r27, 0x04	; 4
     930:	9a 96       	adiw	r26, 0x2a	; 42
     932:	ed 91       	ld	r30, X+
     934:	fc 91       	ld	r31, X
     936:	9b 97       	sbiw	r26, 0x2b	; 43
     938:	90 81       	ld	r25, Z
     93a:	d1 96       	adiw	r26, 0x31	; 49
     93c:	8c 91       	ld	r24, X
     93e:	89 27       	eor	r24, r25
     940:	80 83       	st	Z, r24
		case '4':
			enable[4].toggle();
			sprintf(message,"Enable 4 toggled\r\n");
     942:	83 e1       	ldi	r24, 0x13	; 19
     944:	eb e7       	ldi	r30, 0x7B	; 123
     946:	f2 e0       	ldi	r31, 0x02	; 2
     948:	ae e1       	ldi	r26, 0x1E	; 30
     94a:	b3 e0       	ldi	r27, 0x03	; 3
     94c:	01 90       	ld	r0, Z+
     94e:	0d 92       	st	X+, r0
     950:	8a 95       	dec	r24
     952:	e1 f7       	brne	.-8      	; 0x94c <__stack+0x4d>
			break;
     954:	71 c1       	rjmp	.+738    	; 0xc38 <__stack+0x339>
     956:	a0 e2       	ldi	r26, 0x20	; 32
     958:	b4 e0       	ldi	r27, 0x04	; 4
     95a:	d4 96       	adiw	r26, 0x34	; 52
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	d5 97       	sbiw	r26, 0x35	; 53
     962:	90 81       	ld	r25, Z
     964:	db 96       	adiw	r26, 0x3b	; 59
     966:	8c 91       	ld	r24, X
     968:	89 27       	eor	r24, r25
     96a:	80 83       	st	Z, r24
		case '5':
			enable[5].toggle();
			sprintf(message,"Enable 5 toggled\r\n");
     96c:	83 e1       	ldi	r24, 0x13	; 19
     96e:	ee e8       	ldi	r30, 0x8E	; 142
     970:	f2 e0       	ldi	r31, 0x02	; 2
     972:	ae e1       	ldi	r26, 0x1E	; 30
     974:	b3 e0       	ldi	r27, 0x03	; 3
     976:	01 90       	ld	r0, Z+
     978:	0d 92       	st	X+, r0
     97a:	8a 95       	dec	r24
     97c:	e1 f7       	brne	.-8      	; 0x976 <__stack+0x77>
			break;
     97e:	5c c1       	rjmp	.+696    	; 0xc38 <__stack+0x339>
     980:	e0 91 5e 04 	lds	r30, 0x045E
     984:	f0 91 5f 04 	lds	r31, 0x045F
     988:	90 81       	ld	r25, Z
     98a:	80 91 65 04 	lds	r24, 0x0465
     98e:	89 27       	eor	r24, r25
     990:	80 83       	st	Z, r24
		case '6':
			enable[6].toggle();
			sprintf(message,"Enable 6 toggled\r\n");
     992:	83 e1       	ldi	r24, 0x13	; 19
     994:	e1 ea       	ldi	r30, 0xA1	; 161
     996:	f2 e0       	ldi	r31, 0x02	; 2
     998:	ae e1       	ldi	r26, 0x1E	; 30
     99a:	b3 e0       	ldi	r27, 0x03	; 3
     99c:	01 90       	ld	r0, Z+
     99e:	0d 92       	st	X+, r0
     9a0:	8a 95       	dec	r24
     9a2:	e1 f7       	brne	.-8      	; 0x99c <__stack+0x9d>
			break;
     9a4:	49 c1       	rjmp	.+658    	; 0xc38 <__stack+0x339>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     9a6:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     9a8:	86 e4       	ldi	r24, 0x46	; 70
     9aa:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     9ae:	ea e7       	ldi	r30, 0x7A	; 122
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	8f e8       	ldi	r24, 0x8F	; 143
     9b4:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     9b6:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     9ba:	10 92 74 04 	sts	0x0474, r1
		ADCSRA |= 1<<(ADSC); 
     9be:	80 81       	ld	r24, Z
     9c0:	80 64       	ori	r24, 0x40	; 64
     9c2:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     9c4:	80 91 74 04 	lds	r24, 0x0474
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     9c8:	88 23       	and	r24, r24
     9ca:	e1 f3       	breq	.-8      	; 0x9c4 <__stack+0xc5>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     9cc:	80 91 73 04 	lds	r24, 0x0473
     9d0:	20 91 72 04 	lds	r18, 0x0472
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	38 2b       	or	r19, r24
		case 'a':
			volts_reading = Analog::immediate_read(6);
     9d8:	30 93 1d 03 	sts	0x031D, r19
     9dc:	20 93 1c 03 	sts	0x031C, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     9e0:	a0 e4       	ldi	r26, 0x40	; 64
     9e2:	b6 e0       	ldi	r27, 0x06	; 6
     9e4:	0e 94 39 09 	call	0x1272	; 0x1272 <__umulhisi3>
     9e8:	6b 01       	movw	r12, r22
     9ea:	7c 01       	movw	r14, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     9ec:	9b 01       	movw	r18, r22
     9ee:	ac 01       	movw	r20, r24
     9f0:	44 27       	eor	r20, r20
     9f2:	55 27       	eor	r21, r21
     9f4:	a4 e6       	ldi	r26, 0x64	; 100
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	0e 94 48 09 	call	0x1290	; 0x1290 <__muluhisi3>
     9fc:	90 93 13 03 	sts	0x0313, r25
     a00:	80 93 12 03 	sts	0x0312, r24
		}
		temp_result = temp_result >> 16;
     a04:	c7 01       	movw	r24, r14
     a06:	aa 27       	eor	r26, r26
     a08:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     a0a:	80 93 14 03 	sts	0x0314, r24
     a0e:	90 93 15 03 	sts	0x0315, r25
			Analog::adc_scale<MAX_VOLTS>(volts_reading, &amps, &centiamps);
			sprintf(message,"%2u.%02u A  \r\n", amps, centiamps);
     a12:	20 91 13 03 	lds	r18, 0x0313
     a16:	2f 93       	push	r18
     a18:	20 91 12 03 	lds	r18, 0x0312
     a1c:	2f 93       	push	r18
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	84 eb       	ldi	r24, 0xB4	; 180
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	8e e1       	ldi	r24, 0x1E	; 30
     a2c:	93 e0       	ldi	r25, 0x03	; 3
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	0e 94 89 0a 	call	0x1512	; 0x1512 <sprintf>
			break;
     a36:	8d b7       	in	r24, 0x3d	; 61
     a38:	9e b7       	in	r25, 0x3e	; 62
     a3a:	08 96       	adiw	r24, 0x08	; 8
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	9e bf       	out	0x3e, r25	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	8d bf       	out	0x3d, r24	; 61
     a46:	f8 c0       	rjmp	.+496    	; 0xc38 <__stack+0x339>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     a48:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     a4a:	87 e4       	ldi	r24, 0x47	; 71
     a4c:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     a50:	ea e7       	ldi	r30, 0x7A	; 122
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	8f e8       	ldi	r24, 0x8F	; 143
     a56:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     a58:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     a5c:	10 92 74 04 	sts	0x0474, r1
		ADCSRA |= 1<<(ADSC); 
     a60:	80 81       	ld	r24, Z
     a62:	80 64       	ori	r24, 0x40	; 64
     a64:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     a66:	80 91 74 04 	lds	r24, 0x0474
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     a6a:	88 23       	and	r24, r24
     a6c:	e1 f3       	breq	.-8      	; 0xa66 <__stack+0x167>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     a6e:	80 91 73 04 	lds	r24, 0x0473
     a72:	20 91 72 04 	lds	r18, 0x0472
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	38 2b       	or	r19, r24
		case 'v':
			amps_reading = Analog::immediate_read(7);
     a7a:	30 93 17 03 	sts	0x0317, r19
     a7e:	20 93 16 03 	sts	0x0316, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     a82:	a0 e4       	ldi	r26, 0x40	; 64
     a84:	b6 e0       	ldi	r27, 0x06	; 6
     a86:	0e 94 39 09 	call	0x1272	; 0x1272 <__umulhisi3>
     a8a:	6b 01       	movw	r12, r22
     a8c:	7c 01       	movw	r14, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	44 27       	eor	r20, r20
     a94:	55 27       	eor	r21, r21
     a96:	a4 e6       	ldi	r26, 0x64	; 100
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	0e 94 48 09 	call	0x1290	; 0x1290 <__muluhisi3>
     a9e:	90 93 19 03 	sts	0x0319, r25
     aa2:	80 93 18 03 	sts	0x0318, r24
		}
		temp_result = temp_result >> 16;
     aa6:	c7 01       	movw	r24, r14
     aa8:	aa 27       	eor	r26, r26
     aaa:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     aac:	80 93 1a 03 	sts	0x031A, r24
     ab0:	90 93 1b 03 	sts	0x031B, r25
			Analog::adc_scale<MAX_AMPS>(amps_reading, &volts, &centivolts);
			sprintf(message,"%2u.%02u V  \r\n", volts, centivolts);
     ab4:	20 91 19 03 	lds	r18, 0x0319
     ab8:	2f 93       	push	r18
     aba:	20 91 18 03 	lds	r18, 0x0318
     abe:	2f 93       	push	r18
     ac0:	9f 93       	push	r25
     ac2:	8f 93       	push	r24
     ac4:	83 ec       	ldi	r24, 0xC3	; 195
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	8e e1       	ldi	r24, 0x1E	; 30
     ace:	93 e0       	ldi	r25, 0x03	; 3
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	0e 94 89 0a 	call	0x1512	; 0x1512 <sprintf>
			break;
     ad8:	ad b7       	in	r26, 0x3d	; 61
     ada:	be b7       	in	r27, 0x3e	; 62
     adc:	18 96       	adiw	r26, 0x08	; 8
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	be bf       	out	0x3e, r27	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	ad bf       	out	0x3d, r26	; 61
     ae8:	a7 c0       	rjmp	.+334    	; 0xc38 <__stack+0x339>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     aea:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     aec:	86 e4       	ldi	r24, 0x46	; 70
     aee:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     af2:	ea e7       	ldi	r30, 0x7A	; 122
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	8f e8       	ldi	r24, 0x8F	; 143
     af8:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     afa:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     afe:	10 92 74 04 	sts	0x0474, r1
		ADCSRA |= 1<<(ADSC); 
     b02:	80 81       	ld	r24, Z
     b04:	80 64       	ori	r24, 0x40	; 64
     b06:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     b08:	80 91 74 04 	lds	r24, 0x0474
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     b0c:	88 23       	and	r24, r24
     b0e:	e1 f3       	breq	.-8      	; 0xb08 <__stack+0x209>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     b10:	20 91 73 04 	lds	r18, 0x0473
     b14:	80 91 72 04 	lds	r24, 0x0472
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	92 2b       	or	r25, r18
		case 'w':
			volts_reading = Analog::immediate_read(6);
     b1c:	90 93 1d 03 	sts	0x031D, r25
     b20:	80 93 1c 03 	sts	0x031C, r24
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     b24:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     b26:	87 e4       	ldi	r24, 0x47	; 71
     b28:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     b2c:	ea e7       	ldi	r30, 0x7A	; 122
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	8f e8       	ldi	r24, 0x8F	; 143
     b32:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     b34:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     b38:	10 92 74 04 	sts	0x0474, r1
		ADCSRA |= 1<<(ADSC); 
     b3c:	80 81       	ld	r24, Z
     b3e:	80 64       	ori	r24, 0x40	; 64
     b40:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     b42:	80 91 74 04 	lds	r24, 0x0474
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     b46:	88 23       	and	r24, r24
     b48:	e1 f3       	breq	.-8      	; 0xb42 <__stack+0x243>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     b4a:	80 91 73 04 	lds	r24, 0x0473
     b4e:	20 91 72 04 	lds	r18, 0x0472
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	38 2b       	or	r19, r24
			amps_reading = Analog::immediate_read(7);
     b56:	30 93 17 03 	sts	0x0317, r19
     b5a:	20 93 16 03 	sts	0x0316, r18
			watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     b5e:	a0 91 1c 03 	lds	r26, 0x031C
     b62:	b0 91 1d 03 	lds	r27, 0x031D
     b66:	0e 94 39 09 	call	0x1272	; 0x1272 <__umulhisi3>
     b6a:	4b 01       	movw	r8, r22
     b6c:	5c 01       	movw	r10, r24
     b6e:	60 93 0e 03 	sts	0x030E, r22
     b72:	70 93 0f 03 	sts	0x030F, r23
     b76:	80 93 10 03 	sts	0x0310, r24
     b7a:	90 93 11 03 	sts	0x0311, r25
			watts = (watts_raw * 39) >> 16;
     b7e:	a7 e2       	ldi	r26, 0x27	; 39
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	0e 94 48 09 	call	0x1290	; 0x1290 <__muluhisi3>
     b8a:	6c 01       	movw	r12, r24
     b8c:	ee 24       	eor	r14, r14
     b8e:	ff 24       	eor	r15, r15
     b90:	c0 92 0a 03 	sts	0x030A, r12
     b94:	d0 92 0b 03 	sts	0x030B, r13
     b98:	e0 92 0c 03 	sts	0x030C, r14
     b9c:	f0 92 0d 03 	sts	0x030D, r15
			centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
     ba0:	a0 e9       	ldi	r26, 0x90	; 144
     ba2:	b6 e0       	ldi	r27, 0x06	; 6
     ba4:	a7 01       	movw	r20, r14
     ba6:	96 01       	movw	r18, r12
     ba8:	0e 94 48 09 	call	0x1290	; 0x1290 <__muluhisi3>
     bac:	9b 01       	movw	r18, r22
     bae:	ac 01       	movw	r20, r24
     bb0:	c5 01       	movw	r24, r10
     bb2:	b4 01       	movw	r22, r8
     bb4:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	ad e3       	ldi	r26, 0x3D	; 61
     bbe:	bf e0       	ldi	r27, 0x0F	; 15
     bc0:	0e 94 48 09 	call	0x1290	; 0x1290 <__muluhisi3>
     bc4:	aa 27       	eor	r26, r26
     bc6:	bb 27       	eor	r27, r27
     bc8:	80 93 06 03 	sts	0x0306, r24
     bcc:	90 93 07 03 	sts	0x0307, r25
     bd0:	a0 93 08 03 	sts	0x0308, r26
     bd4:	b0 93 09 03 	sts	0x0309, r27
			sprintf(message, "%2lu.%02lu W  \r\n", watts, centiwatts);
     bd8:	bf 93       	push	r27
     bda:	af 93       	push	r26
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	ff 92       	push	r15
     be2:	ef 92       	push	r14
     be4:	df 92       	push	r13
     be6:	cf 92       	push	r12
     be8:	82 ed       	ldi	r24, 0xD2	; 210
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	8e e1       	ldi	r24, 0x1E	; 30
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	0e 94 89 0a 	call	0x1512	; 0x1512 <sprintf>
			break;
     bfc:	ed b7       	in	r30, 0x3d	; 61
     bfe:	fe b7       	in	r31, 0x3e	; 62
     c00:	3c 96       	adiw	r30, 0x0c	; 12
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	fe bf       	out	0x3e, r31	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	ed bf       	out	0x3d, r30	; 61
     c0c:	15 c0       	rjmp	.+42     	; 0xc38 <__stack+0x339>
		case '!':
			pduData.current_state = State::IDLE;
     c0e:	10 92 1a 01 	sts	0x011A, r1
			sprintf(message,"Idle mode on\r\n");
     c12:	8f e0       	ldi	r24, 0x0F	; 15
     c14:	e3 ee       	ldi	r30, 0xE3	; 227
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	ae e1       	ldi	r26, 0x1E	; 30
     c1a:	b3 e0       	ldi	r27, 0x03	; 3
     c1c:	01 90       	ld	r0, Z+
     c1e:	0d 92       	st	X+, r0
     c20:	8a 95       	dec	r24
     c22:	e1 f7       	brne	.-8      	; 0xc1c <__stack+0x31d>
			break;
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__stack+0x339>
		default:
			sprintf(message,"Bad command\r\n");
     c26:	8e e0       	ldi	r24, 0x0E	; 14
     c28:	e4 e3       	ldi	r30, 0x34	; 52
     c2a:	f2 e0       	ldi	r31, 0x02	; 2
     c2c:	ae e1       	ldi	r26, 0x1E	; 30
     c2e:	b3 e0       	ldi	r27, 0x03	; 3
     c30:	01 90       	ld	r0, Z+
     c32:	0d 92       	st	X+, r0
     c34:	8a 95       	dec	r24
     c36:	e1 f7       	brne	.-8      	; 0xc30 <__stack+0x331>
			break;
	}
	Serial::transmit(message,strlen(message));
     c38:	ee e1       	ldi	r30, 0x1E	; 30
     c3a:	f3 e0       	ldi	r31, 0x03	; 3
     c3c:	01 90       	ld	r0, Z+
     c3e:	00 20       	and	r0, r0
     c40:	e9 f7       	brne	.-6      	; 0xc3c <__stack+0x33d>
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	ef 01       	movw	r28, r30
     c46:	ce 51       	subi	r28, 0x1E	; 30
     c48:	d3 40       	sbci	r29, 0x03	; 3
     c4a:	8c 2f       	mov	r24, r28
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
	}
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
     c4c:	cc 23       	and	r28, r28
     c4e:	51 f1       	breq	.+84     	; 0xca4 <__stack+0x3a5>
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     c50:	e0 91 66 04 	lds	r30, 0x0466
     c54:	f0 91 67 04 	lds	r31, 0x0467
     c58:	30 97       	sbiw	r30, 0x00	; 0
     c5a:	49 f0       	breq	.+18     	; 0xc6e <__stack+0x36f>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     c5c:	a2 81       	ldd	r26, Z+2	; 0x02
     c5e:	b3 81       	ldd	r27, Z+3	; 0x03
     c60:	2c 91       	ld	r18, X
     c62:	91 85       	ldd	r25, Z+9	; 0x09
     c64:	92 2b       	or	r25, r18
     c66:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     c68:	98 e4       	ldi	r25, 0x48	; 72
     c6a:	90 93 c1 00 	sts	0x00C1, r25
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     c6e:	90 91 6f 04 	lds	r25, 0x046F
     c72:	98 17       	cp	r25, r24
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__stack+0x37d>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     c7c:	0d e6       	ldi	r16, 0x6D	; 109
     c7e:	14 e0       	ldi	r17, 0x04	; 4
     c80:	ae 01       	movw	r20, r28
     c82:	55 27       	eor	r21, r21
     c84:	6e e1       	ldi	r22, 0x1E	; 30
     c86:	73 e0       	ldi	r23, 0x03	; 3
     c88:	d8 01       	movw	r26, r16
     c8a:	8d 91       	ld	r24, X+
     c8c:	9c 91       	ld	r25, X
     c8e:	0e 94 80 0a 	call	0x1500	; 0x1500 <memcpy>
				tx[0].head = 0;
     c92:	f8 01       	movw	r30, r16
     c94:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     c96:	c4 83       	std	Z+4, r28	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     c98:	01 90       	ld	r0, Z+
     c9a:	f0 81       	ld	r31, Z
     c9c:	e0 2d       	mov	r30, r0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 93 c6 00 	sts	0x00C6, r24
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	9f 90       	pop	r9
     cba:	8f 90       	pop	r8
     cbc:	08 95       	ret

00000cbe <_Z15state_immediatePV7PduData>:
	}
	data->current_state = State::IDLE;
}

void state_immediate(volatile PduData* data) {
	cli(); // Pause interrupts while reading available char
     cbe:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     cc0:	80 91 6b 04 	lds	r24, 0x046B
     cc4:	88 23       	and	r24, r24
     cc6:	71 f0       	breq	.+28     	; 0xce4 <_Z15state_immediatePV7PduData+0x26>
			rx[0].head--;
     cc8:	81 50       	subi	r24, 0x01	; 1
     cca:	e8 e6       	ldi	r30, 0x68	; 104
     ccc:	f4 e0       	ldi	r31, 0x04	; 4
     cce:	83 83       	std	Z+3, r24	; 0x03
			ok = true;
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	90 93 05 03 	sts	0x0305, r25
			return rx[0].buffer[rx[0].head];
     cd6:	01 90       	ld	r0, Z+
     cd8:	f0 81       	ld	r31, Z
     cda:	e0 2d       	mov	r30, r0
     cdc:	e8 0f       	add	r30, r24
     cde:	f1 1d       	adc	r31, r1
     ce0:	80 81       	ld	r24, Z
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <_Z15state_immediatePV7PduData+0x2c>
		} else {
			ok = false;
     ce4:	10 92 05 03 	sts	0x0305, r1
			return '\0';
     ce8:	80 e0       	ldi	r24, 0x00	; 0
	char c(Serial::get_char(char_available));
	sei(); // Re-enable interrupts
     cea:	78 94       	sei
		
	if (char_available) immediate_function(c);
     cec:	90 91 05 03 	lds	r25, 0x0305
     cf0:	91 11       	cpse	r25, r1
     cf2:	0e 94 40 04 	call	0x880	; 0x880 <_Z18immediate_functionc>
     cf6:	08 95       	ret

00000cf8 <_Z10state_drumPV7PduData>:
void state_respond(volatile PduData* data) {
	Serial::transmit((char*)(&(data->outgoing)),sizeof(data->outgoing));
	data->current_state = State::IDLE;
}

void state_drum(volatile PduData* data) {
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	a0 97       	sbiw	r28, 0x20	; 32
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	5c 01       	movw	r10, r24
	const uint8_t vel[] = {
		2,3,2,3,8,3,2,3,2,3,2,3,8,3,2,3,
		2,3,2,3,8,3,2,3,2,3,2,3,8,0,8,0
	};
     d22:	80 e2       	ldi	r24, 0x20	; 32
     d24:	ea e3       	ldi	r30, 0x3A	; 58
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	de 01       	movw	r26, r28
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	01 90       	ld	r0, Z+
     d2e:	0d 92       	st	X+, r0
     d30:	8a 95       	dec	r24
     d32:	e1 f7       	brne	.-8      	; 0xd2c <_Z10state_drumPV7PduData+0x34>
     d34:	ce 01       	movw	r24, r28
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	7c 01       	movw	r14, r24
     d3a:	6e 01       	movw	r12, r28
     d3c:	91 e2       	ldi	r25, 0x21	; 33
     d3e:	c9 0e       	add	r12, r25
     d40:	d1 1c       	adc	r13, r1
	for (int i(0); i < 32; ++i) {
		state_immediate(data); // Enters this state to poll incoming data
		for (int j(0); j < 10; ++j) {
     d42:	81 2c       	mov	r8, r1
     d44:	91 2c       	mov	r9, r1
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     d46:	00 e2       	ldi	r16, 0x20	; 32
     d48:	14 e0       	ldi	r17, 0x04	; 4
	const uint8_t vel[] = {
		2,3,2,3,8,3,2,3,2,3,2,3,8,3,2,3,
		2,3,2,3,8,3,2,3,2,3,2,3,8,0,8,0
	};
	for (int i(0); i < 32; ++i) {
		state_immediate(data); // Enters this state to poll incoming data
     d4a:	c5 01       	movw	r24, r10
     d4c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_Z15state_immediatePV7PduData>
		for (int j(0); j < 10; ++j) {
     d50:	28 2d       	mov	r18, r8
     d52:	39 2d       	mov	r19, r9
			if (vel[i] > j) {
     d54:	d7 01       	movw	r26, r14
     d56:	8c 91       	ld	r24, X
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	28 17       	cp	r18, r24
     d5c:	39 07       	cpc	r19, r25
     d5e:	5c f4       	brge	.+22     	; 0xd76 <_Z10state_drumPV7PduData+0x7e>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     d60:	d8 01       	movw	r26, r16
     d62:	1c 96       	adiw	r26, 0x0c	; 12
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	1d 97       	sbiw	r26, 0x0d	; 13
     d6a:	90 81       	ld	r25, Z
     d6c:	53 96       	adiw	r26, 0x13	; 19
     d6e:	8c 91       	ld	r24, X
     d70:	89 2b       	or	r24, r25
     d72:	80 83       	st	Z, r24
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <_Z10state_drumPV7PduData+0x94>
	void inline clear() { *port_out &= ~pin_mask; }
     d76:	d8 01       	movw	r26, r16
     d78:	1c 96       	adiw	r26, 0x0c	; 12
     d7a:	ed 91       	ld	r30, X+
     d7c:	fc 91       	ld	r31, X
     d7e:	1d 97       	sbiw	r26, 0x0d	; 13
     d80:	90 81       	ld	r25, Z
     d82:	53 96       	adiw	r26, 0x13	; 19
     d84:	8c 91       	ld	r24, X
     d86:	80 95       	com	r24
     d88:	89 23       	and	r24, r25
     d8a:	80 83       	st	Z, r24
     d8c:	ef e3       	ldi	r30, 0x3F	; 63
     d8e:	fc e9       	ldi	r31, 0x9C	; 156
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <_Z10state_drumPV7PduData+0x98>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <_Z10state_drumPV7PduData+0x9e>
     d96:	00 00       	nop
		2,3,2,3,8,3,2,3,2,3,2,3,8,3,2,3,
		2,3,2,3,8,3,2,3,2,3,2,3,8,0,8,0
	};
	for (int i(0); i < 32; ++i) {
		state_immediate(data); // Enters this state to poll incoming data
		for (int j(0); j < 10; ++j) {
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	2a 30       	cpi	r18, 0x0A	; 10
     d9e:	31 05       	cpc	r19, r1
     da0:	c9 f6       	brne	.-78     	; 0xd54 <_Z10state_drumPV7PduData+0x5c>
     da2:	ff ef       	ldi	r31, 0xFF	; 255
     da4:	2a e6       	ldi	r18, 0x6A	; 106
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	f1 50       	subi	r31, 0x01	; 1
     daa:	20 40       	sbci	r18, 0x00	; 0
     dac:	80 40       	sbci	r24, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <_Z10state_drumPV7PduData+0xb0>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <_Z10state_drumPV7PduData+0xba>
     db2:	00 00       	nop
     db4:	9f ef       	ldi	r25, 0xFF	; 255
     db6:	e9 1a       	sub	r14, r25
     db8:	f9 0a       	sbc	r15, r25
void state_drum(volatile PduData* data) {
	const uint8_t vel[] = {
		2,3,2,3,8,3,2,3,2,3,2,3,8,3,2,3,
		2,3,2,3,8,3,2,3,2,3,2,3,8,0,8,0
	};
	for (int i(0); i < 32; ++i) {
     dba:	ec 14       	cp	r14, r12
     dbc:	fd 04       	cpc	r15, r13
     dbe:	29 f6       	brne	.-118    	; 0xd4a <_Z10state_drumPV7PduData+0x52>
			}
			_delay_ms(10);
		}
		_delay_ms(70);
	}
}
     dc0:	a0 96       	adiw	r28, 0x20	; 32
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	bf 90       	pop	r11
     dde:	af 90       	pop	r10
     de0:	9f 90       	pop	r9
     de2:	8f 90       	pop	r8
     de4:	08 95       	ret

00000de6 <main>:
	}
	Serial::transmit(message,strlen(message));
}

int main(void) {
	_error_function = error_function;
     de6:	89 eb       	ldi	r24, 0xB9	; 185
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 78 04 	sts	0x0478, r25
     dee:	80 93 77 04 	sts	0x0477, r24
	_error_led_function = error_led_function;
     df2:	8c ec       	ldi	r24, 0xCC	; 204
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 76 04 	sts	0x0476, r25
     dfa:	80 93 75 04 	sts	0x0475, r24
	startup_routine(2);
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 21 03 	call	0x642	; 0x642 <_Z15startup_routinei>
	
	TCCR0A = (1<<COM0B1) | (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
     e06:	83 ea       	ldi	r24, 0xA3	; 163
     e08:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;
     e0a:	15 bc       	out	0x25, r1	; 37
	
	TCCR1A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
     e0c:	92 ea       	ldi	r25, 0xA2	; 162
     e0e:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1<<WGM13) | (1<<WGM12);
     e12:	98 e1       	ldi	r25, 0x18	; 24
     e14:	90 93 81 00 	sts	0x0081, r25
	
	TCCR2A = (1<<COM2B1) | (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);
     e18:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = 0;
     e1c:	10 92 b1 00 	sts	0x00B1, r1
	
	ICR1 = 40000;
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	9c e9       	ldi	r25, 0x9C	; 156
     e24:	90 93 87 00 	sts	0x0087, r25
     e28:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 3000;
     e2c:	88 eb       	ldi	r24, 0xB8	; 184
     e2e:	9b e0       	ldi	r25, 0x0B	; 11
     e30:	90 93 89 00 	sts	0x0089, r25
     e34:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 3000;
     e38:	90 93 8b 00 	sts	0x008B, r25
     e3c:	80 93 8a 00 	sts	0x008A, r24
	
	OCR2A = 94;
     e40:	8e e5       	ldi	r24, 0x5E	; 94
     e42:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 94;
     e46:	80 93 b4 00 	sts	0x00B4, r24
		const bool ret(tx[serial_port].head >= tx[serial_port].tail);
		sei();
		return ret;
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
     e4a:	86 e1       	ldi	r24, 0x16	; 22
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	90 93 67 04 	sts	0x0467, r25
     e52:	80 93 66 04 	sts	0x0466, r24
	
	static void init(const uint32_t baud_rate, const uint8_t serial_port=0) {
		uint8_t offset = 0;
		const uint16_t baud = (F_CPU / 8 / baud_rate) - 1;
		if (serial_port == 1) offset = 0x10;
		*(&UBRR0H+offset) = baud / 0xFF;
     e56:	10 92 c5 00 	sts	0x00C5, r1
		*(&UBRR0L+offset) = baud % 0xFF;
     e5a:	80 e1       	ldi	r24, 0x10	; 16
     e5c:	80 93 c4 00 	sts	0x00C4, r24
		*(&UCSR0A+offset) = 1<<(U2X0);
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	80 93 c0 00 	sts	0x00C0, r24
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
     e66:	88 ed       	ldi	r24, 0xD8	; 216
     e68:	80 93 c1 00 	sts	0x00C1, r24
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	80 93 c2 00 	sts	0x00C2, r24
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     e72:	10 92 74 04 	sts	0x0474, r1
		ADCSRA |= 1<<(ADSC); 
     e76:	ea e7       	ldi	r30, 0x7A	; 122
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 64       	ori	r24, 0x40	; 64
     e7e:	80 83       	st	Z, r24
		 
	Serial::set_txden_pin(txden);
	Serial::init(115200);
	Analog::start_conversion();
	
	sei(); // Enable interrupts
     e80:	78 94       	sei
	
    while (1) state_machine[pduData.current_state](&pduData);
     e82:	c5 e1       	ldi	r28, 0x15	; 21
     e84:	d1 e0       	ldi	r29, 0x01	; 1
     e86:	ed 81       	ldd	r30, Y+5	; 0x05
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	e9 5f       	subi	r30, 0xF9	; 249
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	01 90       	ld	r0, Z+
     e94:	f0 81       	ld	r31, Z
     e96:	e0 2d       	mov	r30, r0
     e98:	ce 01       	movw	r24, r28
     e9a:	09 95       	icall
			break;
	}
	Serial::transmit(message,strlen(message));
}

int main(void) {
     e9c:	f4 cf       	rjmp	.-24     	; 0xe86 <main+0xa0>

00000e9e <_GLOBAL__sub_I__ZN6opbots15_error_functionE>:
	Analog::start_conversion();
	
	sei(); // Enable interrupts
	
    while (1) state_machine[pduData.current_state](&pduData);
}
     e9e:	2f 92       	push	r2
     ea0:	3f 92       	push	r3
     ea2:	4f 92       	push	r4
     ea4:	5f 92       	push	r5
     ea6:	6f 92       	push	r6
     ea8:	7f 92       	push	r7
     eaa:	8f 92       	push	r8
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     ec2:	cd e6       	ldi	r28, 0x6D	; 109
     ec4:	d4 e0       	ldi	r29, 0x04	; 4
     ec6:	00 e8       	ldi	r16, 0x80	; 128
     ec8:	0a 83       	std	Y+2, r16	; 0x02
     eca:	1b 82       	std	Y+3, r1	; 0x03
     ecc:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <malloc>
     ed6:	99 83       	std	Y+1, r25	; 0x01
     ed8:	88 83       	st	Y, r24
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     eda:	c8 e6       	ldi	r28, 0x68	; 104
     edc:	d4 e0       	ldi	r29, 0x04	; 4
     ede:	68 94       	set
     ee0:	cc 24       	eor	r12, r12
     ee2:	c6 f8       	bld	r12, 6
     ee4:	ca 82       	std	Y+2, r12	; 0x02
     ee6:	1b 82       	std	Y+3, r1	; 0x03
     ee8:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     eea:	80 e4       	ldi	r24, 0x40	; 64
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 53 09 	call	0x12a6	; 0x12a6 <malloc>
     ef2:	99 83       	std	Y+1, r25	; 0x01
     ef4:	88 83       	st	Y, r24
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     ef6:	e0 e2       	ldi	r30, 0x20	; 32
     ef8:	f4 e0       	ldi	r31, 0x04	; 4
     efa:	a5 e2       	ldi	r26, 0x25	; 37
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	b3 83       	std	Z+3, r27	; 0x03
     f00:	a2 83       	std	Z+2, r26	; 0x02
     f02:	0f 2e       	mov	r0, r31
     f04:	f4 e2       	ldi	r31, 0x24	; 36
     f06:	af 2e       	mov	r10, r31
     f08:	b1 2c       	mov	r11, r1
     f0a:	f0 2d       	mov	r31, r0
     f0c:	b5 82       	std	Z+5, r11	; 0x05
     f0e:	a4 82       	std	Z+4, r10	; 0x04
     f10:	0f 2e       	mov	r0, r31
     f12:	f3 e2       	ldi	r31, 0x23	; 35
     f14:	8f 2e       	mov	r8, r31
     f16:	91 2c       	mov	r9, r1
     f18:	f0 2d       	mov	r31, r0
     f1a:	97 82       	std	Z+7, r9	; 0x07
     f1c:	86 82       	std	Z+6, r8	; 0x06
     f1e:	10 86       	std	Z+8, r1	; 0x08
     f20:	d1 e0       	ldi	r29, 0x01	; 1
     f22:	d1 87       	std	Z+9, r29	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     f24:	86 ef       	ldi	r24, 0xF6	; 246
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     f2c:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     f2e:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     f30:	0f 2e       	mov	r0, r31
     f32:	f8 e2       	ldi	r31, 0x28	; 40
     f34:	4f 2e       	mov	r4, r31
     f36:	51 2c       	mov	r5, r1
     f38:	f0 2d       	mov	r31, r0
     f3a:	55 86       	std	Z+13, r5	; 0x0d
     f3c:	44 86       	std	Z+12, r4	; 0x0c
     f3e:	0f 2e       	mov	r0, r31
     f40:	f7 e2       	ldi	r31, 0x27	; 39
     f42:	2f 2e       	mov	r2, r31
     f44:	31 2c       	mov	r3, r1
     f46:	f0 2d       	mov	r31, r0
     f48:	37 86       	std	Z+15, r3	; 0x0f
     f4a:	26 86       	std	Z+14, r2	; 0x0e
     f4c:	0f 2e       	mov	r0, r31
     f4e:	f6 e2       	ldi	r31, 0x26	; 38
     f50:	6f 2e       	mov	r6, r31
     f52:	71 2c       	mov	r7, r1
     f54:	f0 2d       	mov	r31, r0
     f56:	71 8a       	std	Z+17, r7	; 0x11
     f58:	60 8a       	std	Z+16, r6	; 0x10
     f5a:	0f 2e       	mov	r0, r31
     f5c:	f3 e0       	ldi	r31, 0x03	; 3
     f5e:	ef 2e       	mov	r14, r31
     f60:	f0 2d       	mov	r31, r0
     f62:	e2 8a       	std	Z+18, r14	; 0x12
     f64:	68 94       	set
     f66:	ff 24       	eor	r15, r15
     f68:	f3 f8       	bld	r15, 3
     f6a:	f3 8a       	std	Z+19, r15	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     f6c:	93 87       	std	Z+11, r25	; 0x0b
     f6e:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     f70:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     f72:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     f74:	6b e2       	ldi	r22, 0x2B	; 43
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	77 8b       	std	Z+23, r23	; 0x17
     f7a:	66 8b       	std	Z+22, r22	; 0x16
     f7c:	4a e2       	ldi	r20, 0x2A	; 42
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	51 8f       	std	Z+25, r21	; 0x19
     f82:	40 8f       	std	Z+24, r20	; 0x18
     f84:	29 e2       	ldi	r18, 0x29	; 41
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	33 8f       	std	Z+27, r19	; 0x1b
     f8a:	22 8f       	std	Z+26, r18	; 0x1a
     f8c:	c2 e0       	ldi	r28, 0x02	; 2
     f8e:	c4 8f       	std	Z+28, r28	; 0x1c
     f90:	14 e0       	ldi	r17, 0x04	; 4
     f92:	15 8f       	std	Z+29, r17	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     f94:	95 8b       	std	Z+21, r25	; 0x15
     f96:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     f98:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     f9a:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     f9c:	71 a3       	std	Z+33, r23	; 0x21
     f9e:	60 a3       	std	Z+32, r22	; 0x20
     fa0:	53 a3       	std	Z+35, r21	; 0x23
     fa2:	42 a3       	std	Z+34, r20	; 0x22
     fa4:	35 a3       	std	Z+37, r19	; 0x25
     fa6:	24 a3       	std	Z+36, r18	; 0x24
     fa8:	16 a3       	std	Z+38, r17	; 0x26
     faa:	68 94       	set
     fac:	dd 24       	eor	r13, r13
     fae:	d4 f8       	bld	r13, 4
     fb0:	d7 a2       	std	Z+39, r13	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     fb2:	97 8f       	std	Z+31, r25	; 0x1f
     fb4:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     fb6:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     fb8:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     fba:	53 a6       	std	Z+43, r5	; 0x2b
     fbc:	42 a6       	std	Z+42, r4	; 0x2a
     fbe:	35 a6       	std	Z+45, r3	; 0x2d
     fc0:	24 a6       	std	Z+44, r2	; 0x2c
     fc2:	77 a6       	std	Z+47, r7	; 0x2f
     fc4:	66 a6       	std	Z+46, r6	; 0x2e
     fc6:	10 aa       	std	Z+48, r1	; 0x30
     fc8:	d1 ab       	std	Z+49, r29	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     fca:	91 a7       	std	Z+41, r25	; 0x29
     fcc:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     fce:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     fd0:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     fd2:	55 aa       	std	Z+53, r5	; 0x35
     fd4:	44 aa       	std	Z+52, r4	; 0x34
     fd6:	37 aa       	std	Z+55, r3	; 0x37
     fd8:	26 aa       	std	Z+54, r2	; 0x36
     fda:	71 ae       	std	Z+57, r7	; 0x39
     fdc:	60 ae       	std	Z+56, r6	; 0x38
     fde:	d2 af       	std	Z+58, r29	; 0x3a
     fe0:	c3 af       	std	Z+59, r28	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     fe2:	93 ab       	std	Z+51, r25	; 0x33
     fe4:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     fe6:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     fe8:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     fea:	50 92 5f 04 	sts	0x045F, r5
     fee:	40 92 5e 04 	sts	0x045E, r4
     ff2:	30 92 61 04 	sts	0x0461, r3
     ff6:	20 92 60 04 	sts	0x0460, r2
     ffa:	70 92 63 04 	sts	0x0463, r7
     ffe:	60 92 62 04 	sts	0x0462, r6
    1002:	c0 93 64 04 	sts	0x0464, r28
    1006:	10 93 65 04 	sts	0x0465, r17
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    100a:	95 af       	std	Z+61, r25	; 0x3d
    100c:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
    100e:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
    1010:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1012:	e6 e1       	ldi	r30, 0x16	; 22
    1014:	f4 e0       	ldi	r31, 0x04	; 4
    1016:	73 83       	std	Z+3, r23	; 0x03
    1018:	62 83       	std	Z+2, r22	; 0x02
    101a:	55 83       	std	Z+5, r21	; 0x05
    101c:	44 83       	std	Z+4, r20	; 0x04
    101e:	37 83       	std	Z+7, r19	; 0x07
    1020:	26 83       	std	Z+6, r18	; 0x06
    1022:	0f 2e       	mov	r0, r31
    1024:	f7 e0       	ldi	r31, 0x07	; 7
    1026:	cf 2e       	mov	r12, r31
    1028:	f0 2d       	mov	r31, r0
    102a:	c0 86       	std	Z+8, r12	; 0x08
    102c:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1032:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    1034:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1036:	ec e0       	ldi	r30, 0x0C	; 12
    1038:	f4 e0       	ldi	r31, 0x04	; 4
    103a:	73 83       	std	Z+3, r23	; 0x03
    103c:	62 83       	std	Z+2, r22	; 0x02
    103e:	55 83       	std	Z+5, r21	; 0x05
    1040:	44 83       	std	Z+4, r20	; 0x04
    1042:	37 83       	std	Z+7, r19	; 0x07
    1044:	26 83       	std	Z+6, r18	; 0x06
    1046:	10 86       	std	Z+8, r1	; 0x08
    1048:	d1 87       	std	Z+9, r29	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
    104a:	0f 2e       	mov	r0, r31
    104c:	fe ef       	ldi	r31, 0xFE	; 254
    104e:	cf 2e       	mov	r12, r31
    1050:	f2 e0       	ldi	r31, 0x02	; 2
    1052:	df 2e       	mov	r13, r31
    1054:	f0 2d       	mov	r31, r0
    1056:	d1 82       	std	Z+1, r13	; 0x01
    1058:	c0 82       	st	Z, r12
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
    105a:	50 98       	cbi	0x0a, 0	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    105c:	e2 e0       	ldi	r30, 0x02	; 2
    105e:	f4 e0       	ldi	r31, 0x04	; 4
    1060:	73 83       	std	Z+3, r23	; 0x03
    1062:	62 83       	std	Z+2, r22	; 0x02
    1064:	55 83       	std	Z+5, r21	; 0x05
    1066:	44 83       	std	Z+4, r20	; 0x04
    1068:	37 83       	std	Z+7, r19	; 0x07
    106a:	26 83       	std	Z+6, r18	; 0x06
    106c:	d0 87       	std	Z+8, r29	; 0x08
    106e:	c1 87       	std	Z+9, r28	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1074:	59 98       	cbi	0x0b, 1	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    1076:	51 9a       	sbi	0x0a, 1	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1078:	e8 ef       	ldi	r30, 0xF8	; 248
    107a:	f3 e0       	ldi	r31, 0x03	; 3
    107c:	b3 83       	std	Z+3, r27	; 0x03
    107e:	a2 83       	std	Z+2, r26	; 0x02
    1080:	b5 82       	std	Z+5, r11	; 0x05
    1082:	a4 82       	std	Z+4, r10	; 0x04
    1084:	97 82       	std	Z+7, r9	; 0x07
    1086:	86 82       	std	Z+6, r8	; 0x06
    1088:	0f 2e       	mov	r0, r31
    108a:	f5 e0       	ldi	r31, 0x05	; 5
    108c:	df 2e       	mov	r13, r31
    108e:	f0 2d       	mov	r31, r0
    1090:	d0 86       	std	Z+8, r13	; 0x08
    1092:	00 e2       	ldi	r16, 0x20	; 32
    1094:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    109a:	2d 98       	cbi	0x05, 5	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    109c:	25 9a       	sbi	0x04, 5	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    109e:	ee ee       	ldi	r30, 0xEE	; 238
    10a0:	f3 e0       	ldi	r31, 0x03	; 3
    10a2:	b3 83       	std	Z+3, r27	; 0x03
    10a4:	a2 83       	std	Z+2, r26	; 0x02
    10a6:	b5 82       	std	Z+5, r11	; 0x05
    10a8:	a4 82       	std	Z+4, r10	; 0x04
    10aa:	97 82       	std	Z+7, r9	; 0x07
    10ac:	86 82       	std	Z+6, r8	; 0x06
    10ae:	10 87       	std	Z+8, r17	; 0x08
    10b0:	68 94       	set
    10b2:	cc 24       	eor	r12, r12
    10b4:	c4 f8       	bld	r12, 4
    10b6:	c1 86       	std	Z+9, r12	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    10bc:	2c 98       	cbi	0x05, 4	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    10be:	24 9a       	sbi	0x04, 4	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    10c0:	e4 ee       	ldi	r30, 0xE4	; 228
    10c2:	f3 e0       	ldi	r31, 0x03	; 3
    10c4:	b3 83       	std	Z+3, r27	; 0x03
    10c6:	a2 83       	std	Z+2, r26	; 0x02
    10c8:	b5 82       	std	Z+5, r11	; 0x05
    10ca:	a4 82       	std	Z+4, r10	; 0x04
    10cc:	97 82       	std	Z+7, r9	; 0x07
    10ce:	86 82       	std	Z+6, r8	; 0x06
    10d0:	e0 86       	std	Z+8, r14	; 0x08
    10d2:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    10d8:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    10da:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    10dc:	ea ed       	ldi	r30, 0xDA	; 218
    10de:	f3 e0       	ldi	r31, 0x03	; 3
    10e0:	73 83       	std	Z+3, r23	; 0x03
    10e2:	62 83       	std	Z+2, r22	; 0x02
    10e4:	55 83       	std	Z+5, r21	; 0x05
    10e6:	44 83       	std	Z+4, r20	; 0x04
    10e8:	37 83       	std	Z+7, r19	; 0x07
    10ea:	26 83       	std	Z+6, r18	; 0x06
    10ec:	0f 2e       	mov	r0, r31
    10ee:	f6 e0       	ldi	r31, 0x06	; 6
    10f0:	df 2e       	mov	r13, r31
    10f2:	f0 2d       	mov	r31, r0
    10f4:	d0 86       	std	Z+8, r13	; 0x08
    10f6:	68 94       	set
    10f8:	cc 24       	eor	r12, r12
    10fa:	c6 f8       	bld	r12, 6
    10fc:	c1 86       	std	Z+9, r12	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1102:	5e 98       	cbi	0x0b, 6	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    1104:	56 9a       	sbi	0x0a, 6	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1106:	e0 ed       	ldi	r30, 0xD0	; 208
    1108:	f3 e0       	ldi	r31, 0x03	; 3
    110a:	73 83       	std	Z+3, r23	; 0x03
    110c:	62 83       	std	Z+2, r22	; 0x02
    110e:	55 83       	std	Z+5, r21	; 0x05
    1110:	44 83       	std	Z+4, r20	; 0x04
    1112:	37 83       	std	Z+7, r19	; 0x07
    1114:	26 83       	std	Z+6, r18	; 0x06
    1116:	0f 2e       	mov	r0, r31
    1118:	f5 e0       	ldi	r31, 0x05	; 5
    111a:	cf 2e       	mov	r12, r31
    111c:	f0 2d       	mov	r31, r0
    111e:	c0 86       	std	Z+8, r12	; 0x08
    1120:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1126:	5d 98       	cbi	0x0b, 5	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    1128:	55 9a       	sbi	0x0a, 5	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    112a:	e6 ec       	ldi	r30, 0xC6	; 198
    112c:	f3 e0       	ldi	r31, 0x03	; 3
    112e:	b3 83       	std	Z+3, r27	; 0x03
    1130:	a2 83       	std	Z+2, r26	; 0x02
    1132:	b5 82       	std	Z+5, r11	; 0x05
    1134:	a4 82       	std	Z+4, r10	; 0x04
    1136:	97 82       	std	Z+7, r9	; 0x07
    1138:	86 82       	std	Z+6, r8	; 0x06
    113a:	d0 87       	std	Z+8, r29	; 0x08
    113c:	c1 87       	std	Z+9, r28	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1142:	29 98       	cbi	0x05, 1	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    1144:	21 9a       	sbi	0x04, 1	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1146:	ec eb       	ldi	r30, 0xBC	; 188
    1148:	f3 e0       	ldi	r31, 0x03	; 3
    114a:	b3 83       	std	Z+3, r27	; 0x03
    114c:	a2 83       	std	Z+2, r26	; 0x02
    114e:	b5 82       	std	Z+5, r11	; 0x05
    1150:	a4 82       	std	Z+4, r10	; 0x04
    1152:	97 82       	std	Z+7, r9	; 0x07
    1154:	86 82       	std	Z+6, r8	; 0x06
    1156:	c0 87       	std	Z+8, r28	; 0x08
    1158:	11 87       	std	Z+9, r17	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    115e:	2a 98       	cbi	0x05, 2	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    1160:	22 9a       	sbi	0x04, 2	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1162:	e2 eb       	ldi	r30, 0xB2	; 178
    1164:	f3 e0       	ldi	r31, 0x03	; 3
    1166:	b3 83       	std	Z+3, r27	; 0x03
    1168:	a2 83       	std	Z+2, r26	; 0x02
    116a:	b5 82       	std	Z+5, r11	; 0x05
    116c:	a4 82       	std	Z+4, r10	; 0x04
    116e:	97 82       	std	Z+7, r9	; 0x07
    1170:	86 82       	std	Z+6, r8	; 0x06
    1172:	e0 86       	std	Z+8, r14	; 0x08
    1174:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    117a:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    117c:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    117e:	e8 ea       	ldi	r30, 0xA8	; 168
    1180:	f3 e0       	ldi	r31, 0x03	; 3
    1182:	73 83       	std	Z+3, r23	; 0x03
    1184:	62 83       	std	Z+2, r22	; 0x02
    1186:	55 83       	std	Z+5, r21	; 0x05
    1188:	44 83       	std	Z+4, r20	; 0x04
    118a:	37 83       	std	Z+7, r19	; 0x07
    118c:	26 83       	std	Z+6, r18	; 0x06
    118e:	e0 86       	std	Z+8, r14	; 0x08
    1190:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1196:	5b 98       	cbi	0x0b, 3	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    1198:	53 9a       	sbi	0x0a, 3	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    119a:	ee e9       	ldi	r30, 0x9E	; 158
    119c:	f3 e0       	ldi	r31, 0x03	; 3
    119e:	53 82       	std	Z+3, r5	; 0x03
    11a0:	42 82       	std	Z+2, r4	; 0x02
    11a2:	35 82       	std	Z+5, r3	; 0x05
    11a4:	24 82       	std	Z+4, r2	; 0x04
    11a6:	77 82       	std	Z+7, r7	; 0x07
    11a8:	66 82       	std	Z+6, r6	; 0x06
    11aa:	d0 86       	std	Z+8, r13	; 0x08
    11ac:	68 94       	set
    11ae:	dd 24       	eor	r13, r13
    11b0:	d6 f8       	bld	r13, 6
    11b2:	d1 86       	std	Z+9, r13	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
    11b4:	8e ef       	ldi	r24, 0xFE	; 254
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
    11bc:	3e 98       	cbi	0x07, 6	; 7
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	bf 90       	pop	r11
    11d0:	af 90       	pop	r10
    11d2:	9f 90       	pop	r9
    11d4:	8f 90       	pop	r8
    11d6:	7f 90       	pop	r7
    11d8:	6f 90       	pop	r6
    11da:	5f 90       	pop	r5
    11dc:	4f 90       	pop	r4
    11de:	3f 90       	pop	r3
    11e0:	2f 90       	pop	r2
    11e2:	08 95       	ret

000011e4 <_GLOBAL__sub_D__ZN6opbots15_error_functionE>:
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
#include "opbots.h"
#include <stdio.h>
using namespace opbots;

// Setup power enable pins and error led
Output enable[] = {
    11e8:	c6 e6       	ldi	r28, 0x66	; 102
    11ea:	d4 e0       	ldi	r29, 0x04	; 4
    11ec:	2a 97       	sbiw	r28, 0x0a	; 10
    11ee:	e8 81       	ld	r30, Y
    11f0:	f9 81       	ldd	r31, Y+1	; 0x01
    11f2:	01 90       	ld	r0, Z+
    11f4:	f0 81       	ld	r31, Z
    11f6:	e0 2d       	mov	r30, r0
    11f8:	ce 01       	movw	r24, r28
    11fa:	09 95       	icall
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	c0 32       	cpi	r28, 0x20	; 32
    1200:	d8 07       	cpc	r29, r24
    1202:	a1 f7       	brne	.-24     	; 0x11ec <_GLOBAL__sub_D__ZN6opbots15_error_functionE+0x8>
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
		buffer = (T*)malloc(size);
	}
	
	~SimpleBuffer() {
		free(buffer);
    1204:	80 91 68 04 	lds	r24, 0x0468
    1208:	90 91 69 04 	lds	r25, 0x0469
    120c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <free>
    1210:	80 91 6d 04 	lds	r24, 0x046D
    1214:	90 91 6e 04 	lds	r25, 0x046E
    1218:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <free>
	Analog::start_conversion();
	
	sei(); // Enable interrupts
	
    while (1) state_machine[pduData.current_state](&pduData);
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <__udivmodsi4>:
    1222:	a1 e2       	ldi	r26, 0x21	; 33
    1224:	1a 2e       	mov	r1, r26
    1226:	aa 1b       	sub	r26, r26
    1228:	bb 1b       	sub	r27, r27
    122a:	fd 01       	movw	r30, r26
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <__udivmodsi4_ep>

0000122e <__udivmodsi4_loop>:
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	ee 1f       	adc	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	a2 17       	cp	r26, r18
    1238:	b3 07       	cpc	r27, r19
    123a:	e4 07       	cpc	r30, r20
    123c:	f5 07       	cpc	r31, r21
    123e:	20 f0       	brcs	.+8      	; 0x1248 <__udivmodsi4_ep>
    1240:	a2 1b       	sub	r26, r18
    1242:	b3 0b       	sbc	r27, r19
    1244:	e4 0b       	sbc	r30, r20
    1246:	f5 0b       	sbc	r31, r21

00001248 <__udivmodsi4_ep>:
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a 94       	dec	r1
    1252:	69 f7       	brne	.-38     	; 0x122e <__udivmodsi4_loop>
    1254:	60 95       	com	r22
    1256:	70 95       	com	r23
    1258:	80 95       	com	r24
    125a:	90 95       	com	r25
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	bd 01       	movw	r22, r26
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret

00001266 <__tablejump2__>:
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	05 90       	lpm	r0, Z+
    126c:	f4 91       	lpm	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	09 94       	ijmp

00001272 <__umulhisi3>:
    1272:	a2 9f       	mul	r26, r18
    1274:	b0 01       	movw	r22, r0
    1276:	b3 9f       	mul	r27, r19
    1278:	c0 01       	movw	r24, r0
    127a:	a3 9f       	mul	r26, r19
    127c:	70 0d       	add	r23, r0
    127e:	81 1d       	adc	r24, r1
    1280:	11 24       	eor	r1, r1
    1282:	91 1d       	adc	r25, r1
    1284:	b2 9f       	mul	r27, r18
    1286:	70 0d       	add	r23, r0
    1288:	81 1d       	adc	r24, r1
    128a:	11 24       	eor	r1, r1
    128c:	91 1d       	adc	r25, r1
    128e:	08 95       	ret

00001290 <__muluhisi3>:
    1290:	0e 94 39 09 	call	0x1272	; 0x1272 <__umulhisi3>
    1294:	a5 9f       	mul	r26, r21
    1296:	90 0d       	add	r25, r0
    1298:	b4 9f       	mul	r27, r20
    129a:	90 0d       	add	r25, r0
    129c:	a4 9f       	mul	r26, r20
    129e:	80 0d       	add	r24, r0
    12a0:	91 1d       	adc	r25, r1
    12a2:	11 24       	eor	r1, r1
    12a4:	08 95       	ret

000012a6 <malloc>:
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	91 05       	cpc	r25, r1
    12ae:	10 f4       	brcc	.+4      	; 0x12b4 <malloc+0xe>
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	e0 91 7b 04 	lds	r30, 0x047B
    12b8:	f0 91 7c 04 	lds	r31, 0x047C
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	c0 e0       	ldi	r28, 0x00	; 0
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
    12c4:	30 97       	sbiw	r30, 0x00	; 0
    12c6:	11 f1       	breq	.+68     	; 0x130c <malloc+0x66>
    12c8:	40 81       	ld	r20, Z
    12ca:	51 81       	ldd	r21, Z+1	; 0x01
    12cc:	48 17       	cp	r20, r24
    12ce:	59 07       	cpc	r21, r25
    12d0:	c0 f0       	brcs	.+48     	; 0x1302 <malloc+0x5c>
    12d2:	48 17       	cp	r20, r24
    12d4:	59 07       	cpc	r21, r25
    12d6:	61 f4       	brne	.+24     	; 0x12f0 <malloc+0x4a>
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	93 81       	ldd	r25, Z+3	; 0x03
    12dc:	20 97       	sbiw	r28, 0x00	; 0
    12de:	19 f0       	breq	.+6      	; 0x12e6 <malloc+0x40>
    12e0:	9b 83       	std	Y+3, r25	; 0x03
    12e2:	8a 83       	std	Y+2, r24	; 0x02
    12e4:	2b c0       	rjmp	.+86     	; 0x133c <malloc+0x96>
    12e6:	90 93 7c 04 	sts	0x047C, r25
    12ea:	80 93 7b 04 	sts	0x047B, r24
    12ee:	26 c0       	rjmp	.+76     	; 0x133c <malloc+0x96>
    12f0:	21 15       	cp	r18, r1
    12f2:	31 05       	cpc	r19, r1
    12f4:	19 f0       	breq	.+6      	; 0x12fc <malloc+0x56>
    12f6:	42 17       	cp	r20, r18
    12f8:	53 07       	cpc	r21, r19
    12fa:	18 f4       	brcc	.+6      	; 0x1302 <malloc+0x5c>
    12fc:	9a 01       	movw	r18, r20
    12fe:	be 01       	movw	r22, r28
    1300:	df 01       	movw	r26, r30
    1302:	ef 01       	movw	r28, r30
    1304:	02 80       	ldd	r0, Z+2	; 0x02
    1306:	f3 81       	ldd	r31, Z+3	; 0x03
    1308:	e0 2d       	mov	r30, r0
    130a:	dc cf       	rjmp	.-72     	; 0x12c4 <malloc+0x1e>
    130c:	21 15       	cp	r18, r1
    130e:	31 05       	cpc	r19, r1
    1310:	09 f1       	breq	.+66     	; 0x1354 <malloc+0xae>
    1312:	28 1b       	sub	r18, r24
    1314:	39 0b       	sbc	r19, r25
    1316:	24 30       	cpi	r18, 0x04	; 4
    1318:	31 05       	cpc	r19, r1
    131a:	90 f4       	brcc	.+36     	; 0x1340 <malloc+0x9a>
    131c:	12 96       	adiw	r26, 0x02	; 2
    131e:	8d 91       	ld	r24, X+
    1320:	9c 91       	ld	r25, X
    1322:	13 97       	sbiw	r26, 0x03	; 3
    1324:	61 15       	cp	r22, r1
    1326:	71 05       	cpc	r23, r1
    1328:	21 f0       	breq	.+8      	; 0x1332 <malloc+0x8c>
    132a:	fb 01       	movw	r30, r22
    132c:	93 83       	std	Z+3, r25	; 0x03
    132e:	82 83       	std	Z+2, r24	; 0x02
    1330:	04 c0       	rjmp	.+8      	; 0x133a <malloc+0x94>
    1332:	90 93 7c 04 	sts	0x047C, r25
    1336:	80 93 7b 04 	sts	0x047B, r24
    133a:	fd 01       	movw	r30, r26
    133c:	32 96       	adiw	r30, 0x02	; 2
    133e:	44 c0       	rjmp	.+136    	; 0x13c8 <malloc+0x122>
    1340:	fd 01       	movw	r30, r26
    1342:	e2 0f       	add	r30, r18
    1344:	f3 1f       	adc	r31, r19
    1346:	81 93       	st	Z+, r24
    1348:	91 93       	st	Z+, r25
    134a:	22 50       	subi	r18, 0x02	; 2
    134c:	31 09       	sbc	r19, r1
    134e:	2d 93       	st	X+, r18
    1350:	3c 93       	st	X, r19
    1352:	3a c0       	rjmp	.+116    	; 0x13c8 <malloc+0x122>
    1354:	20 91 79 04 	lds	r18, 0x0479
    1358:	30 91 7a 04 	lds	r19, 0x047A
    135c:	23 2b       	or	r18, r19
    135e:	41 f4       	brne	.+16     	; 0x1370 <malloc+0xca>
    1360:	20 91 02 01 	lds	r18, 0x0102
    1364:	30 91 03 01 	lds	r19, 0x0103
    1368:	30 93 7a 04 	sts	0x047A, r19
    136c:	20 93 79 04 	sts	0x0479, r18
    1370:	20 91 00 01 	lds	r18, 0x0100
    1374:	30 91 01 01 	lds	r19, 0x0101
    1378:	21 15       	cp	r18, r1
    137a:	31 05       	cpc	r19, r1
    137c:	41 f4       	brne	.+16     	; 0x138e <malloc+0xe8>
    137e:	2d b7       	in	r18, 0x3d	; 61
    1380:	3e b7       	in	r19, 0x3e	; 62
    1382:	40 91 04 01 	lds	r20, 0x0104
    1386:	50 91 05 01 	lds	r21, 0x0105
    138a:	24 1b       	sub	r18, r20
    138c:	35 0b       	sbc	r19, r21
    138e:	e0 91 79 04 	lds	r30, 0x0479
    1392:	f0 91 7a 04 	lds	r31, 0x047A
    1396:	e2 17       	cp	r30, r18
    1398:	f3 07       	cpc	r31, r19
    139a:	a0 f4       	brcc	.+40     	; 0x13c4 <malloc+0x11e>
    139c:	2e 1b       	sub	r18, r30
    139e:	3f 0b       	sbc	r19, r31
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	78 f0       	brcs	.+30     	; 0x13c4 <malloc+0x11e>
    13a6:	ac 01       	movw	r20, r24
    13a8:	4e 5f       	subi	r20, 0xFE	; 254
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	24 17       	cp	r18, r20
    13ae:	35 07       	cpc	r19, r21
    13b0:	48 f0       	brcs	.+18     	; 0x13c4 <malloc+0x11e>
    13b2:	4e 0f       	add	r20, r30
    13b4:	5f 1f       	adc	r21, r31
    13b6:	50 93 7a 04 	sts	0x047A, r21
    13ba:	40 93 79 04 	sts	0x0479, r20
    13be:	81 93       	st	Z+, r24
    13c0:	91 93       	st	Z+, r25
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <malloc+0x122>
    13c4:	e0 e0       	ldi	r30, 0x00	; 0
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	cf 01       	movw	r24, r30
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <free>:
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	09 f4       	brne	.+2      	; 0x13de <free+0xe>
    13dc:	8c c0       	rjmp	.+280    	; 0x14f6 <free+0x126>
    13de:	fc 01       	movw	r30, r24
    13e0:	32 97       	sbiw	r30, 0x02	; 2
    13e2:	13 82       	std	Z+3, r1	; 0x03
    13e4:	12 82       	std	Z+2, r1	; 0x02
    13e6:	00 91 7b 04 	lds	r16, 0x047B
    13ea:	10 91 7c 04 	lds	r17, 0x047C
    13ee:	01 15       	cp	r16, r1
    13f0:	11 05       	cpc	r17, r1
    13f2:	81 f4       	brne	.+32     	; 0x1414 <free+0x44>
    13f4:	20 81       	ld	r18, Z
    13f6:	31 81       	ldd	r19, Z+1	; 0x01
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	20 91 79 04 	lds	r18, 0x0479
    1400:	30 91 7a 04 	lds	r19, 0x047A
    1404:	28 17       	cp	r18, r24
    1406:	39 07       	cpc	r19, r25
    1408:	79 f5       	brne	.+94     	; 0x1468 <free+0x98>
    140a:	f0 93 7a 04 	sts	0x047A, r31
    140e:	e0 93 79 04 	sts	0x0479, r30
    1412:	71 c0       	rjmp	.+226    	; 0x14f6 <free+0x126>
    1414:	d8 01       	movw	r26, r16
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	ae 17       	cp	r26, r30
    141c:	bf 07       	cpc	r27, r31
    141e:	50 f4       	brcc	.+20     	; 0x1434 <free+0x64>
    1420:	12 96       	adiw	r26, 0x02	; 2
    1422:	2d 91       	ld	r18, X+
    1424:	3c 91       	ld	r19, X
    1426:	13 97       	sbiw	r26, 0x03	; 3
    1428:	ad 01       	movw	r20, r26
    142a:	21 15       	cp	r18, r1
    142c:	31 05       	cpc	r19, r1
    142e:	09 f1       	breq	.+66     	; 0x1472 <free+0xa2>
    1430:	d9 01       	movw	r26, r18
    1432:	f3 cf       	rjmp	.-26     	; 0x141a <free+0x4a>
    1434:	9d 01       	movw	r18, r26
    1436:	da 01       	movw	r26, r20
    1438:	33 83       	std	Z+3, r19	; 0x03
    143a:	22 83       	std	Z+2, r18	; 0x02
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	86 0f       	add	r24, r22
    1442:	97 1f       	adc	r25, r23
    1444:	82 17       	cp	r24, r18
    1446:	93 07       	cpc	r25, r19
    1448:	69 f4       	brne	.+26     	; 0x1464 <free+0x94>
    144a:	ec 01       	movw	r28, r24
    144c:	28 81       	ld	r18, Y
    144e:	39 81       	ldd	r19, Y+1	; 0x01
    1450:	26 0f       	add	r18, r22
    1452:	37 1f       	adc	r19, r23
    1454:	2e 5f       	subi	r18, 0xFE	; 254
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	31 83       	std	Z+1, r19	; 0x01
    145a:	20 83       	st	Z, r18
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	9b 81       	ldd	r25, Y+3	; 0x03
    1460:	93 83       	std	Z+3, r25	; 0x03
    1462:	82 83       	std	Z+2, r24	; 0x02
    1464:	45 2b       	or	r20, r21
    1466:	29 f4       	brne	.+10     	; 0x1472 <free+0xa2>
    1468:	f0 93 7c 04 	sts	0x047C, r31
    146c:	e0 93 7b 04 	sts	0x047B, r30
    1470:	42 c0       	rjmp	.+132    	; 0x14f6 <free+0x126>
    1472:	13 96       	adiw	r26, 0x03	; 3
    1474:	fc 93       	st	X, r31
    1476:	ee 93       	st	-X, r30
    1478:	12 97       	sbiw	r26, 0x02	; 2
    147a:	ed 01       	movw	r28, r26
    147c:	49 91       	ld	r20, Y+
    147e:	59 91       	ld	r21, Y+
    1480:	9e 01       	movw	r18, r28
    1482:	24 0f       	add	r18, r20
    1484:	35 1f       	adc	r19, r21
    1486:	e2 17       	cp	r30, r18
    1488:	f3 07       	cpc	r31, r19
    148a:	71 f4       	brne	.+28     	; 0x14a8 <free+0xd8>
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	84 0f       	add	r24, r20
    1492:	95 1f       	adc	r25, r21
    1494:	02 96       	adiw	r24, 0x02	; 2
    1496:	11 96       	adiw	r26, 0x01	; 1
    1498:	9c 93       	st	X, r25
    149a:	8e 93       	st	-X, r24
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	13 96       	adiw	r26, 0x03	; 3
    14a2:	9c 93       	st	X, r25
    14a4:	8e 93       	st	-X, r24
    14a6:	12 97       	sbiw	r26, 0x02	; 2
    14a8:	e0 e0       	ldi	r30, 0x00	; 0
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	d8 01       	movw	r26, r16
    14ae:	12 96       	adiw	r26, 0x02	; 2
    14b0:	8d 91       	ld	r24, X+
    14b2:	9c 91       	ld	r25, X
    14b4:	13 97       	sbiw	r26, 0x03	; 3
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <free+0xf0>
    14ba:	f8 01       	movw	r30, r16
    14bc:	8c 01       	movw	r16, r24
    14be:	f6 cf       	rjmp	.-20     	; 0x14ac <free+0xdc>
    14c0:	8d 91       	ld	r24, X+
    14c2:	9c 91       	ld	r25, X
    14c4:	98 01       	movw	r18, r16
    14c6:	2e 5f       	subi	r18, 0xFE	; 254
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	82 0f       	add	r24, r18
    14cc:	93 1f       	adc	r25, r19
    14ce:	20 91 79 04 	lds	r18, 0x0479
    14d2:	30 91 7a 04 	lds	r19, 0x047A
    14d6:	28 17       	cp	r18, r24
    14d8:	39 07       	cpc	r19, r25
    14da:	69 f4       	brne	.+26     	; 0x14f6 <free+0x126>
    14dc:	30 97       	sbiw	r30, 0x00	; 0
    14de:	29 f4       	brne	.+10     	; 0x14ea <free+0x11a>
    14e0:	10 92 7c 04 	sts	0x047C, r1
    14e4:	10 92 7b 04 	sts	0x047B, r1
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <free+0x11e>
    14ea:	13 82       	std	Z+3, r1	; 0x03
    14ec:	12 82       	std	Z+2, r1	; 0x02
    14ee:	10 93 7a 04 	sts	0x047A, r17
    14f2:	00 93 79 04 	sts	0x0479, r16
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret

00001500 <memcpy>:
    1500:	fb 01       	movw	r30, r22
    1502:	dc 01       	movw	r26, r24
    1504:	02 c0       	rjmp	.+4      	; 0x150a <memcpy+0xa>
    1506:	01 90       	ld	r0, Z+
    1508:	0d 92       	st	X+, r0
    150a:	41 50       	subi	r20, 0x01	; 1
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	d8 f7       	brcc	.-10     	; 0x1506 <memcpy+0x6>
    1510:	08 95       	ret

00001512 <sprintf>:
    1512:	ae e0       	ldi	r26, 0x0E	; 14
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ef e8       	ldi	r30, 0x8F	; 143
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__prologue_saves__+0x1c>
    151e:	0d 89       	ldd	r16, Y+21	; 0x15
    1520:	1e 89       	ldd	r17, Y+22	; 0x16
    1522:	86 e0       	ldi	r24, 0x06	; 6
    1524:	8c 83       	std	Y+4, r24	; 0x04
    1526:	1a 83       	std	Y+2, r17	; 0x02
    1528:	09 83       	std	Y+1, r16	; 0x01
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f e7       	ldi	r25, 0x7F	; 127
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	ae 01       	movw	r20, r28
    1534:	47 5e       	subi	r20, 0xE7	; 231
    1536:	5f 4f       	sbci	r21, 0xFF	; 255
    1538:	6f 89       	ldd	r22, Y+23	; 0x17
    153a:	78 8d       	ldd	r23, Y+24	; 0x18
    153c:	ce 01       	movw	r24, r28
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vfprintf>
    1544:	2f 81       	ldd	r18, Y+7	; 0x07
    1546:	38 85       	ldd	r19, Y+8	; 0x08
    1548:	f8 01       	movw	r30, r16
    154a:	e2 0f       	add	r30, r18
    154c:	f3 1f       	adc	r31, r19
    154e:	10 82       	st	Z, r1
    1550:	2e 96       	adiw	r28, 0x0e	; 14
    1552:	e4 e0       	ldi	r30, 0x04	; 4
    1554:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__epilogue_restores__+0x1c>

00001558 <vfprintf>:
    1558:	ac e0       	ldi	r26, 0x0C	; 12
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 eb       	ldi	r30, 0xB2	; 178
    155e:	fa e0       	ldi	r31, 0x0A	; 10
    1560:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__prologue_saves__>
    1564:	7c 01       	movw	r14, r24
    1566:	6b 01       	movw	r12, r22
    1568:	8a 01       	movw	r16, r20
    156a:	fc 01       	movw	r30, r24
    156c:	17 82       	std	Z+7, r1	; 0x07
    156e:	16 82       	std	Z+6, r1	; 0x06
    1570:	83 81       	ldd	r24, Z+3	; 0x03
    1572:	81 ff       	sbrs	r24, 1
    1574:	bd c1       	rjmp	.+890    	; 0x18f0 <vfprintf+0x398>
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	4c 01       	movw	r8, r24
    157c:	f7 01       	movw	r30, r14
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	f6 01       	movw	r30, r12
    1582:	93 fd       	sbrc	r25, 3
    1584:	85 91       	lpm	r24, Z+
    1586:	93 ff       	sbrs	r25, 3
    1588:	81 91       	ld	r24, Z+
    158a:	6f 01       	movw	r12, r30
    158c:	88 23       	and	r24, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <vfprintf+0x3a>
    1590:	ab c1       	rjmp	.+854    	; 0x18e8 <vfprintf+0x390>
    1592:	85 32       	cpi	r24, 0x25	; 37
    1594:	39 f4       	brne	.+14     	; 0x15a4 <vfprintf+0x4c>
    1596:	93 fd       	sbrc	r25, 3
    1598:	85 91       	lpm	r24, Z+
    159a:	93 ff       	sbrs	r25, 3
    159c:	81 91       	ld	r24, Z+
    159e:	6f 01       	movw	r12, r30
    15a0:	85 32       	cpi	r24, 0x25	; 37
    15a2:	29 f4       	brne	.+10     	; 0x15ae <vfprintf+0x56>
    15a4:	b7 01       	movw	r22, r14
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    15ac:	e7 cf       	rjmp	.-50     	; 0x157c <vfprintf+0x24>
    15ae:	51 2c       	mov	r5, r1
    15b0:	31 2c       	mov	r3, r1
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	20 32       	cpi	r18, 0x20	; 32
    15b6:	a0 f4       	brcc	.+40     	; 0x15e0 <vfprintf+0x88>
    15b8:	8b 32       	cpi	r24, 0x2B	; 43
    15ba:	69 f0       	breq	.+26     	; 0x15d6 <vfprintf+0x7e>
    15bc:	30 f4       	brcc	.+12     	; 0x15ca <vfprintf+0x72>
    15be:	80 32       	cpi	r24, 0x20	; 32
    15c0:	59 f0       	breq	.+22     	; 0x15d8 <vfprintf+0x80>
    15c2:	83 32       	cpi	r24, 0x23	; 35
    15c4:	69 f4       	brne	.+26     	; 0x15e0 <vfprintf+0x88>
    15c6:	20 61       	ori	r18, 0x10	; 16
    15c8:	2c c0       	rjmp	.+88     	; 0x1622 <vfprintf+0xca>
    15ca:	8d 32       	cpi	r24, 0x2D	; 45
    15cc:	39 f0       	breq	.+14     	; 0x15dc <vfprintf+0x84>
    15ce:	80 33       	cpi	r24, 0x30	; 48
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <vfprintf+0x88>
    15d2:	21 60       	ori	r18, 0x01	; 1
    15d4:	26 c0       	rjmp	.+76     	; 0x1622 <vfprintf+0xca>
    15d6:	22 60       	ori	r18, 0x02	; 2
    15d8:	24 60       	ori	r18, 0x04	; 4
    15da:	23 c0       	rjmp	.+70     	; 0x1622 <vfprintf+0xca>
    15dc:	28 60       	ori	r18, 0x08	; 8
    15de:	21 c0       	rjmp	.+66     	; 0x1622 <vfprintf+0xca>
    15e0:	27 fd       	sbrc	r18, 7
    15e2:	27 c0       	rjmp	.+78     	; 0x1632 <vfprintf+0xda>
    15e4:	30 ed       	ldi	r19, 0xD0	; 208
    15e6:	38 0f       	add	r19, r24
    15e8:	3a 30       	cpi	r19, 0x0A	; 10
    15ea:	78 f4       	brcc	.+30     	; 0x160a <vfprintf+0xb2>
    15ec:	26 ff       	sbrs	r18, 6
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <vfprintf+0xa4>
    15f0:	fa e0       	ldi	r31, 0x0A	; 10
    15f2:	5f 9e       	mul	r5, r31
    15f4:	30 0d       	add	r19, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	53 2e       	mov	r5, r19
    15fa:	13 c0       	rjmp	.+38     	; 0x1622 <vfprintf+0xca>
    15fc:	8a e0       	ldi	r24, 0x0A	; 10
    15fe:	38 9e       	mul	r3, r24
    1600:	30 0d       	add	r19, r0
    1602:	11 24       	eor	r1, r1
    1604:	33 2e       	mov	r3, r19
    1606:	20 62       	ori	r18, 0x20	; 32
    1608:	0c c0       	rjmp	.+24     	; 0x1622 <vfprintf+0xca>
    160a:	8e 32       	cpi	r24, 0x2E	; 46
    160c:	21 f4       	brne	.+8      	; 0x1616 <vfprintf+0xbe>
    160e:	26 fd       	sbrc	r18, 6
    1610:	6b c1       	rjmp	.+726    	; 0x18e8 <vfprintf+0x390>
    1612:	20 64       	ori	r18, 0x40	; 64
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <vfprintf+0xca>
    1616:	8c 36       	cpi	r24, 0x6C	; 108
    1618:	11 f4       	brne	.+4      	; 0x161e <vfprintf+0xc6>
    161a:	20 68       	ori	r18, 0x80	; 128
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0xca>
    161e:	88 36       	cpi	r24, 0x68	; 104
    1620:	41 f4       	brne	.+16     	; 0x1632 <vfprintf+0xda>
    1622:	f6 01       	movw	r30, r12
    1624:	93 fd       	sbrc	r25, 3
    1626:	85 91       	lpm	r24, Z+
    1628:	93 ff       	sbrs	r25, 3
    162a:	81 91       	ld	r24, Z+
    162c:	6f 01       	movw	r12, r30
    162e:	81 11       	cpse	r24, r1
    1630:	c1 cf       	rjmp	.-126    	; 0x15b4 <vfprintf+0x5c>
    1632:	98 2f       	mov	r25, r24
    1634:	9f 7d       	andi	r25, 0xDF	; 223
    1636:	95 54       	subi	r25, 0x45	; 69
    1638:	93 30       	cpi	r25, 0x03	; 3
    163a:	28 f4       	brcc	.+10     	; 0x1646 <vfprintf+0xee>
    163c:	0c 5f       	subi	r16, 0xFC	; 252
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	ff e3       	ldi	r31, 0x3F	; 63
    1642:	f9 83       	std	Y+1, r31	; 0x01
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <vfprintf+0x108>
    1646:	83 36       	cpi	r24, 0x63	; 99
    1648:	31 f0       	breq	.+12     	; 0x1656 <vfprintf+0xfe>
    164a:	83 37       	cpi	r24, 0x73	; 115
    164c:	71 f0       	breq	.+28     	; 0x166a <vfprintf+0x112>
    164e:	83 35       	cpi	r24, 0x53	; 83
    1650:	09 f0       	breq	.+2      	; 0x1654 <vfprintf+0xfc>
    1652:	5b c0       	rjmp	.+182    	; 0x170a <vfprintf+0x1b2>
    1654:	22 c0       	rjmp	.+68     	; 0x169a <vfprintf+0x142>
    1656:	f8 01       	movw	r30, r16
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0e 5f       	subi	r16, 0xFE	; 254
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	44 24       	eor	r4, r4
    1662:	43 94       	inc	r4
    1664:	51 2c       	mov	r5, r1
    1666:	54 01       	movw	r10, r8
    1668:	15 c0       	rjmp	.+42     	; 0x1694 <vfprintf+0x13c>
    166a:	38 01       	movw	r6, r16
    166c:	f2 e0       	ldi	r31, 0x02	; 2
    166e:	6f 0e       	add	r6, r31
    1670:	71 1c       	adc	r7, r1
    1672:	f8 01       	movw	r30, r16
    1674:	a0 80       	ld	r10, Z
    1676:	b1 80       	ldd	r11, Z+1	; 0x01
    1678:	26 ff       	sbrs	r18, 6
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <vfprintf+0x12a>
    167c:	65 2d       	mov	r22, r5
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x12e>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	c5 01       	movw	r24, r10
    1688:	2c 87       	std	Y+12, r18	; 0x0c
    168a:	0e 94 89 0c 	call	0x1912	; 0x1912 <strnlen>
    168e:	2c 01       	movw	r4, r24
    1690:	83 01       	movw	r16, r6
    1692:	2c 85       	ldd	r18, Y+12	; 0x0c
    1694:	2f 77       	andi	r18, 0x7F	; 127
    1696:	22 2e       	mov	r2, r18
    1698:	17 c0       	rjmp	.+46     	; 0x16c8 <vfprintf+0x170>
    169a:	38 01       	movw	r6, r16
    169c:	f2 e0       	ldi	r31, 0x02	; 2
    169e:	6f 0e       	add	r6, r31
    16a0:	71 1c       	adc	r7, r1
    16a2:	f8 01       	movw	r30, r16
    16a4:	a0 80       	ld	r10, Z
    16a6:	b1 80       	ldd	r11, Z+1	; 0x01
    16a8:	26 ff       	sbrs	r18, 6
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <vfprintf+0x15a>
    16ac:	65 2d       	mov	r22, r5
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <vfprintf+0x15e>
    16b2:	6f ef       	ldi	r22, 0xFF	; 255
    16b4:	7f ef       	ldi	r23, 0xFF	; 255
    16b6:	c5 01       	movw	r24, r10
    16b8:	2c 87       	std	Y+12, r18	; 0x0c
    16ba:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <strnlen_P>
    16be:	2c 01       	movw	r4, r24
    16c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c2:	20 68       	ori	r18, 0x80	; 128
    16c4:	22 2e       	mov	r2, r18
    16c6:	83 01       	movw	r16, r6
    16c8:	23 fc       	sbrc	r2, 3
    16ca:	1b c0       	rjmp	.+54     	; 0x1702 <vfprintf+0x1aa>
    16cc:	83 2d       	mov	r24, r3
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	48 16       	cp	r4, r24
    16d2:	59 06       	cpc	r5, r25
    16d4:	b0 f4       	brcc	.+44     	; 0x1702 <vfprintf+0x1aa>
    16d6:	b7 01       	movw	r22, r14
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    16e0:	3a 94       	dec	r3
    16e2:	f4 cf       	rjmp	.-24     	; 0x16cc <vfprintf+0x174>
    16e4:	f5 01       	movw	r30, r10
    16e6:	27 fc       	sbrc	r2, 7
    16e8:	85 91       	lpm	r24, Z+
    16ea:	27 fe       	sbrs	r2, 7
    16ec:	81 91       	ld	r24, Z+
    16ee:	5f 01       	movw	r10, r30
    16f0:	b7 01       	movw	r22, r14
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    16f8:	31 10       	cpse	r3, r1
    16fa:	3a 94       	dec	r3
    16fc:	f1 e0       	ldi	r31, 0x01	; 1
    16fe:	4f 1a       	sub	r4, r31
    1700:	51 08       	sbc	r5, r1
    1702:	41 14       	cp	r4, r1
    1704:	51 04       	cpc	r5, r1
    1706:	71 f7       	brne	.-36     	; 0x16e4 <vfprintf+0x18c>
    1708:	e5 c0       	rjmp	.+458    	; 0x18d4 <vfprintf+0x37c>
    170a:	84 36       	cpi	r24, 0x64	; 100
    170c:	11 f0       	breq	.+4      	; 0x1712 <vfprintf+0x1ba>
    170e:	89 36       	cpi	r24, 0x69	; 105
    1710:	39 f5       	brne	.+78     	; 0x1760 <vfprintf+0x208>
    1712:	f8 01       	movw	r30, r16
    1714:	27 ff       	sbrs	r18, 7
    1716:	07 c0       	rjmp	.+14     	; 0x1726 <vfprintf+0x1ce>
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	0c 5f       	subi	r16, 0xFC	; 252
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	08 c0       	rjmp	.+16     	; 0x1736 <vfprintf+0x1de>
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	07 2e       	mov	r0, r23
    172c:	00 0c       	add	r0, r0
    172e:	88 0b       	sbc	r24, r24
    1730:	99 0b       	sbc	r25, r25
    1732:	0e 5f       	subi	r16, 0xFE	; 254
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	2f 76       	andi	r18, 0x6F	; 111
    1738:	72 2e       	mov	r7, r18
    173a:	97 ff       	sbrs	r25, 7
    173c:	09 c0       	rjmp	.+18     	; 0x1750 <vfprintf+0x1f8>
    173e:	90 95       	com	r25
    1740:	80 95       	com	r24
    1742:	70 95       	com	r23
    1744:	61 95       	neg	r22
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	20 68       	ori	r18, 0x80	; 128
    174e:	72 2e       	mov	r7, r18
    1750:	2a e0       	ldi	r18, 0x0A	; 10
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	a4 01       	movw	r20, r8
    1756:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__ultoa_invert>
    175a:	a8 2e       	mov	r10, r24
    175c:	a8 18       	sub	r10, r8
    175e:	44 c0       	rjmp	.+136    	; 0x17e8 <vfprintf+0x290>
    1760:	85 37       	cpi	r24, 0x75	; 117
    1762:	29 f4       	brne	.+10     	; 0x176e <vfprintf+0x216>
    1764:	2f 7e       	andi	r18, 0xEF	; 239
    1766:	b2 2e       	mov	r11, r18
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	25 c0       	rjmp	.+74     	; 0x17b8 <vfprintf+0x260>
    176e:	f2 2f       	mov	r31, r18
    1770:	f9 7f       	andi	r31, 0xF9	; 249
    1772:	bf 2e       	mov	r11, r31
    1774:	8f 36       	cpi	r24, 0x6F	; 111
    1776:	c1 f0       	breq	.+48     	; 0x17a8 <vfprintf+0x250>
    1778:	18 f4       	brcc	.+6      	; 0x1780 <vfprintf+0x228>
    177a:	88 35       	cpi	r24, 0x58	; 88
    177c:	79 f0       	breq	.+30     	; 0x179c <vfprintf+0x244>
    177e:	b4 c0       	rjmp	.+360    	; 0x18e8 <vfprintf+0x390>
    1780:	80 37       	cpi	r24, 0x70	; 112
    1782:	19 f0       	breq	.+6      	; 0x178a <vfprintf+0x232>
    1784:	88 37       	cpi	r24, 0x78	; 120
    1786:	21 f0       	breq	.+8      	; 0x1790 <vfprintf+0x238>
    1788:	af c0       	rjmp	.+350    	; 0x18e8 <vfprintf+0x390>
    178a:	2f 2f       	mov	r18, r31
    178c:	20 61       	ori	r18, 0x10	; 16
    178e:	b2 2e       	mov	r11, r18
    1790:	b4 fe       	sbrs	r11, 4
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x256>
    1794:	8b 2d       	mov	r24, r11
    1796:	84 60       	ori	r24, 0x04	; 4
    1798:	b8 2e       	mov	r11, r24
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <vfprintf+0x256>
    179c:	24 ff       	sbrs	r18, 4
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <vfprintf+0x25c>
    17a0:	9f 2f       	mov	r25, r31
    17a2:	96 60       	ori	r25, 0x06	; 6
    17a4:	b9 2e       	mov	r11, r25
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x25c>
    17a8:	28 e0       	ldi	r18, 0x08	; 8
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x260>
    17ae:	20 e1       	ldi	r18, 0x10	; 16
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x260>
    17b4:	20 e1       	ldi	r18, 0x10	; 16
    17b6:	32 e0       	ldi	r19, 0x02	; 2
    17b8:	f8 01       	movw	r30, r16
    17ba:	b7 fe       	sbrs	r11, 7
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <vfprintf+0x274>
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0c 5f       	subi	r16, 0xFC	; 252
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <vfprintf+0x280>
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 5f       	subi	r16, 0xFE	; 254
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	a4 01       	movw	r20, r8
    17da:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__ultoa_invert>
    17de:	a8 2e       	mov	r10, r24
    17e0:	a8 18       	sub	r10, r8
    17e2:	fb 2d       	mov	r31, r11
    17e4:	ff 77       	andi	r31, 0x7F	; 127
    17e6:	7f 2e       	mov	r7, r31
    17e8:	76 fe       	sbrs	r7, 6
    17ea:	0b c0       	rjmp	.+22     	; 0x1802 <vfprintf+0x2aa>
    17ec:	37 2d       	mov	r19, r7
    17ee:	3e 7f       	andi	r19, 0xFE	; 254
    17f0:	a5 14       	cp	r10, r5
    17f2:	50 f4       	brcc	.+20     	; 0x1808 <vfprintf+0x2b0>
    17f4:	74 fe       	sbrs	r7, 4
    17f6:	0a c0       	rjmp	.+20     	; 0x180c <vfprintf+0x2b4>
    17f8:	72 fc       	sbrc	r7, 2
    17fa:	08 c0       	rjmp	.+16     	; 0x180c <vfprintf+0x2b4>
    17fc:	37 2d       	mov	r19, r7
    17fe:	3e 7e       	andi	r19, 0xEE	; 238
    1800:	05 c0       	rjmp	.+10     	; 0x180c <vfprintf+0x2b4>
    1802:	ba 2c       	mov	r11, r10
    1804:	37 2d       	mov	r19, r7
    1806:	03 c0       	rjmp	.+6      	; 0x180e <vfprintf+0x2b6>
    1808:	ba 2c       	mov	r11, r10
    180a:	01 c0       	rjmp	.+2      	; 0x180e <vfprintf+0x2b6>
    180c:	b5 2c       	mov	r11, r5
    180e:	34 ff       	sbrs	r19, 4
    1810:	0d c0       	rjmp	.+26     	; 0x182c <vfprintf+0x2d4>
    1812:	fe 01       	movw	r30, r28
    1814:	ea 0d       	add	r30, r10
    1816:	f1 1d       	adc	r31, r1
    1818:	80 81       	ld	r24, Z
    181a:	80 33       	cpi	r24, 0x30	; 48
    181c:	11 f4       	brne	.+4      	; 0x1822 <vfprintf+0x2ca>
    181e:	39 7e       	andi	r19, 0xE9	; 233
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <vfprintf+0x2dc>
    1822:	32 ff       	sbrs	r19, 2
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <vfprintf+0x2da>
    1826:	b3 94       	inc	r11
    1828:	b3 94       	inc	r11
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <vfprintf+0x2dc>
    182c:	83 2f       	mov	r24, r19
    182e:	86 78       	andi	r24, 0x86	; 134
    1830:	09 f0       	breq	.+2      	; 0x1834 <vfprintf+0x2dc>
    1832:	b3 94       	inc	r11
    1834:	33 fd       	sbrc	r19, 3
    1836:	13 c0       	rjmp	.+38     	; 0x185e <vfprintf+0x306>
    1838:	30 ff       	sbrs	r19, 0
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <vfprintf+0x2f0>
    183c:	5a 2c       	mov	r5, r10
    183e:	b3 14       	cp	r11, r3
    1840:	18 f4       	brcc	.+6      	; 0x1848 <vfprintf+0x2f0>
    1842:	53 0c       	add	r5, r3
    1844:	5b 18       	sub	r5, r11
    1846:	b3 2c       	mov	r11, r3
    1848:	b3 14       	cp	r11, r3
    184a:	68 f4       	brcc	.+26     	; 0x1866 <vfprintf+0x30e>
    184c:	b7 01       	movw	r22, r14
    184e:	80 e2       	ldi	r24, 0x20	; 32
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	3c 87       	std	Y+12, r19	; 0x0c
    1854:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    1858:	b3 94       	inc	r11
    185a:	3c 85       	ldd	r19, Y+12	; 0x0c
    185c:	f5 cf       	rjmp	.-22     	; 0x1848 <vfprintf+0x2f0>
    185e:	b3 14       	cp	r11, r3
    1860:	10 f4       	brcc	.+4      	; 0x1866 <vfprintf+0x30e>
    1862:	3b 18       	sub	r3, r11
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <vfprintf+0x310>
    1866:	31 2c       	mov	r3, r1
    1868:	34 ff       	sbrs	r19, 4
    186a:	12 c0       	rjmp	.+36     	; 0x1890 <vfprintf+0x338>
    186c:	b7 01       	movw	r22, r14
    186e:	80 e3       	ldi	r24, 0x30	; 48
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	3c 87       	std	Y+12, r19	; 0x0c
    1874:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    1878:	3c 85       	ldd	r19, Y+12	; 0x0c
    187a:	32 ff       	sbrs	r19, 2
    187c:	17 c0       	rjmp	.+46     	; 0x18ac <vfprintf+0x354>
    187e:	31 fd       	sbrc	r19, 1
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <vfprintf+0x330>
    1882:	88 e7       	ldi	r24, 0x78	; 120
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x334>
    1888:	88 e5       	ldi	r24, 0x58	; 88
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	b7 01       	movw	r22, r14
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <vfprintf+0x350>
    1890:	83 2f       	mov	r24, r19
    1892:	86 78       	andi	r24, 0x86	; 134
    1894:	59 f0       	breq	.+22     	; 0x18ac <vfprintf+0x354>
    1896:	31 ff       	sbrs	r19, 1
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x346>
    189a:	8b e2       	ldi	r24, 0x2B	; 43
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x348>
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	37 fd       	sbrc	r19, 7
    18a2:	8d e2       	ldi	r24, 0x2D	; 45
    18a4:	b7 01       	movw	r22, r14
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    18ac:	a5 14       	cp	r10, r5
    18ae:	38 f4       	brcc	.+14     	; 0x18be <vfprintf+0x366>
    18b0:	b7 01       	movw	r22, r14
    18b2:	80 e3       	ldi	r24, 0x30	; 48
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    18ba:	5a 94       	dec	r5
    18bc:	f7 cf       	rjmp	.-18     	; 0x18ac <vfprintf+0x354>
    18be:	aa 94       	dec	r10
    18c0:	f4 01       	movw	r30, r8
    18c2:	ea 0d       	add	r30, r10
    18c4:	f1 1d       	adc	r31, r1
    18c6:	80 81       	ld	r24, Z
    18c8:	b7 01       	movw	r22, r14
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    18d0:	a1 10       	cpse	r10, r1
    18d2:	f5 cf       	rjmp	.-22     	; 0x18be <vfprintf+0x366>
    18d4:	33 20       	and	r3, r3
    18d6:	09 f4       	brne	.+2      	; 0x18da <vfprintf+0x382>
    18d8:	51 ce       	rjmp	.-862    	; 0x157c <vfprintf+0x24>
    18da:	b7 01       	movw	r22, r14
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 94 0c 	call	0x1928	; 0x1928 <fputc>
    18e4:	3a 94       	dec	r3
    18e6:	f6 cf       	rjmp	.-20     	; 0x18d4 <vfprintf+0x37c>
    18e8:	f7 01       	movw	r30, r14
    18ea:	86 81       	ldd	r24, Z+6	; 0x06
    18ec:	97 81       	ldd	r25, Z+7	; 0x07
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <vfprintf+0x39c>
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	9f ef       	ldi	r25, 0xFF	; 255
    18f4:	2c 96       	adiw	r28, 0x0c	; 12
    18f6:	e2 e1       	ldi	r30, 0x12	; 18
    18f8:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__epilogue_restores__>

000018fc <strnlen_P>:
    18fc:	fc 01       	movw	r30, r24
    18fe:	05 90       	lpm	r0, Z+
    1900:	61 50       	subi	r22, 0x01	; 1
    1902:	70 40       	sbci	r23, 0x00	; 0
    1904:	01 10       	cpse	r0, r1
    1906:	d8 f7       	brcc	.-10     	; 0x18fe <strnlen_P+0x2>
    1908:	80 95       	com	r24
    190a:	90 95       	com	r25
    190c:	8e 0f       	add	r24, r30
    190e:	9f 1f       	adc	r25, r31
    1910:	08 95       	ret

00001912 <strnlen>:
    1912:	fc 01       	movw	r30, r24
    1914:	61 50       	subi	r22, 0x01	; 1
    1916:	70 40       	sbci	r23, 0x00	; 0
    1918:	01 90       	ld	r0, Z+
    191a:	01 10       	cpse	r0, r1
    191c:	d8 f7       	brcc	.-10     	; 0x1914 <strnlen+0x2>
    191e:	80 95       	com	r24
    1920:	90 95       	com	r25
    1922:	8e 0f       	add	r24, r30
    1924:	9f 1f       	adc	r25, r31
    1926:	08 95       	ret

00001928 <fputc>:
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	fb 01       	movw	r30, r22
    1932:	23 81       	ldd	r18, Z+3	; 0x03
    1934:	21 fd       	sbrc	r18, 1
    1936:	03 c0       	rjmp	.+6      	; 0x193e <fputc+0x16>
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	9f ef       	ldi	r25, 0xFF	; 255
    193c:	28 c0       	rjmp	.+80     	; 0x198e <fputc+0x66>
    193e:	22 ff       	sbrs	r18, 2
    1940:	16 c0       	rjmp	.+44     	; 0x196e <fputc+0x46>
    1942:	46 81       	ldd	r20, Z+6	; 0x06
    1944:	57 81       	ldd	r21, Z+7	; 0x07
    1946:	24 81       	ldd	r18, Z+4	; 0x04
    1948:	35 81       	ldd	r19, Z+5	; 0x05
    194a:	42 17       	cp	r20, r18
    194c:	53 07       	cpc	r21, r19
    194e:	44 f4       	brge	.+16     	; 0x1960 <fputc+0x38>
    1950:	a0 81       	ld	r26, Z
    1952:	b1 81       	ldd	r27, Z+1	; 0x01
    1954:	9d 01       	movw	r18, r26
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	31 83       	std	Z+1, r19	; 0x01
    195c:	20 83       	st	Z, r18
    195e:	8c 93       	st	X, r24
    1960:	26 81       	ldd	r18, Z+6	; 0x06
    1962:	37 81       	ldd	r19, Z+7	; 0x07
    1964:	2f 5f       	subi	r18, 0xFF	; 255
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	37 83       	std	Z+7, r19	; 0x07
    196a:	26 83       	std	Z+6, r18	; 0x06
    196c:	10 c0       	rjmp	.+32     	; 0x198e <fputc+0x66>
    196e:	eb 01       	movw	r28, r22
    1970:	09 2f       	mov	r16, r25
    1972:	18 2f       	mov	r17, r24
    1974:	00 84       	ldd	r0, Z+8	; 0x08
    1976:	f1 85       	ldd	r31, Z+9	; 0x09
    1978:	e0 2d       	mov	r30, r0
    197a:	09 95       	icall
    197c:	89 2b       	or	r24, r25
    197e:	e1 f6       	brne	.-72     	; 0x1938 <fputc+0x10>
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	9f 83       	std	Y+7, r25	; 0x07
    1988:	8e 83       	std	Y+6, r24	; 0x06
    198a:	81 2f       	mov	r24, r17
    198c:	90 2f       	mov	r25, r16
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	08 95       	ret

00001998 <__ultoa_invert>:
    1998:	fa 01       	movw	r30, r20
    199a:	aa 27       	eor	r26, r26
    199c:	28 30       	cpi	r18, 0x08	; 8
    199e:	51 f1       	breq	.+84     	; 0x19f4 <__ultoa_invert+0x5c>
    19a0:	20 31       	cpi	r18, 0x10	; 16
    19a2:	81 f1       	breq	.+96     	; 0x1a04 <__ultoa_invert+0x6c>
    19a4:	e8 94       	clt
    19a6:	6f 93       	push	r22
    19a8:	6e 7f       	andi	r22, 0xFE	; 254
    19aa:	6e 5f       	subi	r22, 0xFE	; 254
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	8f 4f       	sbci	r24, 0xFF	; 255
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	af 4f       	sbci	r26, 0xFF	; 255
    19b4:	b1 e0       	ldi	r27, 0x01	; 1
    19b6:	3e d0       	rcall	.+124    	; 0x1a34 <__ultoa_invert+0x9c>
    19b8:	b4 e0       	ldi	r27, 0x04	; 4
    19ba:	3c d0       	rcall	.+120    	; 0x1a34 <__ultoa_invert+0x9c>
    19bc:	67 0f       	add	r22, r23
    19be:	78 1f       	adc	r23, r24
    19c0:	89 1f       	adc	r24, r25
    19c2:	9a 1f       	adc	r25, r26
    19c4:	a1 1d       	adc	r26, r1
    19c6:	68 0f       	add	r22, r24
    19c8:	79 1f       	adc	r23, r25
    19ca:	8a 1f       	adc	r24, r26
    19cc:	91 1d       	adc	r25, r1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	6a 0f       	add	r22, r26
    19d2:	71 1d       	adc	r23, r1
    19d4:	81 1d       	adc	r24, r1
    19d6:	91 1d       	adc	r25, r1
    19d8:	a1 1d       	adc	r26, r1
    19da:	20 d0       	rcall	.+64     	; 0x1a1c <__ultoa_invert+0x84>
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <__ultoa_invert+0x48>
    19de:	68 94       	set
    19e0:	3f 91       	pop	r19
    19e2:	2a e0       	ldi	r18, 0x0A	; 10
    19e4:	26 9f       	mul	r18, r22
    19e6:	11 24       	eor	r1, r1
    19e8:	30 19       	sub	r19, r0
    19ea:	30 5d       	subi	r19, 0xD0	; 208
    19ec:	31 93       	st	Z+, r19
    19ee:	de f6       	brtc	.-74     	; 0x19a6 <__ultoa_invert+0xe>
    19f0:	cf 01       	movw	r24, r30
    19f2:	08 95       	ret
    19f4:	46 2f       	mov	r20, r22
    19f6:	47 70       	andi	r20, 0x07	; 7
    19f8:	40 5d       	subi	r20, 0xD0	; 208
    19fa:	41 93       	st	Z+, r20
    19fc:	b3 e0       	ldi	r27, 0x03	; 3
    19fe:	0f d0       	rcall	.+30     	; 0x1a1e <__ultoa_invert+0x86>
    1a00:	c9 f7       	brne	.-14     	; 0x19f4 <__ultoa_invert+0x5c>
    1a02:	f6 cf       	rjmp	.-20     	; 0x19f0 <__ultoa_invert+0x58>
    1a04:	46 2f       	mov	r20, r22
    1a06:	4f 70       	andi	r20, 0x0F	; 15
    1a08:	40 5d       	subi	r20, 0xD0	; 208
    1a0a:	4a 33       	cpi	r20, 0x3A	; 58
    1a0c:	18 f0       	brcs	.+6      	; 0x1a14 <__ultoa_invert+0x7c>
    1a0e:	49 5d       	subi	r20, 0xD9	; 217
    1a10:	31 fd       	sbrc	r19, 1
    1a12:	40 52       	subi	r20, 0x20	; 32
    1a14:	41 93       	st	Z+, r20
    1a16:	02 d0       	rcall	.+4      	; 0x1a1c <__ultoa_invert+0x84>
    1a18:	a9 f7       	brne	.-22     	; 0x1a04 <__ultoa_invert+0x6c>
    1a1a:	ea cf       	rjmp	.-44     	; 0x19f0 <__ultoa_invert+0x58>
    1a1c:	b4 e0       	ldi	r27, 0x04	; 4
    1a1e:	a6 95       	lsr	r26
    1a20:	97 95       	ror	r25
    1a22:	87 95       	ror	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	ba 95       	dec	r27
    1a2a:	c9 f7       	brne	.-14     	; 0x1a1e <__ultoa_invert+0x86>
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	61 05       	cpc	r22, r1
    1a30:	71 05       	cpc	r23, r1
    1a32:	08 95       	ret
    1a34:	9b 01       	movw	r18, r22
    1a36:	ac 01       	movw	r20, r24
    1a38:	0a 2e       	mov	r0, r26
    1a3a:	06 94       	lsr	r0
    1a3c:	57 95       	ror	r21
    1a3e:	47 95       	ror	r20
    1a40:	37 95       	ror	r19
    1a42:	27 95       	ror	r18
    1a44:	ba 95       	dec	r27
    1a46:	c9 f7       	brne	.-14     	; 0x1a3a <__ultoa_invert+0xa2>
    1a48:	62 0f       	add	r22, r18
    1a4a:	73 1f       	adc	r23, r19
    1a4c:	84 1f       	adc	r24, r20
    1a4e:	95 1f       	adc	r25, r21
    1a50:	a0 1d       	adc	r26, r0
    1a52:	08 95       	ret

00001a54 <__prologue_saves__>:
    1a54:	2f 92       	push	r2
    1a56:	3f 92       	push	r3
    1a58:	4f 92       	push	r4
    1a5a:	5f 92       	push	r5
    1a5c:	6f 92       	push	r6
    1a5e:	7f 92       	push	r7
    1a60:	8f 92       	push	r8
    1a62:	9f 92       	push	r9
    1a64:	af 92       	push	r10
    1a66:	bf 92       	push	r11
    1a68:	cf 92       	push	r12
    1a6a:	df 92       	push	r13
    1a6c:	ef 92       	push	r14
    1a6e:	ff 92       	push	r15
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	ca 1b       	sub	r28, r26
    1a7e:	db 0b       	sbc	r29, r27
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	09 94       	ijmp

00001a8c <__epilogue_restores__>:
    1a8c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a8e:	39 88       	ldd	r3, Y+17	; 0x11
    1a90:	48 88       	ldd	r4, Y+16	; 0x10
    1a92:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a94:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a96:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a98:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a9e:	b9 84       	ldd	r11, Y+9	; 0x09
    1aa0:	c8 84       	ldd	r12, Y+8	; 0x08
    1aa2:	df 80       	ldd	r13, Y+7	; 0x07
    1aa4:	ee 80       	ldd	r14, Y+6	; 0x06
    1aa6:	fd 80       	ldd	r15, Y+5	; 0x05
    1aa8:	0c 81       	ldd	r16, Y+4	; 0x04
    1aaa:	1b 81       	ldd	r17, Y+3	; 0x03
    1aac:	aa 81       	ldd	r26, Y+2	; 0x02
    1aae:	b9 81       	ldd	r27, Y+1	; 0x01
    1ab0:	ce 0f       	add	r28, r30
    1ab2:	d1 1d       	adc	r29, r1
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	ed 01       	movw	r28, r26
    1ac0:	08 95       	ret

00001ac2 <__do_global_dtors>:
    1ac2:	10 e0       	ldi	r17, 0x00	; 0
    1ac4:	cc e8       	ldi	r28, 0x8C	; 140
    1ac6:	d0 e0       	ldi	r29, 0x00	; 0
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__do_global_dtors+0x10>
    1aca:	fe 01       	movw	r30, r28
    1acc:	0e 94 33 09 	call	0x1266	; 0x1266 <__tablejump2__>
    1ad0:	21 96       	adiw	r28, 0x01	; 1
    1ad2:	cd 38       	cpi	r28, 0x8D	; 141
    1ad4:	d1 07       	cpc	r29, r17
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <__do_global_dtors+0x8>
    1ad8:	f8 94       	cli

00001ada <__stop_program>:
    1ada:	ff cf       	rjmp	.-2      	; 0x1ada <__stop_program>
