
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  00800140  00800140  00001152  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015c8  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057a  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000431  00000000  00000000  00002dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000031fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098f  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079c  00000000  00000000  00003d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000044df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_18>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_20>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_21>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	1d 03       	fmul	r17, r21

0000006a <__ctors_end>:
      6a:	d8 03       	fmulsu	r21, r16

0000006c <__dtors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	ee e7       	ldi	r30, 0x7E	; 126
      80:	f0 e1       	ldi	r31, 0x10	; 16
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	a0 34       	cpi	r26, 0x40	; 64
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	21 e0       	ldi	r18, 0x01	; 1
      90:	a0 e4       	ldi	r26, 0x40	; 64
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a8 3f       	cpi	r26, 0xF8	; 248
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c5 e3       	ldi	r28, 0x35	; 53
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 27 04 	call	0x84e	; 0x84e <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 18 01 	call	0x230	; 0x230 <main>
      b8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__do_global_dtors>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
      c0:	08 95       	ret

000000c2 <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
      c2:	08 95       	ret

000000c4 <_ZN6opbots5InputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
      c4:	0e 94 c2 04 	call	0x984	; 0x984 <free>
      c8:	08 95       	ret

000000ca <_ZN6opbots6OutputD0Ev>:
      ca:	0e 94 c2 04 	call	0x984	; 0x984 <free>
      ce:	08 95       	ret

000000d0 <__vector_21>:
volatile uint8_t Serial::rx_index(0), Serial::rx_head(0), Serial::chars_unread(0);
} /* end of namespace opbots */

using namespace opbots;

ISR(ADC_vect) {
      d0:	1f 92       	push	r1
      d2:	0f 92       	push	r0
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	0f 92       	push	r0
      d8:	11 24       	eor	r1, r1
      da:	8f 93       	push	r24
	cli();
      dc:	f8 94       	cli
	Analog::analogLow = ADCL;
      de:	80 91 78 00 	lds	r24, 0x0078
      e2:	80 93 f1 01 	sts	0x01F1, r24
	Analog::analogHigh = ADCH;
      e6:	80 91 79 00 	lds	r24, 0x0079
      ea:	80 93 f2 01 	sts	0x01F2, r24
	Analog::newValue = true;
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 93 f3 01 	sts	0x01F3, r24
	sei();
      f4:	78 94       	sei
};
      f6:	8f 91       	pop	r24
      f8:	0f 90       	pop	r0
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	0f 90       	pop	r0
      fe:	1f 90       	pop	r1
     100:	18 95       	reti

00000102 <__vector_20>:

ISR(USART_TX_vect) {
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	8f 93       	push	r24
     10e:	9f 93       	push	r25
     110:	ef 93       	push	r30
     112:	ff 93       	push	r31
	cli();
     114:	f8 94       	cli
	if (Serial::chars_left > 0) {
     116:	80 91 ce 01 	lds	r24, 0x01CE
     11a:	88 23       	and	r24, r24
     11c:	d9 f0       	breq	.+54     	; 0x154 <__vector_20+0x52>
		UDR0 = Serial::transmitting[Serial::tx_head];
     11e:	e0 91 cf 01 	lds	r30, 0x01CF
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	ef 51       	subi	r30, 0x1F	; 31
     126:	fe 4f       	sbci	r31, 0xFE	; 254
     128:	80 81       	ld	r24, Z
     12a:	80 93 c6 00 	sts	0x00C6, r24
		Serial::tx_head = (Serial::tx_head + 1) % TX_BUFFER_SIZE;
     12e:	80 91 cf 01 	lds	r24, 0x01CF
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	8f 70       	andi	r24, 0x0F	; 15
     138:	90 78       	andi	r25, 0x80	; 128
     13a:	99 23       	and	r25, r25
     13c:	24 f4       	brge	.+8      	; 0x146 <__vector_20+0x44>
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	80 6f       	ori	r24, 0xF0	; 240
     142:	9f 6f       	ori	r25, 0xFF	; 255
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	80 93 cf 01 	sts	0x01CF, r24
		Serial::chars_left--;
     14a:	80 91 ce 01 	lds	r24, 0x01CE
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	80 93 ce 01 	sts	0x01CE, r24
	}
	sei();
     154:	78 94       	sei
};
     156:	ff 91       	pop	r31
     158:	ef 91       	pop	r30
     15a:	9f 91       	pop	r25
     15c:	8f 91       	pop	r24
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <__vector_18>:

ISR(USART_RX_vect) {
     168:	1f 92       	push	r1
     16a:	0f 92       	push	r0
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	11 24       	eor	r1, r1
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
	cli();
     17a:	f8 94       	cli
	UCSR0A &= ~_BV(RXC0); // clear flag
     17c:	e0 ec       	ldi	r30, 0xC0	; 192
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	8f 77       	andi	r24, 0x7F	; 127
     184:	80 83       	st	Z, r24
	Serial::receiving[Serial::rx_index] = UDR0;
     186:	e0 91 cd 01 	lds	r30, 0x01CD
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 91 c6 00 	lds	r24, 0x00C6
     190:	ef 52       	subi	r30, 0x2F	; 47
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	80 83       	st	Z, r24
	Serial::rx_index = (Serial::rx_index + 1) % RX_BUFFER_SIZE;
     196:	80 91 cd 01 	lds	r24, 0x01CD
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	8f 70       	andi	r24, 0x0F	; 15
     1a0:	90 78       	andi	r25, 0x80	; 128
     1a2:	99 23       	and	r25, r25
     1a4:	24 f4       	brge	.+8      	; 0x1ae <__vector_18+0x46>
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	80 6f       	ori	r24, 0xF0	; 240
     1aa:	9f 6f       	ori	r25, 0xFF	; 255
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	80 93 cd 01 	sts	0x01CD, r24
	Serial::chars_unread++;
     1b2:	80 91 cc 01 	lds	r24, 0x01CC
     1b6:	8f 5f       	subi	r24, 0xFF	; 255
     1b8:	80 93 cc 01 	sts	0x01CC, r24
	sei();
     1bc:	78 94       	sei
};
     1be:	ff 91       	pop	r31
     1c0:	ef 91       	pop	r30
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	0f 90       	pop	r0
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	0f 90       	pop	r0
     1cc:	1f 90       	pop	r1
     1ce:	18 95       	reti

000001d0 <_Z15startup_routinei>:
Input current_pin(&PORTC, PIN7); // 0.2 V per amp
Input voltage_pin(&PORTC, PIN6); // 0.2 V per volt

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	ac 01       	movw	r20, r24
     1da:	0c e7       	ldi	r16, 0x7C	; 124
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	65 e8       	ldi	r22, 0x85	; 133
     1e0:	71 e0       	ldi	r23, 0x01	; 1
	while (--loops >= 0) {
     1e2:	1b c0       	rjmp	.+54     	; 0x21a <_Z15startup_routinei+0x4a>
	NULL_POINTER=1,
	OVER_VOLTAGE=2,
	OVER_CURRENT=3
};
	
class GPIO {
     1e4:	12 96       	adiw	r26, 0x02	; 2
     1e6:	ed 91       	ld	r30, X+
     1e8:	fc 91       	ld	r31, X
     1ea:	13 97       	sbiw	r26, 0x03	; 3
     1ec:	98 81       	ld	r25, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     1ee:	20 81       	ld	r18, Z
     1f0:	29 2b       	or	r18, r25
     1f2:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	2f ef       	ldi	r18, 0xFF	; 255
     1f6:	30 e7       	ldi	r19, 0x70	; 112
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	30 40       	sbci	r19, 0x00	; 0
     1fe:	80 40       	sbci	r24, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <_Z15startup_routinei+0x2a>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_Z15startup_routinei+0x34>
     204:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
     206:	20 81       	ld	r18, Z
     208:	90 95       	com	r25
     20a:	92 23       	and	r25, r18
     20c:	90 83       	st	Z, r25
     20e:	1a 96       	adiw	r26, 0x0a	; 10
     210:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	a2 3c       	cpi	r26, 0xC2	; 194
     216:	b2 07       	cpc	r27, r18
     218:	29 f7       	brne	.-54     	; 0x1e4 <_Z15startup_routinei+0x14>
Input voltage_pin(&PORTC, PIN6); // 0.2 V per volt

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
	while (--loops >= 0) {
     21a:	41 50       	subi	r20, 0x01	; 1
     21c:	51 09       	sbc	r21, r1
     21e:	1a f0       	brmi	.+6      	; 0x226 <_Z15startup_routinei+0x56>
     220:	d8 01       	movw	r26, r16
     222:	eb 01       	movw	r28, r22
     224:	df cf       	rjmp	.-66     	; 0x1e4 <_Z15startup_routinei+0x14>
			out.set();
			_delay_ms(delay_time/2);
			out.clear();
		}
	}
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	08 95       	ret

00000230 <main>:
char message[16];
uint16_t volts_reading, volts, centivolts;
uint16_t amps_reading, amps, centiamps;
uint32_t watts_raw, watts, centiwatts;

int main(void) {
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	00 d0       	rcall	.+0      	; 0x236 <main+0x6>
     236:	1f 92       	push	r1
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	startup_routine(2);
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z15startup_routinei>
	volatile static uint8_t analogHigh;
	volatile static uint8_t analogLow;
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
     244:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
     246:	87 e4       	ldi	r24, 0x47	; 71
     248:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     24c:	8f e8       	ldi	r24, 0x8F	; 143
     24e:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB = 0; // free running
     252:	10 92 7b 00 	sts	0x007B, r1
	volatile static uint8_t tx_index, tx_head, chars_left;
	volatile static char receiving[];
	volatile static uint8_t rx_index, rx_head, chars_unread;
	
	static void init() {
		UBRR0H = 0;
     256:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = 16; // BAUD 115200
     25a:	80 e1       	ldi	r24, 0x10	; 16
     25c:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A = _BV(U2X0);
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	80 93 c0 00 	sts	0x00C0, r24
		UCSR0B = _BV(TXCIE0) | _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
     266:	88 ed       	ldi	r24, 0xD8	; 216
     268:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	80 93 c2 00 	sts	0x00C2, r24
	
	Analog::selectChannel(PIN7);
	Serial::init();
	sei(); // Enable interrupts
     272:	78 94       	sei
     274:	0f 2e       	mov	r0, r31
     276:	fb ec       	ldi	r31, 0xCB	; 203
     278:	cf 2e       	mov	r12, r31
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	df 2e       	mov	r13, r31
     27e:	f0 2d       	mov	r31, r0
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     280:	0f 2e       	mov	r0, r31
     282:	fa e7       	ldi	r31, 0x7A	; 122
     284:	ef 2e       	mov	r14, r31
     286:	f1 2c       	mov	r15, r1
     288:	f0 2d       	mov	r31, r0
     28a:	2f e8       	ldi	r18, 0x8F	; 143
     28c:	29 83       	std	Y+1, r18	; 0x01
		Analog::selectChannel(PIN6);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
		volts_reading = Analog::getValue();
		adc_scale<MAX_ADC_UNITS>(volts_reading, &amps, &centiamps);
		sprintf(message, "%2u.%02u A\r\n", amps, centiamps);
     28e:	0f 2e       	mov	r0, r31
     290:	f8 e5       	ldi	r31, 0x58	; 88
     292:	2f 2e       	mov	r2, r31
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	3f 2e       	mov	r3, r31
     298:	f0 2d       	mov	r31, r0
     29a:	02 e6       	ldi	r16, 0x62	; 98
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	ef e8       	ldi	r30, 0x8F	; 143
     2a0:	f1 e0       	ldi	r31, 0x01	; 1
     2a2:	df 01       	movw	r26, r30
     2a4:	17 97       	sbiw	r26, 0x07	; 7
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     2a6:	0d 90       	ld	r0, X+
     2a8:	bc 91       	ld	r27, X
     2aa:	a0 2d       	mov	r26, r0
     2ac:	9c 91       	ld	r25, X
     2ae:	80 81       	ld	r24, Z
     2b0:	89 27       	eor	r24, r25
     2b2:	8c 93       	st	X, r24
     2b4:	3a 96       	adiw	r30, 0x0a	; 10
	Analog::selectChannel(PIN7);
	Serial::init();
	sei(); // Enable interrupts
	
    while (1) {
		for (int i=1; i<=6; ++i) enable[i].toggle();
     2b6:	ec 15       	cp	r30, r12
     2b8:	fd 05       	cpc	r31, r13
     2ba:	99 f7       	brne	.-26     	; 0x2a2 <main+0x72>
	volatile static uint8_t analogHigh;
	volatile static uint8_t analogLow;
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
     2bc:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
     2be:	e6 e4       	ldi	r30, 0x46	; 70
     2c0:	ac e7       	ldi	r26, 0x7C	; 124
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	ec 93       	st	X, r30
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     2c6:	e9 81       	ldd	r30, Y+1	; 0x01
     2c8:	d7 01       	movw	r26, r14
     2ca:	ec 93       	st	X, r30
		ADCSRB = 0; // free running
     2cc:	ab e7       	ldi	r26, 0x7B	; 123
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	1c 92       	st	X, r1
	}
	static void autoTriggerEnable(bool enabled) {
		ADCSRA = enabled? ADCSRA | _BV(ADATE) : ADCSRA & ~_BV(ADATE);
	}
	static void startConversion() {
		newValue = false;
     2d2:	10 92 f3 01 	sts	0x01F3, r1
		ADCSRA |= _BV(ADSC); 
     2d6:	f7 01       	movw	r30, r14
     2d8:	80 81       	ld	r24, Z
     2da:	80 64       	ori	r24, 0x40	; 64
     2dc:	80 83       	st	Z, r24
	}
	static void stopConversion() { ADCSRA &= ~_BV(ADSC); }
	static bool inline conversionComplete() { return newValue; }
     2de:	80 91 f3 01 	lds	r24, 0x01F3
		
		Analog::selectChannel(PIN6);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
     2e2:	88 23       	and	r24, r24
     2e4:	e1 f3       	breq	.-8      	; 0x2de <main+0xae>
	static uint16_t inline getValue () { 
		return ((Analog::analogHigh << 8)) | (Analog::analogLow); 
     2e6:	80 91 f2 01 	lds	r24, 0x01F2
     2ea:	20 91 f1 01 	lds	r18, 0x01F1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	38 2b       	or	r19, r24
		volts_reading = Analog::getValue();
     2f2:	30 93 57 01 	sts	0x0157, r19
     2f6:	20 93 56 01 	sts	0x0156, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     2fa:	a0 e4       	ldi	r26, 0x40	; 64
     2fc:	b6 e0       	ldi	r27, 0x06	; 6
     2fe:	0e 94 0d 04 	call	0x81a	; 0x81a <__umulhisi3>
     302:	2b 01       	movw	r4, r22
     304:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     306:	9b 01       	movw	r18, r22
     308:	ac 01       	movw	r20, r24
     30a:	44 27       	eor	r20, r20
     30c:	55 27       	eor	r21, r21
     30e:	a4 e6       	ldi	r26, 0x64	; 100
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	0e 94 1c 04 	call	0x838	; 0x838 <__muluhisi3>
     316:	90 93 4d 01 	sts	0x014D, r25
     31a:	80 93 4c 01 	sts	0x014C, r24
	}
	temp_result = temp_result >> 16;
     31e:	c3 01       	movw	r24, r6
     320:	aa 27       	eor	r26, r26
     322:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     324:	80 93 4e 01 	sts	0x014E, r24
     328:	90 93 4f 01 	sts	0x014F, r25
		Analog::selectChannel(PIN6);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
		volts_reading = Analog::getValue();
		adc_scale<MAX_ADC_UNITS>(volts_reading, &amps, &centiamps);
		sprintf(message, "%2u.%02u A\r\n", amps, centiamps);
     32c:	20 91 4d 01 	lds	r18, 0x014D
     330:	2f 93       	push	r18
     332:	20 91 4c 01 	lds	r18, 0x014C
     336:	2f 93       	push	r18
     338:	9f 93       	push	r25
     33a:	8f 93       	push	r24
     33c:	a6 e0       	ldi	r26, 0x06	; 6
     33e:	b1 e0       	ldi	r27, 0x01	; 1
     340:	bf 93       	push	r27
     342:	af 93       	push	r26
     344:	3f 92       	push	r3
     346:	2f 92       	push	r2
     348:	0e 94 5a 05 	call	0xab4	; 0xab4 <sprintf>
	}
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     34c:	f8 94       	cli
     34e:	3b 82       	std	Y+3, r3	; 0x03
     350:	2a 82       	std	Y+2, r2	; 0x02
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	d1 01       	movw	r26, r2
     35e:	91 01       	movw	r18, r2
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = s[chars_added];
     360:	e0 91 d0 01 	lds	r30, 0x01D0
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	8d 91       	ld	r24, X+
     368:	ef 51       	subi	r30, 0x1F	; 31
     36a:	fe 4f       	sbci	r31, 0xFE	; 254
     36c:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     36e:	80 91 d0 01 	lds	r24, 0x01D0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	90 78       	andi	r25, 0x80	; 128
     37a:	99 23       	and	r25, r25
     37c:	24 f4       	brge	.+8      	; 0x386 <main+0x156>
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	80 6f       	ori	r24, 0xF0	; 240
     382:	9f 6f       	ori	r25, 0xFF	; 255
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	80 93 d0 01 	sts	0x01D0, r24
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     38a:	a0 17       	cp	r26, r16
     38c:	b1 07       	cpc	r27, r17
     38e:	41 f7       	brne	.-48     	; 0x360 <main+0x130>
     390:	3b 83       	std	Y+3, r19	; 0x03
     392:	2a 83       	std	Y+2, r18	; 0x02
			transmitting[tx_index] = s[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		} 
		UDR0 = transmitting[tx_head];
     394:	e0 91 cf 01 	lds	r30, 0x01CF
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	ef 51       	subi	r30, 0x1F	; 31
     39c:	fe 4f       	sbci	r31, 0xFE	; 254
     39e:	80 81       	ld	r24, Z
     3a0:	a6 ec       	ldi	r26, 0xC6	; 198
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     3a6:	80 91 cf 01 	lds	r24, 0x01CF
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	8f 70       	andi	r24, 0x0F	; 15
     3b0:	90 78       	andi	r25, 0x80	; 128
     3b2:	99 23       	and	r25, r25
     3b4:	24 f4       	brge	.+8      	; 0x3be <main+0x18e>
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	80 6f       	ori	r24, 0xF0	; 240
     3ba:	9f 6f       	ori	r25, 0xFF	; 255
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	80 93 cf 01 	sts	0x01CF, r24
		chars_left += (char_count - 1);
     3c2:	80 91 ce 01 	lds	r24, 0x01CE
     3c6:	87 5f       	subi	r24, 0xF7	; 247
     3c8:	80 93 ce 01 	sts	0x01CE, r24
		sei();
     3cc:	78 94       	sei
     3ce:	bf ef       	ldi	r27, 0xFF	; 255
     3d0:	e9 e6       	ldi	r30, 0x69	; 105
     3d2:	f8 e1       	ldi	r31, 0x18	; 24
     3d4:	b1 50       	subi	r27, 0x01	; 1
     3d6:	e0 40       	sbci	r30, 0x00	; 0
     3d8:	f0 40       	sbci	r31, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x1a4>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x1ae>
     3de:	00 00       	nop
	volatile static uint8_t analogHigh;
	volatile static uint8_t analogLow;
	volatile static uint8_t lastChannel;
	
	static void selectChannel(uint8_t n) {
		DDRC = DDRC & ~_BV(n);
     3e0:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = _BV(REFS0) | n; // AREF = AVCC
     3e2:	e7 e4       	ldi	r30, 0x47	; 71
     3e4:	ac e7       	ldi	r26, 0x7C	; 124
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ec 93       	st	X, r30
		ADCSRA = /*_BV(ADATE) |*/ _BV(ADEN) | _BV(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     3ea:	ef e8       	ldi	r30, 0x8F	; 143
     3ec:	d7 01       	movw	r26, r14
     3ee:	ec 93       	st	X, r30
		ADCSRB = 0; // free running
     3f0:	ab e7       	ldi	r26, 0x7B	; 123
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	1c 92       	st	X, r1
	}
	static void autoTriggerEnable(bool enabled) {
		ADCSRA = enabled? ADCSRA | _BV(ADATE) : ADCSRA & ~_BV(ADATE);
	}
	static void startConversion() {
		newValue = false;
     3f6:	10 92 f3 01 	sts	0x01F3, r1
		ADCSRA |= _BV(ADSC); 
     3fa:	f7 01       	movw	r30, r14
     3fc:	80 81       	ld	r24, Z
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	80 83       	st	Z, r24
     402:	2a 81       	ldd	r18, Y+2	; 0x02
     404:	3b 81       	ldd	r19, Y+3	; 0x03
	}
	static void stopConversion() { ADCSRA &= ~_BV(ADSC); }
	static bool inline conversionComplete() { return newValue; }
     406:	80 91 f3 01 	lds	r24, 0x01F3
		Serial::transmit(message, 10);
		_delay_ms(500);
		
		Analog::selectChannel(PIN7);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
     40a:	88 23       	and	r24, r24
     40c:	e1 f3       	breq	.-8      	; 0x406 <main+0x1d6>
     40e:	3b 83       	std	Y+3, r19	; 0x03
     410:	2a 83       	std	Y+2, r18	; 0x02
	static uint16_t inline getValue () { 
		return ((Analog::analogHigh << 8)) | (Analog::analogLow); 
     412:	80 91 f2 01 	lds	r24, 0x01F2
     416:	20 91 f1 01 	lds	r18, 0x01F1
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	38 2b       	or	r19, r24
		amps_reading = Analog::getValue();
     41e:	30 93 51 01 	sts	0x0151, r19
     422:	20 93 50 01 	sts	0x0150, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     426:	a0 e4       	ldi	r26, 0x40	; 64
     428:	b6 e0       	ldi	r27, 0x06	; 6
     42a:	0e 94 0d 04 	call	0x81a	; 0x81a <__umulhisi3>
     42e:	2b 01       	movw	r4, r22
     430:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     432:	9b 01       	movw	r18, r22
     434:	ac 01       	movw	r20, r24
     436:	44 27       	eor	r20, r20
     438:	55 27       	eor	r21, r21
     43a:	a4 e6       	ldi	r26, 0x64	; 100
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	0e 94 1c 04 	call	0x838	; 0x838 <__muluhisi3>
     442:	90 93 53 01 	sts	0x0153, r25
     446:	80 93 52 01 	sts	0x0152, r24
	}
	temp_result = temp_result >> 16;
     44a:	c3 01       	movw	r24, r6
     44c:	aa 27       	eor	r26, r26
     44e:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     450:	80 93 54 01 	sts	0x0154, r24
     454:	90 93 55 01 	sts	0x0155, r25
		Analog::selectChannel(PIN7);
		Analog::startConversion();
		while (!Analog::conversionComplete()) { /* idle */ }
		amps_reading = Analog::getValue();
		adc_scale<MAX_ADC_UNITS>(amps_reading, &volts, &centivolts);
		sprintf(message, "%2u.%02u V\r\n", volts, centivolts);
     458:	20 91 53 01 	lds	r18, 0x0153
     45c:	2f 93       	push	r18
     45e:	20 91 52 01 	lds	r18, 0x0152
     462:	2f 93       	push	r18
     464:	9f 93       	push	r25
     466:	8f 93       	push	r24
     468:	a3 e1       	ldi	r26, 0x13	; 19
     46a:	b1 e0       	ldi	r27, 0x01	; 1
     46c:	bf 93       	push	r27
     46e:	af 93       	push	r26
     470:	3f 92       	push	r3
     472:	2f 92       	push	r2
     474:	0e 94 5a 05 	call	0xab4	; 0xab4 <sprintf>
	}
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     478:	f8 94       	cli
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	d1 01       	movw	r26, r2
     486:	2a 81       	ldd	r18, Y+2	; 0x02
     488:	3b 81       	ldd	r19, Y+3	; 0x03
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = s[chars_added];
     48a:	e0 91 d0 01 	lds	r30, 0x01D0
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	8d 91       	ld	r24, X+
     492:	ef 51       	subi	r30, 0x1F	; 31
     494:	fe 4f       	sbci	r31, 0xFE	; 254
     496:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     498:	80 91 d0 01 	lds	r24, 0x01D0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	8f 70       	andi	r24, 0x0F	; 15
     4a2:	90 78       	andi	r25, 0x80	; 128
     4a4:	99 23       	and	r25, r25
     4a6:	24 f4       	brge	.+8      	; 0x4b0 <main+0x280>
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	80 6f       	ori	r24, 0xF0	; 240
     4ac:	9f 6f       	ori	r25, 0xFF	; 255
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	80 93 d0 01 	sts	0x01D0, r24
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     4b4:	0a 17       	cp	r16, r26
     4b6:	1b 07       	cpc	r17, r27
     4b8:	41 f7       	brne	.-48     	; 0x48a <main+0x25a>
     4ba:	3b 83       	std	Y+3, r19	; 0x03
     4bc:	2a 83       	std	Y+2, r18	; 0x02
			transmitting[tx_index] = s[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		} 
		UDR0 = transmitting[tx_head];
     4be:	e0 91 cf 01 	lds	r30, 0x01CF
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ef 51       	subi	r30, 0x1F	; 31
     4c6:	fe 4f       	sbci	r31, 0xFE	; 254
     4c8:	80 81       	ld	r24, Z
     4ca:	a6 ec       	ldi	r26, 0xC6	; 198
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     4d0:	80 91 cf 01 	lds	r24, 0x01CF
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	8f 70       	andi	r24, 0x0F	; 15
     4da:	90 78       	andi	r25, 0x80	; 128
     4dc:	99 23       	and	r25, r25
     4de:	24 f4       	brge	.+8      	; 0x4e8 <main+0x2b8>
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	80 6f       	ori	r24, 0xF0	; 240
     4e4:	9f 6f       	ori	r25, 0xFF	; 255
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	80 93 cf 01 	sts	0x01CF, r24
		chars_left += (char_count - 1);
     4ec:	80 91 ce 01 	lds	r24, 0x01CE
     4f0:	87 5f       	subi	r24, 0xF7	; 247
     4f2:	80 93 ce 01 	sts	0x01CE, r24
		sei();
     4f6:	78 94       	sei
     4f8:	bf ef       	ldi	r27, 0xFF	; 255
     4fa:	e9 e6       	ldi	r30, 0x69	; 105
     4fc:	f8 e1       	ldi	r31, 0x18	; 24
     4fe:	b1 50       	subi	r27, 0x01	; 1
     500:	e0 40       	sbci	r30, 0x00	; 0
     502:	f0 40       	sbci	r31, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <main+0x2ce>
     506:	00 c0       	rjmp	.+0      	; 0x508 <main+0x2d8>
     508:	00 00       	nop
		Serial::transmit(message, 10);
		_delay_ms(500);
		
		watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     50a:	20 91 50 01 	lds	r18, 0x0150
     50e:	30 91 51 01 	lds	r19, 0x0151
     512:	a0 91 56 01 	lds	r26, 0x0156
     516:	b0 91 57 01 	lds	r27, 0x0157
     51a:	0e 94 0d 04 	call	0x81a	; 0x81a <__umulhisi3>
     51e:	4b 01       	movw	r8, r22
     520:	5c 01       	movw	r10, r24
     522:	60 93 48 01 	sts	0x0148, r22
     526:	70 93 49 01 	sts	0x0149, r23
     52a:	80 93 4a 01 	sts	0x014A, r24
     52e:	90 93 4b 01 	sts	0x014B, r25
		watts = (watts_raw * 39) >> 16;
     532:	a7 e2       	ldi	r26, 0x27	; 39
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	9b 01       	movw	r18, r22
     538:	ac 01       	movw	r20, r24
     53a:	0e 94 1c 04 	call	0x838	; 0x838 <__muluhisi3>
     53e:	2c 01       	movw	r4, r24
     540:	66 24       	eor	r6, r6
     542:	77 24       	eor	r7, r7
     544:	40 92 44 01 	sts	0x0144, r4
     548:	50 92 45 01 	sts	0x0145, r5
     54c:	60 92 46 01 	sts	0x0146, r6
     550:	70 92 47 01 	sts	0x0147, r7
		centiwatts = ((watts_raw % (watts * 1680)) * 3900) >> 16;
     554:	a0 e9       	ldi	r26, 0x90	; 144
     556:	b6 e0       	ldi	r27, 0x06	; 6
     558:	a3 01       	movw	r20, r6
     55a:	92 01       	movw	r18, r4
     55c:	0e 94 1c 04 	call	0x838	; 0x838 <__muluhisi3>
     560:	9b 01       	movw	r18, r22
     562:	ac 01       	movw	r20, r24
     564:	c5 01       	movw	r24, r10
     566:	b4 01       	movw	r22, r8
     568:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__udivmodsi4>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	ac e3       	ldi	r26, 0x3C	; 60
     572:	bf e0       	ldi	r27, 0x0F	; 15
     574:	0e 94 1c 04 	call	0x838	; 0x838 <__muluhisi3>
     578:	aa 27       	eor	r26, r26
     57a:	bb 27       	eor	r27, r27
     57c:	80 93 40 01 	sts	0x0140, r24
     580:	90 93 41 01 	sts	0x0141, r25
     584:	a0 93 42 01 	sts	0x0142, r26
     588:	b0 93 43 01 	sts	0x0143, r27
		sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
     58c:	bf 93       	push	r27
     58e:	af 93       	push	r26
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	7f 92       	push	r7
     596:	6f 92       	push	r6
     598:	5f 92       	push	r5
     59a:	4f 92       	push	r4
     59c:	a0 e2       	ldi	r26, 0x20	; 32
     59e:	b1 e0       	ldi	r27, 0x01	; 1
     5a0:	bf 93       	push	r27
     5a2:	af 93       	push	r26
     5a4:	3f 92       	push	r3
     5a6:	2f 92       	push	r2
     5a8:	0e 94 5a 05 	call	0xab4	; 0xab4 <sprintf>
	}
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     5ac:	f8 94       	cli
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	aa 81       	ldd	r26, Y+2	; 0x02
     5ba:	bb 81       	ldd	r27, Y+3	; 0x03
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = s[chars_added];
     5bc:	e0 91 d0 01 	lds	r30, 0x01D0
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	8d 91       	ld	r24, X+
     5c4:	ef 51       	subi	r30, 0x1F	; 31
     5c6:	fe 4f       	sbci	r31, 0xFE	; 254
     5c8:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     5ca:	80 91 d0 01 	lds	r24, 0x01D0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	90 78       	andi	r25, 0x80	; 128
     5d6:	99 23       	and	r25, r25
     5d8:	24 f4       	brge	.+8      	; 0x5e2 <main+0x3b2>
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	80 6f       	ori	r24, 0xF0	; 240
     5de:	9f 6f       	ori	r25, 0xFF	; 255
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	80 93 d0 01 	sts	0x01D0, r24
	static void transmit(char* s, uint8_t char_count) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     5e6:	0a 17       	cp	r16, r26
     5e8:	1b 07       	cpc	r17, r27
     5ea:	41 f7       	brne	.-48     	; 0x5bc <main+0x38c>
			transmitting[tx_index] = s[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		} 
		UDR0 = transmitting[tx_head];
     5ec:	e0 91 cf 01 	lds	r30, 0x01CF
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	ef 51       	subi	r30, 0x1F	; 31
     5f4:	fe 4f       	sbci	r31, 0xFE	; 254
     5f6:	80 81       	ld	r24, Z
     5f8:	a6 ec       	ldi	r26, 0xC6	; 198
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     5fe:	80 91 cf 01 	lds	r24, 0x01CF
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	8f 70       	andi	r24, 0x0F	; 15
     608:	90 78       	andi	r25, 0x80	; 128
     60a:	99 23       	and	r25, r25
     60c:	24 f4       	brge	.+8      	; 0x616 <main+0x3e6>
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	80 6f       	ori	r24, 0xF0	; 240
     612:	9f 6f       	ori	r25, 0xFF	; 255
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	80 93 cf 01 	sts	0x01CF, r24
		chars_left += (char_count - 1);
     61a:	80 91 ce 01 	lds	r24, 0x01CE
     61e:	87 5f       	subi	r24, 0xF7	; 247
     620:	80 93 ce 01 	sts	0x01CE, r24
		sei();
     624:	78 94       	sei
     626:	bf ef       	ldi	r27, 0xFF	; 255
     628:	e9 e6       	ldi	r30, 0x69	; 105
     62a:	f8 e1       	ldi	r31, 0x18	; 24
     62c:	b1 50       	subi	r27, 0x01	; 1
     62e:	e0 40       	sbci	r30, 0x00	; 0
     630:	f0 40       	sbci	r31, 0x00	; 0
     632:	e1 f7       	brne	.-8      	; 0x62c <main+0x3fc>
     634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x406>
     636:	00 00       	nop
     638:	32 ce       	rjmp	.-924    	; 0x29e <main+0x6e>

0000063a <_GLOBAL__sub_I__Znwj>:
		Serial::transmit(message, 10);
		_delay_ms(500);
    }
}
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     648:	e2 ec       	ldi	r30, 0xC2	; 194
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	65 e2       	ldi	r22, 0x25	; 37
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	73 83       	std	Z+3, r23	; 0x03
     652:	62 83       	std	Z+2, r22	; 0x02
     654:	44 e2       	ldi	r20, 0x24	; 36
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	55 83       	std	Z+5, r21	; 0x05
     65a:	44 83       	std	Z+4, r20	; 0x04
     65c:	23 e2       	ldi	r18, 0x23	; 35
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	37 83       	std	Z+7, r19	; 0x07
     662:	26 83       	std	Z+6, r18	; 0x06
     664:	10 86       	std	Z+8, r1	; 0x08
     666:	a1 e0       	ldi	r26, 0x01	; 1
     668:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     66a:	83 e3       	ldi	r24, 0x33	; 51
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	91 83       	std	Z+1, r25	; 0x01
     670:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     672:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     674:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     676:	ec e7       	ldi	r30, 0x7C	; 124
     678:	f1 e0       	ldi	r31, 0x01	; 1
     67a:	73 83       	std	Z+3, r23	; 0x03
     67c:	62 83       	std	Z+2, r22	; 0x02
     67e:	55 83       	std	Z+5, r21	; 0x05
     680:	44 83       	std	Z+4, r20	; 0x04
     682:	37 83       	std	Z+7, r19	; 0x07
     684:	26 83       	std	Z+6, r18	; 0x06
     686:	10 86       	std	Z+8, r1	; 0x08
     688:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     68e:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     690:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     692:	68 e2       	ldi	r22, 0x28	; 40
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	75 87       	std	Z+13, r23	; 0x0d
     698:	64 87       	std	Z+12, r22	; 0x0c
     69a:	47 e2       	ldi	r20, 0x27	; 39
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	57 87       	std	Z+15, r21	; 0x0f
     6a0:	46 87       	std	Z+14, r20	; 0x0e
     6a2:	26 e2       	ldi	r18, 0x26	; 38
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	31 8b       	std	Z+17, r19	; 0x11
     6a8:	20 8b       	std	Z+16, r18	; 0x10
     6aa:	b3 e0       	ldi	r27, 0x03	; 3
     6ac:	b2 8b       	std	Z+18, r27	; 0x12
     6ae:	b8 e0       	ldi	r27, 0x08	; 8
     6b0:	b3 8b       	std	Z+19, r27	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     6b2:	93 87       	std	Z+11, r25	; 0x0b
     6b4:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     6b6:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     6b8:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     6ba:	0f 2e       	mov	r0, r31
     6bc:	fb e2       	ldi	r31, 0x2B	; 43
     6be:	cf 2e       	mov	r12, r31
     6c0:	d1 2c       	mov	r13, r1
     6c2:	f0 2d       	mov	r31, r0
     6c4:	d7 8a       	std	Z+23, r13	; 0x17
     6c6:	c6 8a       	std	Z+22, r12	; 0x16
     6c8:	0f 2e       	mov	r0, r31
     6ca:	fa e2       	ldi	r31, 0x2A	; 42
     6cc:	ef 2e       	mov	r14, r31
     6ce:	f1 2c       	mov	r15, r1
     6d0:	f0 2d       	mov	r31, r0
     6d2:	f1 8e       	std	Z+25, r15	; 0x19
     6d4:	e0 8e       	std	Z+24, r14	; 0x18
     6d6:	09 e2       	ldi	r16, 0x29	; 41
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	13 8f       	std	Z+27, r17	; 0x1b
     6dc:	02 8f       	std	Z+26, r16	; 0x1a
     6de:	c2 e0       	ldi	r28, 0x02	; 2
     6e0:	c4 8f       	std	Z+28, r28	; 0x1c
     6e2:	b4 e0       	ldi	r27, 0x04	; 4
     6e4:	b5 8f       	std	Z+29, r27	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     6e6:	95 8b       	std	Z+21, r25	; 0x15
     6e8:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     6ea:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     6ec:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     6ee:	d1 a2       	std	Z+33, r13	; 0x21
     6f0:	c0 a2       	std	Z+32, r12	; 0x20
     6f2:	f3 a2       	std	Z+35, r15	; 0x23
     6f4:	e2 a2       	std	Z+34, r14	; 0x22
     6f6:	15 a3       	std	Z+37, r17	; 0x25
     6f8:	04 a3       	std	Z+36, r16	; 0x24
     6fa:	b6 a3       	std	Z+38, r27	; 0x26
     6fc:	10 e1       	ldi	r17, 0x10	; 16
     6fe:	17 a3       	std	Z+39, r17	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     700:	97 8f       	std	Z+31, r25	; 0x1f
     702:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     704:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     706:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     708:	73 a7       	std	Z+43, r23	; 0x2b
     70a:	62 a7       	std	Z+42, r22	; 0x2a
     70c:	55 a7       	std	Z+45, r21	; 0x2d
     70e:	44 a7       	std	Z+44, r20	; 0x2c
     710:	37 a7       	std	Z+47, r19	; 0x2f
     712:	26 a7       	std	Z+46, r18	; 0x2e
     714:	10 aa       	std	Z+48, r1	; 0x30
     716:	a1 ab       	std	Z+49, r26	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     718:	91 a7       	std	Z+41, r25	; 0x29
     71a:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     71c:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     71e:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     720:	75 ab       	std	Z+53, r23	; 0x35
     722:	64 ab       	std	Z+52, r22	; 0x34
     724:	57 ab       	std	Z+55, r21	; 0x37
     726:	46 ab       	std	Z+54, r20	; 0x36
     728:	31 af       	std	Z+57, r19	; 0x39
     72a:	20 af       	std	Z+56, r18	; 0x38
     72c:	a2 af       	std	Z+58, r26	; 0x3a
     72e:	c3 af       	std	Z+59, r28	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     730:	93 ab       	std	Z+51, r25	; 0x33
     732:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     734:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     736:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     738:	70 93 bb 01 	sts	0x01BB, r23
     73c:	60 93 ba 01 	sts	0x01BA, r22
     740:	50 93 bd 01 	sts	0x01BD, r21
     744:	40 93 bc 01 	sts	0x01BC, r20
     748:	30 93 bf 01 	sts	0x01BF, r19
     74c:	20 93 be 01 	sts	0x01BE, r18
     750:	c0 93 c0 01 	sts	0x01C0, r28
     754:	b0 93 c1 01 	sts	0x01C1, r27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     758:	95 af       	std	Z+61, r25	; 0x3d
     75a:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
     75c:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     75e:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     760:	e2 e7       	ldi	r30, 0x72	; 114
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	73 83       	std	Z+3, r23	; 0x03
     766:	62 83       	std	Z+2, r22	; 0x02
     768:	55 83       	std	Z+5, r21	; 0x05
     76a:	44 83       	std	Z+4, r20	; 0x04
     76c:	37 83       	std	Z+7, r19	; 0x07
     76e:	26 83       	std	Z+6, r18	; 0x06
     770:	87 e0       	ldi	r24, 0x07	; 7
     772:	80 87       	std	Z+8, r24	; 0x08
     774:	80 e8       	ldi	r24, 0x80	; 128
     776:	81 87       	std	Z+9, r24	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     778:	8b e3       	ldi	r24, 0x3B	; 59
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	91 83       	std	Z+1, r25	; 0x01
     77e:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     780:	3f 98       	cbi	0x07, 7	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     782:	e8 e6       	ldi	r30, 0x68	; 104
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	73 83       	std	Z+3, r23	; 0x03
     788:	62 83       	std	Z+2, r22	; 0x02
     78a:	55 83       	std	Z+5, r21	; 0x05
     78c:	44 83       	std	Z+4, r20	; 0x04
     78e:	37 83       	std	Z+7, r19	; 0x07
     790:	26 83       	std	Z+6, r18	; 0x06
     792:	26 e0       	ldi	r18, 0x06	; 6
     794:	20 87       	std	Z+8, r18	; 0x08
     796:	20 e4       	ldi	r18, 0x40	; 64
     798:	21 87       	std	Z+9, r18	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     79a:	91 83       	std	Z+1, r25	; 0x01
     79c:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     79e:	3e 98       	cbi	0x07, 6	; 7
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	08 95       	ret

000007b0 <_GLOBAL__sub_D__Znwj>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
using namespace opbots;

const uint8_t ERR(0);

Output err_led(&PORTB, PIN0);
Output enable[] = {
     7b4:	c2 ec       	ldi	r28, 0xC2	; 194
     7b6:	d1 e0       	ldi	r29, 0x01	; 1
     7b8:	2a 97       	sbiw	r28, 0x0a	; 10
     7ba:	e8 81       	ld	r30, Y
     7bc:	f9 81       	ldd	r31, Y+1	; 0x01
     7be:	01 90       	ld	r0, Z+
     7c0:	f0 81       	ld	r31, Z
     7c2:	e0 2d       	mov	r30, r0
     7c4:	ce 01       	movw	r24, r28
     7c6:	09 95       	icall
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	cc 37       	cpi	r28, 0x7C	; 124
     7cc:	d8 07       	cpc	r29, r24
     7ce:	a1 f7       	brne	.-24     	; 0x7b8 <_GLOBAL__sub_D__Znwj+0x8>
		centiwatts = ((watts_raw % (watts * 1680)) * 3900) >> 16;
		sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
		Serial::transmit(message, 10);
		_delay_ms(500);
    }
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <__udivmodsi4>:
     7d6:	a1 e2       	ldi	r26, 0x21	; 33
     7d8:	1a 2e       	mov	r1, r26
     7da:	aa 1b       	sub	r26, r26
     7dc:	bb 1b       	sub	r27, r27
     7de:	fd 01       	movw	r30, r26
     7e0:	0d c0       	rjmp	.+26     	; 0x7fc <__udivmodsi4_ep>

000007e2 <__udivmodsi4_loop>:
     7e2:	aa 1f       	adc	r26, r26
     7e4:	bb 1f       	adc	r27, r27
     7e6:	ee 1f       	adc	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	a2 17       	cp	r26, r18
     7ec:	b3 07       	cpc	r27, r19
     7ee:	e4 07       	cpc	r30, r20
     7f0:	f5 07       	cpc	r31, r21
     7f2:	20 f0       	brcs	.+8      	; 0x7fc <__udivmodsi4_ep>
     7f4:	a2 1b       	sub	r26, r18
     7f6:	b3 0b       	sbc	r27, r19
     7f8:	e4 0b       	sbc	r30, r20
     7fa:	f5 0b       	sbc	r31, r21

000007fc <__udivmodsi4_ep>:
     7fc:	66 1f       	adc	r22, r22
     7fe:	77 1f       	adc	r23, r23
     800:	88 1f       	adc	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	1a 94       	dec	r1
     806:	69 f7       	brne	.-38     	; 0x7e2 <__udivmodsi4_loop>
     808:	60 95       	com	r22
     80a:	70 95       	com	r23
     80c:	80 95       	com	r24
     80e:	90 95       	com	r25
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	bd 01       	movw	r22, r26
     816:	cf 01       	movw	r24, r30
     818:	08 95       	ret

0000081a <__umulhisi3>:
     81a:	a2 9f       	mul	r26, r18
     81c:	b0 01       	movw	r22, r0
     81e:	b3 9f       	mul	r27, r19
     820:	c0 01       	movw	r24, r0
     822:	a3 9f       	mul	r26, r19
     824:	70 0d       	add	r23, r0
     826:	81 1d       	adc	r24, r1
     828:	11 24       	eor	r1, r1
     82a:	91 1d       	adc	r25, r1
     82c:	b2 9f       	mul	r27, r18
     82e:	70 0d       	add	r23, r0
     830:	81 1d       	adc	r24, r1
     832:	11 24       	eor	r1, r1
     834:	91 1d       	adc	r25, r1
     836:	08 95       	ret

00000838 <__muluhisi3>:
     838:	0e 94 0d 04 	call	0x81a	; 0x81a <__umulhisi3>
     83c:	a5 9f       	mul	r26, r21
     83e:	90 0d       	add	r25, r0
     840:	b4 9f       	mul	r27, r20
     842:	90 0d       	add	r25, r0
     844:	a4 9f       	mul	r26, r20
     846:	80 0d       	add	r24, r0
     848:	91 1d       	adc	r25, r1
     84a:	11 24       	eor	r1, r1
     84c:	08 95       	ret

0000084e <__tablejump2__>:
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	05 90       	lpm	r0, Z+
     854:	f4 91       	lpm	r31, Z
     856:	e0 2d       	mov	r30, r0
     858:	09 94       	ijmp

0000085a <malloc>:
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	91 05       	cpc	r25, r1
     862:	10 f4       	brcc	.+4      	; 0x868 <malloc+0xe>
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	e0 91 f6 01 	lds	r30, 0x01F6
     86c:	f0 91 f7 01 	lds	r31, 0x01F7
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	c0 e0       	ldi	r28, 0x00	; 0
     876:	d0 e0       	ldi	r29, 0x00	; 0
     878:	30 97       	sbiw	r30, 0x00	; 0
     87a:	11 f1       	breq	.+68     	; 0x8c0 <malloc+0x66>
     87c:	40 81       	ld	r20, Z
     87e:	51 81       	ldd	r21, Z+1	; 0x01
     880:	48 17       	cp	r20, r24
     882:	59 07       	cpc	r21, r25
     884:	c0 f0       	brcs	.+48     	; 0x8b6 <malloc+0x5c>
     886:	48 17       	cp	r20, r24
     888:	59 07       	cpc	r21, r25
     88a:	61 f4       	brne	.+24     	; 0x8a4 <malloc+0x4a>
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	93 81       	ldd	r25, Z+3	; 0x03
     890:	20 97       	sbiw	r28, 0x00	; 0
     892:	19 f0       	breq	.+6      	; 0x89a <malloc+0x40>
     894:	9b 83       	std	Y+3, r25	; 0x03
     896:	8a 83       	std	Y+2, r24	; 0x02
     898:	2b c0       	rjmp	.+86     	; 0x8f0 <malloc+0x96>
     89a:	90 93 f7 01 	sts	0x01F7, r25
     89e:	80 93 f6 01 	sts	0x01F6, r24
     8a2:	26 c0       	rjmp	.+76     	; 0x8f0 <malloc+0x96>
     8a4:	21 15       	cp	r18, r1
     8a6:	31 05       	cpc	r19, r1
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <malloc+0x56>
     8aa:	42 17       	cp	r20, r18
     8ac:	53 07       	cpc	r21, r19
     8ae:	18 f4       	brcc	.+6      	; 0x8b6 <malloc+0x5c>
     8b0:	9a 01       	movw	r18, r20
     8b2:	be 01       	movw	r22, r28
     8b4:	df 01       	movw	r26, r30
     8b6:	ef 01       	movw	r28, r30
     8b8:	02 80       	ldd	r0, Z+2	; 0x02
     8ba:	f3 81       	ldd	r31, Z+3	; 0x03
     8bc:	e0 2d       	mov	r30, r0
     8be:	dc cf       	rjmp	.-72     	; 0x878 <malloc+0x1e>
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	09 f1       	breq	.+66     	; 0x908 <__stack+0x9>
     8c6:	28 1b       	sub	r18, r24
     8c8:	39 0b       	sbc	r19, r25
     8ca:	24 30       	cpi	r18, 0x04	; 4
     8cc:	31 05       	cpc	r19, r1
     8ce:	90 f4       	brcc	.+36     	; 0x8f4 <malloc+0x9a>
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	8d 91       	ld	r24, X+
     8d4:	9c 91       	ld	r25, X
     8d6:	13 97       	sbiw	r26, 0x03	; 3
     8d8:	61 15       	cp	r22, r1
     8da:	71 05       	cpc	r23, r1
     8dc:	21 f0       	breq	.+8      	; 0x8e6 <malloc+0x8c>
     8de:	fb 01       	movw	r30, r22
     8e0:	93 83       	std	Z+3, r25	; 0x03
     8e2:	82 83       	std	Z+2, r24	; 0x02
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <malloc+0x94>
     8e6:	90 93 f7 01 	sts	0x01F7, r25
     8ea:	80 93 f6 01 	sts	0x01F6, r24
     8ee:	fd 01       	movw	r30, r26
     8f0:	32 96       	adiw	r30, 0x02	; 2
     8f2:	44 c0       	rjmp	.+136    	; 0x97c <__stack+0x7d>
     8f4:	fd 01       	movw	r30, r26
     8f6:	e2 0f       	add	r30, r18
     8f8:	f3 1f       	adc	r31, r19
     8fa:	81 93       	st	Z+, r24
     8fc:	91 93       	st	Z+, r25
     8fe:	22 50       	subi	r18, 0x02	; 2
     900:	31 09       	sbc	r19, r1
     902:	2d 93       	st	X+, r18
     904:	3c 93       	st	X, r19
     906:	3a c0       	rjmp	.+116    	; 0x97c <__stack+0x7d>
     908:	20 91 f4 01 	lds	r18, 0x01F4
     90c:	30 91 f5 01 	lds	r19, 0x01F5
     910:	23 2b       	or	r18, r19
     912:	41 f4       	brne	.+16     	; 0x924 <__stack+0x25>
     914:	20 91 02 01 	lds	r18, 0x0102
     918:	30 91 03 01 	lds	r19, 0x0103
     91c:	30 93 f5 01 	sts	0x01F5, r19
     920:	20 93 f4 01 	sts	0x01F4, r18
     924:	20 91 00 01 	lds	r18, 0x0100
     928:	30 91 01 01 	lds	r19, 0x0101
     92c:	21 15       	cp	r18, r1
     92e:	31 05       	cpc	r19, r1
     930:	41 f4       	brne	.+16     	; 0x942 <__stack+0x43>
     932:	2d b7       	in	r18, 0x3d	; 61
     934:	3e b7       	in	r19, 0x3e	; 62
     936:	40 91 04 01 	lds	r20, 0x0104
     93a:	50 91 05 01 	lds	r21, 0x0105
     93e:	24 1b       	sub	r18, r20
     940:	35 0b       	sbc	r19, r21
     942:	e0 91 f4 01 	lds	r30, 0x01F4
     946:	f0 91 f5 01 	lds	r31, 0x01F5
     94a:	e2 17       	cp	r30, r18
     94c:	f3 07       	cpc	r31, r19
     94e:	a0 f4       	brcc	.+40     	; 0x978 <__stack+0x79>
     950:	2e 1b       	sub	r18, r30
     952:	3f 0b       	sbc	r19, r31
     954:	28 17       	cp	r18, r24
     956:	39 07       	cpc	r19, r25
     958:	78 f0       	brcs	.+30     	; 0x978 <__stack+0x79>
     95a:	ac 01       	movw	r20, r24
     95c:	4e 5f       	subi	r20, 0xFE	; 254
     95e:	5f 4f       	sbci	r21, 0xFF	; 255
     960:	24 17       	cp	r18, r20
     962:	35 07       	cpc	r19, r21
     964:	48 f0       	brcs	.+18     	; 0x978 <__stack+0x79>
     966:	4e 0f       	add	r20, r30
     968:	5f 1f       	adc	r21, r31
     96a:	50 93 f5 01 	sts	0x01F5, r21
     96e:	40 93 f4 01 	sts	0x01F4, r20
     972:	81 93       	st	Z+, r24
     974:	91 93       	st	Z+, r25
     976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x7d>
     978:	e0 e0       	ldi	r30, 0x00	; 0
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	cf 01       	movw	r24, r30
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <free>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	09 f4       	brne	.+2      	; 0x992 <free+0xe>
     990:	8c c0       	rjmp	.+280    	; 0xaaa <free+0x126>
     992:	fc 01       	movw	r30, r24
     994:	32 97       	sbiw	r30, 0x02	; 2
     996:	13 82       	std	Z+3, r1	; 0x03
     998:	12 82       	std	Z+2, r1	; 0x02
     99a:	00 91 f6 01 	lds	r16, 0x01F6
     99e:	10 91 f7 01 	lds	r17, 0x01F7
     9a2:	01 15       	cp	r16, r1
     9a4:	11 05       	cpc	r17, r1
     9a6:	81 f4       	brne	.+32     	; 0x9c8 <free+0x44>
     9a8:	20 81       	ld	r18, Z
     9aa:	31 81       	ldd	r19, Z+1	; 0x01
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	20 91 f4 01 	lds	r18, 0x01F4
     9b4:	30 91 f5 01 	lds	r19, 0x01F5
     9b8:	28 17       	cp	r18, r24
     9ba:	39 07       	cpc	r19, r25
     9bc:	79 f5       	brne	.+94     	; 0xa1c <free+0x98>
     9be:	f0 93 f5 01 	sts	0x01F5, r31
     9c2:	e0 93 f4 01 	sts	0x01F4, r30
     9c6:	71 c0       	rjmp	.+226    	; 0xaaa <free+0x126>
     9c8:	d8 01       	movw	r26, r16
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	ae 17       	cp	r26, r30
     9d0:	bf 07       	cpc	r27, r31
     9d2:	50 f4       	brcc	.+20     	; 0x9e8 <free+0x64>
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	2d 91       	ld	r18, X+
     9d8:	3c 91       	ld	r19, X
     9da:	13 97       	sbiw	r26, 0x03	; 3
     9dc:	ad 01       	movw	r20, r26
     9de:	21 15       	cp	r18, r1
     9e0:	31 05       	cpc	r19, r1
     9e2:	09 f1       	breq	.+66     	; 0xa26 <free+0xa2>
     9e4:	d9 01       	movw	r26, r18
     9e6:	f3 cf       	rjmp	.-26     	; 0x9ce <free+0x4a>
     9e8:	9d 01       	movw	r18, r26
     9ea:	da 01       	movw	r26, r20
     9ec:	33 83       	std	Z+3, r19	; 0x03
     9ee:	22 83       	std	Z+2, r18	; 0x02
     9f0:	60 81       	ld	r22, Z
     9f2:	71 81       	ldd	r23, Z+1	; 0x01
     9f4:	86 0f       	add	r24, r22
     9f6:	97 1f       	adc	r25, r23
     9f8:	82 17       	cp	r24, r18
     9fa:	93 07       	cpc	r25, r19
     9fc:	69 f4       	brne	.+26     	; 0xa18 <free+0x94>
     9fe:	ec 01       	movw	r28, r24
     a00:	28 81       	ld	r18, Y
     a02:	39 81       	ldd	r19, Y+1	; 0x01
     a04:	26 0f       	add	r18, r22
     a06:	37 1f       	adc	r19, r23
     a08:	2e 5f       	subi	r18, 0xFE	; 254
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
     a0c:	31 83       	std	Z+1, r19	; 0x01
     a0e:	20 83       	st	Z, r18
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	9b 81       	ldd	r25, Y+3	; 0x03
     a14:	93 83       	std	Z+3, r25	; 0x03
     a16:	82 83       	std	Z+2, r24	; 0x02
     a18:	45 2b       	or	r20, r21
     a1a:	29 f4       	brne	.+10     	; 0xa26 <free+0xa2>
     a1c:	f0 93 f7 01 	sts	0x01F7, r31
     a20:	e0 93 f6 01 	sts	0x01F6, r30
     a24:	42 c0       	rjmp	.+132    	; 0xaaa <free+0x126>
     a26:	13 96       	adiw	r26, 0x03	; 3
     a28:	fc 93       	st	X, r31
     a2a:	ee 93       	st	-X, r30
     a2c:	12 97       	sbiw	r26, 0x02	; 2
     a2e:	ed 01       	movw	r28, r26
     a30:	49 91       	ld	r20, Y+
     a32:	59 91       	ld	r21, Y+
     a34:	9e 01       	movw	r18, r28
     a36:	24 0f       	add	r18, r20
     a38:	35 1f       	adc	r19, r21
     a3a:	e2 17       	cp	r30, r18
     a3c:	f3 07       	cpc	r31, r19
     a3e:	71 f4       	brne	.+28     	; 0xa5c <free+0xd8>
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
     a48:	02 96       	adiw	r24, 0x02	; 2
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	9c 93       	st	X, r25
     a4e:	8e 93       	st	-X, r24
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	93 81       	ldd	r25, Z+3	; 0x03
     a54:	13 96       	adiw	r26, 0x03	; 3
     a56:	9c 93       	st	X, r25
     a58:	8e 93       	st	-X, r24
     a5a:	12 97       	sbiw	r26, 0x02	; 2
     a5c:	e0 e0       	ldi	r30, 0x00	; 0
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	d8 01       	movw	r26, r16
     a62:	12 96       	adiw	r26, 0x02	; 2
     a64:	8d 91       	ld	r24, X+
     a66:	9c 91       	ld	r25, X
     a68:	13 97       	sbiw	r26, 0x03	; 3
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	19 f0       	breq	.+6      	; 0xa74 <free+0xf0>
     a6e:	f8 01       	movw	r30, r16
     a70:	8c 01       	movw	r16, r24
     a72:	f6 cf       	rjmp	.-20     	; 0xa60 <free+0xdc>
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	98 01       	movw	r18, r16
     a7a:	2e 5f       	subi	r18, 0xFE	; 254
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
     a7e:	82 0f       	add	r24, r18
     a80:	93 1f       	adc	r25, r19
     a82:	20 91 f4 01 	lds	r18, 0x01F4
     a86:	30 91 f5 01 	lds	r19, 0x01F5
     a8a:	28 17       	cp	r18, r24
     a8c:	39 07       	cpc	r19, r25
     a8e:	69 f4       	brne	.+26     	; 0xaaa <free+0x126>
     a90:	30 97       	sbiw	r30, 0x00	; 0
     a92:	29 f4       	brne	.+10     	; 0xa9e <free+0x11a>
     a94:	10 92 f7 01 	sts	0x01F7, r1
     a98:	10 92 f6 01 	sts	0x01F6, r1
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <free+0x11e>
     a9e:	13 82       	std	Z+3, r1	; 0x03
     aa0:	12 82       	std	Z+2, r1	; 0x02
     aa2:	10 93 f5 01 	sts	0x01F5, r17
     aa6:	00 93 f4 01 	sts	0x01F4, r16
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	08 95       	ret

00000ab4 <sprintf>:
     ab4:	ae e0       	ldi	r26, 0x0E	; 14
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e0 e6       	ldi	r30, 0x60	; 96
     aba:	f5 e0       	ldi	r31, 0x05	; 5
     abc:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__prologue_saves__+0x1c>
     ac0:	0d 89       	ldd	r16, Y+21	; 0x15
     ac2:	1e 89       	ldd	r17, Y+22	; 0x16
     ac4:	86 e0       	ldi	r24, 0x06	; 6
     ac6:	8c 83       	std	Y+4, r24	; 0x04
     ac8:	1a 83       	std	Y+2, r17	; 0x02
     aca:	09 83       	std	Y+1, r16	; 0x01
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	9f e7       	ldi	r25, 0x7F	; 127
     ad0:	9e 83       	std	Y+6, r25	; 0x06
     ad2:	8d 83       	std	Y+5, r24	; 0x05
     ad4:	ae 01       	movw	r20, r28
     ad6:	47 5e       	subi	r20, 0xE7	; 231
     ad8:	5f 4f       	sbci	r21, 0xFF	; 255
     ada:	6f 89       	ldd	r22, Y+23	; 0x17
     adc:	78 8d       	ldd	r23, Y+24	; 0x18
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	0e 94 7d 05 	call	0xafa	; 0xafa <vfprintf>
     ae6:	2f 81       	ldd	r18, Y+7	; 0x07
     ae8:	38 85       	ldd	r19, Y+8	; 0x08
     aea:	f8 01       	movw	r30, r16
     aec:	e2 0f       	add	r30, r18
     aee:	f3 1f       	adc	r31, r19
     af0:	10 82       	st	Z, r1
     af2:	2e 96       	adiw	r28, 0x0e	; 14
     af4:	e4 e0       	ldi	r30, 0x04	; 4
     af6:	0c 94 25 08 	jmp	0x104a	; 0x104a <__epilogue_restores__+0x1c>

00000afa <vfprintf>:
     afa:	ac e0       	ldi	r26, 0x0C	; 12
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	e3 e8       	ldi	r30, 0x83	; 131
     b00:	f5 e0       	ldi	r31, 0x05	; 5
     b02:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__prologue_saves__>
     b06:	7c 01       	movw	r14, r24
     b08:	6b 01       	movw	r12, r22
     b0a:	8a 01       	movw	r16, r20
     b0c:	fc 01       	movw	r30, r24
     b0e:	17 82       	std	Z+7, r1	; 0x07
     b10:	16 82       	std	Z+6, r1	; 0x06
     b12:	83 81       	ldd	r24, Z+3	; 0x03
     b14:	81 ff       	sbrs	r24, 1
     b16:	bd c1       	rjmp	.+890    	; 0xe92 <vfprintf+0x398>
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	4c 01       	movw	r8, r24
     b1e:	f7 01       	movw	r30, r14
     b20:	93 81       	ldd	r25, Z+3	; 0x03
     b22:	f6 01       	movw	r30, r12
     b24:	93 fd       	sbrc	r25, 3
     b26:	85 91       	lpm	r24, Z+
     b28:	93 ff       	sbrs	r25, 3
     b2a:	81 91       	ld	r24, Z+
     b2c:	6f 01       	movw	r12, r30
     b2e:	88 23       	and	r24, r24
     b30:	09 f4       	brne	.+2      	; 0xb34 <vfprintf+0x3a>
     b32:	ab c1       	rjmp	.+854    	; 0xe8a <vfprintf+0x390>
     b34:	85 32       	cpi	r24, 0x25	; 37
     b36:	39 f4       	brne	.+14     	; 0xb46 <vfprintf+0x4c>
     b38:	93 fd       	sbrc	r25, 3
     b3a:	85 91       	lpm	r24, Z+
     b3c:	93 ff       	sbrs	r25, 3
     b3e:	81 91       	ld	r24, Z+
     b40:	6f 01       	movw	r12, r30
     b42:	85 32       	cpi	r24, 0x25	; 37
     b44:	29 f4       	brne	.+10     	; 0xb50 <vfprintf+0x56>
     b46:	b7 01       	movw	r22, r14
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     b4e:	e7 cf       	rjmp	.-50     	; 0xb1e <vfprintf+0x24>
     b50:	51 2c       	mov	r5, r1
     b52:	31 2c       	mov	r3, r1
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	20 32       	cpi	r18, 0x20	; 32
     b58:	a0 f4       	brcc	.+40     	; 0xb82 <vfprintf+0x88>
     b5a:	8b 32       	cpi	r24, 0x2B	; 43
     b5c:	69 f0       	breq	.+26     	; 0xb78 <vfprintf+0x7e>
     b5e:	30 f4       	brcc	.+12     	; 0xb6c <vfprintf+0x72>
     b60:	80 32       	cpi	r24, 0x20	; 32
     b62:	59 f0       	breq	.+22     	; 0xb7a <vfprintf+0x80>
     b64:	83 32       	cpi	r24, 0x23	; 35
     b66:	69 f4       	brne	.+26     	; 0xb82 <vfprintf+0x88>
     b68:	20 61       	ori	r18, 0x10	; 16
     b6a:	2c c0       	rjmp	.+88     	; 0xbc4 <vfprintf+0xca>
     b6c:	8d 32       	cpi	r24, 0x2D	; 45
     b6e:	39 f0       	breq	.+14     	; 0xb7e <vfprintf+0x84>
     b70:	80 33       	cpi	r24, 0x30	; 48
     b72:	39 f4       	brne	.+14     	; 0xb82 <vfprintf+0x88>
     b74:	21 60       	ori	r18, 0x01	; 1
     b76:	26 c0       	rjmp	.+76     	; 0xbc4 <vfprintf+0xca>
     b78:	22 60       	ori	r18, 0x02	; 2
     b7a:	24 60       	ori	r18, 0x04	; 4
     b7c:	23 c0       	rjmp	.+70     	; 0xbc4 <vfprintf+0xca>
     b7e:	28 60       	ori	r18, 0x08	; 8
     b80:	21 c0       	rjmp	.+66     	; 0xbc4 <vfprintf+0xca>
     b82:	27 fd       	sbrc	r18, 7
     b84:	27 c0       	rjmp	.+78     	; 0xbd4 <vfprintf+0xda>
     b86:	30 ed       	ldi	r19, 0xD0	; 208
     b88:	38 0f       	add	r19, r24
     b8a:	3a 30       	cpi	r19, 0x0A	; 10
     b8c:	78 f4       	brcc	.+30     	; 0xbac <vfprintf+0xb2>
     b8e:	26 ff       	sbrs	r18, 6
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <vfprintf+0xa4>
     b92:	fa e0       	ldi	r31, 0x0A	; 10
     b94:	5f 9e       	mul	r5, r31
     b96:	30 0d       	add	r19, r0
     b98:	11 24       	eor	r1, r1
     b9a:	53 2e       	mov	r5, r19
     b9c:	13 c0       	rjmp	.+38     	; 0xbc4 <vfprintf+0xca>
     b9e:	8a e0       	ldi	r24, 0x0A	; 10
     ba0:	38 9e       	mul	r3, r24
     ba2:	30 0d       	add	r19, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	33 2e       	mov	r3, r19
     ba8:	20 62       	ori	r18, 0x20	; 32
     baa:	0c c0       	rjmp	.+24     	; 0xbc4 <vfprintf+0xca>
     bac:	8e 32       	cpi	r24, 0x2E	; 46
     bae:	21 f4       	brne	.+8      	; 0xbb8 <vfprintf+0xbe>
     bb0:	26 fd       	sbrc	r18, 6
     bb2:	6b c1       	rjmp	.+726    	; 0xe8a <vfprintf+0x390>
     bb4:	20 64       	ori	r18, 0x40	; 64
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <vfprintf+0xca>
     bb8:	8c 36       	cpi	r24, 0x6C	; 108
     bba:	11 f4       	brne	.+4      	; 0xbc0 <vfprintf+0xc6>
     bbc:	20 68       	ori	r18, 0x80	; 128
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <vfprintf+0xca>
     bc0:	88 36       	cpi	r24, 0x68	; 104
     bc2:	41 f4       	brne	.+16     	; 0xbd4 <vfprintf+0xda>
     bc4:	f6 01       	movw	r30, r12
     bc6:	93 fd       	sbrc	r25, 3
     bc8:	85 91       	lpm	r24, Z+
     bca:	93 ff       	sbrs	r25, 3
     bcc:	81 91       	ld	r24, Z+
     bce:	6f 01       	movw	r12, r30
     bd0:	81 11       	cpse	r24, r1
     bd2:	c1 cf       	rjmp	.-126    	; 0xb56 <vfprintf+0x5c>
     bd4:	98 2f       	mov	r25, r24
     bd6:	9f 7d       	andi	r25, 0xDF	; 223
     bd8:	95 54       	subi	r25, 0x45	; 69
     bda:	93 30       	cpi	r25, 0x03	; 3
     bdc:	28 f4       	brcc	.+10     	; 0xbe8 <vfprintf+0xee>
     bde:	0c 5f       	subi	r16, 0xFC	; 252
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	ff e3       	ldi	r31, 0x3F	; 63
     be4:	f9 83       	std	Y+1, r31	; 0x01
     be6:	0d c0       	rjmp	.+26     	; 0xc02 <vfprintf+0x108>
     be8:	83 36       	cpi	r24, 0x63	; 99
     bea:	31 f0       	breq	.+12     	; 0xbf8 <vfprintf+0xfe>
     bec:	83 37       	cpi	r24, 0x73	; 115
     bee:	71 f0       	breq	.+28     	; 0xc0c <vfprintf+0x112>
     bf0:	83 35       	cpi	r24, 0x53	; 83
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <vfprintf+0xfc>
     bf4:	5b c0       	rjmp	.+182    	; 0xcac <vfprintf+0x1b2>
     bf6:	22 c0       	rjmp	.+68     	; 0xc3c <vfprintf+0x142>
     bf8:	f8 01       	movw	r30, r16
     bfa:	80 81       	ld	r24, Z
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	0e 5f       	subi	r16, 0xFE	; 254
     c00:	1f 4f       	sbci	r17, 0xFF	; 255
     c02:	44 24       	eor	r4, r4
     c04:	43 94       	inc	r4
     c06:	51 2c       	mov	r5, r1
     c08:	54 01       	movw	r10, r8
     c0a:	15 c0       	rjmp	.+42     	; 0xc36 <vfprintf+0x13c>
     c0c:	38 01       	movw	r6, r16
     c0e:	f2 e0       	ldi	r31, 0x02	; 2
     c10:	6f 0e       	add	r6, r31
     c12:	71 1c       	adc	r7, r1
     c14:	f8 01       	movw	r30, r16
     c16:	a0 80       	ld	r10, Z
     c18:	b1 80       	ldd	r11, Z+1	; 0x01
     c1a:	26 ff       	sbrs	r18, 6
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <vfprintf+0x12a>
     c1e:	65 2d       	mov	r22, r5
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <vfprintf+0x12e>
     c24:	6f ef       	ldi	r22, 0xFF	; 255
     c26:	7f ef       	ldi	r23, 0xFF	; 255
     c28:	c5 01       	movw	r24, r10
     c2a:	2c 87       	std	Y+12, r18	; 0x0c
     c2c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <strnlen>
     c30:	2c 01       	movw	r4, r24
     c32:	83 01       	movw	r16, r6
     c34:	2c 85       	ldd	r18, Y+12	; 0x0c
     c36:	2f 77       	andi	r18, 0x7F	; 127
     c38:	22 2e       	mov	r2, r18
     c3a:	17 c0       	rjmp	.+46     	; 0xc6a <vfprintf+0x170>
     c3c:	38 01       	movw	r6, r16
     c3e:	f2 e0       	ldi	r31, 0x02	; 2
     c40:	6f 0e       	add	r6, r31
     c42:	71 1c       	adc	r7, r1
     c44:	f8 01       	movw	r30, r16
     c46:	a0 80       	ld	r10, Z
     c48:	b1 80       	ldd	r11, Z+1	; 0x01
     c4a:	26 ff       	sbrs	r18, 6
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <vfprintf+0x15a>
     c4e:	65 2d       	mov	r22, r5
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0x15e>
     c54:	6f ef       	ldi	r22, 0xFF	; 255
     c56:	7f ef       	ldi	r23, 0xFF	; 255
     c58:	c5 01       	movw	r24, r10
     c5a:	2c 87       	std	Y+12, r18	; 0x0c
     c5c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <strnlen_P>
     c60:	2c 01       	movw	r4, r24
     c62:	2c 85       	ldd	r18, Y+12	; 0x0c
     c64:	20 68       	ori	r18, 0x80	; 128
     c66:	22 2e       	mov	r2, r18
     c68:	83 01       	movw	r16, r6
     c6a:	23 fc       	sbrc	r2, 3
     c6c:	1b c0       	rjmp	.+54     	; 0xca4 <vfprintf+0x1aa>
     c6e:	83 2d       	mov	r24, r3
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	48 16       	cp	r4, r24
     c74:	59 06       	cpc	r5, r25
     c76:	b0 f4       	brcc	.+44     	; 0xca4 <vfprintf+0x1aa>
     c78:	b7 01       	movw	r22, r14
     c7a:	80 e2       	ldi	r24, 0x20	; 32
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     c82:	3a 94       	dec	r3
     c84:	f4 cf       	rjmp	.-24     	; 0xc6e <vfprintf+0x174>
     c86:	f5 01       	movw	r30, r10
     c88:	27 fc       	sbrc	r2, 7
     c8a:	85 91       	lpm	r24, Z+
     c8c:	27 fe       	sbrs	r2, 7
     c8e:	81 91       	ld	r24, Z+
     c90:	5f 01       	movw	r10, r30
     c92:	b7 01       	movw	r22, r14
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     c9a:	31 10       	cpse	r3, r1
     c9c:	3a 94       	dec	r3
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	4f 1a       	sub	r4, r31
     ca2:	51 08       	sbc	r5, r1
     ca4:	41 14       	cp	r4, r1
     ca6:	51 04       	cpc	r5, r1
     ca8:	71 f7       	brne	.-36     	; 0xc86 <vfprintf+0x18c>
     caa:	e5 c0       	rjmp	.+458    	; 0xe76 <vfprintf+0x37c>
     cac:	84 36       	cpi	r24, 0x64	; 100
     cae:	11 f0       	breq	.+4      	; 0xcb4 <vfprintf+0x1ba>
     cb0:	89 36       	cpi	r24, 0x69	; 105
     cb2:	39 f5       	brne	.+78     	; 0xd02 <vfprintf+0x208>
     cb4:	f8 01       	movw	r30, r16
     cb6:	27 ff       	sbrs	r18, 7
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <vfprintf+0x1ce>
     cba:	60 81       	ld	r22, Z
     cbc:	71 81       	ldd	r23, Z+1	; 0x01
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	93 81       	ldd	r25, Z+3	; 0x03
     cc2:	0c 5f       	subi	r16, 0xFC	; 252
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <vfprintf+0x1de>
     cc8:	60 81       	ld	r22, Z
     cca:	71 81       	ldd	r23, Z+1	; 0x01
     ccc:	07 2e       	mov	r0, r23
     cce:	00 0c       	add	r0, r0
     cd0:	88 0b       	sbc	r24, r24
     cd2:	99 0b       	sbc	r25, r25
     cd4:	0e 5f       	subi	r16, 0xFE	; 254
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	2f 76       	andi	r18, 0x6F	; 111
     cda:	72 2e       	mov	r7, r18
     cdc:	97 ff       	sbrs	r25, 7
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <vfprintf+0x1f8>
     ce0:	90 95       	com	r25
     ce2:	80 95       	com	r24
     ce4:	70 95       	com	r23
     ce6:	61 95       	neg	r22
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	8f 4f       	sbci	r24, 0xFF	; 255
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	20 68       	ori	r18, 0x80	; 128
     cf0:	72 2e       	mov	r7, r18
     cf2:	2a e0       	ldi	r18, 0x0A	; 10
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	a4 01       	movw	r20, r8
     cf8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__ultoa_invert>
     cfc:	a8 2e       	mov	r10, r24
     cfe:	a8 18       	sub	r10, r8
     d00:	44 c0       	rjmp	.+136    	; 0xd8a <vfprintf+0x290>
     d02:	85 37       	cpi	r24, 0x75	; 117
     d04:	29 f4       	brne	.+10     	; 0xd10 <vfprintf+0x216>
     d06:	2f 7e       	andi	r18, 0xEF	; 239
     d08:	b2 2e       	mov	r11, r18
     d0a:	2a e0       	ldi	r18, 0x0A	; 10
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	25 c0       	rjmp	.+74     	; 0xd5a <vfprintf+0x260>
     d10:	f2 2f       	mov	r31, r18
     d12:	f9 7f       	andi	r31, 0xF9	; 249
     d14:	bf 2e       	mov	r11, r31
     d16:	8f 36       	cpi	r24, 0x6F	; 111
     d18:	c1 f0       	breq	.+48     	; 0xd4a <vfprintf+0x250>
     d1a:	18 f4       	brcc	.+6      	; 0xd22 <vfprintf+0x228>
     d1c:	88 35       	cpi	r24, 0x58	; 88
     d1e:	79 f0       	breq	.+30     	; 0xd3e <vfprintf+0x244>
     d20:	b4 c0       	rjmp	.+360    	; 0xe8a <vfprintf+0x390>
     d22:	80 37       	cpi	r24, 0x70	; 112
     d24:	19 f0       	breq	.+6      	; 0xd2c <vfprintf+0x232>
     d26:	88 37       	cpi	r24, 0x78	; 120
     d28:	21 f0       	breq	.+8      	; 0xd32 <vfprintf+0x238>
     d2a:	af c0       	rjmp	.+350    	; 0xe8a <vfprintf+0x390>
     d2c:	2f 2f       	mov	r18, r31
     d2e:	20 61       	ori	r18, 0x10	; 16
     d30:	b2 2e       	mov	r11, r18
     d32:	b4 fe       	sbrs	r11, 4
     d34:	0d c0       	rjmp	.+26     	; 0xd50 <vfprintf+0x256>
     d36:	8b 2d       	mov	r24, r11
     d38:	84 60       	ori	r24, 0x04	; 4
     d3a:	b8 2e       	mov	r11, r24
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <vfprintf+0x256>
     d3e:	24 ff       	sbrs	r18, 4
     d40:	0a c0       	rjmp	.+20     	; 0xd56 <vfprintf+0x25c>
     d42:	9f 2f       	mov	r25, r31
     d44:	96 60       	ori	r25, 0x06	; 6
     d46:	b9 2e       	mov	r11, r25
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <vfprintf+0x25c>
     d4a:	28 e0       	ldi	r18, 0x08	; 8
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <vfprintf+0x260>
     d50:	20 e1       	ldi	r18, 0x10	; 16
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <vfprintf+0x260>
     d56:	20 e1       	ldi	r18, 0x10	; 16
     d58:	32 e0       	ldi	r19, 0x02	; 2
     d5a:	f8 01       	movw	r30, r16
     d5c:	b7 fe       	sbrs	r11, 7
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <vfprintf+0x274>
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0c 5f       	subi	r16, 0xFC	; 252
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	06 c0       	rjmp	.+12     	; 0xd7a <vfprintf+0x280>
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 5f       	subi	r16, 0xFE	; 254
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	a4 01       	movw	r20, r8
     d7c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__ultoa_invert>
     d80:	a8 2e       	mov	r10, r24
     d82:	a8 18       	sub	r10, r8
     d84:	fb 2d       	mov	r31, r11
     d86:	ff 77       	andi	r31, 0x7F	; 127
     d88:	7f 2e       	mov	r7, r31
     d8a:	76 fe       	sbrs	r7, 6
     d8c:	0b c0       	rjmp	.+22     	; 0xda4 <vfprintf+0x2aa>
     d8e:	37 2d       	mov	r19, r7
     d90:	3e 7f       	andi	r19, 0xFE	; 254
     d92:	a5 14       	cp	r10, r5
     d94:	50 f4       	brcc	.+20     	; 0xdaa <vfprintf+0x2b0>
     d96:	74 fe       	sbrs	r7, 4
     d98:	0a c0       	rjmp	.+20     	; 0xdae <vfprintf+0x2b4>
     d9a:	72 fc       	sbrc	r7, 2
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <vfprintf+0x2b4>
     d9e:	37 2d       	mov	r19, r7
     da0:	3e 7e       	andi	r19, 0xEE	; 238
     da2:	05 c0       	rjmp	.+10     	; 0xdae <vfprintf+0x2b4>
     da4:	ba 2c       	mov	r11, r10
     da6:	37 2d       	mov	r19, r7
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <vfprintf+0x2b6>
     daa:	ba 2c       	mov	r11, r10
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <vfprintf+0x2b6>
     dae:	b5 2c       	mov	r11, r5
     db0:	34 ff       	sbrs	r19, 4
     db2:	0d c0       	rjmp	.+26     	; 0xdce <vfprintf+0x2d4>
     db4:	fe 01       	movw	r30, r28
     db6:	ea 0d       	add	r30, r10
     db8:	f1 1d       	adc	r31, r1
     dba:	80 81       	ld	r24, Z
     dbc:	80 33       	cpi	r24, 0x30	; 48
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <vfprintf+0x2ca>
     dc0:	39 7e       	andi	r19, 0xE9	; 233
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <vfprintf+0x2dc>
     dc4:	32 ff       	sbrs	r19, 2
     dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <vfprintf+0x2da>
     dc8:	b3 94       	inc	r11
     dca:	b3 94       	inc	r11
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <vfprintf+0x2dc>
     dce:	83 2f       	mov	r24, r19
     dd0:	86 78       	andi	r24, 0x86	; 134
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <vfprintf+0x2dc>
     dd4:	b3 94       	inc	r11
     dd6:	33 fd       	sbrc	r19, 3
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <vfprintf+0x306>
     dda:	30 ff       	sbrs	r19, 0
     ddc:	06 c0       	rjmp	.+12     	; 0xdea <vfprintf+0x2f0>
     dde:	5a 2c       	mov	r5, r10
     de0:	b3 14       	cp	r11, r3
     de2:	18 f4       	brcc	.+6      	; 0xdea <vfprintf+0x2f0>
     de4:	53 0c       	add	r5, r3
     de6:	5b 18       	sub	r5, r11
     de8:	b3 2c       	mov	r11, r3
     dea:	b3 14       	cp	r11, r3
     dec:	68 f4       	brcc	.+26     	; 0xe08 <vfprintf+0x30e>
     dee:	b7 01       	movw	r22, r14
     df0:	80 e2       	ldi	r24, 0x20	; 32
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	3c 87       	std	Y+12, r19	; 0x0c
     df6:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     dfa:	b3 94       	inc	r11
     dfc:	3c 85       	ldd	r19, Y+12	; 0x0c
     dfe:	f5 cf       	rjmp	.-22     	; 0xdea <vfprintf+0x2f0>
     e00:	b3 14       	cp	r11, r3
     e02:	10 f4       	brcc	.+4      	; 0xe08 <vfprintf+0x30e>
     e04:	3b 18       	sub	r3, r11
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <vfprintf+0x310>
     e08:	31 2c       	mov	r3, r1
     e0a:	34 ff       	sbrs	r19, 4
     e0c:	12 c0       	rjmp	.+36     	; 0xe32 <vfprintf+0x338>
     e0e:	b7 01       	movw	r22, r14
     e10:	80 e3       	ldi	r24, 0x30	; 48
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	3c 87       	std	Y+12, r19	; 0x0c
     e16:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     e1a:	3c 85       	ldd	r19, Y+12	; 0x0c
     e1c:	32 ff       	sbrs	r19, 2
     e1e:	17 c0       	rjmp	.+46     	; 0xe4e <vfprintf+0x354>
     e20:	31 fd       	sbrc	r19, 1
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x330>
     e24:	88 e7       	ldi	r24, 0x78	; 120
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x334>
     e2a:	88 e5       	ldi	r24, 0x58	; 88
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	b7 01       	movw	r22, r14
     e30:	0c c0       	rjmp	.+24     	; 0xe4a <vfprintf+0x350>
     e32:	83 2f       	mov	r24, r19
     e34:	86 78       	andi	r24, 0x86	; 134
     e36:	59 f0       	breq	.+22     	; 0xe4e <vfprintf+0x354>
     e38:	31 ff       	sbrs	r19, 1
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <vfprintf+0x346>
     e3c:	8b e2       	ldi	r24, 0x2B	; 43
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <vfprintf+0x348>
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	37 fd       	sbrc	r19, 7
     e44:	8d e2       	ldi	r24, 0x2D	; 45
     e46:	b7 01       	movw	r22, r14
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     e4e:	a5 14       	cp	r10, r5
     e50:	38 f4       	brcc	.+14     	; 0xe60 <vfprintf+0x366>
     e52:	b7 01       	movw	r22, r14
     e54:	80 e3       	ldi	r24, 0x30	; 48
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     e5c:	5a 94       	dec	r5
     e5e:	f7 cf       	rjmp	.-18     	; 0xe4e <vfprintf+0x354>
     e60:	aa 94       	dec	r10
     e62:	f4 01       	movw	r30, r8
     e64:	ea 0d       	add	r30, r10
     e66:	f1 1d       	adc	r31, r1
     e68:	80 81       	ld	r24, Z
     e6a:	b7 01       	movw	r22, r14
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     e72:	a1 10       	cpse	r10, r1
     e74:	f5 cf       	rjmp	.-22     	; 0xe60 <vfprintf+0x366>
     e76:	33 20       	and	r3, r3
     e78:	09 f4       	brne	.+2      	; 0xe7c <vfprintf+0x382>
     e7a:	51 ce       	rjmp	.-862    	; 0xb1e <vfprintf+0x24>
     e7c:	b7 01       	movw	r22, r14
     e7e:	80 e2       	ldi	r24, 0x20	; 32
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 65 07 	call	0xeca	; 0xeca <fputc>
     e86:	3a 94       	dec	r3
     e88:	f6 cf       	rjmp	.-20     	; 0xe76 <vfprintf+0x37c>
     e8a:	f7 01       	movw	r30, r14
     e8c:	86 81       	ldd	r24, Z+6	; 0x06
     e8e:	97 81       	ldd	r25, Z+7	; 0x07
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <vfprintf+0x39c>
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	9f ef       	ldi	r25, 0xFF	; 255
     e96:	2c 96       	adiw	r28, 0x0c	; 12
     e98:	e2 e1       	ldi	r30, 0x12	; 18
     e9a:	0c 94 17 08 	jmp	0x102e	; 0x102e <__epilogue_restores__>

00000e9e <strnlen_P>:
     e9e:	fc 01       	movw	r30, r24
     ea0:	05 90       	lpm	r0, Z+
     ea2:	61 50       	subi	r22, 0x01	; 1
     ea4:	70 40       	sbci	r23, 0x00	; 0
     ea6:	01 10       	cpse	r0, r1
     ea8:	d8 f7       	brcc	.-10     	; 0xea0 <strnlen_P+0x2>
     eaa:	80 95       	com	r24
     eac:	90 95       	com	r25
     eae:	8e 0f       	add	r24, r30
     eb0:	9f 1f       	adc	r25, r31
     eb2:	08 95       	ret

00000eb4 <strnlen>:
     eb4:	fc 01       	movw	r30, r24
     eb6:	61 50       	subi	r22, 0x01	; 1
     eb8:	70 40       	sbci	r23, 0x00	; 0
     eba:	01 90       	ld	r0, Z+
     ebc:	01 10       	cpse	r0, r1
     ebe:	d8 f7       	brcc	.-10     	; 0xeb6 <strnlen+0x2>
     ec0:	80 95       	com	r24
     ec2:	90 95       	com	r25
     ec4:	8e 0f       	add	r24, r30
     ec6:	9f 1f       	adc	r25, r31
     ec8:	08 95       	ret

00000eca <fputc>:
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	fb 01       	movw	r30, r22
     ed4:	23 81       	ldd	r18, Z+3	; 0x03
     ed6:	21 fd       	sbrc	r18, 1
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <fputc+0x16>
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f ef       	ldi	r25, 0xFF	; 255
     ede:	28 c0       	rjmp	.+80     	; 0xf30 <fputc+0x66>
     ee0:	22 ff       	sbrs	r18, 2
     ee2:	16 c0       	rjmp	.+44     	; 0xf10 <fputc+0x46>
     ee4:	46 81       	ldd	r20, Z+6	; 0x06
     ee6:	57 81       	ldd	r21, Z+7	; 0x07
     ee8:	24 81       	ldd	r18, Z+4	; 0x04
     eea:	35 81       	ldd	r19, Z+5	; 0x05
     eec:	42 17       	cp	r20, r18
     eee:	53 07       	cpc	r21, r19
     ef0:	44 f4       	brge	.+16     	; 0xf02 <fputc+0x38>
     ef2:	a0 81       	ld	r26, Z
     ef4:	b1 81       	ldd	r27, Z+1	; 0x01
     ef6:	9d 01       	movw	r18, r26
     ef8:	2f 5f       	subi	r18, 0xFF	; 255
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	31 83       	std	Z+1, r19	; 0x01
     efe:	20 83       	st	Z, r18
     f00:	8c 93       	st	X, r24
     f02:	26 81       	ldd	r18, Z+6	; 0x06
     f04:	37 81       	ldd	r19, Z+7	; 0x07
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	37 83       	std	Z+7, r19	; 0x07
     f0c:	26 83       	std	Z+6, r18	; 0x06
     f0e:	10 c0       	rjmp	.+32     	; 0xf30 <fputc+0x66>
     f10:	eb 01       	movw	r28, r22
     f12:	09 2f       	mov	r16, r25
     f14:	18 2f       	mov	r17, r24
     f16:	00 84       	ldd	r0, Z+8	; 0x08
     f18:	f1 85       	ldd	r31, Z+9	; 0x09
     f1a:	e0 2d       	mov	r30, r0
     f1c:	09 95       	icall
     f1e:	89 2b       	or	r24, r25
     f20:	e1 f6       	brne	.-72     	; 0xeda <fputc+0x10>
     f22:	8e 81       	ldd	r24, Y+6	; 0x06
     f24:	9f 81       	ldd	r25, Y+7	; 0x07
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	9f 83       	std	Y+7, r25	; 0x07
     f2a:	8e 83       	std	Y+6, r24	; 0x06
     f2c:	81 2f       	mov	r24, r17
     f2e:	90 2f       	mov	r25, r16
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <__ultoa_invert>:
     f3a:	fa 01       	movw	r30, r20
     f3c:	aa 27       	eor	r26, r26
     f3e:	28 30       	cpi	r18, 0x08	; 8
     f40:	51 f1       	breq	.+84     	; 0xf96 <__ultoa_invert+0x5c>
     f42:	20 31       	cpi	r18, 0x10	; 16
     f44:	81 f1       	breq	.+96     	; 0xfa6 <__ultoa_invert+0x6c>
     f46:	e8 94       	clt
     f48:	6f 93       	push	r22
     f4a:	6e 7f       	andi	r22, 0xFE	; 254
     f4c:	6e 5f       	subi	r22, 0xFE	; 254
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	af 4f       	sbci	r26, 0xFF	; 255
     f56:	b1 e0       	ldi	r27, 0x01	; 1
     f58:	3e d0       	rcall	.+124    	; 0xfd6 <__ultoa_invert+0x9c>
     f5a:	b4 e0       	ldi	r27, 0x04	; 4
     f5c:	3c d0       	rcall	.+120    	; 0xfd6 <__ultoa_invert+0x9c>
     f5e:	67 0f       	add	r22, r23
     f60:	78 1f       	adc	r23, r24
     f62:	89 1f       	adc	r24, r25
     f64:	9a 1f       	adc	r25, r26
     f66:	a1 1d       	adc	r26, r1
     f68:	68 0f       	add	r22, r24
     f6a:	79 1f       	adc	r23, r25
     f6c:	8a 1f       	adc	r24, r26
     f6e:	91 1d       	adc	r25, r1
     f70:	a1 1d       	adc	r26, r1
     f72:	6a 0f       	add	r22, r26
     f74:	71 1d       	adc	r23, r1
     f76:	81 1d       	adc	r24, r1
     f78:	91 1d       	adc	r25, r1
     f7a:	a1 1d       	adc	r26, r1
     f7c:	20 d0       	rcall	.+64     	; 0xfbe <__ultoa_invert+0x84>
     f7e:	09 f4       	brne	.+2      	; 0xf82 <__ultoa_invert+0x48>
     f80:	68 94       	set
     f82:	3f 91       	pop	r19
     f84:	2a e0       	ldi	r18, 0x0A	; 10
     f86:	26 9f       	mul	r18, r22
     f88:	11 24       	eor	r1, r1
     f8a:	30 19       	sub	r19, r0
     f8c:	30 5d       	subi	r19, 0xD0	; 208
     f8e:	31 93       	st	Z+, r19
     f90:	de f6       	brtc	.-74     	; 0xf48 <__ultoa_invert+0xe>
     f92:	cf 01       	movw	r24, r30
     f94:	08 95       	ret
     f96:	46 2f       	mov	r20, r22
     f98:	47 70       	andi	r20, 0x07	; 7
     f9a:	40 5d       	subi	r20, 0xD0	; 208
     f9c:	41 93       	st	Z+, r20
     f9e:	b3 e0       	ldi	r27, 0x03	; 3
     fa0:	0f d0       	rcall	.+30     	; 0xfc0 <__ultoa_invert+0x86>
     fa2:	c9 f7       	brne	.-14     	; 0xf96 <__ultoa_invert+0x5c>
     fa4:	f6 cf       	rjmp	.-20     	; 0xf92 <__ultoa_invert+0x58>
     fa6:	46 2f       	mov	r20, r22
     fa8:	4f 70       	andi	r20, 0x0F	; 15
     faa:	40 5d       	subi	r20, 0xD0	; 208
     fac:	4a 33       	cpi	r20, 0x3A	; 58
     fae:	18 f0       	brcs	.+6      	; 0xfb6 <__ultoa_invert+0x7c>
     fb0:	49 5d       	subi	r20, 0xD9	; 217
     fb2:	31 fd       	sbrc	r19, 1
     fb4:	40 52       	subi	r20, 0x20	; 32
     fb6:	41 93       	st	Z+, r20
     fb8:	02 d0       	rcall	.+4      	; 0xfbe <__ultoa_invert+0x84>
     fba:	a9 f7       	brne	.-22     	; 0xfa6 <__ultoa_invert+0x6c>
     fbc:	ea cf       	rjmp	.-44     	; 0xf92 <__ultoa_invert+0x58>
     fbe:	b4 e0       	ldi	r27, 0x04	; 4
     fc0:	a6 95       	lsr	r26
     fc2:	97 95       	ror	r25
     fc4:	87 95       	ror	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	ba 95       	dec	r27
     fcc:	c9 f7       	brne	.-14     	; 0xfc0 <__ultoa_invert+0x86>
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	61 05       	cpc	r22, r1
     fd2:	71 05       	cpc	r23, r1
     fd4:	08 95       	ret
     fd6:	9b 01       	movw	r18, r22
     fd8:	ac 01       	movw	r20, r24
     fda:	0a 2e       	mov	r0, r26
     fdc:	06 94       	lsr	r0
     fde:	57 95       	ror	r21
     fe0:	47 95       	ror	r20
     fe2:	37 95       	ror	r19
     fe4:	27 95       	ror	r18
     fe6:	ba 95       	dec	r27
     fe8:	c9 f7       	brne	.-14     	; 0xfdc <__ultoa_invert+0xa2>
     fea:	62 0f       	add	r22, r18
     fec:	73 1f       	adc	r23, r19
     fee:	84 1f       	adc	r24, r20
     ff0:	95 1f       	adc	r25, r21
     ff2:	a0 1d       	adc	r26, r0
     ff4:	08 95       	ret

00000ff6 <__prologue_saves__>:
     ff6:	2f 92       	push	r2
     ff8:	3f 92       	push	r3
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	ca 1b       	sub	r28, r26
    1020:	db 0b       	sbc	r29, r27
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	09 94       	ijmp

0000102e <__epilogue_restores__>:
    102e:	2a 88       	ldd	r2, Y+18	; 0x12
    1030:	39 88       	ldd	r3, Y+17	; 0x11
    1032:	48 88       	ldd	r4, Y+16	; 0x10
    1034:	5f 84       	ldd	r5, Y+15	; 0x0f
    1036:	6e 84       	ldd	r6, Y+14	; 0x0e
    1038:	7d 84       	ldd	r7, Y+13	; 0x0d
    103a:	8c 84       	ldd	r8, Y+12	; 0x0c
    103c:	9b 84       	ldd	r9, Y+11	; 0x0b
    103e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1040:	b9 84       	ldd	r11, Y+9	; 0x09
    1042:	c8 84       	ldd	r12, Y+8	; 0x08
    1044:	df 80       	ldd	r13, Y+7	; 0x07
    1046:	ee 80       	ldd	r14, Y+6	; 0x06
    1048:	fd 80       	ldd	r15, Y+5	; 0x05
    104a:	0c 81       	ldd	r16, Y+4	; 0x04
    104c:	1b 81       	ldd	r17, Y+3	; 0x03
    104e:	aa 81       	ldd	r26, Y+2	; 0x02
    1050:	b9 81       	ldd	r27, Y+1	; 0x01
    1052:	ce 0f       	add	r28, r30
    1054:	d1 1d       	adc	r29, r1
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	ed 01       	movw	r28, r26
    1062:	08 95       	ret

00001064 <__do_global_dtors>:
    1064:	10 e0       	ldi	r17, 0x00	; 0
    1066:	c5 e3       	ldi	r28, 0x35	; 53
    1068:	d0 e0       	ldi	r29, 0x00	; 0
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <__do_global_dtors+0x10>
    106c:	fe 01       	movw	r30, r28
    106e:	0e 94 27 04 	call	0x84e	; 0x84e <__tablejump2__>
    1072:	21 96       	adiw	r28, 0x01	; 1
    1074:	c6 33       	cpi	r28, 0x36	; 54
    1076:	d1 07       	cpc	r29, r17
    1078:	c9 f7       	brne	.-14     	; 0x106c <__do_global_dtors+0x8>
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
