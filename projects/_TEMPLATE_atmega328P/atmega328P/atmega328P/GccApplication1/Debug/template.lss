
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  000017e0  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000109  0080024a  0080024a  000019be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002009  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d0  00000000  00000000  00003b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060c  00000000  00000000  000041fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  0000480c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cc5  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0b  00000000  00000000  00005879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__dtors_end>
       4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      48:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_18>
      4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      50:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_20>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_21>
      58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      68:	05 03       	mulsu	r16, r21
      6a:	b5 04       	cpc	r11, r5
      6c:	c5 02       	muls	r28, r21
      6e:	b5 04       	cpc	r11, r5
      70:	b5 04       	cpc	r11, r5
      72:	49 02       	muls	r20, r25
      74:	5e 02       	muls	r21, r30
      76:	73 02       	muls	r23, r19
      78:	88 02       	muls	r24, r24
      7a:	9d 02       	muls	r25, r29
      7c:	b2 02       	muls	r27, r18
      7e:	b5 04       	cpc	r11, r5
      80:	b5 04       	cpc	r11, r5
      82:	b5 04       	cpc	r11, r5
      84:	b5 04       	cpc	r11, r5
      86:	b5 04       	cpc	r11, r5
      88:	b5 04       	cpc	r11, r5
      8a:	b5 04       	cpc	r11, r5
      8c:	b5 04       	cpc	r11, r5
      8e:	b5 04       	cpc	r11, r5
      90:	b5 04       	cpc	r11, r5
      92:	b5 04       	cpc	r11, r5
      94:	b5 04       	cpc	r11, r5
      96:	b5 04       	cpc	r11, r5
      98:	b5 04       	cpc	r11, r5
      9a:	b5 04       	cpc	r11, r5
      9c:	b5 04       	cpc	r11, r5
      9e:	b5 04       	cpc	r11, r5
      a0:	b5 04       	cpc	r11, r5
      a2:	b5 04       	cpc	r11, r5
      a4:	b5 04       	cpc	r11, r5
      a6:	b5 04       	cpc	r11, r5
      a8:	b5 04       	cpc	r11, r5
      aa:	b5 04       	cpc	r11, r5
      ac:	b5 04       	cpc	r11, r5
      ae:	b5 04       	cpc	r11, r5
      b0:	b5 04       	cpc	r11, r5
      b2:	b5 04       	cpc	r11, r5
      b4:	b5 04       	cpc	r11, r5
      b6:	b5 04       	cpc	r11, r5
      b8:	b5 04       	cpc	r11, r5
      ba:	b5 04       	cpc	r11, r5
      bc:	b5 04       	cpc	r11, r5
      be:	b5 04       	cpc	r11, r5
      c0:	b5 04       	cpc	r11, r5
      c2:	b5 04       	cpc	r11, r5
      c4:	b5 04       	cpc	r11, r5
      c6:	b5 04       	cpc	r11, r5
      c8:	b5 04       	cpc	r11, r5
      ca:	b5 04       	cpc	r11, r5
      cc:	b5 04       	cpc	r11, r5
      ce:	b5 04       	cpc	r11, r5
      d0:	b5 04       	cpc	r11, r5
      d2:	45 03       	mulsu	r20, r21
      d4:	b5 04       	cpc	r11, r5
      d6:	b5 04       	cpc	r11, r5
      d8:	2f 02       	muls	r18, r31
      da:	b1 04       	cpc	r11, r1
      dc:	b5 04       	cpc	r11, r5
      de:	b5 04       	cpc	r11, r5
      e0:	b5 04       	cpc	r11, r5
      e2:	3c 02       	muls	r19, r28
      e4:	b5 04       	cpc	r11, r5
      e6:	b5 04       	cpc	r11, r5
      e8:	b5 04       	cpc	r11, r5
      ea:	b5 04       	cpc	r11, r5
      ec:	b5 04       	cpc	r11, r5
      ee:	b5 04       	cpc	r11, r5
      f0:	96 03       	fmuls	r17, r22
      f2:	b5 04       	cpc	r11, r5
      f4:	b5 04       	cpc	r11, r5
      f6:	b5 04       	cpc	r11, r5
      f8:	b5 04       	cpc	r11, r5
      fa:	b5 04       	cpc	r11, r5
      fc:	c2 03       	fmuls	r20, r18
      fe:	13 04       	cpc	r1, r3
     100:	a5 04       	cpc	r10, r5

00000102 <__ctors_start>:
     102:	d4 05       	cpc	r29, r4

00000104 <__ctors_end>:
     104:	74 07       	cpc	r23, r20

00000106 <__dtors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d8 e0       	ldi	r29, 0x08	; 8
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	12 e0       	ldi	r17, 0x02	; 2
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e0 ee       	ldi	r30, 0xE0	; 224
     11a:	f7 e1       	ldi	r31, 0x17	; 23
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	aa 34       	cpi	r26, 0x4A	; 74
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	23 e0       	ldi	r18, 0x03	; 3
     12a:	aa e4       	ldi	r26, 0x4A	; 74
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a3 35       	cpi	r26, 0x53	; 83
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>

00000138 <__do_global_ctors>:
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c2 e8       	ldi	r28, 0x82	; 130
     13c:	d0 e0       	ldi	r29, 0x00	; 0
     13e:	04 c0       	rjmp	.+8      	; 0x148 <__do_global_ctors+0x10>
     140:	21 97       	sbiw	r28, 0x01	; 1
     142:	fe 01       	movw	r30, r28
     144:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__tablejump2__>
     148:	c1 38       	cpi	r28, 0x81	; 129
     14a:	d1 07       	cpc	r29, r17
     14c:	c9 f7       	brne	.-14     	; 0x140 <__do_global_ctors+0x8>
     14e:	0e 94 80 05 	call	0xb00	; 0xb00 <main>
     152:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__do_global_dtors>

00000156 <__bad_interrupt>:
     156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
     15a:	08 95       	ret

0000015c <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
     15c:	08 95       	ret

0000015e <_Z14error_functionv>:
		}
	}
}

// Turns all power outputs off, pass this function to default _error_function
void error_function() {
     15e:	e9 e0       	ldi	r30, 0x09	; 9
     160:	f3 e0       	ldi	r31, 0x03	; 3
     162:	25 e4       	ldi	r18, 0x45	; 69
     164:	33 e0       	ldi	r19, 0x03	; 3
     166:	df 01       	movw	r26, r30
     168:	17 97       	sbiw	r26, 0x07	; 7
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     16a:	0d 90       	ld	r0, X+
     16c:	bc 91       	ld	r27, X
     16e:	a0 2d       	mov	r26, r0
     170:	9c 91       	ld	r25, X
     172:	80 81       	ld	r24, Z
     174:	80 95       	com	r24
     176:	89 23       	and	r24, r25
     178:	8c 93       	st	X, r24
     17a:	3a 96       	adiw	r30, 0x0a	; 10
	for (int i=1; i<=6; ++i) enable[i].clear();
     17c:	e2 17       	cp	r30, r18
     17e:	f3 07       	cpc	r31, r19
     180:	91 f7       	brne	.-28     	; 0x166 <_Z14error_functionv+0x8>
}
     182:	08 95       	ret

00000184 <_Z18error_led_functionv>:
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     184:	a6 ef       	ldi	r26, 0xF6	; 246
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	12 96       	adiw	r26, 0x02	; 2
     18a:	ed 91       	ld	r30, X+
     18c:	fc 91       	ld	r31, X
     18e:	13 97       	sbiw	r26, 0x03	; 3
     190:	90 81       	ld	r25, Z
     192:	19 96       	adiw	r26, 0x09	; 9
     194:	8c 91       	ld	r24, X
     196:	89 27       	eor	r24, r25
     198:	80 83       	st	Z, r24
     19a:	08 95       	ret

0000019c <_Z12state_normalv>:
	uint16_t pulse_width;
};
volatile PduData pduData = {State::NORMAL, 1500};

void poll_serial_and_process();
void state_normal() {
     19c:	08 95       	ret

0000019e <_Z15state_immediatev>:
	
}
void state_immediate() {
     19e:	08 95       	ret

000001a0 <_ZN6opbots5InputD0Ev>:
	}
	return p;
}

void operator delete(void * p) {
	free(p);
     1a0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <free>
     1a4:	08 95       	ret

000001a6 <_ZN6opbots6OutputD0Ev>:
     1a6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <free>
     1aa:	08 95       	ret

000001ac <_ZN6opbots12_raise_errorENS_9ErrorTypeE>:
	OVER_VOLTAGE=5,
	OVER_CURRENT=6,
	TEST=7
};

void _raise_error(ErrorType error) {
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
	cli();
     1b8:	f8 94       	cli
	uint16_t delay_time(100);
	if (_error_function != nullptr && _error_led_function != nullptr) {
     1ba:	e0 91 4d 03 	lds	r30, 0x034D
     1be:	f0 91 4e 03 	lds	r31, 0x034E
     1c2:	30 97       	sbiw	r30, 0x00	; 0
     1c4:	d1 f1       	breq	.+116    	; 0x23a <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     1c6:	20 91 4b 03 	lds	r18, 0x034B
     1ca:	30 91 4c 03 	lds	r19, 0x034C
     1ce:	23 2b       	or	r18, r19
     1d0:	a1 f1       	breq	.+104    	; 0x23a <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     1d2:	08 2f       	mov	r16, r24
		// Call user-defined error function
		_error_function();	
     1d4:	09 95       	icall
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     1d6:	10 e0       	ldi	r17, 0x00	; 0
     1d8:	e1 2c       	mov	r14, r1
     1da:	f1 2c       	mov	r15, r1
     1dc:	10 16       	cp	r1, r16
     1de:	11 06       	cpc	r1, r17
     1e0:	14 f5       	brge	.+68     	; 0x226 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x7a>
     1e2:	ce 2d       	mov	r28, r14
     1e4:	df 2d       	mov	r29, r15
				_error_led_function();
     1e6:	e0 91 4b 03 	lds	r30, 0x034B
     1ea:	f0 91 4c 03 	lds	r31, 0x034C
     1ee:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f0:	9f ef       	ldi	r25, 0xFF	; 255
     1f2:	21 ee       	ldi	r18, 0xE1	; 225
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	91 50       	subi	r25, 0x01	; 1
     1f8:	20 40       	sbci	r18, 0x00	; 0
     1fa:	80 40       	sbci	r24, 0x00	; 0
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x4a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x54>
     200:	00 00       	nop
				_delay_ms(delay_time);
				_error_led_function();
     202:	e0 91 4b 03 	lds	r30, 0x034B
     206:	f0 91 4c 03 	lds	r31, 0x034C
     20a:	09 95       	icall
     20c:	9f ef       	ldi	r25, 0xFF	; 255
     20e:	29 e6       	ldi	r18, 0x69	; 105
     210:	88 e1       	ldi	r24, 0x18	; 24
     212:	91 50       	subi	r25, 0x01	; 1
     214:	20 40       	sbci	r18, 0x00	; 0
     216:	80 40       	sbci	r24, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x66>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x70>
     21c:	00 00       	nop
	if (_error_function != nullptr && _error_led_function != nullptr) {
		// Call user-defined error function
		_error_function();	
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     21e:	21 96       	adiw	r28, 0x01	; 1
     220:	c0 17       	cp	r28, r16
     222:	d1 07       	cpc	r29, r17
     224:	01 f7       	brne	.-64     	; 0x1e6 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x3a>
     226:	9f ef       	ldi	r25, 0xFF	; 255
     228:	23 ed       	ldi	r18, 0xD3	; 211
     22a:	80 e3       	ldi	r24, 0x30	; 48
     22c:	91 50       	subi	r25, 0x01	; 1
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x80>
     234:	00 c0       	rjmp	.+0      	; 0x236 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8a>
     236:	00 00       	nop
     238:	d1 cf       	rjmp	.-94     	; 0x1dc <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x30>
				_delay_ms(5*delay_time);
			}
			_delay_ms(10*delay_time);
		}
	}
	sei();
     23a:	78 94       	sei
}
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	08 95       	ret

0000024a <__vector_21>:

void operator delete(void * p) {
	free(p);
}

ISR(ADC_vect) {
     24a:	1f 92       	push	r1
     24c:	0f 92       	push	r0
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	0f 92       	push	r0
     252:	11 24       	eor	r1, r1
     254:	8f 93       	push	r24
	cli();
     256:	f8 94       	cli
	Analog::analog_low = ADCL;
     258:	80 91 78 00 	lds	r24, 0x0078
     25c:	80 93 48 03 	sts	0x0348, r24
	Analog::analogHigh = ADCH;
     260:	80 91 79 00 	lds	r24, 0x0079
     264:	80 93 49 03 	sts	0x0349, r24
	Analog::new_value = true;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 4a 03 	sts	0x034A, r24
	sei();
     26e:	78 94       	sei
};
     270:	8f 91       	pop	r24
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <__vector_20>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	8f 93       	push	r24
     288:	9f 93       	push	r25
     28a:	af 93       	push	r26
     28c:	bf 93       	push	r27
     28e:	ef 93       	push	r30
     290:	ff 93       	push	r31
			ok = false;
			return '\0';
		}
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
     292:	f8 94       	cli
		tx[serial_port].head++;
     294:	e3 e4       	ldi	r30, 0x43	; 67
     296:	f3 e0       	ldi	r31, 0x03	; 3
     298:	83 81       	ldd	r24, Z+3	; 0x03
     29a:	8f 5f       	subi	r24, 0xFF	; 255
     29c:	83 83       	std	Z+3, r24	; 0x03
		if (tx[serial_port].head < tx[serial_port].tail) {
     29e:	94 81       	ldd	r25, Z+4	; 0x04
     2a0:	89 17       	cp	r24, r25
     2a2:	50 f4       	brcc	.+20     	; 0x2b8 <__vector_20+0x3c>
			if (serial_port == 0) {
				UDR0 = char(tx[serial_port].buffer[tx[serial_port].head]);
     2a4:	e0 91 43 03 	lds	r30, 0x0343
     2a8:	f0 91 44 03 	lds	r31, 0x0344
     2ac:	e8 0f       	add	r30, r24
     2ae:	f1 1d       	adc	r31, r1
     2b0:	80 81       	ld	r24, Z
     2b2:	80 93 c6 00 	sts	0x00C6, r24
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <__vector_20+0x5c>
			else if (serial_port == 1) {
				UDR1 = 'x';
			}
			#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
     2b8:	e0 91 3c 03 	lds	r30, 0x033C
     2bc:	f0 91 3d 03 	lds	r31, 0x033D
     2c0:	30 97       	sbiw	r30, 0x00	; 0
     2c2:	51 f0       	breq	.+20     	; 0x2d8 <__vector_20+0x5c>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     2c4:	a2 81       	ldd	r26, Z+2	; 0x02
     2c6:	b3 81       	ldd	r27, Z+3	; 0x03
     2c8:	9c 91       	ld	r25, X
     2ca:	81 85       	ldd	r24, Z+9	; 0x09
     2cc:	80 95       	com	r24
     2ce:	89 23       	and	r24, r25
     2d0:	8c 93       	st	X, r24
			}
			#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
				Serial::txden[serial_port]->clear();
				UCSR0B = 1<<(RXCIE0) | 1<<(RXEN0);
     2d2:	80 e9       	ldi	r24, 0x90	; 144
     2d4:	80 93 c1 00 	sts	0x00C1, r24
			}
		}
		sei();
     2d8:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <__vector_18>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	2f 93       	push	r18
     2fc:	3f 93       	push	r19
     2fe:	4f 93       	push	r20
     300:	5f 93       	push	r21
     302:	6f 93       	push	r22
     304:	7f 93       	push	r23
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
     30a:	af 93       	push	r26
     30c:	bf 93       	push	r27
     30e:	ef 93       	push	r30
     310:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
     312:	f8 94       	cli
		PORTB ^= 1<<4; // MISO
     314:	95 b1       	in	r25, 0x05	; 5
     316:	80 e1       	ldi	r24, 0x10	; 16
     318:	89 27       	eor	r24, r25
     31a:	85 b9       	out	0x05, r24	; 5
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
     31c:	e0 ec       	ldi	r30, 0xC0	; 192
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	8f 77       	andi	r24, 0x7F	; 127
     324:	80 83       	st	Z, r24
			if (rx[serial_port].head < rx[serial_port].size) {
     326:	ee e3       	ldi	r30, 0x3E	; 62
     328:	f3 e0       	ldi	r31, 0x03	; 3
     32a:	83 81       	ldd	r24, Z+3	; 0x03
     32c:	92 81       	ldd	r25, Z+2	; 0x02
     32e:	89 17       	cp	r24, r25
     330:	58 f4       	brcc	.+22     	; 0x348 <__vector_18+0x58>
				rx[serial_port].buffer[rx[serial_port].head] = UDR0;
     332:	90 91 c6 00 	lds	r25, 0x00C6
     336:	a0 81       	ld	r26, Z
     338:	b1 81       	ldd	r27, Z+1	; 0x01
     33a:	a8 0f       	add	r26, r24
     33c:	b1 1d       	adc	r27, r1
     33e:	9c 93       	st	X, r25
				rx[serial_port].head++;
     340:	83 81       	ldd	r24, Z+3	; 0x03
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	83 83       	std	Z+3, r24	; 0x03
     346:	03 c0       	rjmp	.+6      	; 0x34e <__vector_18+0x5e>
			} else {
				_raise_error(ErrorType::BUFFER_OVERFLOW_RX);
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
		#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
		}
		#endif
		sei();
     34e:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <_Z15startup_routinei>:
Input  reset(&PORTC,6);

//Timer1 timer1(Prescaler::PRESCALER_8);

// Flashes err light and power outputs on briefly
void startup_routine(int loops=1) {	
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	ac 01       	movw	r20, r24
     37c:	06 ef       	ldi	r16, 0xF6	; 246
     37e:	12 e0       	ldi	r17, 0x02	; 2
     380:	6f ef       	ldi	r22, 0xFF	; 255
     382:	72 e0       	ldi	r23, 0x02	; 2
	while (--loops >= 0) {
     384:	1b c0       	rjmp	.+54     	; 0x3bc <_Z15startup_routinei+0x4a>
		}
	}
	sei();
}
	
class GPIO {
     386:	12 96       	adiw	r26, 0x02	; 2
     388:	ed 91       	ld	r30, X+
     38a:	fc 91       	ld	r31, X
     38c:	13 97       	sbiw	r26, 0x03	; 3
     38e:	98 81       	ld	r25, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     390:	20 81       	ld	r18, Z
     392:	29 2b       	or	r18, r25
     394:	20 83       	st	Z, r18
     396:	2f ef       	ldi	r18, 0xFF	; 255
     398:	30 e7       	ldi	r19, 0x70	; 112
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	21 50       	subi	r18, 0x01	; 1
     39e:	30 40       	sbci	r19, 0x00	; 0
     3a0:	80 40       	sbci	r24, 0x00	; 0
     3a2:	e1 f7       	brne	.-8      	; 0x39c <_Z15startup_routinei+0x2a>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <_Z15startup_routinei+0x34>
     3a6:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
     3a8:	20 81       	ld	r18, Z
     3aa:	90 95       	com	r25
     3ac:	92 23       	and	r25, r18
     3ae:	90 83       	st	Z, r25
     3b0:	1a 96       	adiw	r26, 0x0a	; 10
     3b2:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
     3b4:	23 e0       	ldi	r18, 0x03	; 3
     3b6:	ac 33       	cpi	r26, 0x3C	; 60
     3b8:	b2 07       	cpc	r27, r18
     3ba:	29 f7       	brne	.-54     	; 0x386 <_Z15startup_routinei+0x14>

//Timer1 timer1(Prescaler::PRESCALER_8);

// Flashes err light and power outputs on briefly
void startup_routine(int loops=1) {	
	while (--loops >= 0) {
     3bc:	41 50       	subi	r20, 0x01	; 1
     3be:	51 09       	sbc	r21, r1
     3c0:	1a f0       	brmi	.+6      	; 0x3c8 <_Z15startup_routinei+0x56>
     3c2:	d8 01       	movw	r26, r16
     3c4:	eb 01       	movw	r28, r22
     3c6:	df cf       	rjmp	.-66     	; 0x386 <_Z15startup_routinei+0x14>
			out.set();
			_delay_ms(50);
			out.clear();
		}
	}
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <_Z23poll_serial_and_processv>:
		else
		stage = 0;
	}
}

void poll_serial_and_process() {
     3d2:	8f 92       	push	r8
     3d4:	9f 92       	push	r9
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
	static bool char_available(false);
	cli(); // Pause interrupts while reading available char
     3ea:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     3ec:	80 91 41 03 	lds	r24, 0x0341
     3f0:	88 23       	and	r24, r24
     3f2:	71 f0       	breq	.+28     	; 0x410 <_Z23poll_serial_and_processv+0x3e>
			rx[0].head--;
     3f4:	81 50       	subi	r24, 0x01	; 1
     3f6:	ee e3       	ldi	r30, 0x3E	; 62
     3f8:	f3 e0       	ldi	r31, 0x03	; 3
     3fa:	83 83       	std	Z+3, r24	; 0x03
			ok = true;
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	90 93 4b 02 	sts	0x024B, r25
			return rx[0].buffer[rx[0].head];
     402:	01 90       	ld	r0, Z+
     404:	f0 81       	ld	r31, Z
     406:	e0 2d       	mov	r30, r0
     408:	e8 0f       	add	r30, r24
     40a:	f1 1d       	adc	r31, r1
     40c:	e0 81       	ld	r30, Z
     40e:	03 c0       	rjmp	.+6      	; 0x416 <_Z23poll_serial_and_processv+0x44>
		} else {
			ok = false;
     410:	10 92 4b 02 	sts	0x024B, r1
			return '\0';
     414:	e0 e0       	ldi	r30, 0x00	; 0
	char c(Serial::get_char(char_available));
	sei(); // Re-enable interrupts
     416:	78 94       	sei
	if (char_available) process(c);
     418:	80 91 4b 02 	lds	r24, 0x024B
     41c:	88 23       	and	r24, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <_Z23poll_serial_and_processv+0x50>
     420:	f0 c2       	rjmp	.+1504   	; 0xa02 <__stack+0x103>
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     422:	a0 91 34 03 	lds	r26, 0x0334
     426:	b0 91 35 03 	lds	r27, 0x0335
     42a:	9c 91       	ld	r25, X
     42c:	80 91 3b 03 	lds	r24, 0x033B
     430:	89 27       	eor	r24, r25
     432:	8c 93       	st	X, r24
};

inline void process(char c) {
	enable[6].toggle();
	static uint8_t stage(0);
	if (stage == 4 || pduData.current_state == State::IMMEDIATE) {
     434:	80 91 4a 02 	lds	r24, 0x024A
     438:	84 30       	cpi	r24, 0x04	; 4
     43a:	29 f0       	breq	.+10     	; 0x446 <_Z23poll_serial_and_processv+0x74>
     43c:	90 91 0c 01 	lds	r25, 0x010C
     440:	91 30       	cpi	r25, 0x01	; 1
     442:	09 f0       	breq	.+2      	; 0x446 <_Z23poll_serial_and_processv+0x74>
     444:	d1 c2       	rjmp	.+1442   	; 0x9e8 <__stack+0xe9>
		switch(c) {
     446:	8e 2f       	mov	r24, r30
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	bc 97       	sbiw	r30, 0x2c	; 44
     44e:	ed 34       	cpi	r30, 0x4D	; 77
     450:	f1 05       	cpc	r31, r1
     452:	08 f0       	brcs	.+2      	; 0x456 <_Z23poll_serial_and_processv+0x84>
     454:	8a c2       	rjmp	.+1300   	; 0x96a <__stack+0x6b>
     456:	ec 5c       	subi	r30, 0xCC	; 204
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__tablejump2__>
			case 'd':
				pduData.current_state = State::DRUM;
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	80 93 0c 01 	sts	0x010C, r24
				sprintf(message, "Drum mode on\r\n");
     464:	8f e0       	ldi	r24, 0x0F	; 15
     466:	ef e1       	ldi	r30, 0x1F	; 31
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	a4 e6       	ldi	r26, 0x64	; 100
     46c:	b2 e0       	ldi	r27, 0x02	; 2
     46e:	01 90       	ld	r0, Z+
     470:	0d 92       	st	X+, r0
     472:	8a 95       	dec	r24
     474:	e1 f7       	brne	.-8      	; 0x46e <_Z23poll_serial_and_processv+0x9c>
     476:	82 c2       	rjmp	.+1284   	; 0x97c <__stack+0x7d>
				break;
			case 'i':
				pduData.current_state = State::IMMEDIATE;
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 0c 01 	sts	0x010C, r24
				sprintf(message,"Immediate mode on\r\n");
     47e:	84 e1       	ldi	r24, 0x14	; 20
     480:	ee e2       	ldi	r30, 0x2E	; 46
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	a4 e6       	ldi	r26, 0x64	; 100
     486:	b2 e0       	ldi	r27, 0x02	; 2
     488:	01 90       	ld	r0, Z+
     48a:	0d 92       	st	X+, r0
     48c:	8a 95       	dec	r24
     48e:	e1 f7       	brne	.-8      	; 0x488 <_Z23poll_serial_and_processv+0xb6>
     490:	75 c2       	rjmp	.+1258   	; 0x97c <__stack+0x7d>
     492:	a6 ef       	ldi	r26, 0xF6	; 246
     494:	b2 e0       	ldi	r27, 0x02	; 2
     496:	1c 96       	adiw	r26, 0x0c	; 12
     498:	ed 91       	ld	r30, X+
     49a:	fc 91       	ld	r31, X
     49c:	1d 97       	sbiw	r26, 0x0d	; 13
     49e:	90 81       	ld	r25, Z
     4a0:	53 96       	adiw	r26, 0x13	; 19
     4a2:	8c 91       	ld	r24, X
     4a4:	89 27       	eor	r24, r25
     4a6:	80 83       	st	Z, r24
				break;
			case '1':
				enable[1].toggle();
				sprintf(message,"Enable 1 toggled\r\n");
     4a8:	83 e1       	ldi	r24, 0x13	; 19
     4aa:	e2 e4       	ldi	r30, 0x42	; 66
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	a4 e6       	ldi	r26, 0x64	; 100
     4b0:	b2 e0       	ldi	r27, 0x02	; 2
     4b2:	01 90       	ld	r0, Z+
     4b4:	0d 92       	st	X+, r0
     4b6:	8a 95       	dec	r24
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <_Z23poll_serial_and_processv+0xe0>
     4ba:	60 c2       	rjmp	.+1216   	; 0x97c <__stack+0x7d>
     4bc:	a6 ef       	ldi	r26, 0xF6	; 246
     4be:	b2 e0       	ldi	r27, 0x02	; 2
     4c0:	56 96       	adiw	r26, 0x16	; 22
     4c2:	ed 91       	ld	r30, X+
     4c4:	fc 91       	ld	r31, X
     4c6:	57 97       	sbiw	r26, 0x17	; 23
     4c8:	90 81       	ld	r25, Z
     4ca:	5d 96       	adiw	r26, 0x1d	; 29
     4cc:	8c 91       	ld	r24, X
     4ce:	89 27       	eor	r24, r25
     4d0:	80 83       	st	Z, r24
				break;
			case '2':
				enable[2].toggle();
				sprintf(message,"Enable 2 toggled\r\n");
     4d2:	83 e1       	ldi	r24, 0x13	; 19
     4d4:	e5 e5       	ldi	r30, 0x55	; 85
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	a4 e6       	ldi	r26, 0x64	; 100
     4da:	b2 e0       	ldi	r27, 0x02	; 2
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <_Z23poll_serial_and_processv+0x10a>
     4e4:	4b c2       	rjmp	.+1174   	; 0x97c <__stack+0x7d>
     4e6:	a6 ef       	ldi	r26, 0xF6	; 246
     4e8:	b2 e0       	ldi	r27, 0x02	; 2
     4ea:	90 96       	adiw	r26, 0x20	; 32
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	91 97       	sbiw	r26, 0x21	; 33
     4f2:	90 81       	ld	r25, Z
     4f4:	97 96       	adiw	r26, 0x27	; 39
     4f6:	8c 91       	ld	r24, X
     4f8:	89 27       	eor	r24, r25
     4fa:	80 83       	st	Z, r24
				break;
			case '3':
				enable[3].toggle();
				sprintf(message,"Enable 3 toggled\r\n");
     4fc:	83 e1       	ldi	r24, 0x13	; 19
     4fe:	e8 e6       	ldi	r30, 0x68	; 104
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	a4 e6       	ldi	r26, 0x64	; 100
     504:	b2 e0       	ldi	r27, 0x02	; 2
     506:	01 90       	ld	r0, Z+
     508:	0d 92       	st	X+, r0
     50a:	8a 95       	dec	r24
     50c:	e1 f7       	brne	.-8      	; 0x506 <_Z23poll_serial_and_processv+0x134>
     50e:	36 c2       	rjmp	.+1132   	; 0x97c <__stack+0x7d>
     510:	a6 ef       	ldi	r26, 0xF6	; 246
     512:	b2 e0       	ldi	r27, 0x02	; 2
     514:	9a 96       	adiw	r26, 0x2a	; 42
     516:	ed 91       	ld	r30, X+
     518:	fc 91       	ld	r31, X
     51a:	9b 97       	sbiw	r26, 0x2b	; 43
     51c:	90 81       	ld	r25, Z
     51e:	d1 96       	adiw	r26, 0x31	; 49
     520:	8c 91       	ld	r24, X
     522:	89 27       	eor	r24, r25
     524:	80 83       	st	Z, r24
				break;
			case '4':
				enable[4].toggle();
				sprintf(message,"Enable 4 toggled\r\n");
     526:	83 e1       	ldi	r24, 0x13	; 19
     528:	eb e7       	ldi	r30, 0x7B	; 123
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	a4 e6       	ldi	r26, 0x64	; 100
     52e:	b2 e0       	ldi	r27, 0x02	; 2
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	8a 95       	dec	r24
     536:	e1 f7       	brne	.-8      	; 0x530 <_Z23poll_serial_and_processv+0x15e>
     538:	21 c2       	rjmp	.+1090   	; 0x97c <__stack+0x7d>
     53a:	a6 ef       	ldi	r26, 0xF6	; 246
     53c:	b2 e0       	ldi	r27, 0x02	; 2
     53e:	d4 96       	adiw	r26, 0x34	; 52
     540:	ed 91       	ld	r30, X+
     542:	fc 91       	ld	r31, X
     544:	d5 97       	sbiw	r26, 0x35	; 53
     546:	90 81       	ld	r25, Z
     548:	db 96       	adiw	r26, 0x3b	; 59
     54a:	8c 91       	ld	r24, X
     54c:	89 27       	eor	r24, r25
     54e:	80 83       	st	Z, r24
				break;
			case '5':
				enable[5].toggle();
				sprintf(message,"Enable 5 toggled\r\n");
     550:	83 e1       	ldi	r24, 0x13	; 19
     552:	ee e8       	ldi	r30, 0x8E	; 142
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	a4 e6       	ldi	r26, 0x64	; 100
     558:	b2 e0       	ldi	r27, 0x02	; 2
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <_Z23poll_serial_and_processv+0x188>
     562:	0c c2       	rjmp	.+1048   	; 0x97c <__stack+0x7d>
     564:	e0 91 34 03 	lds	r30, 0x0334
     568:	f0 91 35 03 	lds	r31, 0x0335
     56c:	90 81       	ld	r25, Z
     56e:	80 91 3b 03 	lds	r24, 0x033B
     572:	89 27       	eor	r24, r25
     574:	80 83       	st	Z, r24
				break;
			case '6':
				enable[6].toggle();
				sprintf(message,"Enable 6 toggled\r\n");
     576:	83 e1       	ldi	r24, 0x13	; 19
     578:	e1 ea       	ldi	r30, 0xA1	; 161
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	a4 e6       	ldi	r26, 0x64	; 100
     57e:	b2 e0       	ldi	r27, 0x02	; 2
     580:	01 90       	ld	r0, Z+
     582:	0d 92       	st	X+, r0
     584:	8a 95       	dec	r24
     586:	e1 f7       	brne	.-8      	; 0x580 <_Z23poll_serial_and_processv+0x1ae>
     588:	f9 c1       	rjmp	.+1010   	; 0x97c <__stack+0x7d>
				break;
			case '.':
				pduData.pulse_width += 5;
     58a:	ec e0       	ldi	r30, 0x0C	; 12
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	81 81       	ldd	r24, Z+1	; 0x01
     590:	92 81       	ldd	r25, Z+2	; 0x02
     592:	05 96       	adiw	r24, 0x05	; 5
     594:	92 83       	std	Z+2, r25	; 0x02
     596:	81 83       	std	Z+1, r24	; 0x01
				OCR1A = 2*pduData.pulse_width;
     598:	81 81       	ldd	r24, Z+1	; 0x01
     59a:	92 81       	ldd	r25, Z+2	; 0x02
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	90 93 89 00 	sts	0x0089, r25
     5a4:	80 93 88 00 	sts	0x0088, r24
				OCR1B = 2*pduData.pulse_width;
     5a8:	81 81       	ldd	r24, Z+1	; 0x01
     5aa:	92 81       	ldd	r25, Z+2	; 0x02
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	90 93 8b 00 	sts	0x008B, r25
     5b4:	80 93 8a 00 	sts	0x008A, r24
				OCR2A = pduData.pulse_width/16;
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
     5ba:	92 81       	ldd	r25, Z+2	; 0x02
     5bc:	92 95       	swap	r25
     5be:	82 95       	swap	r24
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	89 27       	eor	r24, r25
     5c4:	9f 70       	andi	r25, 0x0F	; 15
     5c6:	89 27       	eor	r24, r25
     5c8:	80 93 b3 00 	sts	0x00B3, r24
				OCR2B = pduData.pulse_width/16;
     5cc:	81 81       	ldd	r24, Z+1	; 0x01
     5ce:	92 81       	ldd	r25, Z+2	; 0x02
     5d0:	92 95       	swap	r25
     5d2:	82 95       	swap	r24
     5d4:	8f 70       	andi	r24, 0x0F	; 15
     5d6:	89 27       	eor	r24, r25
     5d8:	9f 70       	andi	r25, 0x0F	; 15
     5da:	89 27       	eor	r24, r25
     5dc:	80 93 b4 00 	sts	0x00B4, r24
				sprintf(message,"Pulse width %u\r\n",pduData.pulse_width);
     5e0:	81 81       	ldd	r24, Z+1	; 0x01
     5e2:	92 81       	ldd	r25, Z+2	; 0x02
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	84 eb       	ldi	r24, 0xB4	; 180
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	84 e6       	ldi	r24, 0x64	; 100
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	0e 94 0b 09 	call	0x1216	; 0x1216 <sprintf>
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	b9 c1       	rjmp	.+882    	; 0x97c <__stack+0x7d>
				break;
			case ',':
				pduData.pulse_width -= 5;
     60a:	ec e0       	ldi	r30, 0x0C	; 12
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	81 81       	ldd	r24, Z+1	; 0x01
     610:	92 81       	ldd	r25, Z+2	; 0x02
     612:	05 97       	sbiw	r24, 0x05	; 5
     614:	92 83       	std	Z+2, r25	; 0x02
     616:	81 83       	std	Z+1, r24	; 0x01
				OCR1A = 2*pduData.pulse_width;
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	92 81       	ldd	r25, Z+2	; 0x02
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	90 93 89 00 	sts	0x0089, r25
     624:	80 93 88 00 	sts	0x0088, r24
				OCR1B = 2*pduData.pulse_width;
     628:	81 81       	ldd	r24, Z+1	; 0x01
     62a:	92 81       	ldd	r25, Z+2	; 0x02
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	90 93 8b 00 	sts	0x008B, r25
     634:	80 93 8a 00 	sts	0x008A, r24
				OCR2A = pduData.pulse_width/16;
     638:	81 81       	ldd	r24, Z+1	; 0x01
     63a:	92 81       	ldd	r25, Z+2	; 0x02
     63c:	92 95       	swap	r25
     63e:	82 95       	swap	r24
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	89 27       	eor	r24, r25
     644:	9f 70       	andi	r25, 0x0F	; 15
     646:	89 27       	eor	r24, r25
     648:	80 93 b3 00 	sts	0x00B3, r24
				OCR2B = pduData.pulse_width/16;
     64c:	81 81       	ldd	r24, Z+1	; 0x01
     64e:	92 81       	ldd	r25, Z+2	; 0x02
     650:	92 95       	swap	r25
     652:	82 95       	swap	r24
     654:	8f 70       	andi	r24, 0x0F	; 15
     656:	89 27       	eor	r24, r25
     658:	9f 70       	andi	r25, 0x0F	; 15
     65a:	89 27       	eor	r24, r25
     65c:	80 93 b4 00 	sts	0x00B4, r24
				sprintf(message,"Pulse width %u\r\n",pduData.pulse_width);
     660:	81 81       	ldd	r24, Z+1	; 0x01
     662:	92 81       	ldd	r25, Z+2	; 0x02
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	84 eb       	ldi	r24, 0xB4	; 180
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	84 e6       	ldi	r24, 0x64	; 100
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	0e 94 0b 09 	call	0x1216	; 0x1216 <sprintf>
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	79 c1       	rjmp	.+754    	; 0x97c <__stack+0x7d>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     68a:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     68c:	86 e4       	ldi	r24, 0x46	; 70
     68e:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     692:	ea e7       	ldi	r30, 0x7A	; 122
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	8f e8       	ldi	r24, 0x8F	; 143
     698:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     69a:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     69e:	10 92 4a 03 	sts	0x034A, r1
		ADCSRA |= 1<<(ADSC); 
     6a2:	80 81       	ld	r24, Z
     6a4:	80 64       	ori	r24, 0x40	; 64
     6a6:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     6a8:	80 91 4a 03 	lds	r24, 0x034A
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     6ac:	88 23       	and	r24, r24
     6ae:	e1 f3       	breq	.-8      	; 0x6a8 <_Z23poll_serial_and_processv+0x2d6>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     6b0:	80 91 49 03 	lds	r24, 0x0349
     6b4:	20 91 48 03 	lds	r18, 0x0348
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	38 2b       	or	r19, r24
				break;
			case 'a':
				volts_reading = Analog::immediate_read(6);
     6bc:	30 93 63 02 	sts	0x0263, r19
     6c0:	20 93 62 02 	sts	0x0262, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     6c4:	a0 e4       	ldi	r26, 0x40	; 64
     6c6:	b6 e0       	ldi	r27, 0x06	; 6
     6c8:	0e 94 bb 07 	call	0xf76	; 0xf76 <__umulhisi3>
     6cc:	6b 01       	movw	r12, r22
     6ce:	7c 01       	movw	r14, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	44 27       	eor	r20, r20
     6d6:	55 27       	eor	r21, r21
     6d8:	a4 e6       	ldi	r26, 0x64	; 100
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	0e 94 ca 07 	call	0xf94	; 0xf94 <__muluhisi3>
     6e0:	90 93 59 02 	sts	0x0259, r25
     6e4:	80 93 58 02 	sts	0x0258, r24
		}
		temp_result = temp_result >> 16;
     6e8:	c7 01       	movw	r24, r14
     6ea:	aa 27       	eor	r26, r26
     6ec:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     6ee:	80 93 5a 02 	sts	0x025A, r24
     6f2:	90 93 5b 02 	sts	0x025B, r25
				Analog::adc_scale<MAX_VOLTS>(volts_reading, &amps, &centiamps);
				sprintf(message,"%2u.%02u A  \r\n", amps, centiamps);
     6f6:	20 91 59 02 	lds	r18, 0x0259
     6fa:	2f 93       	push	r18
     6fc:	20 91 58 02 	lds	r18, 0x0258
     700:	2f 93       	push	r18
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	85 ec       	ldi	r24, 0xC5	; 197
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	84 e6       	ldi	r24, 0x64	; 100
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	9f 93       	push	r25
     714:	8f 93       	push	r24
     716:	0e 94 0b 09 	call	0x1216	; 0x1216 <sprintf>
     71a:	8d b7       	in	r24, 0x3d	; 61
     71c:	9e b7       	in	r25, 0x3e	; 62
     71e:	08 96       	adiw	r24, 0x08	; 8
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	9e bf       	out	0x3e, r25	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	8d bf       	out	0x3d, r24	; 61
     72a:	28 c1       	rjmp	.+592    	; 0x97c <__stack+0x7d>
				break;
			case 'p':
				if (TCCR1B & PRESCALER1_MASK) {
     72c:	80 91 81 00 	lds	r24, 0x0081
     730:	87 70       	andi	r24, 0x07	; 7
     732:	a1 f0       	breq	.+40     	; 0x75c <_Z23poll_serial_and_processv+0x38a>
					TCCR1B &= ~PRESCALER1_MASK;
     734:	e1 e8       	ldi	r30, 0x81	; 129
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	88 7f       	andi	r24, 0xF8	; 248
     73c:	80 83       	st	Z, r24
					TCCR2B &= ~PRESCALER2_MASK;
     73e:	e1 eb       	ldi	r30, 0xB1	; 177
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	88 7f       	andi	r24, 0xF8	; 248
     746:	80 83       	st	Z, r24
					sprintf(message,"Timer1 stopped\r\n");
     748:	81 e1       	ldi	r24, 0x11	; 17
     74a:	e4 ed       	ldi	r30, 0xD4	; 212
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	a4 e6       	ldi	r26, 0x64	; 100
     750:	b2 e0       	ldi	r27, 0x02	; 2
     752:	01 90       	ld	r0, Z+
     754:	0d 92       	st	X+, r0
     756:	8a 95       	dec	r24
     758:	e1 f7       	brne	.-8      	; 0x752 <_Z23poll_serial_and_processv+0x380>
     75a:	10 c1       	rjmp	.+544    	; 0x97c <__stack+0x7d>
					} else {
					TCCR1B |= PRESCALER1_8;
     75c:	e1 e8       	ldi	r30, 0x81	; 129
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	82 60       	ori	r24, 0x02	; 2
     764:	80 83       	st	Z, r24
					TCCR2B |= PRESCALER2_256;
     766:	e1 eb       	ldi	r30, 0xB1	; 177
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	86 60       	ori	r24, 0x06	; 6
     76e:	80 83       	st	Z, r24
					sprintf(message,"Timer1 started\r\n");
     770:	81 e1       	ldi	r24, 0x11	; 17
     772:	e5 ee       	ldi	r30, 0xE5	; 229
     774:	f1 e0       	ldi	r31, 0x01	; 1
     776:	a4 e6       	ldi	r26, 0x64	; 100
     778:	b2 e0       	ldi	r27, 0x02	; 2
     77a:	01 90       	ld	r0, Z+
     77c:	0d 92       	st	X+, r0
     77e:	8a 95       	dec	r24
     780:	e1 f7       	brne	.-8      	; 0x77a <_Z23poll_serial_and_processv+0x3a8>
     782:	fc c0       	rjmp	.+504    	; 0x97c <__stack+0x7d>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     784:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     786:	87 e4       	ldi	r24, 0x47	; 71
     788:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     78c:	ea e7       	ldi	r30, 0x7A	; 122
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	8f e8       	ldi	r24, 0x8F	; 143
     792:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     794:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     798:	10 92 4a 03 	sts	0x034A, r1
		ADCSRA |= 1<<(ADSC); 
     79c:	80 81       	ld	r24, Z
     79e:	80 64       	ori	r24, 0x40	; 64
     7a0:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     7a2:	80 91 4a 03 	lds	r24, 0x034A
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     7a6:	88 23       	and	r24, r24
     7a8:	e1 f3       	breq	.-8      	; 0x7a2 <_Z23poll_serial_and_processv+0x3d0>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     7aa:	80 91 49 03 	lds	r24, 0x0349
     7ae:	20 91 48 03 	lds	r18, 0x0348
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	38 2b       	or	r19, r24
				}
				break;
			case 'v':
				amps_reading = Analog::immediate_read(7);
     7b6:	30 93 5d 02 	sts	0x025D, r19
     7ba:	20 93 5c 02 	sts	0x025C, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     7be:	a0 e4       	ldi	r26, 0x40	; 64
     7c0:	b6 e0       	ldi	r27, 0x06	; 6
     7c2:	0e 94 bb 07 	call	0xf76	; 0xf76 <__umulhisi3>
     7c6:	6b 01       	movw	r12, r22
     7c8:	7c 01       	movw	r14, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     7ca:	9b 01       	movw	r18, r22
     7cc:	ac 01       	movw	r20, r24
     7ce:	44 27       	eor	r20, r20
     7d0:	55 27       	eor	r21, r21
     7d2:	a4 e6       	ldi	r26, 0x64	; 100
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	0e 94 ca 07 	call	0xf94	; 0xf94 <__muluhisi3>
     7da:	90 93 5f 02 	sts	0x025F, r25
     7de:	80 93 5e 02 	sts	0x025E, r24
		}
		temp_result = temp_result >> 16;
     7e2:	c7 01       	movw	r24, r14
     7e4:	aa 27       	eor	r26, r26
     7e6:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     7e8:	80 93 60 02 	sts	0x0260, r24
     7ec:	90 93 61 02 	sts	0x0261, r25
				Analog::adc_scale<MAX_AMPS>(amps_reading, &volts, &centivolts);
				sprintf(message,"%2u.%02u V  \r\n", volts, centivolts);
     7f0:	20 91 5f 02 	lds	r18, 0x025F
     7f4:	2f 93       	push	r18
     7f6:	20 91 5e 02 	lds	r18, 0x025E
     7fa:	2f 93       	push	r18
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	86 ef       	ldi	r24, 0xF6	; 246
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	84 e6       	ldi	r24, 0x64	; 100
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	9f 93       	push	r25
     80e:	8f 93       	push	r24
     810:	0e 94 0b 09 	call	0x1216	; 0x1216 <sprintf>
     814:	ad b7       	in	r26, 0x3d	; 61
     816:	be b7       	in	r27, 0x3e	; 62
     818:	18 96       	adiw	r26, 0x08	; 8
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	be bf       	out	0x3e, r27	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	ad bf       	out	0x3d, r26	; 61
     824:	ab c0       	rjmp	.+342    	; 0x97c <__stack+0x7d>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     826:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     828:	86 e4       	ldi	r24, 0x46	; 70
     82a:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     82e:	ea e7       	ldi	r30, 0x7A	; 122
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	8f e8       	ldi	r24, 0x8F	; 143
     834:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     836:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     83a:	10 92 4a 03 	sts	0x034A, r1
		ADCSRA |= 1<<(ADSC); 
     83e:	80 81       	ld	r24, Z
     840:	80 64       	ori	r24, 0x40	; 64
     842:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     844:	80 91 4a 03 	lds	r24, 0x034A
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     848:	88 23       	and	r24, r24
     84a:	e1 f3       	breq	.-8      	; 0x844 <_Z23poll_serial_and_processv+0x472>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     84c:	20 91 49 03 	lds	r18, 0x0349
     850:	80 91 48 03 	lds	r24, 0x0348
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	92 2b       	or	r25, r18
				break;
			case 'w':
				volts_reading = Analog::immediate_read(6);
     858:	90 93 63 02 	sts	0x0263, r25
     85c:	80 93 62 02 	sts	0x0262, r24
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     860:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     862:	87 e4       	ldi	r24, 0x47	; 71
     864:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     868:	ea e7       	ldi	r30, 0x7A	; 122
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	8f e8       	ldi	r24, 0x8F	; 143
     86e:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     870:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     874:	10 92 4a 03 	sts	0x034A, r1
		ADCSRA |= 1<<(ADSC); 
     878:	80 81       	ld	r24, Z
     87a:	80 64       	ori	r24, 0x40	; 64
     87c:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     87e:	80 91 4a 03 	lds	r24, 0x034A
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     882:	88 23       	and	r24, r24
     884:	e1 f3       	breq	.-8      	; 0x87e <_Z23poll_serial_and_processv+0x4ac>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     886:	80 91 49 03 	lds	r24, 0x0349
     88a:	20 91 48 03 	lds	r18, 0x0348
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	38 2b       	or	r19, r24
				amps_reading = Analog::immediate_read(7);
     892:	30 93 5d 02 	sts	0x025D, r19
     896:	20 93 5c 02 	sts	0x025C, r18
				watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     89a:	a0 91 62 02 	lds	r26, 0x0262
     89e:	b0 91 63 02 	lds	r27, 0x0263
     8a2:	0e 94 bb 07 	call	0xf76	; 0xf76 <__umulhisi3>
     8a6:	4b 01       	movw	r8, r22
     8a8:	5c 01       	movw	r10, r24
     8aa:	60 93 54 02 	sts	0x0254, r22
     8ae:	70 93 55 02 	sts	0x0255, r23
     8b2:	80 93 56 02 	sts	0x0256, r24
     8b6:	90 93 57 02 	sts	0x0257, r25
				watts = (watts_raw * 39) >> 16;
     8ba:	a7 e2       	ldi	r26, 0x27	; 39
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	0e 94 ca 07 	call	0xf94	; 0xf94 <__muluhisi3>
     8c6:	6c 01       	movw	r12, r24
     8c8:	ee 24       	eor	r14, r14
     8ca:	ff 24       	eor	r15, r15
     8cc:	c0 92 50 02 	sts	0x0250, r12
     8d0:	d0 92 51 02 	sts	0x0251, r13
     8d4:	e0 92 52 02 	sts	0x0252, r14
     8d8:	f0 92 53 02 	sts	0x0253, r15
				centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
     8dc:	a0 e9       	ldi	r26, 0x90	; 144
     8de:	b6 e0       	ldi	r27, 0x06	; 6
     8e0:	a7 01       	movw	r20, r14
     8e2:	96 01       	movw	r18, r12
     8e4:	0e 94 ca 07 	call	0xf94	; 0xf94 <__muluhisi3>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	c5 01       	movw	r24, r10
     8ee:	b4 01       	movw	r22, r8
     8f0:	0e 94 93 07 	call	0xf26	; 0xf26 <__udivmodsi4>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
     8f8:	ad e3       	ldi	r26, 0x3D	; 61
     8fa:	bf e0       	ldi	r27, 0x0F	; 15
     8fc:	0e 94 ca 07 	call	0xf94	; 0xf94 <__muluhisi3>
     900:	aa 27       	eor	r26, r26
     902:	bb 27       	eor	r27, r27
     904:	80 93 4c 02 	sts	0x024C, r24
     908:	90 93 4d 02 	sts	0x024D, r25
     90c:	a0 93 4e 02 	sts	0x024E, r26
     910:	b0 93 4f 02 	sts	0x024F, r27
				sprintf(message, "%2lu.%02lu W  \r\n", watts, centiwatts);
     914:	bf 93       	push	r27
     916:	af 93       	push	r26
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	ff 92       	push	r15
     91e:	ef 92       	push	r14
     920:	df 92       	push	r13
     922:	cf 92       	push	r12
     924:	85 e0       	ldi	r24, 0x05	; 5
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	84 e6       	ldi	r24, 0x64	; 100
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 0b 09 	call	0x1216	; 0x1216 <sprintf>
     938:	ed b7       	in	r30, 0x3d	; 61
     93a:	fe b7       	in	r31, 0x3e	; 62
     93c:	3c 96       	adiw	r30, 0x0c	; 12
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	fe bf       	out	0x3e, r31	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	ed bf       	out	0x3d, r30	; 61
     948:	19 c0       	rjmp	.+50     	; 0x97c <__stack+0x7d>
				break;
			case 'x':
				pduData.current_state = State::NORMAL;
     94a:	10 92 0c 01 	sts	0x010C, r1
				sprintf(message,"Normal mode on\r\n");
     94e:	81 e1       	ldi	r24, 0x11	; 17
     950:	e6 e1       	ldi	r30, 0x16	; 22
     952:	f2 e0       	ldi	r31, 0x02	; 2
     954:	a4 e6       	ldi	r26, 0x64	; 100
     956:	b2 e0       	ldi	r27, 0x02	; 2
     958:	01 90       	ld	r0, Z+
     95a:	0d 92       	st	X+, r0
     95c:	8a 95       	dec	r24
     95e:	e1 f7       	brne	.-8      	; 0x958 <__stack+0x59>
     960:	0d c0       	rjmp	.+26     	; 0x97c <__stack+0x7d>
				break;
			case 'e':
				_raise_error(ErrorType::TEST);
     962:	87 e0       	ldi	r24, 0x07	; 7
     964:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
     968:	09 c0       	rjmp	.+18     	; 0x97c <__stack+0x7d>
				break;
			default:
				sprintf(message,"Bad command\r\n");
     96a:	8e e0       	ldi	r24, 0x0E	; 14
     96c:	e7 e2       	ldi	r30, 0x27	; 39
     96e:	f2 e0       	ldi	r31, 0x02	; 2
     970:	a4 e6       	ldi	r26, 0x64	; 100
     972:	b2 e0       	ldi	r27, 0x02	; 2
     974:	01 90       	ld	r0, Z+
     976:	0d 92       	st	X+, r0
     978:	8a 95       	dec	r24
     97a:	e1 f7       	brne	.-8      	; 0x974 <__stack+0x75>
		}
		Serial::transmit(message,strlen(message));
     97c:	c4 e6       	ldi	r28, 0x64	; 100
     97e:	d2 e0       	ldi	r29, 0x02	; 2
     980:	09 90       	ld	r0, Y+
     982:	00 20       	and	r0, r0
     984:	e9 f7       	brne	.-6      	; 0x980 <__stack+0x81>
     986:	21 97       	sbiw	r28, 0x01	; 1
     988:	c4 56       	subi	r28, 0x64	; 100
     98a:	d2 40       	sbci	r29, 0x02	; 2
     98c:	9c 2f       	mov	r25, r28
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (txden[serial_port] != nullptr) {
     98e:	e0 91 3c 03 	lds	r30, 0x033C
     992:	f0 91 3d 03 	lds	r31, 0x033D
     996:	30 97       	sbiw	r30, 0x00	; 0
     998:	49 f0       	breq	.+18     	; 0x9ac <__stack+0xad>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     99a:	a2 81       	ldd	r26, Z+2	; 0x02
     99c:	b3 81       	ldd	r27, Z+3	; 0x03
     99e:	2c 91       	ld	r18, X
     9a0:	81 85       	ldd	r24, Z+9	; 0x09
     9a2:	82 2b       	or	r24, r18
     9a4:	8c 93       	st	X, r24
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (txden[serial_port] != nullptr) {
			txden[serial_port]->set();
			UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     9a6:	88 e4       	ldi	r24, 0x48	; 72
     9a8:	80 93 c1 00 	sts	0x00C1, r24
		}
		if (serial_port == 0) {
			if (char_count > tx[0].size) {
     9ac:	80 91 45 03 	lds	r24, 0x0345
     9b0:	89 17       	cp	r24, r25
     9b2:	18 f4       	brcc	.+6      	; 0x9ba <__stack+0xbb>
				_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
			}
			memcpy(tx[0].buffer, buffer, char_count);
     9ba:	03 e4       	ldi	r16, 0x43	; 67
     9bc:	13 e0       	ldi	r17, 0x03	; 3
     9be:	ae 01       	movw	r20, r28
     9c0:	55 27       	eor	r21, r21
     9c2:	64 e6       	ldi	r22, 0x64	; 100
     9c4:	72 e0       	ldi	r23, 0x02	; 2
     9c6:	d8 01       	movw	r26, r16
     9c8:	8d 91       	ld	r24, X+
     9ca:	9c 91       	ld	r25, X
     9cc:	0e 94 02 09 	call	0x1204	; 0x1204 <memcpy>
			tx[0].head = 0;
     9d0:	f8 01       	movw	r30, r16
     9d2:	13 82       	std	Z+3, r1	; 0x03
			tx[0].tail = char_count;
     9d4:	c4 83       	std	Z+4, r28	; 0x04
			UDR0 = tx[0].buffer[tx[0].head];
     9d6:	01 90       	ld	r0, Z+
     9d8:	f0 81       	ld	r31, Z
     9da:	e0 2d       	mov	r30, r0
     9dc:	80 81       	ld	r24, Z
     9de:	80 93 c6 00 	sts	0x00C6, r24
		stage = 0;
     9e2:	10 92 4a 02 	sts	0x024A, r1
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__stack+0x103>
	} else {
		if (c == name[stage])
     9e8:	a8 2f       	mov	r26, r24
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	ab 5c       	subi	r26, 0xCB	; 203
     9ee:	bd 4f       	sbci	r27, 0xFD	; 253
     9f0:	9c 91       	ld	r25, X
     9f2:	e9 13       	cpse	r30, r25
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__stack+0xff>
		stage++;
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 93 4a 02 	sts	0x024A, r24
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <__stack+0x103>
		else
		stage = 0;
     9fe:	10 92 4a 02 	sts	0x024A, r1
	static bool char_available(false);
	cli(); // Pause interrupts while reading available char
	char c(Serial::get_char(char_available));
	sei(); // Re-enable interrupts
	if (char_available) process(c);
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	ef 90       	pop	r14
     a0e:	df 90       	pop	r13
     a10:	cf 90       	pop	r12
     a12:	bf 90       	pop	r11
     a14:	af 90       	pop	r10
     a16:	9f 90       	pop	r9
     a18:	8f 90       	pop	r8
     a1a:	08 95       	ret

00000a1c <_Z10state_drumv>:
	
}
void state_immediate() {
	
}
void state_drum() {
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	60 97       	sbiw	r28, 0x10	; 16
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
	const uint8_t vel[] = {
		2, 3,2,3,
		10,1,2,3,
		1, 3,2,3,
		10,3,2,3
	};
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	ef e0       	ldi	r30, 0x0F	; 15
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	de 01       	movw	r26, r28
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	01 90       	ld	r0, Z+
     a50:	0d 92       	st	X+, r0
     a52:	8a 95       	dec	r24
     a54:	e1 f7       	brne	.-8      	; 0xa4e <_Z10state_drumv+0x32>
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	6c 01       	movw	r12, r24
     a5c:	5e 01       	movw	r10, r28
     a5e:	91 e1       	ldi	r25, 0x11	; 17
     a60:	a9 0e       	add	r10, r25
     a62:	b1 1c       	adc	r11, r1
	
}
void state_immediate() {
	
}
void state_drum() {
     a64:	81 2c       	mov	r8, r1
     a66:	91 2c       	mov	r9, r1
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     a68:	0f 2e       	mov	r0, r31
     a6a:	f6 ef       	ldi	r31, 0xF6	; 246
     a6c:	ef 2e       	mov	r14, r31
     a6e:	f2 e0       	ldi	r31, 0x02	; 2
     a70:	ff 2e       	mov	r15, r31
     a72:	f0 2d       	mov	r31, r0
     a74:	2f c0       	rjmp	.+94     	; 0xad4 <_Z10state_drumv+0xb8>
		1, 3,2,3,
		10,3,2,3
	};
	for (int i(0); i < 16; ++i) {
		for (int j(0); j < 10; ++j) {
			if (vel[i] > j) {
     a76:	d6 01       	movw	r26, r12
     a78:	8c 91       	ld	r24, X
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	08 17       	cp	r16, r24
     a7e:	19 07       	cpc	r17, r25
     a80:	5c f4       	brge	.+22     	; 0xa98 <_Z10state_drumv+0x7c>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     a82:	d7 01       	movw	r26, r14
     a84:	1c 96       	adiw	r26, 0x0c	; 12
     a86:	ed 91       	ld	r30, X+
     a88:	fc 91       	ld	r31, X
     a8a:	1d 97       	sbiw	r26, 0x0d	; 13
     a8c:	90 81       	ld	r25, Z
     a8e:	53 96       	adiw	r26, 0x13	; 19
     a90:	8c 91       	ld	r24, X
     a92:	89 2b       	or	r24, r25
     a94:	80 83       	st	Z, r24
     a96:	0b c0       	rjmp	.+22     	; 0xaae <_Z10state_drumv+0x92>
	void inline clear() { *port_out &= ~pin_mask; }
     a98:	d7 01       	movw	r26, r14
     a9a:	1c 96       	adiw	r26, 0x0c	; 12
     a9c:	ed 91       	ld	r30, X+
     a9e:	fc 91       	ld	r31, X
     aa0:	1d 97       	sbiw	r26, 0x0d	; 13
     aa2:	90 81       	ld	r25, Z
     aa4:	53 96       	adiw	r26, 0x13	; 19
     aa6:	8c 91       	ld	r24, X
     aa8:	80 95       	com	r24
     aaa:	89 23       	and	r24, r25
     aac:	80 83       	st	Z, r24
				enable[1].set();
			} else {
				enable[1].clear();
			}
			poll_serial_and_process();
     aae:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z23poll_serial_and_processv>
     ab2:	ef e3       	ldi	r30, 0x3F	; 63
     ab4:	fc e9       	ldi	r31, 0x9C	; 156
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <_Z10state_drumv+0x9a>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <_Z10state_drumv+0xa0>
     abc:	00 00       	nop
		10,1,2,3,
		1, 3,2,3,
		10,3,2,3
	};
	for (int i(0); i < 16; ++i) {
		for (int j(0); j < 10; ++j) {
     abe:	0f 5f       	subi	r16, 0xFF	; 255
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	0a 30       	cpi	r16, 0x0A	; 10
     ac4:	11 05       	cpc	r17, r1
     ac6:	b9 f6       	brne	.-82     	; 0xa76 <_Z10state_drumv+0x5a>
     ac8:	ff ef       	ldi	r31, 0xFF	; 255
     aca:	cf 1a       	sub	r12, r31
     acc:	df 0a       	sbc	r13, r31
		2, 3,2,3,
		10,1,2,3,
		1, 3,2,3,
		10,3,2,3
	};
	for (int i(0); i < 16; ++i) {
     ace:	ca 14       	cp	r12, r10
     ad0:	db 04       	cpc	r13, r11
     ad2:	19 f0       	breq	.+6      	; 0xada <_Z10state_drumv+0xbe>
	
}
void state_immediate() {
	
}
void state_drum() {
     ad4:	08 2d       	mov	r16, r8
     ad6:	19 2d       	mov	r17, r9
     ad8:	ce cf       	rjmp	.-100    	; 0xa76 <_Z10state_drumv+0x5a>
			}
			poll_serial_and_process();
			_delay_ms(10);
		}
	}
}
     ada:	60 96       	adiw	r28, 0x10	; 16
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	bf 90       	pop	r11
     af8:	af 90       	pop	r10
     afa:	9f 90       	pop	r9
     afc:	8f 90       	pop	r8
     afe:	08 95       	ret

00000b00 <main>:
	sei(); // Re-enable interrupts
	if (char_available) process(c);
}

int main(void) {
	_error_function = error_function;
     b00:	8f ea       	ldi	r24, 0xAF	; 175
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	90 93 4e 03 	sts	0x034E, r25
     b08:	80 93 4d 03 	sts	0x034D, r24
	_error_led_function = error_led_function;
     b0c:	82 ec       	ldi	r24, 0xC2	; 194
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	90 93 4c 03 	sts	0x034C, r25
     b14:	80 93 4b 03 	sts	0x034B, r24
	startup_routine(2);
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 b9 01 	call	0x372	; 0x372 <_Z15startup_routinei>
			UDR1 = transmitting[tx_head];
		}
		#endif
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
     b20:	8c ee       	ldi	r24, 0xEC	; 236
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	90 93 3d 03 	sts	0x033D, r25
     b28:	80 93 3c 03 	sts	0x033C, r24
	
	static void init(const uint32_t baud_rate, const uint8_t serial_port=0) {
		uint8_t offset = 0;
		const uint16_t baud = (F_CPU / 8 / baud_rate) - 1;
		if (serial_port == 1) offset = 0x10;
		*(&UBRR0H+offset) = baud / 0xFF;
     b2c:	10 92 c5 00 	sts	0x00C5, r1
		*(&UBRR0L+offset) = baud % 0xFF;
     b30:	80 e1       	ldi	r24, 0x10	; 16
     b32:	80 93 c4 00 	sts	0x00C4, r24
		*(&UCSR0A+offset) = 1<<(U2X0);
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	80 93 c0 00 	sts	0x00C0, r24
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
     b3c:	88 ed       	ldi	r24, 0xD8	; 216
     b3e:	80 93 c1 00 	sts	0x00C1, r24
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	80 93 c2 00 	sts	0x00C2, r24
	     
	Serial::set_txden_pin(txden);
	Serial::init(115200);
	
	TCCR1A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
     b48:	82 ea       	ldi	r24, 0xA2	; 162
     b4a:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (1<<WGM13) | (1<<WGM12);
     b4e:	88 e1       	ldi	r24, 0x18	; 24
     b50:	80 93 81 00 	sts	0x0081, r24
	
	TCCR2A = (1<<COM2B1) | (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);
     b54:	83 ea       	ldi	r24, 0xA3	; 163
     b56:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = 0;//(1<<WGM22);
     b5a:	10 92 b1 00 	sts	0x00B1, r1
	
	ICR1 = uint16_t(2*2000);
     b5e:	80 ea       	ldi	r24, 0xA0	; 160
     b60:	9f e0       	ldi	r25, 0x0F	; 15
     b62:	90 93 87 00 	sts	0x0087, r25
     b66:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 3000;
     b6a:	88 eb       	ldi	r24, 0xB8	; 184
     b6c:	9b e0       	ldi	r25, 0x0B	; 11
     b6e:	90 93 89 00 	sts	0x0089, r25
     b72:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 3000;
     b76:	90 93 8b 00 	sts	0x008B, r25
     b7a:	80 93 8a 00 	sts	0x008A, r24
	
	OCR2A = 94;
     b7e:	8e e5       	ldi	r24, 0x5E	; 94
     b80:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 94;
     b84:	80 93 b4 00 	sts	0x00B4, r24
	
	sei(); // Enable interrupts
     b88:	78 94       	sei
	
    while (1) {	
		state_machine[pduData.current_state]();
     b8a:	cc e0       	ldi	r28, 0x0C	; 12
     b8c:	d1 e0       	ldi	r29, 0x01	; 1
     b8e:	e8 81       	ld	r30, Y
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	ea 5f       	subi	r30, 0xFA	; 250
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	01 90       	ld	r0, Z+
     b9c:	f0 81       	ld	r31, Z
     b9e:	e0 2d       	mov	r30, r0
     ba0:	09 95       	icall
		poll_serial_and_process();
     ba2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z23poll_serial_and_processv>
	char c(Serial::get_char(char_available));
	sei(); // Re-enable interrupts
	if (char_available) process(c);
}

int main(void) {
     ba6:	f3 cf       	rjmp	.-26     	; 0xb8e <main+0x8e>

00000ba8 <_GLOBAL__sub_I__ZN6opbots15_error_functionE>:
	
    while (1) {	
		state_machine[pduData.current_state]();
		poll_serial_and_process();
    }
}
     ba8:	2f 92       	push	r2
     baa:	3f 92       	push	r3
     bac:	4f 92       	push	r4
     bae:	5f 92       	push	r5
     bb0:	6f 92       	push	r6
     bb2:	7f 92       	push	r7
     bb4:	8f 92       	push	r8
     bb6:	9f 92       	push	r9
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     bcc:	c3 e4       	ldi	r28, 0x43	; 67
     bce:	d3 e0       	ldi	r29, 0x03	; 3
     bd0:	10 e2       	ldi	r17, 0x20	; 32
     bd2:	1a 83       	std	Y+2, r17	; 0x02
     bd4:	1b 82       	std	Y+3, r1	; 0x03
     bd6:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 d5 07 	call	0xfaa	; 0xfaa <malloc>
     be0:	99 83       	std	Y+1, r25	; 0x01
     be2:	88 83       	st	Y, r24
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     be4:	ce e3       	ldi	r28, 0x3E	; 62
     be6:	d3 e0       	ldi	r29, 0x03	; 3
     be8:	1a 83       	std	Y+2, r17	; 0x02
     bea:	1b 82       	std	Y+3, r1	; 0x03
     bec:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <malloc>
     bf6:	99 83       	std	Y+1, r25	; 0x01
     bf8:	88 83       	st	Y, r24
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     bfa:	e6 ef       	ldi	r30, 0xF6	; 246
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	a5 e2       	ldi	r26, 0x25	; 37
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	b3 83       	std	Z+3, r27	; 0x03
     c04:	a2 83       	std	Z+2, r26	; 0x02
     c06:	0f 2e       	mov	r0, r31
     c08:	f4 e2       	ldi	r31, 0x24	; 36
     c0a:	af 2e       	mov	r10, r31
     c0c:	b1 2c       	mov	r11, r1
     c0e:	f0 2d       	mov	r31, r0
     c10:	b5 82       	std	Z+5, r11	; 0x05
     c12:	a4 82       	std	Z+4, r10	; 0x04
     c14:	0f 2e       	mov	r0, r31
     c16:	f3 e2       	ldi	r31, 0x23	; 35
     c18:	6f 2e       	mov	r6, r31
     c1a:	71 2c       	mov	r7, r1
     c1c:	f0 2d       	mov	r31, r0
     c1e:	77 82       	std	Z+7, r7	; 0x07
     c20:	66 82       	std	Z+6, r6	; 0x06
     c22:	10 86       	std	Z+8, r1	; 0x08
     c24:	d1 e0       	ldi	r29, 0x01	; 1
     c26:	d1 87       	std	Z+9, r29	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     c28:	8e e3       	ldi	r24, 0x3E	; 62
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	91 83       	std	Z+1, r25	; 0x01
     c2e:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     c30:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     c32:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     c34:	0f 2e       	mov	r0, r31
     c36:	f8 e2       	ldi	r31, 0x28	; 40
     c38:	4f 2e       	mov	r4, r31
     c3a:	51 2c       	mov	r5, r1
     c3c:	f0 2d       	mov	r31, r0
     c3e:	55 86       	std	Z+13, r5	; 0x0d
     c40:	44 86       	std	Z+12, r4	; 0x0c
     c42:	0f 2e       	mov	r0, r31
     c44:	f7 e2       	ldi	r31, 0x27	; 39
     c46:	2f 2e       	mov	r2, r31
     c48:	31 2c       	mov	r3, r1
     c4a:	f0 2d       	mov	r31, r0
     c4c:	37 86       	std	Z+15, r3	; 0x0f
     c4e:	26 86       	std	Z+14, r2	; 0x0e
     c50:	0f 2e       	mov	r0, r31
     c52:	f6 e2       	ldi	r31, 0x26	; 38
     c54:	8f 2e       	mov	r8, r31
     c56:	91 2c       	mov	r9, r1
     c58:	f0 2d       	mov	r31, r0
     c5a:	91 8a       	std	Z+17, r9	; 0x11
     c5c:	80 8a       	std	Z+16, r8	; 0x10
     c5e:	0f 2e       	mov	r0, r31
     c60:	f3 e0       	ldi	r31, 0x03	; 3
     c62:	ef 2e       	mov	r14, r31
     c64:	f0 2d       	mov	r31, r0
     c66:	e2 8a       	std	Z+18, r14	; 0x12
     c68:	68 94       	set
     c6a:	ff 24       	eor	r15, r15
     c6c:	f3 f8       	bld	r15, 3
     c6e:	f3 8a       	std	Z+19, r15	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     c70:	93 87       	std	Z+11, r25	; 0x0b
     c72:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     c74:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     c76:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     c78:	6b e2       	ldi	r22, 0x2B	; 43
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	77 8b       	std	Z+23, r23	; 0x17
     c7e:	66 8b       	std	Z+22, r22	; 0x16
     c80:	4a e2       	ldi	r20, 0x2A	; 42
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	51 8f       	std	Z+25, r21	; 0x19
     c86:	40 8f       	std	Z+24, r20	; 0x18
     c88:	29 e2       	ldi	r18, 0x29	; 41
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	33 8f       	std	Z+27, r19	; 0x1b
     c8e:	22 8f       	std	Z+26, r18	; 0x1a
     c90:	c2 e0       	ldi	r28, 0x02	; 2
     c92:	c4 8f       	std	Z+28, r28	; 0x1c
     c94:	04 e0       	ldi	r16, 0x04	; 4
     c96:	05 8f       	std	Z+29, r16	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     c98:	95 8b       	std	Z+21, r25	; 0x15
     c9a:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     c9c:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     c9e:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     ca0:	71 a3       	std	Z+33, r23	; 0x21
     ca2:	60 a3       	std	Z+32, r22	; 0x20
     ca4:	53 a3       	std	Z+35, r21	; 0x23
     ca6:	42 a3       	std	Z+34, r20	; 0x22
     ca8:	35 a3       	std	Z+37, r19	; 0x25
     caa:	24 a3       	std	Z+36, r18	; 0x24
     cac:	06 a3       	std	Z+38, r16	; 0x26
     cae:	68 94       	set
     cb0:	cc 24       	eor	r12, r12
     cb2:	c4 f8       	bld	r12, 4
     cb4:	c7 a2       	std	Z+39, r12	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     cb6:	97 8f       	std	Z+31, r25	; 0x1f
     cb8:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     cba:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     cbc:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     cbe:	53 a6       	std	Z+43, r5	; 0x2b
     cc0:	42 a6       	std	Z+42, r4	; 0x2a
     cc2:	35 a6       	std	Z+45, r3	; 0x2d
     cc4:	24 a6       	std	Z+44, r2	; 0x2c
     cc6:	97 a6       	std	Z+47, r9	; 0x2f
     cc8:	86 a6       	std	Z+46, r8	; 0x2e
     cca:	10 aa       	std	Z+48, r1	; 0x30
     ccc:	d1 ab       	std	Z+49, r29	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     cce:	91 a7       	std	Z+41, r25	; 0x29
     cd0:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     cd2:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     cd4:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     cd6:	55 aa       	std	Z+53, r5	; 0x35
     cd8:	44 aa       	std	Z+52, r4	; 0x34
     cda:	37 aa       	std	Z+55, r3	; 0x37
     cdc:	26 aa       	std	Z+54, r2	; 0x36
     cde:	91 ae       	std	Z+57, r9	; 0x39
     ce0:	80 ae       	std	Z+56, r8	; 0x38
     ce2:	d2 af       	std	Z+58, r29	; 0x3a
     ce4:	c3 af       	std	Z+59, r28	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     ce6:	93 ab       	std	Z+51, r25	; 0x33
     ce8:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     cea:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     cec:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     cee:	50 92 35 03 	sts	0x0335, r5
     cf2:	40 92 34 03 	sts	0x0334, r4
     cf6:	30 92 37 03 	sts	0x0337, r3
     cfa:	20 92 36 03 	sts	0x0336, r2
     cfe:	90 92 39 03 	sts	0x0339, r9
     d02:	80 92 38 03 	sts	0x0338, r8
     d06:	c0 93 3a 03 	sts	0x033A, r28
     d0a:	00 93 3b 03 	sts	0x033B, r16
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     d0e:	95 af       	std	Z+61, r25	; 0x3d
     d10:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
     d12:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     d14:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     d16:	ec ee       	ldi	r30, 0xEC	; 236
     d18:	f2 e0       	ldi	r31, 0x02	; 2
     d1a:	73 83       	std	Z+3, r23	; 0x03
     d1c:	62 83       	std	Z+2, r22	; 0x02
     d1e:	55 83       	std	Z+5, r21	; 0x05
     d20:	44 83       	std	Z+4, r20	; 0x04
     d22:	37 83       	std	Z+7, r19	; 0x07
     d24:	26 83       	std	Z+6, r18	; 0x06
     d26:	0f 2e       	mov	r0, r31
     d28:	f7 e0       	ldi	r31, 0x07	; 7
     d2a:	cf 2e       	mov	r12, r31
     d2c:	f0 2d       	mov	r31, r0
     d2e:	c0 86       	std	Z+8, r12	; 0x08
     d30:	68 94       	set
     d32:	cc 24       	eor	r12, r12
     d34:	c7 f8       	bld	r12, 7
     d36:	c1 86       	std	Z+9, r12	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     d3c:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     d3e:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     d40:	e2 ee       	ldi	r30, 0xE2	; 226
     d42:	f2 e0       	ldi	r31, 0x02	; 2
     d44:	73 83       	std	Z+3, r23	; 0x03
     d46:	62 83       	std	Z+2, r22	; 0x02
     d48:	55 83       	std	Z+5, r21	; 0x05
     d4a:	44 83       	std	Z+4, r20	; 0x04
     d4c:	37 83       	std	Z+7, r19	; 0x07
     d4e:	26 83       	std	Z+6, r18	; 0x06
     d50:	10 86       	std	Z+8, r1	; 0x08
     d52:	d1 87       	std	Z+9, r29	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     d54:	0f 2e       	mov	r0, r31
     d56:	f6 e4       	ldi	r31, 0x46	; 70
     d58:	cf 2e       	mov	r12, r31
     d5a:	f2 e0       	ldi	r31, 0x02	; 2
     d5c:	df 2e       	mov	r13, r31
     d5e:	f0 2d       	mov	r31, r0
     d60:	d1 82       	std	Z+1, r13	; 0x01
     d62:	c0 82       	st	Z, r12
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     d64:	50 98       	cbi	0x0a, 0	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     d66:	e8 ed       	ldi	r30, 0xD8	; 216
     d68:	f2 e0       	ldi	r31, 0x02	; 2
     d6a:	73 83       	std	Z+3, r23	; 0x03
     d6c:	62 83       	std	Z+2, r22	; 0x02
     d6e:	55 83       	std	Z+5, r21	; 0x05
     d70:	44 83       	std	Z+4, r20	; 0x04
     d72:	37 83       	std	Z+7, r19	; 0x07
     d74:	26 83       	std	Z+6, r18	; 0x06
     d76:	d0 87       	std	Z+8, r29	; 0x08
     d78:	c1 87       	std	Z+9, r28	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     d7e:	59 98       	cbi	0x0b, 1	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     d80:	51 9a       	sbi	0x0a, 1	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     d82:	ee ec       	ldi	r30, 0xCE	; 206
     d84:	f2 e0       	ldi	r31, 0x02	; 2
     d86:	b3 83       	std	Z+3, r27	; 0x03
     d88:	a2 83       	std	Z+2, r26	; 0x02
     d8a:	b5 82       	std	Z+5, r11	; 0x05
     d8c:	a4 82       	std	Z+4, r10	; 0x04
     d8e:	77 82       	std	Z+7, r7	; 0x07
     d90:	66 82       	std	Z+6, r6	; 0x06
     d92:	0f 2e       	mov	r0, r31
     d94:	f5 e0       	ldi	r31, 0x05	; 5
     d96:	cf 2e       	mov	r12, r31
     d98:	f0 2d       	mov	r31, r0
     d9a:	c0 86       	std	Z+8, r12	; 0x08
     d9c:	11 87       	std	Z+9, r17	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     da2:	2d 98       	cbi	0x05, 5	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     da4:	25 9a       	sbi	0x04, 5	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     da6:	e4 ec       	ldi	r30, 0xC4	; 196
     da8:	f2 e0       	ldi	r31, 0x02	; 2
     daa:	b3 83       	std	Z+3, r27	; 0x03
     dac:	a2 83       	std	Z+2, r26	; 0x02
     dae:	b5 82       	std	Z+5, r11	; 0x05
     db0:	a4 82       	std	Z+4, r10	; 0x04
     db2:	77 82       	std	Z+7, r7	; 0x07
     db4:	66 82       	std	Z+6, r6	; 0x06
     db6:	00 87       	std	Z+8, r16	; 0x08
     db8:	68 94       	set
     dba:	dd 24       	eor	r13, r13
     dbc:	d4 f8       	bld	r13, 4
     dbe:	d1 86       	std	Z+9, r13	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     dc4:	2c 98       	cbi	0x05, 4	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     dc6:	24 9a       	sbi	0x04, 4	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     dc8:	ea eb       	ldi	r30, 0xBA	; 186
     dca:	f2 e0       	ldi	r31, 0x02	; 2
     dcc:	b3 83       	std	Z+3, r27	; 0x03
     dce:	a2 83       	std	Z+2, r26	; 0x02
     dd0:	b5 82       	std	Z+5, r11	; 0x05
     dd2:	a4 82       	std	Z+4, r10	; 0x04
     dd4:	77 82       	std	Z+7, r7	; 0x07
     dd6:	66 82       	std	Z+6, r6	; 0x06
     dd8:	e0 86       	std	Z+8, r14	; 0x08
     dda:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     de0:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     de2:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     de4:	e0 eb       	ldi	r30, 0xB0	; 176
     de6:	f2 e0       	ldi	r31, 0x02	; 2
     de8:	73 83       	std	Z+3, r23	; 0x03
     dea:	62 83       	std	Z+2, r22	; 0x02
     dec:	55 83       	std	Z+5, r21	; 0x05
     dee:	44 83       	std	Z+4, r20	; 0x04
     df0:	37 83       	std	Z+7, r19	; 0x07
     df2:	26 83       	std	Z+6, r18	; 0x06
     df4:	0f 2e       	mov	r0, r31
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	df 2e       	mov	r13, r31
     dfa:	f0 2d       	mov	r31, r0
     dfc:	d0 86       	std	Z+8, r13	; 0x08
     dfe:	68 94       	set
     e00:	dd 24       	eor	r13, r13
     e02:	d6 f8       	bld	r13, 6
     e04:	d1 86       	std	Z+9, r13	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     e0a:	5e 98       	cbi	0x0b, 6	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     e0c:	56 9a       	sbi	0x0a, 6	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e0e:	e6 ea       	ldi	r30, 0xA6	; 166
     e10:	f2 e0       	ldi	r31, 0x02	; 2
     e12:	73 83       	std	Z+3, r23	; 0x03
     e14:	62 83       	std	Z+2, r22	; 0x02
     e16:	55 83       	std	Z+5, r21	; 0x05
     e18:	44 83       	std	Z+4, r20	; 0x04
     e1a:	37 83       	std	Z+7, r19	; 0x07
     e1c:	26 83       	std	Z+6, r18	; 0x06
     e1e:	c0 86       	std	Z+8, r12	; 0x08
     e20:	11 87       	std	Z+9, r17	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     e26:	5d 98       	cbi	0x0b, 5	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     e28:	55 9a       	sbi	0x0a, 5	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e2a:	ec e9       	ldi	r30, 0x9C	; 156
     e2c:	f2 e0       	ldi	r31, 0x02	; 2
     e2e:	b3 83       	std	Z+3, r27	; 0x03
     e30:	a2 83       	std	Z+2, r26	; 0x02
     e32:	b5 82       	std	Z+5, r11	; 0x05
     e34:	a4 82       	std	Z+4, r10	; 0x04
     e36:	77 82       	std	Z+7, r7	; 0x07
     e38:	66 82       	std	Z+6, r6	; 0x06
     e3a:	d0 87       	std	Z+8, r29	; 0x08
     e3c:	c1 87       	std	Z+9, r28	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     e42:	29 98       	cbi	0x05, 1	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     e44:	21 9a       	sbi	0x04, 1	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e46:	e2 e9       	ldi	r30, 0x92	; 146
     e48:	f2 e0       	ldi	r31, 0x02	; 2
     e4a:	b3 83       	std	Z+3, r27	; 0x03
     e4c:	a2 83       	std	Z+2, r26	; 0x02
     e4e:	b5 82       	std	Z+5, r11	; 0x05
     e50:	a4 82       	std	Z+4, r10	; 0x04
     e52:	77 82       	std	Z+7, r7	; 0x07
     e54:	66 82       	std	Z+6, r6	; 0x06
     e56:	c0 87       	std	Z+8, r28	; 0x08
     e58:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e5a:	91 83       	std	Z+1, r25	; 0x01
     e5c:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     e5e:	2a 98       	cbi	0x05, 2	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     e60:	22 9a       	sbi	0x04, 2	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e62:	e8 e8       	ldi	r30, 0x88	; 136
     e64:	f2 e0       	ldi	r31, 0x02	; 2
     e66:	b3 83       	std	Z+3, r27	; 0x03
     e68:	a2 83       	std	Z+2, r26	; 0x02
     e6a:	b5 82       	std	Z+5, r11	; 0x05
     e6c:	a4 82       	std	Z+4, r10	; 0x04
     e6e:	77 82       	std	Z+7, r7	; 0x07
     e70:	66 82       	std	Z+6, r6	; 0x06
     e72:	e0 86       	std	Z+8, r14	; 0x08
     e74:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     e7a:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     e7c:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e7e:	ee e7       	ldi	r30, 0x7E	; 126
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	73 83       	std	Z+3, r23	; 0x03
     e84:	62 83       	std	Z+2, r22	; 0x02
     e86:	55 83       	std	Z+5, r21	; 0x05
     e88:	44 83       	std	Z+4, r20	; 0x04
     e8a:	37 83       	std	Z+7, r19	; 0x07
     e8c:	26 83       	std	Z+6, r18	; 0x06
     e8e:	e0 86       	std	Z+8, r14	; 0x08
     e90:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     e96:	5b 98       	cbi	0x0b, 3	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     e98:	53 9a       	sbi	0x0a, 3	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e9a:	e4 e7       	ldi	r30, 0x74	; 116
     e9c:	f2 e0       	ldi	r31, 0x02	; 2
     e9e:	53 82       	std	Z+3, r5	; 0x03
     ea0:	42 82       	std	Z+2, r4	; 0x02
     ea2:	35 82       	std	Z+5, r3	; 0x05
     ea4:	24 82       	std	Z+4, r2	; 0x04
     ea6:	97 82       	std	Z+7, r9	; 0x07
     ea8:	86 82       	std	Z+6, r8	; 0x06
     eaa:	86 e0       	ldi	r24, 0x06	; 6
     eac:	80 87       	std	Z+8, r24	; 0x08
     eae:	d1 86       	std	Z+9, r13	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     eb0:	0f 2e       	mov	r0, r31
     eb2:	f6 e4       	ldi	r31, 0x46	; 70
     eb4:	cf 2e       	mov	r12, r31
     eb6:	f2 e0       	ldi	r31, 0x02	; 2
     eb8:	df 2e       	mov	r13, r31
     eba:	f0 2d       	mov	r31, r0
     ebc:	d1 82       	std	Z+1, r13	; 0x01
     ebe:	c0 82       	st	Z, r12
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     ec0:	3e 98       	cbi	0x07, 6	; 7
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	9f 90       	pop	r9
     ed8:	8f 90       	pop	r8
     eda:	7f 90       	pop	r7
     edc:	6f 90       	pop	r6
     ede:	5f 90       	pop	r5
     ee0:	4f 90       	pop	r4
     ee2:	3f 90       	pop	r3
     ee4:	2f 90       	pop	r2
     ee6:	08 95       	ret

00000ee8 <_GLOBAL__sub_D__ZN6opbots15_error_functionE>:
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
#include "opbots.h"
#include <stdio.h>
using namespace opbots;

// Setup power enable pins and error led
Output enable[] = {
     eec:	cc e3       	ldi	r28, 0x3C	; 60
     eee:	d3 e0       	ldi	r29, 0x03	; 3
     ef0:	2a 97       	sbiw	r28, 0x0a	; 10
     ef2:	e8 81       	ld	r30, Y
     ef4:	f9 81       	ldd	r31, Y+1	; 0x01
     ef6:	01 90       	ld	r0, Z+
     ef8:	f0 81       	ld	r31, Z
     efa:	e0 2d       	mov	r30, r0
     efc:	ce 01       	movw	r24, r28
     efe:	09 95       	icall
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	c6 3f       	cpi	r28, 0xF6	; 246
     f04:	d8 07       	cpc	r29, r24
     f06:	a1 f7       	brne	.-24     	; 0xef0 <_GLOBAL__sub_D__ZN6opbots15_error_functionE+0x8>
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
		buffer = (T*)malloc(size);
	}
	
	~SimpleBuffer() {
		free(buffer);
     f08:	80 91 3e 03 	lds	r24, 0x033E
     f0c:	90 91 3f 03 	lds	r25, 0x033F
     f10:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <free>
     f14:	80 91 43 03 	lds	r24, 0x0343
     f18:	90 91 44 03 	lds	r25, 0x0344
     f1c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <free>
	
    while (1) {	
		state_machine[pduData.current_state]();
		poll_serial_and_process();
    }
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	08 95       	ret

00000f26 <__udivmodsi4>:
     f26:	a1 e2       	ldi	r26, 0x21	; 33
     f28:	1a 2e       	mov	r1, r26
     f2a:	aa 1b       	sub	r26, r26
     f2c:	bb 1b       	sub	r27, r27
     f2e:	fd 01       	movw	r30, r26
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <__udivmodsi4_ep>

00000f32 <__udivmodsi4_loop>:
     f32:	aa 1f       	adc	r26, r26
     f34:	bb 1f       	adc	r27, r27
     f36:	ee 1f       	adc	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	a2 17       	cp	r26, r18
     f3c:	b3 07       	cpc	r27, r19
     f3e:	e4 07       	cpc	r30, r20
     f40:	f5 07       	cpc	r31, r21
     f42:	20 f0       	brcs	.+8      	; 0xf4c <__udivmodsi4_ep>
     f44:	a2 1b       	sub	r26, r18
     f46:	b3 0b       	sbc	r27, r19
     f48:	e4 0b       	sbc	r30, r20
     f4a:	f5 0b       	sbc	r31, r21

00000f4c <__udivmodsi4_ep>:
     f4c:	66 1f       	adc	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	1a 94       	dec	r1
     f56:	69 f7       	brne	.-38     	; 0xf32 <__udivmodsi4_loop>
     f58:	60 95       	com	r22
     f5a:	70 95       	com	r23
     f5c:	80 95       	com	r24
     f5e:	90 95       	com	r25
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	bd 01       	movw	r22, r26
     f66:	cf 01       	movw	r24, r30
     f68:	08 95       	ret

00000f6a <__tablejump2__>:
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	05 90       	lpm	r0, Z+
     f70:	f4 91       	lpm	r31, Z
     f72:	e0 2d       	mov	r30, r0
     f74:	09 94       	ijmp

00000f76 <__umulhisi3>:
     f76:	a2 9f       	mul	r26, r18
     f78:	b0 01       	movw	r22, r0
     f7a:	b3 9f       	mul	r27, r19
     f7c:	c0 01       	movw	r24, r0
     f7e:	a3 9f       	mul	r26, r19
     f80:	70 0d       	add	r23, r0
     f82:	81 1d       	adc	r24, r1
     f84:	11 24       	eor	r1, r1
     f86:	91 1d       	adc	r25, r1
     f88:	b2 9f       	mul	r27, r18
     f8a:	70 0d       	add	r23, r0
     f8c:	81 1d       	adc	r24, r1
     f8e:	11 24       	eor	r1, r1
     f90:	91 1d       	adc	r25, r1
     f92:	08 95       	ret

00000f94 <__muluhisi3>:
     f94:	0e 94 bb 07 	call	0xf76	; 0xf76 <__umulhisi3>
     f98:	a5 9f       	mul	r26, r21
     f9a:	90 0d       	add	r25, r0
     f9c:	b4 9f       	mul	r27, r20
     f9e:	90 0d       	add	r25, r0
     fa0:	a4 9f       	mul	r26, r20
     fa2:	80 0d       	add	r24, r0
     fa4:	91 1d       	adc	r25, r1
     fa6:	11 24       	eor	r1, r1
     fa8:	08 95       	ret

00000faa <malloc>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	91 05       	cpc	r25, r1
     fb2:	10 f4       	brcc	.+4      	; 0xfb8 <malloc+0xe>
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	e0 91 51 03 	lds	r30, 0x0351
     fbc:	f0 91 52 03 	lds	r31, 0x0352
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	c0 e0       	ldi	r28, 0x00	; 0
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	11 f1       	breq	.+68     	; 0x1010 <malloc+0x66>
     fcc:	40 81       	ld	r20, Z
     fce:	51 81       	ldd	r21, Z+1	; 0x01
     fd0:	48 17       	cp	r20, r24
     fd2:	59 07       	cpc	r21, r25
     fd4:	c0 f0       	brcs	.+48     	; 0x1006 <malloc+0x5c>
     fd6:	48 17       	cp	r20, r24
     fd8:	59 07       	cpc	r21, r25
     fda:	61 f4       	brne	.+24     	; 0xff4 <malloc+0x4a>
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	93 81       	ldd	r25, Z+3	; 0x03
     fe0:	20 97       	sbiw	r28, 0x00	; 0
     fe2:	19 f0       	breq	.+6      	; 0xfea <malloc+0x40>
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	2b c0       	rjmp	.+86     	; 0x1040 <malloc+0x96>
     fea:	90 93 52 03 	sts	0x0352, r25
     fee:	80 93 51 03 	sts	0x0351, r24
     ff2:	26 c0       	rjmp	.+76     	; 0x1040 <malloc+0x96>
     ff4:	21 15       	cp	r18, r1
     ff6:	31 05       	cpc	r19, r1
     ff8:	19 f0       	breq	.+6      	; 0x1000 <malloc+0x56>
     ffa:	42 17       	cp	r20, r18
     ffc:	53 07       	cpc	r21, r19
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <malloc+0x5c>
    1000:	9a 01       	movw	r18, r20
    1002:	be 01       	movw	r22, r28
    1004:	df 01       	movw	r26, r30
    1006:	ef 01       	movw	r28, r30
    1008:	02 80       	ldd	r0, Z+2	; 0x02
    100a:	f3 81       	ldd	r31, Z+3	; 0x03
    100c:	e0 2d       	mov	r30, r0
    100e:	dc cf       	rjmp	.-72     	; 0xfc8 <malloc+0x1e>
    1010:	21 15       	cp	r18, r1
    1012:	31 05       	cpc	r19, r1
    1014:	09 f1       	breq	.+66     	; 0x1058 <malloc+0xae>
    1016:	28 1b       	sub	r18, r24
    1018:	39 0b       	sbc	r19, r25
    101a:	24 30       	cpi	r18, 0x04	; 4
    101c:	31 05       	cpc	r19, r1
    101e:	90 f4       	brcc	.+36     	; 0x1044 <malloc+0x9a>
    1020:	12 96       	adiw	r26, 0x02	; 2
    1022:	8d 91       	ld	r24, X+
    1024:	9c 91       	ld	r25, X
    1026:	13 97       	sbiw	r26, 0x03	; 3
    1028:	61 15       	cp	r22, r1
    102a:	71 05       	cpc	r23, r1
    102c:	21 f0       	breq	.+8      	; 0x1036 <malloc+0x8c>
    102e:	fb 01       	movw	r30, r22
    1030:	93 83       	std	Z+3, r25	; 0x03
    1032:	82 83       	std	Z+2, r24	; 0x02
    1034:	04 c0       	rjmp	.+8      	; 0x103e <malloc+0x94>
    1036:	90 93 52 03 	sts	0x0352, r25
    103a:	80 93 51 03 	sts	0x0351, r24
    103e:	fd 01       	movw	r30, r26
    1040:	32 96       	adiw	r30, 0x02	; 2
    1042:	44 c0       	rjmp	.+136    	; 0x10cc <malloc+0x122>
    1044:	fd 01       	movw	r30, r26
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	81 93       	st	Z+, r24
    104c:	91 93       	st	Z+, r25
    104e:	22 50       	subi	r18, 0x02	; 2
    1050:	31 09       	sbc	r19, r1
    1052:	2d 93       	st	X+, r18
    1054:	3c 93       	st	X, r19
    1056:	3a c0       	rjmp	.+116    	; 0x10cc <malloc+0x122>
    1058:	20 91 4f 03 	lds	r18, 0x034F
    105c:	30 91 50 03 	lds	r19, 0x0350
    1060:	23 2b       	or	r18, r19
    1062:	41 f4       	brne	.+16     	; 0x1074 <malloc+0xca>
    1064:	20 91 02 01 	lds	r18, 0x0102
    1068:	30 91 03 01 	lds	r19, 0x0103
    106c:	30 93 50 03 	sts	0x0350, r19
    1070:	20 93 4f 03 	sts	0x034F, r18
    1074:	20 91 00 01 	lds	r18, 0x0100
    1078:	30 91 01 01 	lds	r19, 0x0101
    107c:	21 15       	cp	r18, r1
    107e:	31 05       	cpc	r19, r1
    1080:	41 f4       	brne	.+16     	; 0x1092 <malloc+0xe8>
    1082:	2d b7       	in	r18, 0x3d	; 61
    1084:	3e b7       	in	r19, 0x3e	; 62
    1086:	40 91 04 01 	lds	r20, 0x0104
    108a:	50 91 05 01 	lds	r21, 0x0105
    108e:	24 1b       	sub	r18, r20
    1090:	35 0b       	sbc	r19, r21
    1092:	e0 91 4f 03 	lds	r30, 0x034F
    1096:	f0 91 50 03 	lds	r31, 0x0350
    109a:	e2 17       	cp	r30, r18
    109c:	f3 07       	cpc	r31, r19
    109e:	a0 f4       	brcc	.+40     	; 0x10c8 <malloc+0x11e>
    10a0:	2e 1b       	sub	r18, r30
    10a2:	3f 0b       	sbc	r19, r31
    10a4:	28 17       	cp	r18, r24
    10a6:	39 07       	cpc	r19, r25
    10a8:	78 f0       	brcs	.+30     	; 0x10c8 <malloc+0x11e>
    10aa:	ac 01       	movw	r20, r24
    10ac:	4e 5f       	subi	r20, 0xFE	; 254
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	24 17       	cp	r18, r20
    10b2:	35 07       	cpc	r19, r21
    10b4:	48 f0       	brcs	.+18     	; 0x10c8 <malloc+0x11e>
    10b6:	4e 0f       	add	r20, r30
    10b8:	5f 1f       	adc	r21, r31
    10ba:	50 93 50 03 	sts	0x0350, r21
    10be:	40 93 4f 03 	sts	0x034F, r20
    10c2:	81 93       	st	Z+, r24
    10c4:	91 93       	st	Z+, r25
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <malloc+0x122>
    10c8:	e0 e0       	ldi	r30, 0x00	; 0
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	cf 01       	movw	r24, r30
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <free>:
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	09 f4       	brne	.+2      	; 0x10e2 <free+0xe>
    10e0:	8c c0       	rjmp	.+280    	; 0x11fa <free+0x126>
    10e2:	fc 01       	movw	r30, r24
    10e4:	32 97       	sbiw	r30, 0x02	; 2
    10e6:	13 82       	std	Z+3, r1	; 0x03
    10e8:	12 82       	std	Z+2, r1	; 0x02
    10ea:	00 91 51 03 	lds	r16, 0x0351
    10ee:	10 91 52 03 	lds	r17, 0x0352
    10f2:	01 15       	cp	r16, r1
    10f4:	11 05       	cpc	r17, r1
    10f6:	81 f4       	brne	.+32     	; 0x1118 <free+0x44>
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	82 0f       	add	r24, r18
    10fe:	93 1f       	adc	r25, r19
    1100:	20 91 4f 03 	lds	r18, 0x034F
    1104:	30 91 50 03 	lds	r19, 0x0350
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	79 f5       	brne	.+94     	; 0x116c <free+0x98>
    110e:	f0 93 50 03 	sts	0x0350, r31
    1112:	e0 93 4f 03 	sts	0x034F, r30
    1116:	71 c0       	rjmp	.+226    	; 0x11fa <free+0x126>
    1118:	d8 01       	movw	r26, r16
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	ae 17       	cp	r26, r30
    1120:	bf 07       	cpc	r27, r31
    1122:	50 f4       	brcc	.+20     	; 0x1138 <free+0x64>
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	2d 91       	ld	r18, X+
    1128:	3c 91       	ld	r19, X
    112a:	13 97       	sbiw	r26, 0x03	; 3
    112c:	ad 01       	movw	r20, r26
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	09 f1       	breq	.+66     	; 0x1176 <free+0xa2>
    1134:	d9 01       	movw	r26, r18
    1136:	f3 cf       	rjmp	.-26     	; 0x111e <free+0x4a>
    1138:	9d 01       	movw	r18, r26
    113a:	da 01       	movw	r26, r20
    113c:	33 83       	std	Z+3, r19	; 0x03
    113e:	22 83       	std	Z+2, r18	; 0x02
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	86 0f       	add	r24, r22
    1146:	97 1f       	adc	r25, r23
    1148:	82 17       	cp	r24, r18
    114a:	93 07       	cpc	r25, r19
    114c:	69 f4       	brne	.+26     	; 0x1168 <free+0x94>
    114e:	ec 01       	movw	r28, r24
    1150:	28 81       	ld	r18, Y
    1152:	39 81       	ldd	r19, Y+1	; 0x01
    1154:	26 0f       	add	r18, r22
    1156:	37 1f       	adc	r19, r23
    1158:	2e 5f       	subi	r18, 0xFE	; 254
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	31 83       	std	Z+1, r19	; 0x01
    115e:	20 83       	st	Z, r18
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	9b 81       	ldd	r25, Y+3	; 0x03
    1164:	93 83       	std	Z+3, r25	; 0x03
    1166:	82 83       	std	Z+2, r24	; 0x02
    1168:	45 2b       	or	r20, r21
    116a:	29 f4       	brne	.+10     	; 0x1176 <free+0xa2>
    116c:	f0 93 52 03 	sts	0x0352, r31
    1170:	e0 93 51 03 	sts	0x0351, r30
    1174:	42 c0       	rjmp	.+132    	; 0x11fa <free+0x126>
    1176:	13 96       	adiw	r26, 0x03	; 3
    1178:	fc 93       	st	X, r31
    117a:	ee 93       	st	-X, r30
    117c:	12 97       	sbiw	r26, 0x02	; 2
    117e:	ed 01       	movw	r28, r26
    1180:	49 91       	ld	r20, Y+
    1182:	59 91       	ld	r21, Y+
    1184:	9e 01       	movw	r18, r28
    1186:	24 0f       	add	r18, r20
    1188:	35 1f       	adc	r19, r21
    118a:	e2 17       	cp	r30, r18
    118c:	f3 07       	cpc	r31, r19
    118e:	71 f4       	brne	.+28     	; 0x11ac <free+0xd8>
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	84 0f       	add	r24, r20
    1196:	95 1f       	adc	r25, r21
    1198:	02 96       	adiw	r24, 0x02	; 2
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	9c 93       	st	X, r25
    119e:	8e 93       	st	-X, r24
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	13 96       	adiw	r26, 0x03	; 3
    11a6:	9c 93       	st	X, r25
    11a8:	8e 93       	st	-X, r24
    11aa:	12 97       	sbiw	r26, 0x02	; 2
    11ac:	e0 e0       	ldi	r30, 0x00	; 0
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	d8 01       	movw	r26, r16
    11b2:	12 96       	adiw	r26, 0x02	; 2
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	13 97       	sbiw	r26, 0x03	; 3
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <free+0xf0>
    11be:	f8 01       	movw	r30, r16
    11c0:	8c 01       	movw	r16, r24
    11c2:	f6 cf       	rjmp	.-20     	; 0x11b0 <free+0xdc>
    11c4:	8d 91       	ld	r24, X+
    11c6:	9c 91       	ld	r25, X
    11c8:	98 01       	movw	r18, r16
    11ca:	2e 5f       	subi	r18, 0xFE	; 254
    11cc:	3f 4f       	sbci	r19, 0xFF	; 255
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	20 91 4f 03 	lds	r18, 0x034F
    11d6:	30 91 50 03 	lds	r19, 0x0350
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	69 f4       	brne	.+26     	; 0x11fa <free+0x126>
    11e0:	30 97       	sbiw	r30, 0x00	; 0
    11e2:	29 f4       	brne	.+10     	; 0x11ee <free+0x11a>
    11e4:	10 92 52 03 	sts	0x0352, r1
    11e8:	10 92 51 03 	sts	0x0351, r1
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <free+0x11e>
    11ee:	13 82       	std	Z+3, r1	; 0x03
    11f0:	12 82       	std	Z+2, r1	; 0x02
    11f2:	10 93 50 03 	sts	0x0350, r17
    11f6:	00 93 4f 03 	sts	0x034F, r16
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <memcpy>:
    1204:	fb 01       	movw	r30, r22
    1206:	dc 01       	movw	r26, r24
    1208:	02 c0       	rjmp	.+4      	; 0x120e <memcpy+0xa>
    120a:	01 90       	ld	r0, Z+
    120c:	0d 92       	st	X+, r0
    120e:	41 50       	subi	r20, 0x01	; 1
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	d8 f7       	brcc	.-10     	; 0x120a <memcpy+0x6>
    1214:	08 95       	ret

00001216 <sprintf>:
    1216:	ae e0       	ldi	r26, 0x0E	; 14
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e1 e1       	ldi	r30, 0x11	; 17
    121c:	f9 e0       	ldi	r31, 0x09	; 9
    121e:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__prologue_saves__+0x1c>
    1222:	0d 89       	ldd	r16, Y+21	; 0x15
    1224:	1e 89       	ldd	r17, Y+22	; 0x16
    1226:	86 e0       	ldi	r24, 0x06	; 6
    1228:	8c 83       	std	Y+4, r24	; 0x04
    122a:	1a 83       	std	Y+2, r17	; 0x02
    122c:	09 83       	std	Y+1, r16	; 0x01
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f e7       	ldi	r25, 0x7F	; 127
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	ae 01       	movw	r20, r28
    1238:	47 5e       	subi	r20, 0xE7	; 231
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	6f 89       	ldd	r22, Y+23	; 0x17
    123e:	78 8d       	ldd	r23, Y+24	; 0x18
    1240:	ce 01       	movw	r24, r28
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	0e 94 2e 09 	call	0x125c	; 0x125c <vfprintf>
    1248:	2f 81       	ldd	r18, Y+7	; 0x07
    124a:	38 85       	ldd	r19, Y+8	; 0x08
    124c:	f8 01       	movw	r30, r16
    124e:	e2 0f       	add	r30, r18
    1250:	f3 1f       	adc	r31, r19
    1252:	10 82       	st	Z, r1
    1254:	2e 96       	adiw	r28, 0x0e	; 14
    1256:	e4 e0       	ldi	r30, 0x04	; 4
    1258:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__epilogue_restores__+0x1c>

0000125c <vfprintf>:
    125c:	ac e0       	ldi	r26, 0x0C	; 12
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e4 e3       	ldi	r30, 0x34	; 52
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__prologue_saves__>
    1268:	7c 01       	movw	r14, r24
    126a:	6b 01       	movw	r12, r22
    126c:	8a 01       	movw	r16, r20
    126e:	fc 01       	movw	r30, r24
    1270:	17 82       	std	Z+7, r1	; 0x07
    1272:	16 82       	std	Z+6, r1	; 0x06
    1274:	83 81       	ldd	r24, Z+3	; 0x03
    1276:	81 ff       	sbrs	r24, 1
    1278:	bd c1       	rjmp	.+890    	; 0x15f4 <vfprintf+0x398>
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	4c 01       	movw	r8, r24
    1280:	f7 01       	movw	r30, r14
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	f6 01       	movw	r30, r12
    1286:	93 fd       	sbrc	r25, 3
    1288:	85 91       	lpm	r24, Z+
    128a:	93 ff       	sbrs	r25, 3
    128c:	81 91       	ld	r24, Z+
    128e:	6f 01       	movw	r12, r30
    1290:	88 23       	and	r24, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <vfprintf+0x3a>
    1294:	ab c1       	rjmp	.+854    	; 0x15ec <vfprintf+0x390>
    1296:	85 32       	cpi	r24, 0x25	; 37
    1298:	39 f4       	brne	.+14     	; 0x12a8 <vfprintf+0x4c>
    129a:	93 fd       	sbrc	r25, 3
    129c:	85 91       	lpm	r24, Z+
    129e:	93 ff       	sbrs	r25, 3
    12a0:	81 91       	ld	r24, Z+
    12a2:	6f 01       	movw	r12, r30
    12a4:	85 32       	cpi	r24, 0x25	; 37
    12a6:	29 f4       	brne	.+10     	; 0x12b2 <vfprintf+0x56>
    12a8:	b7 01       	movw	r22, r14
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    12b0:	e7 cf       	rjmp	.-50     	; 0x1280 <vfprintf+0x24>
    12b2:	51 2c       	mov	r5, r1
    12b4:	31 2c       	mov	r3, r1
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	20 32       	cpi	r18, 0x20	; 32
    12ba:	a0 f4       	brcc	.+40     	; 0x12e4 <vfprintf+0x88>
    12bc:	8b 32       	cpi	r24, 0x2B	; 43
    12be:	69 f0       	breq	.+26     	; 0x12da <vfprintf+0x7e>
    12c0:	30 f4       	brcc	.+12     	; 0x12ce <vfprintf+0x72>
    12c2:	80 32       	cpi	r24, 0x20	; 32
    12c4:	59 f0       	breq	.+22     	; 0x12dc <vfprintf+0x80>
    12c6:	83 32       	cpi	r24, 0x23	; 35
    12c8:	69 f4       	brne	.+26     	; 0x12e4 <vfprintf+0x88>
    12ca:	20 61       	ori	r18, 0x10	; 16
    12cc:	2c c0       	rjmp	.+88     	; 0x1326 <vfprintf+0xca>
    12ce:	8d 32       	cpi	r24, 0x2D	; 45
    12d0:	39 f0       	breq	.+14     	; 0x12e0 <vfprintf+0x84>
    12d2:	80 33       	cpi	r24, 0x30	; 48
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <vfprintf+0x88>
    12d6:	21 60       	ori	r18, 0x01	; 1
    12d8:	26 c0       	rjmp	.+76     	; 0x1326 <vfprintf+0xca>
    12da:	22 60       	ori	r18, 0x02	; 2
    12dc:	24 60       	ori	r18, 0x04	; 4
    12de:	23 c0       	rjmp	.+70     	; 0x1326 <vfprintf+0xca>
    12e0:	28 60       	ori	r18, 0x08	; 8
    12e2:	21 c0       	rjmp	.+66     	; 0x1326 <vfprintf+0xca>
    12e4:	27 fd       	sbrc	r18, 7
    12e6:	27 c0       	rjmp	.+78     	; 0x1336 <vfprintf+0xda>
    12e8:	30 ed       	ldi	r19, 0xD0	; 208
    12ea:	38 0f       	add	r19, r24
    12ec:	3a 30       	cpi	r19, 0x0A	; 10
    12ee:	78 f4       	brcc	.+30     	; 0x130e <vfprintf+0xb2>
    12f0:	26 ff       	sbrs	r18, 6
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <vfprintf+0xa4>
    12f4:	fa e0       	ldi	r31, 0x0A	; 10
    12f6:	5f 9e       	mul	r5, r31
    12f8:	30 0d       	add	r19, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	53 2e       	mov	r5, r19
    12fe:	13 c0       	rjmp	.+38     	; 0x1326 <vfprintf+0xca>
    1300:	8a e0       	ldi	r24, 0x0A	; 10
    1302:	38 9e       	mul	r3, r24
    1304:	30 0d       	add	r19, r0
    1306:	11 24       	eor	r1, r1
    1308:	33 2e       	mov	r3, r19
    130a:	20 62       	ori	r18, 0x20	; 32
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <vfprintf+0xca>
    130e:	8e 32       	cpi	r24, 0x2E	; 46
    1310:	21 f4       	brne	.+8      	; 0x131a <vfprintf+0xbe>
    1312:	26 fd       	sbrc	r18, 6
    1314:	6b c1       	rjmp	.+726    	; 0x15ec <vfprintf+0x390>
    1316:	20 64       	ori	r18, 0x40	; 64
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <vfprintf+0xca>
    131a:	8c 36       	cpi	r24, 0x6C	; 108
    131c:	11 f4       	brne	.+4      	; 0x1322 <vfprintf+0xc6>
    131e:	20 68       	ori	r18, 0x80	; 128
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <vfprintf+0xca>
    1322:	88 36       	cpi	r24, 0x68	; 104
    1324:	41 f4       	brne	.+16     	; 0x1336 <vfprintf+0xda>
    1326:	f6 01       	movw	r30, r12
    1328:	93 fd       	sbrc	r25, 3
    132a:	85 91       	lpm	r24, Z+
    132c:	93 ff       	sbrs	r25, 3
    132e:	81 91       	ld	r24, Z+
    1330:	6f 01       	movw	r12, r30
    1332:	81 11       	cpse	r24, r1
    1334:	c1 cf       	rjmp	.-126    	; 0x12b8 <vfprintf+0x5c>
    1336:	98 2f       	mov	r25, r24
    1338:	9f 7d       	andi	r25, 0xDF	; 223
    133a:	95 54       	subi	r25, 0x45	; 69
    133c:	93 30       	cpi	r25, 0x03	; 3
    133e:	28 f4       	brcc	.+10     	; 0x134a <vfprintf+0xee>
    1340:	0c 5f       	subi	r16, 0xFC	; 252
    1342:	1f 4f       	sbci	r17, 0xFF	; 255
    1344:	ff e3       	ldi	r31, 0x3F	; 63
    1346:	f9 83       	std	Y+1, r31	; 0x01
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <vfprintf+0x108>
    134a:	83 36       	cpi	r24, 0x63	; 99
    134c:	31 f0       	breq	.+12     	; 0x135a <vfprintf+0xfe>
    134e:	83 37       	cpi	r24, 0x73	; 115
    1350:	71 f0       	breq	.+28     	; 0x136e <vfprintf+0x112>
    1352:	83 35       	cpi	r24, 0x53	; 83
    1354:	09 f0       	breq	.+2      	; 0x1358 <vfprintf+0xfc>
    1356:	5b c0       	rjmp	.+182    	; 0x140e <vfprintf+0x1b2>
    1358:	22 c0       	rjmp	.+68     	; 0x139e <vfprintf+0x142>
    135a:	f8 01       	movw	r30, r16
    135c:	80 81       	ld	r24, Z
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	0e 5f       	subi	r16, 0xFE	; 254
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	44 24       	eor	r4, r4
    1366:	43 94       	inc	r4
    1368:	51 2c       	mov	r5, r1
    136a:	54 01       	movw	r10, r8
    136c:	15 c0       	rjmp	.+42     	; 0x1398 <vfprintf+0x13c>
    136e:	38 01       	movw	r6, r16
    1370:	f2 e0       	ldi	r31, 0x02	; 2
    1372:	6f 0e       	add	r6, r31
    1374:	71 1c       	adc	r7, r1
    1376:	f8 01       	movw	r30, r16
    1378:	a0 80       	ld	r10, Z
    137a:	b1 80       	ldd	r11, Z+1	; 0x01
    137c:	26 ff       	sbrs	r18, 6
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <vfprintf+0x12a>
    1380:	65 2d       	mov	r22, r5
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	02 c0       	rjmp	.+4      	; 0x138a <vfprintf+0x12e>
    1386:	6f ef       	ldi	r22, 0xFF	; 255
    1388:	7f ef       	ldi	r23, 0xFF	; 255
    138a:	c5 01       	movw	r24, r10
    138c:	2c 87       	std	Y+12, r18	; 0x0c
    138e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <strnlen>
    1392:	2c 01       	movw	r4, r24
    1394:	83 01       	movw	r16, r6
    1396:	2c 85       	ldd	r18, Y+12	; 0x0c
    1398:	2f 77       	andi	r18, 0x7F	; 127
    139a:	22 2e       	mov	r2, r18
    139c:	17 c0       	rjmp	.+46     	; 0x13cc <vfprintf+0x170>
    139e:	38 01       	movw	r6, r16
    13a0:	f2 e0       	ldi	r31, 0x02	; 2
    13a2:	6f 0e       	add	r6, r31
    13a4:	71 1c       	adc	r7, r1
    13a6:	f8 01       	movw	r30, r16
    13a8:	a0 80       	ld	r10, Z
    13aa:	b1 80       	ldd	r11, Z+1	; 0x01
    13ac:	26 ff       	sbrs	r18, 6
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <vfprintf+0x15a>
    13b0:	65 2d       	mov	r22, r5
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <vfprintf+0x15e>
    13b6:	6f ef       	ldi	r22, 0xFF	; 255
    13b8:	7f ef       	ldi	r23, 0xFF	; 255
    13ba:	c5 01       	movw	r24, r10
    13bc:	2c 87       	std	Y+12, r18	; 0x0c
    13be:	0e 94 00 0b 	call	0x1600	; 0x1600 <strnlen_P>
    13c2:	2c 01       	movw	r4, r24
    13c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    13c6:	20 68       	ori	r18, 0x80	; 128
    13c8:	22 2e       	mov	r2, r18
    13ca:	83 01       	movw	r16, r6
    13cc:	23 fc       	sbrc	r2, 3
    13ce:	1b c0       	rjmp	.+54     	; 0x1406 <vfprintf+0x1aa>
    13d0:	83 2d       	mov	r24, r3
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	48 16       	cp	r4, r24
    13d6:	59 06       	cpc	r5, r25
    13d8:	b0 f4       	brcc	.+44     	; 0x1406 <vfprintf+0x1aa>
    13da:	b7 01       	movw	r22, r14
    13dc:	80 e2       	ldi	r24, 0x20	; 32
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    13e4:	3a 94       	dec	r3
    13e6:	f4 cf       	rjmp	.-24     	; 0x13d0 <vfprintf+0x174>
    13e8:	f5 01       	movw	r30, r10
    13ea:	27 fc       	sbrc	r2, 7
    13ec:	85 91       	lpm	r24, Z+
    13ee:	27 fe       	sbrs	r2, 7
    13f0:	81 91       	ld	r24, Z+
    13f2:	5f 01       	movw	r10, r30
    13f4:	b7 01       	movw	r22, r14
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    13fc:	31 10       	cpse	r3, r1
    13fe:	3a 94       	dec	r3
    1400:	f1 e0       	ldi	r31, 0x01	; 1
    1402:	4f 1a       	sub	r4, r31
    1404:	51 08       	sbc	r5, r1
    1406:	41 14       	cp	r4, r1
    1408:	51 04       	cpc	r5, r1
    140a:	71 f7       	brne	.-36     	; 0x13e8 <vfprintf+0x18c>
    140c:	e5 c0       	rjmp	.+458    	; 0x15d8 <vfprintf+0x37c>
    140e:	84 36       	cpi	r24, 0x64	; 100
    1410:	11 f0       	breq	.+4      	; 0x1416 <vfprintf+0x1ba>
    1412:	89 36       	cpi	r24, 0x69	; 105
    1414:	39 f5       	brne	.+78     	; 0x1464 <vfprintf+0x208>
    1416:	f8 01       	movw	r30, r16
    1418:	27 ff       	sbrs	r18, 7
    141a:	07 c0       	rjmp	.+14     	; 0x142a <vfprintf+0x1ce>
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	0c 5f       	subi	r16, 0xFC	; 252
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	08 c0       	rjmp	.+16     	; 0x143a <vfprintf+0x1de>
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	07 2e       	mov	r0, r23
    1430:	00 0c       	add	r0, r0
    1432:	88 0b       	sbc	r24, r24
    1434:	99 0b       	sbc	r25, r25
    1436:	0e 5f       	subi	r16, 0xFE	; 254
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	2f 76       	andi	r18, 0x6F	; 111
    143c:	72 2e       	mov	r7, r18
    143e:	97 ff       	sbrs	r25, 7
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <vfprintf+0x1f8>
    1442:	90 95       	com	r25
    1444:	80 95       	com	r24
    1446:	70 95       	com	r23
    1448:	61 95       	neg	r22
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	20 68       	ori	r18, 0x80	; 128
    1452:	72 2e       	mov	r7, r18
    1454:	2a e0       	ldi	r18, 0x0A	; 10
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	a4 01       	movw	r20, r8
    145a:	0e 94 4e 0b 	call	0x169c	; 0x169c <__ultoa_invert>
    145e:	a8 2e       	mov	r10, r24
    1460:	a8 18       	sub	r10, r8
    1462:	44 c0       	rjmp	.+136    	; 0x14ec <vfprintf+0x290>
    1464:	85 37       	cpi	r24, 0x75	; 117
    1466:	29 f4       	brne	.+10     	; 0x1472 <vfprintf+0x216>
    1468:	2f 7e       	andi	r18, 0xEF	; 239
    146a:	b2 2e       	mov	r11, r18
    146c:	2a e0       	ldi	r18, 0x0A	; 10
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	25 c0       	rjmp	.+74     	; 0x14bc <vfprintf+0x260>
    1472:	f2 2f       	mov	r31, r18
    1474:	f9 7f       	andi	r31, 0xF9	; 249
    1476:	bf 2e       	mov	r11, r31
    1478:	8f 36       	cpi	r24, 0x6F	; 111
    147a:	c1 f0       	breq	.+48     	; 0x14ac <vfprintf+0x250>
    147c:	18 f4       	brcc	.+6      	; 0x1484 <vfprintf+0x228>
    147e:	88 35       	cpi	r24, 0x58	; 88
    1480:	79 f0       	breq	.+30     	; 0x14a0 <vfprintf+0x244>
    1482:	b4 c0       	rjmp	.+360    	; 0x15ec <vfprintf+0x390>
    1484:	80 37       	cpi	r24, 0x70	; 112
    1486:	19 f0       	breq	.+6      	; 0x148e <vfprintf+0x232>
    1488:	88 37       	cpi	r24, 0x78	; 120
    148a:	21 f0       	breq	.+8      	; 0x1494 <vfprintf+0x238>
    148c:	af c0       	rjmp	.+350    	; 0x15ec <vfprintf+0x390>
    148e:	2f 2f       	mov	r18, r31
    1490:	20 61       	ori	r18, 0x10	; 16
    1492:	b2 2e       	mov	r11, r18
    1494:	b4 fe       	sbrs	r11, 4
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <vfprintf+0x256>
    1498:	8b 2d       	mov	r24, r11
    149a:	84 60       	ori	r24, 0x04	; 4
    149c:	b8 2e       	mov	r11, r24
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <vfprintf+0x256>
    14a0:	24 ff       	sbrs	r18, 4
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <vfprintf+0x25c>
    14a4:	9f 2f       	mov	r25, r31
    14a6:	96 60       	ori	r25, 0x06	; 6
    14a8:	b9 2e       	mov	r11, r25
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0x25c>
    14ac:	28 e0       	ldi	r18, 0x08	; 8
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <vfprintf+0x260>
    14b2:	20 e1       	ldi	r18, 0x10	; 16
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <vfprintf+0x260>
    14b8:	20 e1       	ldi	r18, 0x10	; 16
    14ba:	32 e0       	ldi	r19, 0x02	; 2
    14bc:	f8 01       	movw	r30, r16
    14be:	b7 fe       	sbrs	r11, 7
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <vfprintf+0x274>
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	0c 5f       	subi	r16, 0xFC	; 252
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <vfprintf+0x280>
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 5f       	subi	r16, 0xFE	; 254
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	a4 01       	movw	r20, r8
    14de:	0e 94 4e 0b 	call	0x169c	; 0x169c <__ultoa_invert>
    14e2:	a8 2e       	mov	r10, r24
    14e4:	a8 18       	sub	r10, r8
    14e6:	fb 2d       	mov	r31, r11
    14e8:	ff 77       	andi	r31, 0x7F	; 127
    14ea:	7f 2e       	mov	r7, r31
    14ec:	76 fe       	sbrs	r7, 6
    14ee:	0b c0       	rjmp	.+22     	; 0x1506 <vfprintf+0x2aa>
    14f0:	37 2d       	mov	r19, r7
    14f2:	3e 7f       	andi	r19, 0xFE	; 254
    14f4:	a5 14       	cp	r10, r5
    14f6:	50 f4       	brcc	.+20     	; 0x150c <vfprintf+0x2b0>
    14f8:	74 fe       	sbrs	r7, 4
    14fa:	0a c0       	rjmp	.+20     	; 0x1510 <vfprintf+0x2b4>
    14fc:	72 fc       	sbrc	r7, 2
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <vfprintf+0x2b4>
    1500:	37 2d       	mov	r19, r7
    1502:	3e 7e       	andi	r19, 0xEE	; 238
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <vfprintf+0x2b4>
    1506:	ba 2c       	mov	r11, r10
    1508:	37 2d       	mov	r19, r7
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <vfprintf+0x2b6>
    150c:	ba 2c       	mov	r11, r10
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <vfprintf+0x2b6>
    1510:	b5 2c       	mov	r11, r5
    1512:	34 ff       	sbrs	r19, 4
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <vfprintf+0x2d4>
    1516:	fe 01       	movw	r30, r28
    1518:	ea 0d       	add	r30, r10
    151a:	f1 1d       	adc	r31, r1
    151c:	80 81       	ld	r24, Z
    151e:	80 33       	cpi	r24, 0x30	; 48
    1520:	11 f4       	brne	.+4      	; 0x1526 <vfprintf+0x2ca>
    1522:	39 7e       	andi	r19, 0xE9	; 233
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <vfprintf+0x2dc>
    1526:	32 ff       	sbrs	r19, 2
    1528:	06 c0       	rjmp	.+12     	; 0x1536 <vfprintf+0x2da>
    152a:	b3 94       	inc	r11
    152c:	b3 94       	inc	r11
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <vfprintf+0x2dc>
    1530:	83 2f       	mov	r24, r19
    1532:	86 78       	andi	r24, 0x86	; 134
    1534:	09 f0       	breq	.+2      	; 0x1538 <vfprintf+0x2dc>
    1536:	b3 94       	inc	r11
    1538:	33 fd       	sbrc	r19, 3
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <vfprintf+0x306>
    153c:	30 ff       	sbrs	r19, 0
    153e:	06 c0       	rjmp	.+12     	; 0x154c <vfprintf+0x2f0>
    1540:	5a 2c       	mov	r5, r10
    1542:	b3 14       	cp	r11, r3
    1544:	18 f4       	brcc	.+6      	; 0x154c <vfprintf+0x2f0>
    1546:	53 0c       	add	r5, r3
    1548:	5b 18       	sub	r5, r11
    154a:	b3 2c       	mov	r11, r3
    154c:	b3 14       	cp	r11, r3
    154e:	68 f4       	brcc	.+26     	; 0x156a <vfprintf+0x30e>
    1550:	b7 01       	movw	r22, r14
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	3c 87       	std	Y+12, r19	; 0x0c
    1558:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    155c:	b3 94       	inc	r11
    155e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1560:	f5 cf       	rjmp	.-22     	; 0x154c <vfprintf+0x2f0>
    1562:	b3 14       	cp	r11, r3
    1564:	10 f4       	brcc	.+4      	; 0x156a <vfprintf+0x30e>
    1566:	3b 18       	sub	r3, r11
    1568:	01 c0       	rjmp	.+2      	; 0x156c <vfprintf+0x310>
    156a:	31 2c       	mov	r3, r1
    156c:	34 ff       	sbrs	r19, 4
    156e:	12 c0       	rjmp	.+36     	; 0x1594 <vfprintf+0x338>
    1570:	b7 01       	movw	r22, r14
    1572:	80 e3       	ldi	r24, 0x30	; 48
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	3c 87       	std	Y+12, r19	; 0x0c
    1578:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    157c:	3c 85       	ldd	r19, Y+12	; 0x0c
    157e:	32 ff       	sbrs	r19, 2
    1580:	17 c0       	rjmp	.+46     	; 0x15b0 <vfprintf+0x354>
    1582:	31 fd       	sbrc	r19, 1
    1584:	03 c0       	rjmp	.+6      	; 0x158c <vfprintf+0x330>
    1586:	88 e7       	ldi	r24, 0x78	; 120
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x334>
    158c:	88 e5       	ldi	r24, 0x58	; 88
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	b7 01       	movw	r22, r14
    1592:	0c c0       	rjmp	.+24     	; 0x15ac <vfprintf+0x350>
    1594:	83 2f       	mov	r24, r19
    1596:	86 78       	andi	r24, 0x86	; 134
    1598:	59 f0       	breq	.+22     	; 0x15b0 <vfprintf+0x354>
    159a:	31 ff       	sbrs	r19, 1
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <vfprintf+0x346>
    159e:	8b e2       	ldi	r24, 0x2B	; 43
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <vfprintf+0x348>
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	37 fd       	sbrc	r19, 7
    15a6:	8d e2       	ldi	r24, 0x2D	; 45
    15a8:	b7 01       	movw	r22, r14
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    15b0:	a5 14       	cp	r10, r5
    15b2:	38 f4       	brcc	.+14     	; 0x15c2 <vfprintf+0x366>
    15b4:	b7 01       	movw	r22, r14
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    15be:	5a 94       	dec	r5
    15c0:	f7 cf       	rjmp	.-18     	; 0x15b0 <vfprintf+0x354>
    15c2:	aa 94       	dec	r10
    15c4:	f4 01       	movw	r30, r8
    15c6:	ea 0d       	add	r30, r10
    15c8:	f1 1d       	adc	r31, r1
    15ca:	80 81       	ld	r24, Z
    15cc:	b7 01       	movw	r22, r14
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    15d4:	a1 10       	cpse	r10, r1
    15d6:	f5 cf       	rjmp	.-22     	; 0x15c2 <vfprintf+0x366>
    15d8:	33 20       	and	r3, r3
    15da:	09 f4       	brne	.+2      	; 0x15de <vfprintf+0x382>
    15dc:	51 ce       	rjmp	.-862    	; 0x1280 <vfprintf+0x24>
    15de:	b7 01       	movw	r22, r14
    15e0:	80 e2       	ldi	r24, 0x20	; 32
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 16 0b 	call	0x162c	; 0x162c <fputc>
    15e8:	3a 94       	dec	r3
    15ea:	f6 cf       	rjmp	.-20     	; 0x15d8 <vfprintf+0x37c>
    15ec:	f7 01       	movw	r30, r14
    15ee:	86 81       	ldd	r24, Z+6	; 0x06
    15f0:	97 81       	ldd	r25, Z+7	; 0x07
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <vfprintf+0x39c>
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	2c 96       	adiw	r28, 0x0c	; 12
    15fa:	e2 e1       	ldi	r30, 0x12	; 18
    15fc:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__epilogue_restores__>

00001600 <strnlen_P>:
    1600:	fc 01       	movw	r30, r24
    1602:	05 90       	lpm	r0, Z+
    1604:	61 50       	subi	r22, 0x01	; 1
    1606:	70 40       	sbci	r23, 0x00	; 0
    1608:	01 10       	cpse	r0, r1
    160a:	d8 f7       	brcc	.-10     	; 0x1602 <strnlen_P+0x2>
    160c:	80 95       	com	r24
    160e:	90 95       	com	r25
    1610:	8e 0f       	add	r24, r30
    1612:	9f 1f       	adc	r25, r31
    1614:	08 95       	ret

00001616 <strnlen>:
    1616:	fc 01       	movw	r30, r24
    1618:	61 50       	subi	r22, 0x01	; 1
    161a:	70 40       	sbci	r23, 0x00	; 0
    161c:	01 90       	ld	r0, Z+
    161e:	01 10       	cpse	r0, r1
    1620:	d8 f7       	brcc	.-10     	; 0x1618 <strnlen+0x2>
    1622:	80 95       	com	r24
    1624:	90 95       	com	r25
    1626:	8e 0f       	add	r24, r30
    1628:	9f 1f       	adc	r25, r31
    162a:	08 95       	ret

0000162c <fputc>:
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	fb 01       	movw	r30, r22
    1636:	23 81       	ldd	r18, Z+3	; 0x03
    1638:	21 fd       	sbrc	r18, 1
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <fputc+0x16>
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	28 c0       	rjmp	.+80     	; 0x1692 <fputc+0x66>
    1642:	22 ff       	sbrs	r18, 2
    1644:	16 c0       	rjmp	.+44     	; 0x1672 <fputc+0x46>
    1646:	46 81       	ldd	r20, Z+6	; 0x06
    1648:	57 81       	ldd	r21, Z+7	; 0x07
    164a:	24 81       	ldd	r18, Z+4	; 0x04
    164c:	35 81       	ldd	r19, Z+5	; 0x05
    164e:	42 17       	cp	r20, r18
    1650:	53 07       	cpc	r21, r19
    1652:	44 f4       	brge	.+16     	; 0x1664 <fputc+0x38>
    1654:	a0 81       	ld	r26, Z
    1656:	b1 81       	ldd	r27, Z+1	; 0x01
    1658:	9d 01       	movw	r18, r26
    165a:	2f 5f       	subi	r18, 0xFF	; 255
    165c:	3f 4f       	sbci	r19, 0xFF	; 255
    165e:	31 83       	std	Z+1, r19	; 0x01
    1660:	20 83       	st	Z, r18
    1662:	8c 93       	st	X, r24
    1664:	26 81       	ldd	r18, Z+6	; 0x06
    1666:	37 81       	ldd	r19, Z+7	; 0x07
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	37 83       	std	Z+7, r19	; 0x07
    166e:	26 83       	std	Z+6, r18	; 0x06
    1670:	10 c0       	rjmp	.+32     	; 0x1692 <fputc+0x66>
    1672:	eb 01       	movw	r28, r22
    1674:	09 2f       	mov	r16, r25
    1676:	18 2f       	mov	r17, r24
    1678:	00 84       	ldd	r0, Z+8	; 0x08
    167a:	f1 85       	ldd	r31, Z+9	; 0x09
    167c:	e0 2d       	mov	r30, r0
    167e:	09 95       	icall
    1680:	89 2b       	or	r24, r25
    1682:	e1 f6       	brne	.-72     	; 0x163c <fputc+0x10>
    1684:	8e 81       	ldd	r24, Y+6	; 0x06
    1686:	9f 81       	ldd	r25, Y+7	; 0x07
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	9f 83       	std	Y+7, r25	; 0x07
    168c:	8e 83       	std	Y+6, r24	; 0x06
    168e:	81 2f       	mov	r24, r17
    1690:	90 2f       	mov	r25, r16
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	08 95       	ret

0000169c <__ultoa_invert>:
    169c:	fa 01       	movw	r30, r20
    169e:	aa 27       	eor	r26, r26
    16a0:	28 30       	cpi	r18, 0x08	; 8
    16a2:	51 f1       	breq	.+84     	; 0x16f8 <__ultoa_invert+0x5c>
    16a4:	20 31       	cpi	r18, 0x10	; 16
    16a6:	81 f1       	breq	.+96     	; 0x1708 <__ultoa_invert+0x6c>
    16a8:	e8 94       	clt
    16aa:	6f 93       	push	r22
    16ac:	6e 7f       	andi	r22, 0xFE	; 254
    16ae:	6e 5f       	subi	r22, 0xFE	; 254
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	8f 4f       	sbci	r24, 0xFF	; 255
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	af 4f       	sbci	r26, 0xFF	; 255
    16b8:	b1 e0       	ldi	r27, 0x01	; 1
    16ba:	3e d0       	rcall	.+124    	; 0x1738 <__ultoa_invert+0x9c>
    16bc:	b4 e0       	ldi	r27, 0x04	; 4
    16be:	3c d0       	rcall	.+120    	; 0x1738 <__ultoa_invert+0x9c>
    16c0:	67 0f       	add	r22, r23
    16c2:	78 1f       	adc	r23, r24
    16c4:	89 1f       	adc	r24, r25
    16c6:	9a 1f       	adc	r25, r26
    16c8:	a1 1d       	adc	r26, r1
    16ca:	68 0f       	add	r22, r24
    16cc:	79 1f       	adc	r23, r25
    16ce:	8a 1f       	adc	r24, r26
    16d0:	91 1d       	adc	r25, r1
    16d2:	a1 1d       	adc	r26, r1
    16d4:	6a 0f       	add	r22, r26
    16d6:	71 1d       	adc	r23, r1
    16d8:	81 1d       	adc	r24, r1
    16da:	91 1d       	adc	r25, r1
    16dc:	a1 1d       	adc	r26, r1
    16de:	20 d0       	rcall	.+64     	; 0x1720 <__ultoa_invert+0x84>
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <__ultoa_invert+0x48>
    16e2:	68 94       	set
    16e4:	3f 91       	pop	r19
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	26 9f       	mul	r18, r22
    16ea:	11 24       	eor	r1, r1
    16ec:	30 19       	sub	r19, r0
    16ee:	30 5d       	subi	r19, 0xD0	; 208
    16f0:	31 93       	st	Z+, r19
    16f2:	de f6       	brtc	.-74     	; 0x16aa <__ultoa_invert+0xe>
    16f4:	cf 01       	movw	r24, r30
    16f6:	08 95       	ret
    16f8:	46 2f       	mov	r20, r22
    16fa:	47 70       	andi	r20, 0x07	; 7
    16fc:	40 5d       	subi	r20, 0xD0	; 208
    16fe:	41 93       	st	Z+, r20
    1700:	b3 e0       	ldi	r27, 0x03	; 3
    1702:	0f d0       	rcall	.+30     	; 0x1722 <__ultoa_invert+0x86>
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__ultoa_invert+0x5c>
    1706:	f6 cf       	rjmp	.-20     	; 0x16f4 <__ultoa_invert+0x58>
    1708:	46 2f       	mov	r20, r22
    170a:	4f 70       	andi	r20, 0x0F	; 15
    170c:	40 5d       	subi	r20, 0xD0	; 208
    170e:	4a 33       	cpi	r20, 0x3A	; 58
    1710:	18 f0       	brcs	.+6      	; 0x1718 <__ultoa_invert+0x7c>
    1712:	49 5d       	subi	r20, 0xD9	; 217
    1714:	31 fd       	sbrc	r19, 1
    1716:	40 52       	subi	r20, 0x20	; 32
    1718:	41 93       	st	Z+, r20
    171a:	02 d0       	rcall	.+4      	; 0x1720 <__ultoa_invert+0x84>
    171c:	a9 f7       	brne	.-22     	; 0x1708 <__ultoa_invert+0x6c>
    171e:	ea cf       	rjmp	.-44     	; 0x16f4 <__ultoa_invert+0x58>
    1720:	b4 e0       	ldi	r27, 0x04	; 4
    1722:	a6 95       	lsr	r26
    1724:	97 95       	ror	r25
    1726:	87 95       	ror	r24
    1728:	77 95       	ror	r23
    172a:	67 95       	ror	r22
    172c:	ba 95       	dec	r27
    172e:	c9 f7       	brne	.-14     	; 0x1722 <__ultoa_invert+0x86>
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	61 05       	cpc	r22, r1
    1734:	71 05       	cpc	r23, r1
    1736:	08 95       	ret
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	0a 2e       	mov	r0, r26
    173e:	06 94       	lsr	r0
    1740:	57 95       	ror	r21
    1742:	47 95       	ror	r20
    1744:	37 95       	ror	r19
    1746:	27 95       	ror	r18
    1748:	ba 95       	dec	r27
    174a:	c9 f7       	brne	.-14     	; 0x173e <__ultoa_invert+0xa2>
    174c:	62 0f       	add	r22, r18
    174e:	73 1f       	adc	r23, r19
    1750:	84 1f       	adc	r24, r20
    1752:	95 1f       	adc	r25, r21
    1754:	a0 1d       	adc	r26, r0
    1756:	08 95       	ret

00001758 <__prologue_saves__>:
    1758:	2f 92       	push	r2
    175a:	3f 92       	push	r3
    175c:	4f 92       	push	r4
    175e:	5f 92       	push	r5
    1760:	6f 92       	push	r6
    1762:	7f 92       	push	r7
    1764:	8f 92       	push	r8
    1766:	9f 92       	push	r9
    1768:	af 92       	push	r10
    176a:	bf 92       	push	r11
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	ca 1b       	sub	r28, r26
    1782:	db 0b       	sbc	r29, r27
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	09 94       	ijmp

00001790 <__epilogue_restores__>:
    1790:	2a 88       	ldd	r2, Y+18	; 0x12
    1792:	39 88       	ldd	r3, Y+17	; 0x11
    1794:	48 88       	ldd	r4, Y+16	; 0x10
    1796:	5f 84       	ldd	r5, Y+15	; 0x0f
    1798:	6e 84       	ldd	r6, Y+14	; 0x0e
    179a:	7d 84       	ldd	r7, Y+13	; 0x0d
    179c:	8c 84       	ldd	r8, Y+12	; 0x0c
    179e:	9b 84       	ldd	r9, Y+11	; 0x0b
    17a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    17a2:	b9 84       	ldd	r11, Y+9	; 0x09
    17a4:	c8 84       	ldd	r12, Y+8	; 0x08
    17a6:	df 80       	ldd	r13, Y+7	; 0x07
    17a8:	ee 80       	ldd	r14, Y+6	; 0x06
    17aa:	fd 80       	ldd	r15, Y+5	; 0x05
    17ac:	0c 81       	ldd	r16, Y+4	; 0x04
    17ae:	1b 81       	ldd	r17, Y+3	; 0x03
    17b0:	aa 81       	ldd	r26, Y+2	; 0x02
    17b2:	b9 81       	ldd	r27, Y+1	; 0x01
    17b4:	ce 0f       	add	r28, r30
    17b6:	d1 1d       	adc	r29, r1
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	ed 01       	movw	r28, r26
    17c4:	08 95       	ret

000017c6 <__do_global_dtors>:
    17c6:	10 e0       	ldi	r17, 0x00	; 0
    17c8:	c2 e8       	ldi	r28, 0x82	; 130
    17ca:	d0 e0       	ldi	r29, 0x00	; 0
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <__do_global_dtors+0x10>
    17ce:	fe 01       	movw	r30, r28
    17d0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__tablejump2__>
    17d4:	21 96       	adiw	r28, 0x01	; 1
    17d6:	c3 38       	cpi	r28, 0x83	; 131
    17d8:	d1 07       	cpc	r29, r17
    17da:	c9 f7       	brne	.-14     	; 0x17ce <__do_global_dtors+0x8>
    17dc:	f8 94       	cli

000017de <__stop_program>:
    17de:	ff cf       	rjmp	.-2      	; 0x17de <__stop_program>
