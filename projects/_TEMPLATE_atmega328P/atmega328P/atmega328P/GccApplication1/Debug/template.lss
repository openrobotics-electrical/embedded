
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  000019e0  00001a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017e  008002d4  008002d4  00001c48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000252e  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  000042fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072a  00000000  00000000  000049fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00005128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e1d  00000000  00000000  000054cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df6  00000000  00000000  000062e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000070df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__dtors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_18>
      4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      50:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_20>
      54:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_21>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	fb 05       	cpc	r31, r11
      6a:	0b 06       	cpc	r0, r27
      6c:	0b 06       	cpc	r0, r27
      6e:	0b 06       	cpc	r0, r27
      70:	0b 06       	cpc	r0, r27
      72:	0b 06       	cpc	r0, r27
      74:	0b 06       	cpc	r0, r27
      76:	0b 06       	cpc	r0, r27
      78:	0b 06       	cpc	r0, r27
      7a:	0b 06       	cpc	r0, r27
      7c:	0b 06       	cpc	r0, r27
      7e:	0b 06       	cpc	r0, r27
      80:	0b 06       	cpc	r0, r27
      82:	0b 06       	cpc	r0, r27
      84:	0b 06       	cpc	r0, r27
      86:	0b 06       	cpc	r0, r27
      88:	4b 04       	cpc	r4, r11
      8a:	60 04       	cpc	r6, r0
      8c:	75 04       	cpc	r7, r5
      8e:	8a 04       	cpc	r8, r10
      90:	9f 04       	cpc	r9, r15
      92:	b4 04       	cpc	r11, r4
      94:	0b 06       	cpc	r0, r27
      96:	0b 06       	cpc	r0, r27
      98:	0b 06       	cpc	r0, r27
      9a:	0b 06       	cpc	r0, r27
      9c:	0b 06       	cpc	r0, r27
      9e:	0b 06       	cpc	r0, r27
      a0:	0b 06       	cpc	r0, r27
      a2:	0b 06       	cpc	r0, r27
      a4:	0b 06       	cpc	r0, r27
      a6:	0b 06       	cpc	r0, r27
      a8:	0b 06       	cpc	r0, r27
      aa:	0b 06       	cpc	r0, r27
      ac:	0b 06       	cpc	r0, r27
      ae:	0b 06       	cpc	r0, r27
      b0:	0b 06       	cpc	r0, r27
      b2:	0b 06       	cpc	r0, r27
      b4:	0b 06       	cpc	r0, r27
      b6:	0b 06       	cpc	r0, r27
      b8:	0b 06       	cpc	r0, r27
      ba:	0b 06       	cpc	r0, r27
      bc:	0b 06       	cpc	r0, r27
      be:	0b 06       	cpc	r0, r27
      c0:	0b 06       	cpc	r0, r27
      c2:	0b 06       	cpc	r0, r27
      c4:	0b 06       	cpc	r0, r27
      c6:	0b 06       	cpc	r0, r27
      c8:	0b 06       	cpc	r0, r27
      ca:	0b 06       	cpc	r0, r27
      cc:	0b 06       	cpc	r0, r27
      ce:	0b 06       	cpc	r0, r27
      d0:	0b 06       	cpc	r0, r27
      d2:	0b 06       	cpc	r0, r27
      d4:	0b 06       	cpc	r0, r27
      d6:	0b 06       	cpc	r0, r27
      d8:	0b 06       	cpc	r0, r27
      da:	0b 06       	cpc	r0, r27
      dc:	0b 06       	cpc	r0, r27
      de:	0b 06       	cpc	r0, r27
      e0:	0b 06       	cpc	r0, r27
      e2:	0b 06       	cpc	r0, r27
      e4:	0b 06       	cpc	r0, r27
      e6:	0b 06       	cpc	r0, r27
      e8:	c7 04       	cpc	r12, r7
      ea:	0b 06       	cpc	r0, r27
      ec:	0b 06       	cpc	r0, r27
      ee:	0b 06       	cpc	r0, r27
      f0:	0b 06       	cpc	r0, r27
      f2:	0b 06       	cpc	r0, r27
      f4:	0b 06       	cpc	r0, r27
      f6:	0b 06       	cpc	r0, r27
      f8:	0b 06       	cpc	r0, r27
      fa:	0b 06       	cpc	r0, r27
      fc:	0b 06       	cpc	r0, r27
      fe:	0b 06       	cpc	r0, r27
     100:	0b 06       	cpc	r0, r27
     102:	0b 06       	cpc	r0, r27
     104:	0b 06       	cpc	r0, r27
     106:	0b 06       	cpc	r0, r27
     108:	0b 06       	cpc	r0, r27
     10a:	0b 06       	cpc	r0, r27
     10c:	0b 06       	cpc	r0, r27
     10e:	0b 06       	cpc	r0, r27
     110:	0b 06       	cpc	r0, r27
     112:	18 05       	cpc	r17, r8
     114:	69 05       	cpc	r22, r9

00000116 <__ctors_start>:
     116:	d1 06       	cpc	r13, r17

00000118 <__ctors_end>:
     118:	74 08       	sbc	r7, r4

0000011a <__dtors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf ef       	ldi	r28, 0xFF	; 255
     120:	d8 e0       	ldi	r29, 0x08	; 8
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	12 e0       	ldi	r17, 0x02	; 2
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	e0 ee       	ldi	r30, 0xE0	; 224
     12e:	f9 e1       	ldi	r31, 0x19	; 25
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
     132:	05 90       	lpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 3d       	cpi	r26, 0xD4	; 212
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
     13c:	24 e0       	ldi	r18, 0x04	; 4
     13e:	a4 ed       	ldi	r26, 0xD4	; 212
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a2 35       	cpi	r26, 0x52	; 82
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>

0000014c <__do_global_ctors>:
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	cc e8       	ldi	r28, 0x8C	; 140
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	04 c0       	rjmp	.+8      	; 0x15c <__do_global_ctors+0x10>
     154:	21 97       	sbiw	r28, 0x01	; 1
     156:	fe 01       	movw	r30, r28
     158:	0e 94 b5 08 	call	0x116a	; 0x116a <__tablejump2__>
     15c:	cb 38       	cpi	r28, 0x8B	; 139
     15e:	d1 07       	cpc	r29, r17
     160:	c9 f7       	brne	.-14     	; 0x154 <__do_global_ctors+0x8>
     162:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
     166:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__do_global_dtors>

0000016a <__bad_interrupt>:
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
     16e:	08 95       	ret

00000170 <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
     170:	08 95       	ret

00000172 <_Z14error_functionv>:
		}
	}
}

// Turns all power outputs off, pass this function to default _error_function
void error_function() {
     172:	e8 e0       	ldi	r30, 0x08	; 8
     174:	f4 e0       	ldi	r31, 0x04	; 4
     176:	24 e4       	ldi	r18, 0x44	; 68
     178:	34 e0       	ldi	r19, 0x04	; 4
     17a:	df 01       	movw	r26, r30
     17c:	17 97       	sbiw	r26, 0x07	; 7
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     17e:	0d 90       	ld	r0, X+
     180:	bc 91       	ld	r27, X
     182:	a0 2d       	mov	r26, r0
     184:	9c 91       	ld	r25, X
     186:	80 81       	ld	r24, Z
     188:	80 95       	com	r24
     18a:	89 23       	and	r24, r25
     18c:	8c 93       	st	X, r24
     18e:	3a 96       	adiw	r30, 0x0a	; 10
	for (int i(1); i <= 6; ++i) enable[i].clear();
     190:	e2 17       	cp	r30, r18
     192:	f3 07       	cpc	r31, r19
     194:	91 f7       	brne	.-28     	; 0x17a <_Z14error_functionv+0x8>
}
     196:	08 95       	ret

00000198 <_Z18error_led_functionv>:
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     198:	a5 ef       	ldi	r26, 0xF5	; 245
     19a:	b3 e0       	ldi	r27, 0x03	; 3
     19c:	12 96       	adiw	r26, 0x02	; 2
     19e:	ed 91       	ld	r30, X+
     1a0:	fc 91       	ld	r31, X
     1a2:	13 97       	sbiw	r26, 0x03	; 3
     1a4:	90 81       	ld	r25, Z
     1a6:	19 96       	adiw	r26, 0x09	; 9
     1a8:	8c 91       	ld	r24, X
     1aa:	89 27       	eor	r24, r25
     1ac:	80 83       	st	Z, r24
     1ae:	08 95       	ret

000001b0 <_ZN5state16update_variablesEPV7PduData>:
		}
		check_voltage = !check_voltage;
		current = idle;
	}

	void update_variables(volatile PduData* data) {
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	fc 01       	movw	r30, r24
		if (data->incoming.enable_status != data->last_enable_status) {
     1b6:	92 89       	ldd	r25, Z+18	; 0x12
     1b8:	85 81       	ldd	r24, Z+5	; 0x05
     1ba:	98 17       	cp	r25, r24
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <_ZN5state16update_variablesEPV7PduData+0x10>
     1be:	ab c0       	rjmp	.+342    	; 0x316 <_ZN5state16update_variablesEPV7PduData+0x166>
     1c0:	c5 ef       	ldi	r28, 0xF5	; 245
     1c2:	d3 e0       	ldi	r29, 0x03	; 3
     1c4:	68 e0       	ldi	r22, 0x08	; 8
     1c6:	74 e0       	ldi	r23, 0x04	; 4
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
			for(int i(1); i <= 6; ++i) {
				if (data->incoming.enable_status & (1<<(i-1))) {
     1cc:	22 89       	ldd	r18, Z+18	; 0x12
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	08 2e       	mov	r0, r24
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <_ZN5state16update_variablesEPV7PduData+0x28>
     1d4:	35 95       	asr	r19
     1d6:	27 95       	ror	r18
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <_ZN5state16update_variablesEPV7PduData+0x24>
     1dc:	20 ff       	sbrs	r18, 0
     1de:	0a c0       	rjmp	.+20     	; 0x1f4 <_ZN5state16update_variablesEPV7PduData+0x44>
	void inline set() { *port_out |= pin_mask; }
     1e0:	4c 85       	ldd	r20, Y+12	; 0x0c
     1e2:	5d 85       	ldd	r21, Y+13	; 0x0d
     1e4:	da 01       	movw	r26, r20
     1e6:	3c 91       	ld	r19, X
     1e8:	db 01       	movw	r26, r22
     1ea:	2c 91       	ld	r18, X
     1ec:	23 2b       	or	r18, r19
     1ee:	da 01       	movw	r26, r20
     1f0:	2c 93       	st	X, r18
     1f2:	0a c0       	rjmp	.+20     	; 0x208 <_ZN5state16update_variablesEPV7PduData+0x58>
	void inline clear() { *port_out &= ~pin_mask; }
     1f4:	4c 85       	ldd	r20, Y+12	; 0x0c
     1f6:	5d 85       	ldd	r21, Y+13	; 0x0d
     1f8:	da 01       	movw	r26, r20
     1fa:	3c 91       	ld	r19, X
     1fc:	db 01       	movw	r26, r22
     1fe:	2c 91       	ld	r18, X
     200:	20 95       	com	r18
     202:	23 23       	and	r18, r19
     204:	da 01       	movw	r26, r20
     206:	2c 93       	st	X, r18
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	2a 96       	adiw	r28, 0x0a	; 10
     20c:	66 5f       	subi	r22, 0xF6	; 246
     20e:	7f 4f       	sbci	r23, 0xFF	; 255
		current = idle;
	}

	void update_variables(volatile PduData* data) {
		if (data->incoming.enable_status != data->last_enable_status) {
			for(int i(1); i <= 6; ++i) {
     210:	86 30       	cpi	r24, 0x06	; 6
     212:	91 05       	cpc	r25, r1
     214:	d9 f6       	brne	.-74     	; 0x1cc <_ZN5state16update_variablesEPV7PduData+0x1c>
					enable[i].set();
					} else {
					enable[i].clear();
				}
			}
			data->last_enable_status = data->incoming.enable_status;
     216:	82 89       	ldd	r24, Z+18	; 0x12
     218:	85 83       	std	Z+5, r24	; 0x05
     21a:	7d c0       	rjmp	.+250    	; 0x316 <_ZN5state16update_variablesEPV7PduData+0x166>
		}
		for(int i(0); i < 6; ++i) {
			if (data->incoming.pwm_status & (1<<i)) {
     21c:	23 89       	ldd	r18, Z+19	; 0x13
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	04 2e       	mov	r0, r20
     222:	02 c0       	rjmp	.+4      	; 0x228 <_ZN5state16update_variablesEPV7PduData+0x78>
     224:	35 95       	asr	r19
     226:	27 95       	ror	r18
     228:	0a 94       	dec	r0
     22a:	e2 f7       	brpl	.-8      	; 0x224 <_ZN5state16update_variablesEPV7PduData+0x74>
     22c:	20 ff       	sbrs	r18, 0
     22e:	0d c0       	rjmp	.+26     	; 0x24a <_ZN5state16update_variablesEPV7PduData+0x9a>
     230:	da 01       	movw	r26, r20
     232:	aa 0f       	add	r26, r26
     234:	bb 1f       	adc	r27, r27
     236:	ae 0f       	add	r26, r30
     238:	bf 1f       	adc	r27, r31
				data->current_pwm[i] = data->incoming.pwm[i];
     23a:	54 96       	adiw	r26, 0x14	; 20
     23c:	8d 91       	ld	r24, X+
     23e:	9c 91       	ld	r25, X
     240:	55 97       	sbiw	r26, 0x15	; 21
     242:	17 96       	adiw	r26, 0x07	; 7
     244:	9c 93       	st	X, r25
     246:	8e 93       	st	-X, r24
     248:	16 97       	sbiw	r26, 0x06	; 6
					enable[i].clear();
				}
			}
			data->last_enable_status = data->incoming.enable_status;
		}
		for(int i(0); i < 6; ++i) {
     24a:	4f 5f       	subi	r20, 0xFF	; 255
     24c:	5f 4f       	sbci	r21, 0xFF	; 255
     24e:	46 30       	cpi	r20, 0x06	; 6
     250:	51 05       	cpc	r21, r1
     252:	21 f7       	brne	.-56     	; 0x21c <_ZN5state16update_variablesEPV7PduData+0x6c>
			if (data->incoming.pwm_status & (1<<i)) {
				data->current_pwm[i] = data->incoming.pwm[i];
			} 
		}
		if (data->current_pwm[0] > 0) {
     254:	86 81       	ldd	r24, Z+6	; 0x06
     256:	97 81       	ldd	r25, Z+7	; 0x07
     258:	89 2b       	or	r24, r25
     25a:	79 f0       	breq	.+30     	; 0x27a <_ZN5state16update_variablesEPV7PduData+0xca>
			TCCR0B |= PRESCALER2_256;
     25c:	85 b5       	in	r24, 0x25	; 37
     25e:	86 60       	ori	r24, 0x06	; 6
     260:	85 bd       	out	0x25, r24	; 37
			OCR0A = data->current_pwm[0]/32;
     262:	86 81       	ldd	r24, Z+6	; 0x06
     264:	97 81       	ldd	r25, Z+7	; 0x07
     266:	96 95       	lsr	r25
     268:	87 95       	ror	r24
     26a:	92 95       	swap	r25
     26c:	82 95       	swap	r24
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	89 27       	eor	r24, r25
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 27       	eor	r24, r25
     276:	87 bd       	out	0x27, r24	; 39
     278:	03 c0       	rjmp	.+6      	; 0x280 <_ZN5state16update_variablesEPV7PduData+0xd0>
		} else {
			TCCR0B &= ~PRESCALER2_MASK;
     27a:	85 b5       	in	r24, 0x25	; 37
     27c:	88 7f       	andi	r24, 0xF8	; 248
     27e:	85 bd       	out	0x25, r24	; 37
		}
		if (data->current_pwm[1] > 0) {
     280:	80 85       	ldd	r24, Z+8	; 0x08
     282:	91 85       	ldd	r25, Z+9	; 0x09
     284:	89 2b       	or	r24, r25
     286:	79 f0       	breq	.+30     	; 0x2a6 <_ZN5state16update_variablesEPV7PduData+0xf6>
			TCCR0B |= PRESCALER2_256;
     288:	85 b5       	in	r24, 0x25	; 37
     28a:	86 60       	ori	r24, 0x06	; 6
     28c:	85 bd       	out	0x25, r24	; 37
			OCR0B = data->current_pwm[1]/32;
     28e:	80 85       	ldd	r24, Z+8	; 0x08
     290:	91 85       	ldd	r25, Z+9	; 0x09
     292:	96 95       	lsr	r25
     294:	87 95       	ror	r24
     296:	92 95       	swap	r25
     298:	82 95       	swap	r24
     29a:	8f 70       	andi	r24, 0x0F	; 15
     29c:	89 27       	eor	r24, r25
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	89 27       	eor	r24, r25
     2a2:	88 bd       	out	0x28, r24	; 40
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <_ZN5state16update_variablesEPV7PduData+0xfc>
		} else {
			TCCR0B &= ~PRESCALER2_MASK;
     2a6:	85 b5       	in	r24, 0x25	; 37
     2a8:	88 7f       	andi	r24, 0xF8	; 248
     2aa:	85 bd       	out	0x25, r24	; 37
		}
		if (data->current_pwm[2] > 0) {
     2ac:	82 85       	ldd	r24, Z+10	; 0x0a
     2ae:	93 85       	ldd	r25, Z+11	; 0x0b
     2b0:	89 2b       	or	r24, r25
     2b2:	71 f0       	breq	.+28     	; 0x2d0 <_ZN5state16update_variablesEPV7PduData+0x120>
			TCCR1B |= PRESCALER1_8;
     2b4:	a1 e8       	ldi	r26, 0x81	; 129
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	8c 91       	ld	r24, X
     2ba:	82 60       	ori	r24, 0x02	; 2
     2bc:	8c 93       	st	X, r24
			OCR1A = data->current_pwm[2]*2;
     2be:	82 85       	ldd	r24, Z+10	; 0x0a
     2c0:	93 85       	ldd	r25, Z+11	; 0x0b
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	90 93 89 00 	sts	0x0089, r25
     2ca:	80 93 88 00 	sts	0x0088, r24
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <_ZN5state16update_variablesEPV7PduData+0x12a>
		} else {
			TCCR1B &= ~PRESCALER1_MASK;
     2d0:	a1 e8       	ldi	r26, 0x81	; 129
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	8c 91       	ld	r24, X
     2d6:	88 7f       	andi	r24, 0xF8	; 248
     2d8:	8c 93       	st	X, r24
		}
		if (data->current_pwm[3] > 0) {
     2da:	84 85       	ldd	r24, Z+12	; 0x0c
     2dc:	95 85       	ldd	r25, Z+13	; 0x0d
     2de:	89 2b       	or	r24, r25
     2e0:	71 f0       	breq	.+28     	; 0x2fe <_ZN5state16update_variablesEPV7PduData+0x14e>
			TCCR1B |= PRESCALER1_8;
     2e2:	a1 e8       	ldi	r26, 0x81	; 129
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	8c 91       	ld	r24, X
     2e8:	82 60       	ori	r24, 0x02	; 2
     2ea:	8c 93       	st	X, r24
			OCR1B = data->current_pwm[3]*2;
     2ec:	84 85       	ldd	r24, Z+12	; 0x0c
     2ee:	95 85       	ldd	r25, Z+13	; 0x0d
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	90 93 8b 00 	sts	0x008B, r25
     2f8:	80 93 8a 00 	sts	0x008A, r24
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <_ZN5state16update_variablesEPV7PduData+0x158>
		} else {
			TCCR1B &= ~PRESCALER1_MASK;
     2fe:	e1 e8       	ldi	r30, 0x81	; 129
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	88 7f       	andi	r24, 0xF8	; 248
     306:	80 83       	st	Z, r24
		}
		current = idle;
     308:	8d ee       	ldi	r24, 0xED	; 237
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	90 93 d8 02 	sts	0x02D8, r25
     310:	80 93 d7 02 	sts	0x02D7, r24
     314:	03 c0       	rjmp	.+6      	; 0x31c <_ZN5state16update_variablesEPV7PduData+0x16c>
		check_voltage = !check_voltage;
		current = idle;
	}

	void update_variables(volatile PduData* data) {
		if (data->incoming.enable_status != data->last_enable_status) {
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	80 cf       	rjmp	.-256    	; 0x21c <_ZN5state16update_variablesEPV7PduData+0x6c>
			OCR1B = data->current_pwm[3]*2;
		} else {
			TCCR1B &= ~PRESCALER1_MASK;
		}
		current = idle;
	}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <_ZN5state7receiveEPV7PduData>:
	void immediate(volatile PduData* data) {
		poll_serial(last_char, char_available);
		if (char_available) immediate_function(last_char);
	}

	void receive(volatile PduData* data) {
     322:	9c 01       	movw	r18, r24
void process(char c);
bool char_available(false);
char last_char('\0');

void inline poll_serial(char& received, bool& available) {
	cli(); // Pause interrupts while reading available char
     324:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     326:	90 91 40 04 	lds	r25, 0x0440
     32a:	99 23       	and	r25, r25
     32c:	71 f0       	breq	.+28     	; 0x34a <_ZN5state7receiveEPV7PduData+0x28>
			rx[0].head--;
     32e:	91 50       	subi	r25, 0x01	; 1
     330:	ed e3       	ldi	r30, 0x3D	; 61
     332:	f4 e0       	ldi	r31, 0x04	; 4
     334:	93 83       	std	Z+3, r25	; 0x03
			ok = true;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 da 02 	sts	0x02DA, r24
			return rx[0].buffer[rx[0].head];
     33c:	01 90       	ld	r0, Z+
     33e:	f0 81       	ld	r31, Z
     340:	e0 2d       	mov	r30, r0
     342:	e9 0f       	add	r30, r25
     344:	f1 1d       	adc	r31, r1
     346:	80 81       	ld	r24, Z
     348:	03 c0       	rjmp	.+6      	; 0x350 <_ZN5state7receiveEPV7PduData+0x2e>
		} else {
			ok = false;
     34a:	10 92 da 02 	sts	0x02DA, r1
			return '\0';
     34e:	80 e0       	ldi	r24, 0x00	; 0
	received = (Serial::get_char(available));
     350:	80 93 d9 02 	sts	0x02D9, r24
	sei(); // Re-enable interrupts
     354:	78 94       	sei
	}

	void receive(volatile PduData* data) {
		poll_serial(last_char, char_available);
		static uint8_t i(0);
		if (char_available) {
     356:	80 91 da 02 	lds	r24, 0x02DA
     35a:	88 23       	and	r24, r24
     35c:	b1 f0       	breq	.+44     	; 0x38a <_ZN5state7receiveEPV7PduData+0x68>
			((char*)(&(data->incoming)))[i] = last_char;
     35e:	90 91 d4 02 	lds	r25, 0x02D4
     362:	80 91 d9 02 	lds	r24, 0x02D9
     366:	f9 01       	movw	r30, r18
     368:	e9 0f       	add	r30, r25
     36a:	f1 1d       	adc	r31, r1
     36c:	82 8b       	std	Z+18, r24	; 0x12
			i++;
     36e:	9f 5f       	subi	r25, 0xFF	; 255
			if (i == sizeof(data->incoming)) {	
     370:	9e 30       	cpi	r25, 0x0E	; 14
     372:	19 f0       	breq	.+6      	; 0x37a <_ZN5state7receiveEPV7PduData+0x58>
	void receive(volatile PduData* data) {
		poll_serial(last_char, char_available);
		static uint8_t i(0);
		if (char_available) {
			((char*)(&(data->incoming)))[i] = last_char;
			i++;
     374:	90 93 d4 02 	sts	0x02D4, r25
     378:	08 95       	ret
			if (i == sizeof(data->incoming)) {	
				i = 0;
     37a:	10 92 d4 02 	sts	0x02D4, r1
				current = update_variables;
     37e:	88 ed       	ldi	r24, 0xD8	; 216
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	90 93 d8 02 	sts	0x02D8, r25
     386:	80 93 d7 02 	sts	0x02D7, r24
     38a:	08 95       	ret

0000038c <_ZN5state10update_adcEPV7PduData>:
					stage = 0;
			}
		}
	}

	void update_adc(volatile PduData* data) {
     38c:	dc 01       	movw	r26, r24
		static bool check_voltage(true);
		if (check_voltage) {
     38e:	80 91 06 01 	lds	r24, 0x0106
     392:	88 23       	and	r24, r24
     394:	f1 f0       	breq	.+60     	; 0x3d2 <_ZN5state10update_adcEPV7PduData+0x46>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     396:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     398:	86 e4       	ldi	r24, 0x46	; 70
     39a:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     39e:	ea e7       	ldi	r30, 0x7A	; 122
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	8f e8       	ldi	r24, 0x8F	; 143
     3a4:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     3a6:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     3aa:	10 92 49 04 	sts	0x0449, r1
		ADCSRA |= 1<<(ADSC); 
     3ae:	80 81       	ld	r24, Z
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     3b4:	90 91 49 04 	lds	r25, 0x0449
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     3b8:	99 23       	and	r25, r25
     3ba:	e1 f3       	breq	.-8      	; 0x3b4 <_ZN5state10update_adcEPV7PduData+0x28>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     3bc:	80 91 48 04 	lds	r24, 0x0448
     3c0:	20 91 47 04 	lds	r18, 0x0447
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	38 2b       	or	r19, r24
			data->outgoing.voltage_reading = Analog::immediate_read(6);
     3c8:	91 96       	adiw	r26, 0x21	; 33
     3ca:	3c 93       	st	X, r19
     3cc:	2e 93       	st	-X, r18
     3ce:	90 97       	sbiw	r26, 0x20	; 32
     3d0:	1d c0       	rjmp	.+58     	; 0x40c <_ZN5state10update_adcEPV7PduData+0x80>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     3d2:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     3d4:	87 e4       	ldi	r24, 0x47	; 71
     3d6:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     3da:	ea e7       	ldi	r30, 0x7A	; 122
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	8f e8       	ldi	r24, 0x8F	; 143
     3e0:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     3e2:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     3e6:	10 92 49 04 	sts	0x0449, r1
		ADCSRA |= 1<<(ADSC); 
     3ea:	90 81       	ld	r25, Z
     3ec:	90 64       	ori	r25, 0x40	; 64
     3ee:	90 83       	st	Z, r25
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     3f0:	90 91 49 04 	lds	r25, 0x0449
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     3f4:	99 23       	and	r25, r25
     3f6:	e1 f3       	breq	.-8      	; 0x3f0 <_ZN5state10update_adcEPV7PduData+0x64>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     3f8:	80 91 48 04 	lds	r24, 0x0448
     3fc:	20 91 47 04 	lds	r18, 0x0447
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	38 2b       	or	r19, r24
		} else {
			data->outgoing.current_reading = Analog::immediate_read(7);
     404:	93 96       	adiw	r26, 0x23	; 35
     406:	3c 93       	st	X, r19
     408:	2e 93       	st	-X, r18
     40a:	92 97       	sbiw	r26, 0x22	; 34
		}
		check_voltage = !check_voltage;
     40c:	90 91 06 01 	lds	r25, 0x0106
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	89 27       	eor	r24, r25
     414:	80 93 06 01 	sts	0x0106, r24
		current = idle;
     418:	8d ee       	ldi	r24, 0xED	; 237
     41a:	93 e0       	ldi	r25, 0x03	; 3
     41c:	90 93 d8 02 	sts	0x02D8, r25
     420:	80 93 d7 02 	sts	0x02D7, r24
     424:	08 95       	ret

00000426 <_ZN6opbots5InputD0Ev>:
	}
	return p;
}

void operator delete(void * p) {
	free(p);
     426:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <free>
     42a:	08 95       	ret

0000042c <_ZN6opbots6OutputD0Ev>:
     42c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <free>
     430:	08 95       	ret

00000432 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>:
	OVER_VOLTAGE=5,
	OVER_CURRENT=6,
	TEST=7
};

void _raise_error(ErrorType error) {
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
	cli();
     43e:	f8 94       	cli
	uint16_t delay_time(100);
	if (_error_function != nullptr && _error_led_function != nullptr) {
     440:	e0 91 4c 04 	lds	r30, 0x044C
     444:	f0 91 4d 04 	lds	r31, 0x044D
     448:	30 97       	sbiw	r30, 0x00	; 0
     44a:	d1 f1       	breq	.+116    	; 0x4c0 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     44c:	20 91 4a 04 	lds	r18, 0x044A
     450:	30 91 4b 04 	lds	r19, 0x044B
     454:	23 2b       	or	r18, r19
     456:	a1 f1       	breq	.+104    	; 0x4c0 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     458:	08 2f       	mov	r16, r24
		// Call user-defined error function
		_error_function();	
     45a:	09 95       	icall
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     45c:	10 e0       	ldi	r17, 0x00	; 0
     45e:	e1 2c       	mov	r14, r1
     460:	f1 2c       	mov	r15, r1
     462:	10 16       	cp	r1, r16
     464:	11 06       	cpc	r1, r17
     466:	14 f5       	brge	.+68     	; 0x4ac <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x7a>
     468:	ce 2d       	mov	r28, r14
     46a:	df 2d       	mov	r29, r15
				_error_led_function();
     46c:	e0 91 4a 04 	lds	r30, 0x044A
     470:	f0 91 4b 04 	lds	r31, 0x044B
     474:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	21 ee       	ldi	r18, 0xE1	; 225
     47a:	84 e0       	ldi	r24, 0x04	; 4
     47c:	91 50       	subi	r25, 0x01	; 1
     47e:	20 40       	sbci	r18, 0x00	; 0
     480:	80 40       	sbci	r24, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x4a>
     484:	00 c0       	rjmp	.+0      	; 0x486 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x54>
     486:	00 00       	nop
				_delay_ms(delay_time);
				_error_led_function();
     488:	e0 91 4a 04 	lds	r30, 0x044A
     48c:	f0 91 4b 04 	lds	r31, 0x044B
     490:	09 95       	icall
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	29 e6       	ldi	r18, 0x69	; 105
     496:	88 e1       	ldi	r24, 0x18	; 24
     498:	91 50       	subi	r25, 0x01	; 1
     49a:	20 40       	sbci	r18, 0x00	; 0
     49c:	80 40       	sbci	r24, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x66>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x70>
     4a2:	00 00       	nop
	if (_error_function != nullptr && _error_led_function != nullptr) {
		// Call user-defined error function
		_error_function();	
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     4a4:	21 96       	adiw	r28, 0x01	; 1
     4a6:	c0 17       	cp	r28, r16
     4a8:	d1 07       	cpc	r29, r17
     4aa:	01 f7       	brne	.-64     	; 0x46c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x3a>
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
     4ae:	23 ed       	ldi	r18, 0xD3	; 211
     4b0:	80 e3       	ldi	r24, 0x30	; 48
     4b2:	91 50       	subi	r25, 0x01	; 1
     4b4:	20 40       	sbci	r18, 0x00	; 0
     4b6:	80 40       	sbci	r24, 0x00	; 0
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x80>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8a>
     4bc:	00 00       	nop
     4be:	d1 cf       	rjmp	.-94     	; 0x462 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x30>
				_delay_ms(5*delay_time);
			}
			_delay_ms(10*delay_time);
		}
	}
	sei();
     4c0:	78 94       	sei
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	08 95       	ret

000004d0 <_ZN5state7respondEPV7PduData>:
				current = update_variables;
			}
		}
	}

	void respond(volatile PduData* data) {
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     4d6:	e0 91 3b 04 	lds	r30, 0x043B
     4da:	f0 91 3c 04 	lds	r31, 0x043C
     4de:	30 97       	sbiw	r30, 0x00	; 0
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <_ZN5state7respondEPV7PduData+0x24>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     4e2:	a2 81       	ldd	r26, Z+2	; 0x02
     4e4:	b3 81       	ldd	r27, Z+3	; 0x03
     4e6:	8c 91       	ld	r24, X
     4e8:	91 85       	ldd	r25, Z+9	; 0x09
     4ea:	98 2b       	or	r25, r24
     4ec:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     4ee:	88 e4       	ldi	r24, 0x48	; 72
     4f0:	80 93 c1 00 	sts	0x00C1, r24
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     4f4:	80 91 44 04 	lds	r24, 0x0444
     4f8:	84 30       	cpi	r24, 0x04	; 4
     4fa:	18 f4       	brcc	.+6      	; 0x502 <_ZN5state7respondEPV7PduData+0x32>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	0e 94 19 02 	call	0x432	; 0x432 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     502:	e2 e4       	ldi	r30, 0x42	; 66
     504:	f4 e0       	ldi	r31, 0x04	; 4
     506:	a0 81       	ld	r26, Z
     508:	b1 81       	ldd	r27, Z+1	; 0x01
     50a:	48 a1       	ldd	r20, Y+32	; 0x20
     50c:	59 a1       	ldd	r21, Y+33	; 0x21
     50e:	6a a1       	ldd	r22, Y+34	; 0x22
     510:	7b a1       	ldd	r23, Y+35	; 0x23
     512:	4d 93       	st	X+, r20
     514:	5d 93       	st	X+, r21
     516:	6d 93       	st	X+, r22
     518:	7c 93       	st	X, r23
     51a:	13 97       	sbiw	r26, 0x03	; 3
				tx[0].head = 0;
     51c:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     51e:	84 e0       	ldi	r24, 0x04	; 4
     520:	84 83       	std	Z+4, r24	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     522:	01 90       	ld	r0, Z+
     524:	f0 81       	ld	r31, Z
     526:	e0 2d       	mov	r30, r0
     528:	80 81       	ld	r24, Z
     52a:	80 93 c6 00 	sts	0x00C6, r24
		Serial::transmit((char*)(&(data->outgoing)),sizeof(data->outgoing));
		current = idle;
     52e:	8d ee       	ldi	r24, 0xED	; 237
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	90 93 d8 02 	sts	0x02D8, r25
     536:	80 93 d7 02 	sts	0x02D7, r24
	}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <__vector_21>:

void operator delete(void * p) {
	free(p);
}

ISR(ADC_vect) {
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	8f 93       	push	r24
	cli();
     54c:	f8 94       	cli
	Analog::analog_low = ADCL;
     54e:	80 91 78 00 	lds	r24, 0x0078
     552:	80 93 47 04 	sts	0x0447, r24
	Analog::analogHigh = ADCH;
     556:	80 91 79 00 	lds	r24, 0x0079
     55a:	80 93 48 04 	sts	0x0448, r24
	Analog::new_value = true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 49 04 	sts	0x0449, r24
	sei();
     564:	78 94       	sei
};
     566:	8f 91       	pop	r24
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_20>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	8f 93       	push	r24
     57e:	9f 93       	push	r25
     580:	af 93       	push	r26
     582:	bf 93       	push	r27
     584:	ef 93       	push	r30
     586:	ff 93       	push	r31
			ok = false;
			return '\0';
		}
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
     588:	f8 94       	cli
		tx[serial_port].head++;
     58a:	e2 e4       	ldi	r30, 0x42	; 66
     58c:	f4 e0       	ldi	r31, 0x04	; 4
     58e:	83 81       	ldd	r24, Z+3	; 0x03
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	83 83       	std	Z+3, r24	; 0x03
		if (tx[serial_port].head < tx[serial_port].tail) {
     594:	94 81       	ldd	r25, Z+4	; 0x04
     596:	89 17       	cp	r24, r25
     598:	50 f4       	brcc	.+20     	; 0x5ae <__vector_20+0x3c>
			if (serial_port == 0) {
				UDR0 = char(tx[serial_port].buffer[tx[serial_port].head]);
     59a:	e0 91 42 04 	lds	r30, 0x0442
     59e:	f0 91 43 04 	lds	r31, 0x0443
     5a2:	e8 0f       	add	r30, r24
     5a4:	f1 1d       	adc	r31, r1
     5a6:	80 81       	ld	r24, Z
     5a8:	80 93 c6 00 	sts	0x00C6, r24
     5ac:	10 c0       	rjmp	.+32     	; 0x5ce <__vector_20+0x5c>
			else if (serial_port == 1) {
				UDR1 = 'x';
			}
			#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
     5ae:	e0 91 3b 04 	lds	r30, 0x043B
     5b2:	f0 91 3c 04 	lds	r31, 0x043C
     5b6:	30 97       	sbiw	r30, 0x00	; 0
     5b8:	51 f0       	breq	.+20     	; 0x5ce <__vector_20+0x5c>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     5ba:	a2 81       	ldd	r26, Z+2	; 0x02
     5bc:	b3 81       	ldd	r27, Z+3	; 0x03
     5be:	9c 91       	ld	r25, X
     5c0:	81 85       	ldd	r24, Z+9	; 0x09
     5c2:	80 95       	com	r24
     5c4:	89 23       	and	r24, r25
     5c6:	8c 93       	st	X, r24
			}
			#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
				Serial::txden[serial_port]->clear();
				UCSR0B = 1<<(RXCIE0) | 1<<(RXEN0);
     5c8:	80 e9       	ldi	r24, 0x90	; 144
     5ca:	80 93 c1 00 	sts	0x00C1, r24
			}
		}
		sei();
     5ce:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <__vector_18>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     5e6:	1f 92       	push	r1
     5e8:	0f 92       	push	r0
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	0f 92       	push	r0
     5ee:	11 24       	eor	r1, r1
     5f0:	2f 93       	push	r18
     5f2:	3f 93       	push	r19
     5f4:	4f 93       	push	r20
     5f6:	5f 93       	push	r21
     5f8:	6f 93       	push	r22
     5fa:	7f 93       	push	r23
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	af 93       	push	r26
     602:	bf 93       	push	r27
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
     608:	f8 94       	cli
		PORTB ^= 1<<4; // MISO
     60a:	95 b1       	in	r25, 0x05	; 5
     60c:	80 e1       	ldi	r24, 0x10	; 16
     60e:	89 27       	eor	r24, r25
     610:	85 b9       	out	0x05, r24	; 5
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
     612:	e0 ec       	ldi	r30, 0xC0	; 192
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	8f 77       	andi	r24, 0x7F	; 127
     61a:	80 83       	st	Z, r24
			if (rx[serial_port].head < rx[serial_port].size) {
     61c:	ed e3       	ldi	r30, 0x3D	; 61
     61e:	f4 e0       	ldi	r31, 0x04	; 4
     620:	83 81       	ldd	r24, Z+3	; 0x03
     622:	92 81       	ldd	r25, Z+2	; 0x02
     624:	89 17       	cp	r24, r25
     626:	58 f4       	brcc	.+22     	; 0x63e <__vector_18+0x58>
				rx[serial_port].buffer[rx[serial_port].head] = UDR0;
     628:	90 91 c6 00 	lds	r25, 0x00C6
     62c:	a0 81       	ld	r26, Z
     62e:	b1 81       	ldd	r27, Z+1	; 0x01
     630:	a8 0f       	add	r26, r24
     632:	b1 1d       	adc	r27, r1
     634:	9c 93       	st	X, r25
				rx[serial_port].head++;
     636:	83 81       	ldd	r24, Z+3	; 0x03
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	83 83       	std	Z+3, r24	; 0x03
     63c:	03 c0       	rjmp	.+6      	; 0x644 <__vector_18+0x5e>
			} else {
				_raise_error(ErrorType::BUFFER_OVERFLOW_RX);
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	0e 94 19 02 	call	0x432	; 0x432 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
		#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
		}
		#endif
		sei();
     644:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	0f 90       	pop	r0
     660:	0f be       	out	0x3f, r0	; 63
     662:	0f 90       	pop	r0
     664:	1f 90       	pop	r1
     666:	18 95       	reti

00000668 <_Z7processc>:
} /* end of namespace state */

void process(char c) {
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
	switch(c) {
     670:	8a 33       	cpi	r24, 0x3A	; 58
     672:	31 f0       	breq	.+12     	; 0x680 <_Z7processc+0x18>
     674:	8f 33       	cpi	r24, 0x3F	; 63
     676:	69 f0       	breq	.+26     	; 0x692 <_Z7processc+0x2a>
     678:	81 32       	cpi	r24, 0x21	; 33
     67a:	09 f0       	breq	.+2      	; 0x67e <_Z7processc+0x16>
     67c:	6a c0       	rjmp	.+212    	; 0x752 <_Z7processc+0xea>
     67e:	12 c0       	rjmp	.+36     	; 0x6a4 <_Z7processc+0x3c>
		case ':':
			state::current = state::receive;
     680:	81 e9       	ldi	r24, 0x91	; 145
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	90 93 d8 02 	sts	0x02D8, r25
     688:	80 93 d7 02 	sts	0x02D7, r24
			message[0] = 0;
     68c:	10 92 f3 02 	sts	0x02F3, r1
			break;
     690:	69 c0       	rjmp	.+210    	; 0x764 <_Z7processc+0xfc>
		case '?':
			state::current = state::respond;
     692:	88 e6       	ldi	r24, 0x68	; 104
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	90 93 d8 02 	sts	0x02D8, r25
     69a:	80 93 d7 02 	sts	0x02D7, r24
			message[0] = 0;
     69e:	10 92 f3 02 	sts	0x02F3, r1
			break;
     6a2:	60 c0       	rjmp	.+192    	; 0x764 <_Z7processc+0xfc>
		case '!':
			state::current = state::immediate;
     6a4:	87 e5       	ldi	r24, 0x57	; 87
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	90 93 d8 02 	sts	0x02D8, r25
     6ac:	80 93 d7 02 	sts	0x02D7, r24
				"\r\nImmediate mode on\r\n"
				"---------------\r\n"
				"Valid commands:\r\n"
				"---------------\r\n"
				"[1-6]: toggle enables\r\n"
			);
     6b0:	80 e6       	ldi	r24, 0x60	; 96
     6b2:	eb e2       	ldi	r30, 0x2B	; 43
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	a3 ef       	ldi	r26, 0xF3	; 243
     6b8:	b2 e0       	ldi	r27, 0x02	; 2
     6ba:	01 90       	ld	r0, Z+
     6bc:	0d 92       	st	X+, r0
     6be:	8a 95       	dec	r24
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <_Z7processc+0x52>
			Serial::transmit(message,strlen(message));
     6c2:	e3 ef       	ldi	r30, 0xF3	; 243
     6c4:	f2 e0       	ldi	r31, 0x02	; 2
     6c6:	01 90       	ld	r0, Z+
     6c8:	00 20       	and	r0, r0
     6ca:	e9 f7       	brne	.-6      	; 0x6c6 <_Z7processc+0x5e>
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	ef 01       	movw	r28, r30
     6d0:	c3 5f       	subi	r28, 0xF3	; 243
     6d2:	d2 40       	sbci	r29, 0x02	; 2
     6d4:	8c 2f       	mov	r24, r28
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
	}
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
     6d6:	cc 23       	and	r28, r28
     6d8:	51 f1       	breq	.+84     	; 0x72e <_Z7processc+0xc6>
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     6da:	e0 91 3b 04 	lds	r30, 0x043B
     6de:	f0 91 3c 04 	lds	r31, 0x043C
     6e2:	30 97       	sbiw	r30, 0x00	; 0
     6e4:	49 f0       	breq	.+18     	; 0x6f8 <_Z7processc+0x90>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     6e6:	a2 81       	ldd	r26, Z+2	; 0x02
     6e8:	b3 81       	ldd	r27, Z+3	; 0x03
     6ea:	2c 91       	ld	r18, X
     6ec:	91 85       	ldd	r25, Z+9	; 0x09
     6ee:	92 2b       	or	r25, r18
     6f0:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     6f2:	98 e4       	ldi	r25, 0x48	; 72
     6f4:	90 93 c1 00 	sts	0x00C1, r25
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     6f8:	90 91 44 04 	lds	r25, 0x0444
     6fc:	98 17       	cp	r25, r24
     6fe:	18 f4       	brcc	.+6      	; 0x706 <_Z7processc+0x9e>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	0e 94 19 02 	call	0x432	; 0x432 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     706:	02 e4       	ldi	r16, 0x42	; 66
     708:	14 e0       	ldi	r17, 0x04	; 4
     70a:	ae 01       	movw	r20, r28
     70c:	55 27       	eor	r21, r21
     70e:	63 ef       	ldi	r22, 0xF3	; 243
     710:	72 e0       	ldi	r23, 0x02	; 2
     712:	d8 01       	movw	r26, r16
     714:	8d 91       	ld	r24, X+
     716:	9c 91       	ld	r25, X
     718:	0e 94 02 0a 	call	0x1404	; 0x1404 <memcpy>
				tx[0].head = 0;
     71c:	f8 01       	movw	r30, r16
     71e:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     720:	c4 83       	std	Z+4, r28	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     722:	01 90       	ld	r0, Z+
     724:	f0 81       	ld	r31, Z
     726:	e0 2d       	mov	r30, r0
     728:	80 81       	ld	r24, Z
     72a:	80 93 c6 00 	sts	0x00C6, r24
			#endif
		}
	}
	static bool transmission_complete(const uint8_t serial_port=0) {
		cli();
		const bool ret(tx[serial_port].head >= tx[serial_port].tail);
     72e:	e2 e4       	ldi	r30, 0x42	; 66
     730:	f4 e0       	ldi	r31, 0x04	; 4
			}
			#endif
		}
	}
	static bool transmission_complete(const uint8_t serial_port=0) {
		cli();
     732:	f8 94       	cli
		const bool ret(tx[serial_port].head >= tx[serial_port].tail);
     734:	93 81       	ldd	r25, Z+3	; 0x03
     736:	84 81       	ldd	r24, Z+4	; 0x04
		sei();
     738:	78 94       	sei
			while (!Serial::transmission_complete()) {
     73a:	98 17       	cp	r25, r24
     73c:	d0 f3       	brcs	.-12     	; 0x732 <_Z7processc+0xca>
				"[a]  : print current\r\n"
				"[v]  : print voltage\r\n"
				"[w]  : print power\r\n"
				"[!]  : exit immediate mode\r\n"
				"[s]  : servo test (unimpl.)\r\n"
			);
     73e:	8a e7       	ldi	r24, 0x7A	; 122
     740:	eb e8       	ldi	r30, 0x8B	; 139
     742:	f1 e0       	ldi	r31, 0x01	; 1
     744:	a3 ef       	ldi	r26, 0xF3	; 243
     746:	b2 e0       	ldi	r27, 0x02	; 2
     748:	01 90       	ld	r0, Z+
     74a:	0d 92       	st	X+, r0
     74c:	8a 95       	dec	r24
     74e:	e1 f7       	brne	.-8      	; 0x748 <_Z7processc+0xe0>
			break;
     750:	09 c0       	rjmp	.+18     	; 0x764 <_Z7processc+0xfc>
		default:
			sprintf(message,"Bad command\r\n");
     752:	8e e0       	ldi	r24, 0x0E	; 14
     754:	e5 e0       	ldi	r30, 0x05	; 5
     756:	f2 e0       	ldi	r31, 0x02	; 2
     758:	a3 ef       	ldi	r26, 0xF3	; 243
     75a:	b2 e0       	ldi	r27, 0x02	; 2
     75c:	01 90       	ld	r0, Z+
     75e:	0d 92       	st	X+, r0
     760:	8a 95       	dec	r24
     762:	e1 f7       	brne	.-8      	; 0x75c <_Z7processc+0xf4>
			break;
	}
	Serial::transmit(message,strlen(message));
     764:	e3 ef       	ldi	r30, 0xF3	; 243
     766:	f2 e0       	ldi	r31, 0x02	; 2
     768:	01 90       	ld	r0, Z+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <_Z7processc+0x100>
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	ef 01       	movw	r28, r30
     772:	c3 5f       	subi	r28, 0xF3	; 243
     774:	d2 40       	sbci	r29, 0x02	; 2
     776:	8c 2f       	mov	r24, r28
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
	}
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
     778:	cc 23       	and	r28, r28
     77a:	51 f1       	breq	.+84     	; 0x7d0 <_Z7processc+0x168>
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     77c:	e0 91 3b 04 	lds	r30, 0x043B
     780:	f0 91 3c 04 	lds	r31, 0x043C
     784:	30 97       	sbiw	r30, 0x00	; 0
     786:	49 f0       	breq	.+18     	; 0x79a <_Z7processc+0x132>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     788:	a2 81       	ldd	r26, Z+2	; 0x02
     78a:	b3 81       	ldd	r27, Z+3	; 0x03
     78c:	2c 91       	ld	r18, X
     78e:	91 85       	ldd	r25, Z+9	; 0x09
     790:	92 2b       	or	r25, r18
     792:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     794:	98 e4       	ldi	r25, 0x48	; 72
     796:	90 93 c1 00 	sts	0x00C1, r25
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     79a:	90 91 44 04 	lds	r25, 0x0444
     79e:	98 17       	cp	r25, r24
     7a0:	18 f4       	brcc	.+6      	; 0x7a8 <_Z7processc+0x140>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	0e 94 19 02 	call	0x432	; 0x432 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     7a8:	02 e4       	ldi	r16, 0x42	; 66
     7aa:	14 e0       	ldi	r17, 0x04	; 4
     7ac:	ae 01       	movw	r20, r28
     7ae:	55 27       	eor	r21, r21
     7b0:	63 ef       	ldi	r22, 0xF3	; 243
     7b2:	72 e0       	ldi	r23, 0x02	; 2
     7b4:	d8 01       	movw	r26, r16
     7b6:	8d 91       	ld	r24, X+
     7b8:	9c 91       	ld	r25, X
     7ba:	0e 94 02 0a 	call	0x1404	; 0x1404 <memcpy>
				tx[0].head = 0;
     7be:	f8 01       	movw	r30, r16
     7c0:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     7c2:	c4 83       	std	Z+4, r28	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     7c4:	01 90       	ld	r0, Z+
     7c6:	f0 81       	ld	r31, Z
     7c8:	e0 2d       	mov	r30, r0
     7ca:	80 81       	ld	r24, Z
     7cc:	80 93 c6 00 	sts	0x00C6, r24
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <_ZN5state4idleEPV7PduData>:
namespace state {
	void (*current)(volatile PduData*); // Variable holds state for the program

	void update_adc(volatile PduData* data);

	void idle(volatile PduData* data) {
     7da:	9c 01       	movw	r18, r24
void process(char c);
bool char_available(false);
char last_char('\0');

void inline poll_serial(char& received, bool& available) {
	cli(); // Pause interrupts while reading available char
     7dc:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     7de:	90 91 40 04 	lds	r25, 0x0440
     7e2:	99 23       	and	r25, r25
     7e4:	71 f0       	breq	.+28     	; 0x802 <_ZN5state4idleEPV7PduData+0x28>
			rx[0].head--;
     7e6:	91 50       	subi	r25, 0x01	; 1
     7e8:	ed e3       	ldi	r30, 0x3D	; 61
     7ea:	f4 e0       	ldi	r31, 0x04	; 4
     7ec:	93 83       	std	Z+3, r25	; 0x03
			ok = true;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 da 02 	sts	0x02DA, r24
			return rx[0].buffer[rx[0].head];
     7f4:	01 90       	ld	r0, Z+
     7f6:	f0 81       	ld	r31, Z
     7f8:	e0 2d       	mov	r30, r0
     7fa:	e9 0f       	add	r30, r25
     7fc:	f1 1d       	adc	r31, r1
     7fe:	80 81       	ld	r24, Z
     800:	03 c0       	rjmp	.+6      	; 0x808 <_ZN5state4idleEPV7PduData+0x2e>
		} else {
			ok = false;
     802:	10 92 da 02 	sts	0x02DA, r1
			return '\0';
     806:	80 e0       	ldi	r24, 0x00	; 0
	received = (Serial::get_char(available));
     808:	80 93 d9 02 	sts	0x02D9, r24
	sei(); // Re-enable interrupts
     80c:	78 94       	sei
	void update_adc(volatile PduData* data);

	void idle(volatile PduData* data) {
		static uint16_t stage(0);
		poll_serial(last_char, char_available);
		current = update_adc; // Will update ADC by default after this if no other states chosen
     80e:	86 ec       	ldi	r24, 0xC6	; 198
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	90 93 d8 02 	sts	0x02D8, r25
     816:	80 93 d7 02 	sts	0x02D7, r24
		if (char_available) {
     81a:	80 91 da 02 	lds	r24, 0x02DA
     81e:	88 23       	and	r24, r24
     820:	11 f1       	breq	.+68     	; 0x866 <_ZN5state4idleEPV7PduData+0x8c>
			if (stage == sizeof(data->name)-1) {
     822:	80 91 d5 02 	lds	r24, 0x02D5
     826:	90 91 d6 02 	lds	r25, 0x02D6
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	91 05       	cpc	r25, r1
     82e:	49 f4       	brne	.+18     	; 0x842 <_ZN5state4idleEPV7PduData+0x68>
				process(last_char);
     830:	80 91 d9 02 	lds	r24, 0x02D9
     834:	0e 94 34 03 	call	0x668	; 0x668 <_Z7processc>
				stage = 0;
     838:	10 92 d6 02 	sts	0x02D6, r1
     83c:	10 92 d5 02 	sts	0x02D5, r1
     840:	08 95       	ret
			} else {
				if (last_char == data->name[stage])
     842:	f9 01       	movw	r30, r18
     844:	e8 0f       	add	r30, r24
     846:	f9 1f       	adc	r31, r25
     848:	30 81       	ld	r19, Z
     84a:	20 91 d9 02 	lds	r18, 0x02D9
     84e:	32 13       	cpse	r19, r18
     850:	06 c0       	rjmp	.+12     	; 0x85e <_ZN5state4idleEPV7PduData+0x84>
					stage++;
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	90 93 d6 02 	sts	0x02D6, r25
     858:	80 93 d5 02 	sts	0x02D5, r24
     85c:	08 95       	ret
				else
					stage = 0;
     85e:	10 92 d6 02 	sts	0x02D6, r1
     862:	10 92 d5 02 	sts	0x02D5, r1
     866:	08 95       	ret

00000868 <_Z18immediate_functionc>:
			break;
	}
	Serial::transmit(message,strlen(message));
}

void immediate_function(char c) {
     868:	8f 92       	push	r8
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
	switch(c) {
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	fc 01       	movw	r30, r24
     884:	b1 97       	sbiw	r30, 0x21	; 33
     886:	e7 35       	cpi	r30, 0x57	; 87
     888:	f1 05       	cpc	r31, r1
     88a:	08 f0       	brcs	.+2      	; 0x88e <_Z18immediate_functionc+0x26>
     88c:	c4 c1       	rjmp	.+904    	; 0xc16 <__stack+0x317>
     88e:	ec 5c       	subi	r30, 0xCC	; 204
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__tablejump2__>
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     896:	a5 ef       	ldi	r26, 0xF5	; 245
     898:	b3 e0       	ldi	r27, 0x03	; 3
     89a:	1c 96       	adiw	r26, 0x0c	; 12
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	1d 97       	sbiw	r26, 0x0d	; 13
     8a2:	90 81       	ld	r25, Z
     8a4:	53 96       	adiw	r26, 0x13	; 19
     8a6:	8c 91       	ld	r24, X
     8a8:	89 27       	eor	r24, r25
     8aa:	80 83       	st	Z, r24
		case '1':
			enable[1].toggle();
			sprintf(message,"Enable 1 toggled\r\n");
     8ac:	83 e1       	ldi	r24, 0x13	; 19
     8ae:	e3 e1       	ldi	r30, 0x13	; 19
     8b0:	f2 e0       	ldi	r31, 0x02	; 2
     8b2:	a3 ef       	ldi	r26, 0xF3	; 243
     8b4:	b2 e0       	ldi	r27, 0x02	; 2
     8b6:	01 90       	ld	r0, Z+
     8b8:	0d 92       	st	X+, r0
     8ba:	8a 95       	dec	r24
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <_Z18immediate_functionc+0x4e>
			break;
     8be:	b4 c1       	rjmp	.+872    	; 0xc28 <__stack+0x329>
     8c0:	a5 ef       	ldi	r26, 0xF5	; 245
     8c2:	b3 e0       	ldi	r27, 0x03	; 3
     8c4:	56 96       	adiw	r26, 0x16	; 22
     8c6:	ed 91       	ld	r30, X+
     8c8:	fc 91       	ld	r31, X
     8ca:	57 97       	sbiw	r26, 0x17	; 23
     8cc:	90 81       	ld	r25, Z
     8ce:	5d 96       	adiw	r26, 0x1d	; 29
     8d0:	8c 91       	ld	r24, X
     8d2:	89 27       	eor	r24, r25
     8d4:	80 83       	st	Z, r24
		case '2':
			enable[2].toggle();
			sprintf(message,"Enable 2 toggled\r\n");
     8d6:	83 e1       	ldi	r24, 0x13	; 19
     8d8:	e6 e2       	ldi	r30, 0x26	; 38
     8da:	f2 e0       	ldi	r31, 0x02	; 2
     8dc:	a3 ef       	ldi	r26, 0xF3	; 243
     8de:	b2 e0       	ldi	r27, 0x02	; 2
     8e0:	01 90       	ld	r0, Z+
     8e2:	0d 92       	st	X+, r0
     8e4:	8a 95       	dec	r24
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <_Z18immediate_functionc+0x78>
			break;
     8e8:	9f c1       	rjmp	.+830    	; 0xc28 <__stack+0x329>
     8ea:	a5 ef       	ldi	r26, 0xF5	; 245
     8ec:	b3 e0       	ldi	r27, 0x03	; 3
     8ee:	90 96       	adiw	r26, 0x20	; 32
     8f0:	ed 91       	ld	r30, X+
     8f2:	fc 91       	ld	r31, X
     8f4:	91 97       	sbiw	r26, 0x21	; 33
     8f6:	90 81       	ld	r25, Z
     8f8:	97 96       	adiw	r26, 0x27	; 39
     8fa:	8c 91       	ld	r24, X
     8fc:	89 27       	eor	r24, r25
     8fe:	80 83       	st	Z, r24
		case '3':
			enable[3].toggle();
			sprintf(message,"Enable 3 toggled\r\n");
     900:	83 e1       	ldi	r24, 0x13	; 19
     902:	e9 e3       	ldi	r30, 0x39	; 57
     904:	f2 e0       	ldi	r31, 0x02	; 2
     906:	a3 ef       	ldi	r26, 0xF3	; 243
     908:	b2 e0       	ldi	r27, 0x02	; 2
     90a:	01 90       	ld	r0, Z+
     90c:	0d 92       	st	X+, r0
     90e:	8a 95       	dec	r24
     910:	e1 f7       	brne	.-8      	; 0x90a <__stack+0xb>
			break;
     912:	8a c1       	rjmp	.+788    	; 0xc28 <__stack+0x329>
     914:	a5 ef       	ldi	r26, 0xF5	; 245
     916:	b3 e0       	ldi	r27, 0x03	; 3
     918:	9a 96       	adiw	r26, 0x2a	; 42
     91a:	ed 91       	ld	r30, X+
     91c:	fc 91       	ld	r31, X
     91e:	9b 97       	sbiw	r26, 0x2b	; 43
     920:	90 81       	ld	r25, Z
     922:	d1 96       	adiw	r26, 0x31	; 49
     924:	8c 91       	ld	r24, X
     926:	89 27       	eor	r24, r25
     928:	80 83       	st	Z, r24
		case '4':
			enable[4].toggle();
			sprintf(message,"Enable 4 toggled\r\n");
     92a:	83 e1       	ldi	r24, 0x13	; 19
     92c:	ec e4       	ldi	r30, 0x4C	; 76
     92e:	f2 e0       	ldi	r31, 0x02	; 2
     930:	a3 ef       	ldi	r26, 0xF3	; 243
     932:	b2 e0       	ldi	r27, 0x02	; 2
     934:	01 90       	ld	r0, Z+
     936:	0d 92       	st	X+, r0
     938:	8a 95       	dec	r24
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0x35>
			break;
     93c:	75 c1       	rjmp	.+746    	; 0xc28 <__stack+0x329>
     93e:	a5 ef       	ldi	r26, 0xF5	; 245
     940:	b3 e0       	ldi	r27, 0x03	; 3
     942:	d4 96       	adiw	r26, 0x34	; 52
     944:	ed 91       	ld	r30, X+
     946:	fc 91       	ld	r31, X
     948:	d5 97       	sbiw	r26, 0x35	; 53
     94a:	90 81       	ld	r25, Z
     94c:	db 96       	adiw	r26, 0x3b	; 59
     94e:	8c 91       	ld	r24, X
     950:	89 27       	eor	r24, r25
     952:	80 83       	st	Z, r24
		case '5':
			enable[5].toggle();
			sprintf(message,"Enable 5 toggled\r\n");
     954:	83 e1       	ldi	r24, 0x13	; 19
     956:	ef e5       	ldi	r30, 0x5F	; 95
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	a3 ef       	ldi	r26, 0xF3	; 243
     95c:	b2 e0       	ldi	r27, 0x02	; 2
     95e:	01 90       	ld	r0, Z+
     960:	0d 92       	st	X+, r0
     962:	8a 95       	dec	r24
     964:	e1 f7       	brne	.-8      	; 0x95e <__stack+0x5f>
			break;
     966:	60 c1       	rjmp	.+704    	; 0xc28 <__stack+0x329>
     968:	e0 91 33 04 	lds	r30, 0x0433
     96c:	f0 91 34 04 	lds	r31, 0x0434
     970:	90 81       	ld	r25, Z
     972:	80 91 3a 04 	lds	r24, 0x043A
     976:	89 27       	eor	r24, r25
     978:	80 83       	st	Z, r24
		case '6':
			enable[6].toggle();
			sprintf(message,"Enable 6 toggled\r\n");
     97a:	83 e1       	ldi	r24, 0x13	; 19
     97c:	e2 e7       	ldi	r30, 0x72	; 114
     97e:	f2 e0       	ldi	r31, 0x02	; 2
     980:	a3 ef       	ldi	r26, 0xF3	; 243
     982:	b2 e0       	ldi	r27, 0x02	; 2
     984:	01 90       	ld	r0, Z+
     986:	0d 92       	st	X+, r0
     988:	8a 95       	dec	r24
     98a:	e1 f7       	brne	.-8      	; 0x984 <__stack+0x85>
			break;
     98c:	4d c1       	rjmp	.+666    	; 0xc28 <__stack+0x329>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     98e:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     990:	86 e4       	ldi	r24, 0x46	; 70
     992:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     996:	ea e7       	ldi	r30, 0x7A	; 122
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	8f e8       	ldi	r24, 0x8F	; 143
     99c:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     99e:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     9a2:	10 92 49 04 	sts	0x0449, r1
		ADCSRA |= 1<<(ADSC); 
     9a6:	80 81       	ld	r24, Z
     9a8:	80 64       	ori	r24, 0x40	; 64
     9aa:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     9ac:	80 91 49 04 	lds	r24, 0x0449
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     9b0:	88 23       	and	r24, r24
     9b2:	e1 f3       	breq	.-8      	; 0x9ac <__stack+0xad>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     9b4:	80 91 48 04 	lds	r24, 0x0448
     9b8:	20 91 47 04 	lds	r18, 0x0447
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	38 2b       	or	r19, r24
		case 'a':
			volts_reading = Analog::immediate_read(6);
     9c0:	30 93 f2 02 	sts	0x02F2, r19
     9c4:	20 93 f1 02 	sts	0x02F1, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     9c8:	a0 e4       	ldi	r26, 0x40	; 64
     9ca:	b6 e0       	ldi	r27, 0x06	; 6
     9cc:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	44 27       	eor	r20, r20
     9da:	55 27       	eor	r21, r21
     9dc:	a4 e6       	ldi	r26, 0x64	; 100
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     9e4:	90 93 e8 02 	sts	0x02E8, r25
     9e8:	80 93 e7 02 	sts	0x02E7, r24
		}
		temp_result = temp_result >> 16;
     9ec:	c7 01       	movw	r24, r14
     9ee:	aa 27       	eor	r26, r26
     9f0:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     9f2:	80 93 e9 02 	sts	0x02E9, r24
     9f6:	90 93 ea 02 	sts	0x02EA, r25
			Analog::adc_scale<MAX_VOLTS>(volts_reading, &amps, &centiamps);
			sprintf(message,"%2u.%02u A  \r\n", amps, centiamps);
     9fa:	20 91 e8 02 	lds	r18, 0x02E8
     9fe:	2f 93       	push	r18
     a00:	20 91 e7 02 	lds	r18, 0x02E7
     a04:	2f 93       	push	r18
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	85 e8       	ldi	r24, 0x85	; 133
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	83 ef       	ldi	r24, 0xF3	; 243
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <sprintf>
			break;
     a1e:	8d b7       	in	r24, 0x3d	; 61
     a20:	9e b7       	in	r25, 0x3e	; 62
     a22:	08 96       	adiw	r24, 0x08	; 8
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	9e bf       	out	0x3e, r25	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	8d bf       	out	0x3d, r24	; 61
     a2e:	fc c0       	rjmp	.+504    	; 0xc28 <__stack+0x329>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     a30:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     a32:	87 e4       	ldi	r24, 0x47	; 71
     a34:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     a38:	ea e7       	ldi	r30, 0x7A	; 122
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	8f e8       	ldi	r24, 0x8F	; 143
     a3e:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     a40:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     a44:	10 92 49 04 	sts	0x0449, r1
		ADCSRA |= 1<<(ADSC); 
     a48:	80 81       	ld	r24, Z
     a4a:	80 64       	ori	r24, 0x40	; 64
     a4c:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     a4e:	80 91 49 04 	lds	r24, 0x0449
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     a52:	88 23       	and	r24, r24
     a54:	e1 f3       	breq	.-8      	; 0xa4e <__stack+0x14f>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     a56:	80 91 48 04 	lds	r24, 0x0448
     a5a:	20 91 47 04 	lds	r18, 0x0447
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	38 2b       	or	r19, r24
		case 'v':
			amps_reading = Analog::immediate_read(7);
     a62:	30 93 ec 02 	sts	0x02EC, r19
     a66:	20 93 eb 02 	sts	0x02EB, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     a6a:	a0 e4       	ldi	r26, 0x40	; 64
     a6c:	b6 e0       	ldi	r27, 0x06	; 6
     a6e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     a72:	6b 01       	movw	r12, r22
     a74:	7c 01       	movw	r14, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     a76:	9b 01       	movw	r18, r22
     a78:	ac 01       	movw	r20, r24
     a7a:	44 27       	eor	r20, r20
     a7c:	55 27       	eor	r21, r21
     a7e:	a4 e6       	ldi	r26, 0x64	; 100
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     a86:	90 93 ee 02 	sts	0x02EE, r25
     a8a:	80 93 ed 02 	sts	0x02ED, r24
		}
		temp_result = temp_result >> 16;
     a8e:	c7 01       	movw	r24, r14
     a90:	aa 27       	eor	r26, r26
     a92:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     a94:	80 93 ef 02 	sts	0x02EF, r24
     a98:	90 93 f0 02 	sts	0x02F0, r25
			Analog::adc_scale<MAX_AMPS>(amps_reading, &volts, &centivolts);
			sprintf(message,"%2u.%02u V  \r\n", volts, centivolts);
     a9c:	20 91 ee 02 	lds	r18, 0x02EE
     aa0:	2f 93       	push	r18
     aa2:	20 91 ed 02 	lds	r18, 0x02ED
     aa6:	2f 93       	push	r18
     aa8:	9f 93       	push	r25
     aaa:	8f 93       	push	r24
     aac:	84 e9       	ldi	r24, 0x94	; 148
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	83 ef       	ldi	r24, 0xF3	; 243
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <sprintf>
			break;
     ac0:	ad b7       	in	r26, 0x3d	; 61
     ac2:	be b7       	in	r27, 0x3e	; 62
     ac4:	18 96       	adiw	r26, 0x08	; 8
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	be bf       	out	0x3e, r27	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	ad bf       	out	0x3d, r26	; 61
     ad0:	ab c0       	rjmp	.+342    	; 0xc28 <__stack+0x329>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     ad2:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     ad4:	86 e4       	ldi	r24, 0x46	; 70
     ad6:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     ada:	ea e7       	ldi	r30, 0x7A	; 122
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	8f e8       	ldi	r24, 0x8F	; 143
     ae0:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     ae2:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     ae6:	10 92 49 04 	sts	0x0449, r1
		ADCSRA |= 1<<(ADSC); 
     aea:	80 81       	ld	r24, Z
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     af0:	80 91 49 04 	lds	r24, 0x0449
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     af4:	88 23       	and	r24, r24
     af6:	e1 f3       	breq	.-8      	; 0xaf0 <__stack+0x1f1>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     af8:	20 91 48 04 	lds	r18, 0x0448
     afc:	80 91 47 04 	lds	r24, 0x0447
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	92 2b       	or	r25, r18
		case 'w':
			volts_reading = Analog::immediate_read(6);
     b04:	90 93 f2 02 	sts	0x02F2, r25
     b08:	80 93 f1 02 	sts	0x02F1, r24
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     b0c:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     b0e:	87 e4       	ldi	r24, 0x47	; 71
     b10:	80 93 7c 00 	sts	0x007C, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     b14:	ea e7       	ldi	r30, 0x7A	; 122
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	8f e8       	ldi	r24, 0x8F	; 143
     b1a:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     b1c:	10 92 7b 00 	sts	0x007B, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     b20:	10 92 49 04 	sts	0x0449, r1
		ADCSRA |= 1<<(ADSC); 
     b24:	80 81       	ld	r24, Z
     b26:	80 64       	ori	r24, 0x40	; 64
     b28:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     b2a:	80 91 49 04 	lds	r24, 0x0449
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     b2e:	88 23       	and	r24, r24
     b30:	e1 f3       	breq	.-8      	; 0xb2a <__stack+0x22b>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     b32:	80 91 48 04 	lds	r24, 0x0448
     b36:	20 91 47 04 	lds	r18, 0x0447
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	38 2b       	or	r19, r24
			amps_reading = Analog::immediate_read(7);
     b3e:	30 93 ec 02 	sts	0x02EC, r19
     b42:	20 93 eb 02 	sts	0x02EB, r18
			watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     b46:	a0 91 f1 02 	lds	r26, 0x02F1
     b4a:	b0 91 f2 02 	lds	r27, 0x02F2
     b4e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     b52:	4b 01       	movw	r8, r22
     b54:	5c 01       	movw	r10, r24
     b56:	60 93 e3 02 	sts	0x02E3, r22
     b5a:	70 93 e4 02 	sts	0x02E4, r23
     b5e:	80 93 e5 02 	sts	0x02E5, r24
     b62:	90 93 e6 02 	sts	0x02E6, r25
			watts = (watts_raw * 39) >> 16;
     b66:	a7 e2       	ldi	r26, 0x27	; 39
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     b72:	6c 01       	movw	r12, r24
     b74:	ee 24       	eor	r14, r14
     b76:	ff 24       	eor	r15, r15
     b78:	c0 92 df 02 	sts	0x02DF, r12
     b7c:	d0 92 e0 02 	sts	0x02E0, r13
     b80:	e0 92 e1 02 	sts	0x02E1, r14
     b84:	f0 92 e2 02 	sts	0x02E2, r15
			centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
     b88:	a0 e9       	ldi	r26, 0x90	; 144
     b8a:	b6 e0       	ldi	r27, 0x06	; 6
     b8c:	a7 01       	movw	r20, r14
     b8e:	96 01       	movw	r18, r12
     b90:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	c5 01       	movw	r24, r10
     b9a:	b4 01       	movw	r22, r8
     b9c:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	ad e3       	ldi	r26, 0x3D	; 61
     ba6:	bf e0       	ldi	r27, 0x0F	; 15
     ba8:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     bac:	aa 27       	eor	r26, r26
     bae:	bb 27       	eor	r27, r27
     bb0:	80 93 db 02 	sts	0x02DB, r24
     bb4:	90 93 dc 02 	sts	0x02DC, r25
     bb8:	a0 93 dd 02 	sts	0x02DD, r26
     bbc:	b0 93 de 02 	sts	0x02DE, r27
			sprintf(message, "%2lu.%02lu W  \r\n", watts, centiwatts);
     bc0:	bf 93       	push	r27
     bc2:	af 93       	push	r26
     bc4:	9f 93       	push	r25
     bc6:	8f 93       	push	r24
     bc8:	ff 92       	push	r15
     bca:	ef 92       	push	r14
     bcc:	df 92       	push	r13
     bce:	cf 92       	push	r12
     bd0:	83 ea       	ldi	r24, 0xA3	; 163
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	83 ef       	ldi	r24, 0xF3	; 243
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <sprintf>
			break;
     be4:	ed b7       	in	r30, 0x3d	; 61
     be6:	fe b7       	in	r31, 0x3e	; 62
     be8:	3c 96       	adiw	r30, 0x0c	; 12
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	fe bf       	out	0x3e, r31	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	ed bf       	out	0x3d, r30	; 61
     bf4:	19 c0       	rjmp	.+50     	; 0xc28 <__stack+0x329>
		case '!':
			state::current = state::idle;
     bf6:	8d ee       	ldi	r24, 0xED	; 237
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	90 93 d8 02 	sts	0x02D8, r25
     bfe:	80 93 d7 02 	sts	0x02D7, r24
			sprintf(message,"Idle mode on\r\n");
     c02:	8f e0       	ldi	r24, 0x0F	; 15
     c04:	e4 eb       	ldi	r30, 0xB4	; 180
     c06:	f2 e0       	ldi	r31, 0x02	; 2
     c08:	a3 ef       	ldi	r26, 0xF3	; 243
     c0a:	b2 e0       	ldi	r27, 0x02	; 2
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	8a 95       	dec	r24
     c12:	e1 f7       	brne	.-8      	; 0xc0c <__stack+0x30d>
			break;
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <__stack+0x329>
		default:
			sprintf(message,"Bad command\r\n");
     c16:	8e e0       	ldi	r24, 0x0E	; 14
     c18:	e5 e0       	ldi	r30, 0x05	; 5
     c1a:	f2 e0       	ldi	r31, 0x02	; 2
     c1c:	a3 ef       	ldi	r26, 0xF3	; 243
     c1e:	b2 e0       	ldi	r27, 0x02	; 2
     c20:	01 90       	ld	r0, Z+
     c22:	0d 92       	st	X+, r0
     c24:	8a 95       	dec	r24
     c26:	e1 f7       	brne	.-8      	; 0xc20 <__stack+0x321>
			break;
	}
	Serial::transmit(message,strlen(message));
     c28:	e3 ef       	ldi	r30, 0xF3	; 243
     c2a:	f2 e0       	ldi	r31, 0x02	; 2
     c2c:	01 90       	ld	r0, Z+
     c2e:	00 20       	and	r0, r0
     c30:	e9 f7       	brne	.-6      	; 0xc2c <__stack+0x32d>
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	ef 01       	movw	r28, r30
     c36:	c3 5f       	subi	r28, 0xF3	; 243
     c38:	d2 40       	sbci	r29, 0x02	; 2
     c3a:	8c 2f       	mov	r24, r28
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
	}
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		if (char_count > 0) {
     c3c:	cc 23       	and	r28, r28
     c3e:	51 f1       	breq	.+84     	; 0xc94 <__stack+0x395>
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
     c40:	e0 91 3b 04 	lds	r30, 0x043B
     c44:	f0 91 3c 04 	lds	r31, 0x043C
     c48:	30 97       	sbiw	r30, 0x00	; 0
     c4a:	49 f0       	breq	.+18     	; 0xc5e <__stack+0x35f>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     c4c:	a2 81       	ldd	r26, Z+2	; 0x02
     c4e:	b3 81       	ldd	r27, Z+3	; 0x03
     c50:	2c 91       	ld	r18, X
     c52:	91 85       	ldd	r25, Z+9	; 0x09
     c54:	92 2b       	or	r25, r18
     c56:	9c 93       	st	X, r25
			// sends between 1 and 255 chars if large enough buffer allocated
			// does not prevent against buffer overwrites, increase
			// buffer size if needed
			if (txden[serial_port] != nullptr) {
				txden[serial_port]->set();
				UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     c58:	98 e4       	ldi	r25, 0x48	; 72
     c5a:	90 93 c1 00 	sts	0x00C1, r25
			}
			if (serial_port == 0) {
				if (char_count > tx[0].size) {
     c5e:	90 91 44 04 	lds	r25, 0x0444
     c62:	98 17       	cp	r25, r24
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__stack+0x36d>
					_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	0e 94 19 02 	call	0x432	; 0x432 <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
				}
				memcpy(tx[0].buffer, buffer, char_count);
     c6c:	02 e4       	ldi	r16, 0x42	; 66
     c6e:	14 e0       	ldi	r17, 0x04	; 4
     c70:	ae 01       	movw	r20, r28
     c72:	55 27       	eor	r21, r21
     c74:	63 ef       	ldi	r22, 0xF3	; 243
     c76:	72 e0       	ldi	r23, 0x02	; 2
     c78:	d8 01       	movw	r26, r16
     c7a:	8d 91       	ld	r24, X+
     c7c:	9c 91       	ld	r25, X
     c7e:	0e 94 02 0a 	call	0x1404	; 0x1404 <memcpy>
				tx[0].head = 0;
     c82:	f8 01       	movw	r30, r16
     c84:	13 82       	std	Z+3, r1	; 0x03
				tx[0].tail = char_count;
     c86:	c4 83       	std	Z+4, r28	; 0x04
				UDR0 = tx[0].buffer[tx[0].head];
     c88:	01 90       	ld	r0, Z+
     c8a:	f0 81       	ld	r31, Z
     c8c:	e0 2d       	mov	r30, r0
     c8e:	80 81       	ld	r24, Z
     c90:	80 93 c6 00 	sts	0x00C6, r24
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	bf 90       	pop	r11
     ca6:	af 90       	pop	r10
     ca8:	9f 90       	pop	r9
     caa:	8f 90       	pop	r8
     cac:	08 95       	ret

00000cae <_ZN5state9immediateEPV7PduData>:
void process(char c);
bool char_available(false);
char last_char('\0');

void inline poll_serial(char& received, bool& available) {
	cli(); // Pause interrupts while reading available char
     cae:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     cb0:	80 91 40 04 	lds	r24, 0x0440
     cb4:	88 23       	and	r24, r24
     cb6:	71 f0       	breq	.+28     	; 0xcd4 <_ZN5state9immediateEPV7PduData+0x26>
			rx[0].head--;
     cb8:	81 50       	subi	r24, 0x01	; 1
     cba:	ed e3       	ldi	r30, 0x3D	; 61
     cbc:	f4 e0       	ldi	r31, 0x04	; 4
     cbe:	83 83       	std	Z+3, r24	; 0x03
			ok = true;
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	90 93 da 02 	sts	0x02DA, r25
			return rx[0].buffer[rx[0].head];
     cc6:	01 90       	ld	r0, Z+
     cc8:	f0 81       	ld	r31, Z
     cca:	e0 2d       	mov	r30, r0
     ccc:	e8 0f       	add	r30, r24
     cce:	f1 1d       	adc	r31, r1
     cd0:	80 81       	ld	r24, Z
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <_ZN5state9immediateEPV7PduData+0x2c>
		} else {
			ok = false;
     cd4:	10 92 da 02 	sts	0x02DA, r1
			return '\0';
     cd8:	80 e0       	ldi	r24, 0x00	; 0
	received = (Serial::get_char(available));
     cda:	80 93 d9 02 	sts	0x02D9, r24
	sei(); // Re-enable interrupts
     cde:	78 94       	sei
		current = idle;
	}

	void immediate(volatile PduData* data) {
		poll_serial(last_char, char_available);
		if (char_available) immediate_function(last_char);
     ce0:	80 91 da 02 	lds	r24, 0x02DA
     ce4:	88 23       	and	r24, r24
     ce6:	21 f0       	breq	.+8      	; 0xcf0 <_ZN5state9immediateEPV7PduData+0x42>
     ce8:	80 91 d9 02 	lds	r24, 0x02D9
     cec:	0e 94 34 04 	call	0x868	; 0x868 <_Z18immediate_functionc>
     cf0:	08 95       	ret

00000cf2 <main>:
	}
	Serial::transmit(message,strlen(message));
}

int main(void) {
	_error_function = error_function;
     cf2:	89 eb       	ldi	r24, 0xB9	; 185
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	90 93 4d 04 	sts	0x044D, r25
     cfa:	80 93 4c 04 	sts	0x044C, r24
	_error_led_function = error_led_function;
     cfe:	8c ec       	ldi	r24, 0xCC	; 204
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	90 93 4b 04 	sts	0x044B, r25
     d06:	80 93 4a 04 	sts	0x044A, r24
	state::current = state::update_variables;
     d0a:	88 ed       	ldi	r24, 0xD8	; 216
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	90 93 d8 02 	sts	0x02D8, r25
     d12:	80 93 d7 02 	sts	0x02D7, r24
	
	TCCR0A = (1<<COM0B1) | (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
     d16:	83 ea       	ldi	r24, 0xA3	; 163
     d18:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;
     d1a:	15 bc       	out	0x25, r1	; 37
	
	TCCR1A = (1<<COM1B1) | (1<<COM1A1) | (1<<WGM11);
     d1c:	92 ea       	ldi	r25, 0xA2	; 162
     d1e:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1<<WGM13) | (1<<WGM12);
     d22:	98 e1       	ldi	r25, 0x18	; 24
     d24:	90 93 81 00 	sts	0x0081, r25
	
	TCCR2A = (1<<COM2B1) | (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);
     d28:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = 0;
     d2c:	10 92 b1 00 	sts	0x00B1, r1
	
	ICR1 = 40000;
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	9c e9       	ldi	r25, 0x9C	; 156
     d34:	90 93 87 00 	sts	0x0087, r25
     d38:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 3000;
     d3c:	88 eb       	ldi	r24, 0xB8	; 184
     d3e:	9b e0       	ldi	r25, 0x0B	; 11
     d40:	90 93 89 00 	sts	0x0089, r25
     d44:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 3000;
     d48:	90 93 8b 00 	sts	0x008B, r25
     d4c:	80 93 8a 00 	sts	0x008A, r24
	
	OCR2A = 94;
     d50:	8e e5       	ldi	r24, 0x5E	; 94
     d52:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 94;
     d56:	80 93 b4 00 	sts	0x00B4, r24
		const bool ret(tx[serial_port].head >= tx[serial_port].tail);
		sei();
		return ret;
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
     d5a:	8b ee       	ldi	r24, 0xEB	; 235
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	90 93 3c 04 	sts	0x043C, r25
     d62:	80 93 3b 04 	sts	0x043B, r24
	
	static void init(const uint32_t baud_rate, const uint8_t serial_port=0) {
		uint8_t offset = 0;
		const uint16_t baud = (F_CPU / 8 / baud_rate) - 1;
		if (serial_port == 1) offset = 0x10;
		*(&UBRR0H+offset) = baud / 0xFF;
     d66:	10 92 c5 00 	sts	0x00C5, r1
		*(&UBRR0L+offset) = baud % 0xFF;
     d6a:	80 e1       	ldi	r24, 0x10	; 16
     d6c:	80 93 c4 00 	sts	0x00C4, r24
		*(&UCSR0A+offset) = 1<<(U2X0);
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	80 93 c0 00 	sts	0x00C0, r24
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
     d76:	88 ed       	ldi	r24, 0xD8	; 216
     d78:	80 93 c1 00 	sts	0x00C1, r24
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	80 93 c2 00 	sts	0x00C2, r24
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     d82:	10 92 49 04 	sts	0x0449, r1
		ADCSRA |= 1<<(ADSC); 
     d86:	ea e7       	ldi	r30, 0x7A	; 122
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 64       	ori	r24, 0x40	; 64
     d8e:	80 83       	st	Z, r24
		 
	Serial::set_txden_pin(txden);
	Serial::init(115200);
	Analog::start_conversion();
	
	sei(); // Enable interrupts
     d90:	78 94       	sei
	
    while (1) state::current(&pduData);
     d92:	e0 91 d7 02 	lds	r30, 0x02D7
     d96:	f0 91 d8 02 	lds	r31, 0x02D8
     d9a:	87 e0       	ldi	r24, 0x07	; 7
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	09 95       	icall
			break;
	}
	Serial::transmit(message,strlen(message));
}

int main(void) {
     da0:	f8 cf       	rjmp	.-16     	; 0xd92 <main+0xa0>

00000da2 <_GLOBAL__sub_I__ZN6opbots15_error_functionE>:
	Analog::start_conversion();
	
	sei(); // Enable interrupts
	
    while (1) state::current(&pduData);
}
     da2:	2f 92       	push	r2
     da4:	3f 92       	push	r3
     da6:	4f 92       	push	r4
     da8:	5f 92       	push	r5
     daa:	6f 92       	push	r6
     dac:	7f 92       	push	r7
     dae:	8f 92       	push	r8
     db0:	9f 92       	push	r9
     db2:	af 92       	push	r10
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     dc6:	c2 e4       	ldi	r28, 0x42	; 66
     dc8:	d4 e0       	ldi	r29, 0x04	; 4
     dca:	00 e8       	ldi	r16, 0x80	; 128
     dcc:	0a 83       	std	Y+2, r16	; 0x02
     dce:	1b 82       	std	Y+3, r1	; 0x03
     dd0:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     dd2:	80 e8       	ldi	r24, 0x80	; 128
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <malloc>
     dda:	99 83       	std	Y+1, r25	; 0x01
     ddc:	88 83       	st	Y, r24
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     dde:	cd e3       	ldi	r28, 0x3D	; 61
     de0:	d4 e0       	ldi	r29, 0x04	; 4
     de2:	68 94       	set
     de4:	cc 24       	eor	r12, r12
     de6:	c6 f8       	bld	r12, 6
     de8:	ca 82       	std	Y+2, r12	; 0x02
     dea:	1b 82       	std	Y+3, r1	; 0x03
     dec:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     dee:	80 e4       	ldi	r24, 0x40	; 64
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <malloc>
     df6:	99 83       	std	Y+1, r25	; 0x01
     df8:	88 83       	st	Y, r24
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     dfa:	e5 ef       	ldi	r30, 0xF5	; 245
     dfc:	f3 e0       	ldi	r31, 0x03	; 3
     dfe:	a5 e2       	ldi	r26, 0x25	; 37
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	b3 83       	std	Z+3, r27	; 0x03
     e04:	a2 83       	std	Z+2, r26	; 0x02
     e06:	0f 2e       	mov	r0, r31
     e08:	f4 e2       	ldi	r31, 0x24	; 36
     e0a:	af 2e       	mov	r10, r31
     e0c:	b1 2c       	mov	r11, r1
     e0e:	f0 2d       	mov	r31, r0
     e10:	b5 82       	std	Z+5, r11	; 0x05
     e12:	a4 82       	std	Z+4, r10	; 0x04
     e14:	0f 2e       	mov	r0, r31
     e16:	f3 e2       	ldi	r31, 0x23	; 35
     e18:	8f 2e       	mov	r8, r31
     e1a:	91 2c       	mov	r9, r1
     e1c:	f0 2d       	mov	r31, r0
     e1e:	97 82       	std	Z+7, r9	; 0x07
     e20:	86 82       	std	Z+6, r8	; 0x06
     e22:	10 86       	std	Z+8, r1	; 0x08
     e24:	d1 e0       	ldi	r29, 0x01	; 1
     e26:	d1 87       	std	Z+9, r29	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e28:	87 ec       	ldi	r24, 0xC7	; 199
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     e30:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     e32:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e34:	0f 2e       	mov	r0, r31
     e36:	f8 e2       	ldi	r31, 0x28	; 40
     e38:	4f 2e       	mov	r4, r31
     e3a:	51 2c       	mov	r5, r1
     e3c:	f0 2d       	mov	r31, r0
     e3e:	55 86       	std	Z+13, r5	; 0x0d
     e40:	44 86       	std	Z+12, r4	; 0x0c
     e42:	0f 2e       	mov	r0, r31
     e44:	f7 e2       	ldi	r31, 0x27	; 39
     e46:	2f 2e       	mov	r2, r31
     e48:	31 2c       	mov	r3, r1
     e4a:	f0 2d       	mov	r31, r0
     e4c:	37 86       	std	Z+15, r3	; 0x0f
     e4e:	26 86       	std	Z+14, r2	; 0x0e
     e50:	0f 2e       	mov	r0, r31
     e52:	f6 e2       	ldi	r31, 0x26	; 38
     e54:	6f 2e       	mov	r6, r31
     e56:	71 2c       	mov	r7, r1
     e58:	f0 2d       	mov	r31, r0
     e5a:	71 8a       	std	Z+17, r7	; 0x11
     e5c:	60 8a       	std	Z+16, r6	; 0x10
     e5e:	0f 2e       	mov	r0, r31
     e60:	f3 e0       	ldi	r31, 0x03	; 3
     e62:	ef 2e       	mov	r14, r31
     e64:	f0 2d       	mov	r31, r0
     e66:	e2 8a       	std	Z+18, r14	; 0x12
     e68:	68 94       	set
     e6a:	ff 24       	eor	r15, r15
     e6c:	f3 f8       	bld	r15, 3
     e6e:	f3 8a       	std	Z+19, r15	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e70:	93 87       	std	Z+11, r25	; 0x0b
     e72:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     e74:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     e76:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     e78:	6b e2       	ldi	r22, 0x2B	; 43
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	77 8b       	std	Z+23, r23	; 0x17
     e7e:	66 8b       	std	Z+22, r22	; 0x16
     e80:	4a e2       	ldi	r20, 0x2A	; 42
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	51 8f       	std	Z+25, r21	; 0x19
     e86:	40 8f       	std	Z+24, r20	; 0x18
     e88:	29 e2       	ldi	r18, 0x29	; 41
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	33 8f       	std	Z+27, r19	; 0x1b
     e8e:	22 8f       	std	Z+26, r18	; 0x1a
     e90:	c2 e0       	ldi	r28, 0x02	; 2
     e92:	c4 8f       	std	Z+28, r28	; 0x1c
     e94:	14 e0       	ldi	r17, 0x04	; 4
     e96:	15 8f       	std	Z+29, r17	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     e98:	95 8b       	std	Z+21, r25	; 0x15
     e9a:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     e9c:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     e9e:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     ea0:	71 a3       	std	Z+33, r23	; 0x21
     ea2:	60 a3       	std	Z+32, r22	; 0x20
     ea4:	53 a3       	std	Z+35, r21	; 0x23
     ea6:	42 a3       	std	Z+34, r20	; 0x22
     ea8:	35 a3       	std	Z+37, r19	; 0x25
     eaa:	24 a3       	std	Z+36, r18	; 0x24
     eac:	16 a3       	std	Z+38, r17	; 0x26
     eae:	68 94       	set
     eb0:	dd 24       	eor	r13, r13
     eb2:	d4 f8       	bld	r13, 4
     eb4:	d7 a2       	std	Z+39, r13	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     eb6:	97 8f       	std	Z+31, r25	; 0x1f
     eb8:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     eba:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     ebc:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     ebe:	53 a6       	std	Z+43, r5	; 0x2b
     ec0:	42 a6       	std	Z+42, r4	; 0x2a
     ec2:	35 a6       	std	Z+45, r3	; 0x2d
     ec4:	24 a6       	std	Z+44, r2	; 0x2c
     ec6:	77 a6       	std	Z+47, r7	; 0x2f
     ec8:	66 a6       	std	Z+46, r6	; 0x2e
     eca:	10 aa       	std	Z+48, r1	; 0x30
     ecc:	d1 ab       	std	Z+49, r29	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     ece:	91 a7       	std	Z+41, r25	; 0x29
     ed0:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     ed2:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     ed4:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     ed6:	55 aa       	std	Z+53, r5	; 0x35
     ed8:	44 aa       	std	Z+52, r4	; 0x34
     eda:	37 aa       	std	Z+55, r3	; 0x37
     edc:	26 aa       	std	Z+54, r2	; 0x36
     ede:	71 ae       	std	Z+57, r7	; 0x39
     ee0:	60 ae       	std	Z+56, r6	; 0x38
     ee2:	d2 af       	std	Z+58, r29	; 0x3a
     ee4:	c3 af       	std	Z+59, r28	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     ee6:	93 ab       	std	Z+51, r25	; 0x33
     ee8:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     eea:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     eec:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     eee:	50 92 34 04 	sts	0x0434, r5
     ef2:	40 92 33 04 	sts	0x0433, r4
     ef6:	30 92 36 04 	sts	0x0436, r3
     efa:	20 92 35 04 	sts	0x0435, r2
     efe:	70 92 38 04 	sts	0x0438, r7
     f02:	60 92 37 04 	sts	0x0437, r6
     f06:	c0 93 39 04 	sts	0x0439, r28
     f0a:	10 93 3a 04 	sts	0x043A, r17
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     f0e:	95 af       	std	Z+61, r25	; 0x3d
     f10:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
     f12:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     f14:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     f16:	eb ee       	ldi	r30, 0xEB	; 235
     f18:	f3 e0       	ldi	r31, 0x03	; 3
     f1a:	73 83       	std	Z+3, r23	; 0x03
     f1c:	62 83       	std	Z+2, r22	; 0x02
     f1e:	55 83       	std	Z+5, r21	; 0x05
     f20:	44 83       	std	Z+4, r20	; 0x04
     f22:	37 83       	std	Z+7, r19	; 0x07
     f24:	26 83       	std	Z+6, r18	; 0x06
     f26:	0f 2e       	mov	r0, r31
     f28:	f7 e0       	ldi	r31, 0x07	; 7
     f2a:	cf 2e       	mov	r12, r31
     f2c:	f0 2d       	mov	r31, r0
     f2e:	c0 86       	std	Z+8, r12	; 0x08
     f30:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     f36:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     f38:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     f3a:	e1 ee       	ldi	r30, 0xE1	; 225
     f3c:	f3 e0       	ldi	r31, 0x03	; 3
     f3e:	73 83       	std	Z+3, r23	; 0x03
     f40:	62 83       	std	Z+2, r22	; 0x02
     f42:	55 83       	std	Z+5, r21	; 0x05
     f44:	44 83       	std	Z+4, r20	; 0x04
     f46:	37 83       	std	Z+7, r19	; 0x07
     f48:	26 83       	std	Z+6, r18	; 0x06
     f4a:	10 86       	std	Z+8, r1	; 0x08
     f4c:	d1 87       	std	Z+9, r29	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     f4e:	0f 2e       	mov	r0, r31
     f50:	ff ec       	ldi	r31, 0xCF	; 207
     f52:	cf 2e       	mov	r12, r31
     f54:	f2 e0       	ldi	r31, 0x02	; 2
     f56:	df 2e       	mov	r13, r31
     f58:	f0 2d       	mov	r31, r0
     f5a:	d1 82       	std	Z+1, r13	; 0x01
     f5c:	c0 82       	st	Z, r12
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     f5e:	50 98       	cbi	0x0a, 0	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     f60:	e7 ed       	ldi	r30, 0xD7	; 215
     f62:	f3 e0       	ldi	r31, 0x03	; 3
     f64:	73 83       	std	Z+3, r23	; 0x03
     f66:	62 83       	std	Z+2, r22	; 0x02
     f68:	55 83       	std	Z+5, r21	; 0x05
     f6a:	44 83       	std	Z+4, r20	; 0x04
     f6c:	37 83       	std	Z+7, r19	; 0x07
     f6e:	26 83       	std	Z+6, r18	; 0x06
     f70:	d0 87       	std	Z+8, r29	; 0x08
     f72:	c1 87       	std	Z+9, r28	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     f78:	59 98       	cbi	0x0b, 1	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     f7a:	51 9a       	sbi	0x0a, 1	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     f7c:	ed ec       	ldi	r30, 0xCD	; 205
     f7e:	f3 e0       	ldi	r31, 0x03	; 3
     f80:	b3 83       	std	Z+3, r27	; 0x03
     f82:	a2 83       	std	Z+2, r26	; 0x02
     f84:	b5 82       	std	Z+5, r11	; 0x05
     f86:	a4 82       	std	Z+4, r10	; 0x04
     f88:	97 82       	std	Z+7, r9	; 0x07
     f8a:	86 82       	std	Z+6, r8	; 0x06
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f5 e0       	ldi	r31, 0x05	; 5
     f90:	df 2e       	mov	r13, r31
     f92:	f0 2d       	mov	r31, r0
     f94:	d0 86       	std	Z+8, r13	; 0x08
     f96:	00 e2       	ldi	r16, 0x20	; 32
     f98:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     f9e:	2d 98       	cbi	0x05, 5	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     fa0:	25 9a       	sbi	0x04, 5	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     fa2:	e3 ec       	ldi	r30, 0xC3	; 195
     fa4:	f3 e0       	ldi	r31, 0x03	; 3
     fa6:	b3 83       	std	Z+3, r27	; 0x03
     fa8:	a2 83       	std	Z+2, r26	; 0x02
     faa:	b5 82       	std	Z+5, r11	; 0x05
     fac:	a4 82       	std	Z+4, r10	; 0x04
     fae:	97 82       	std	Z+7, r9	; 0x07
     fb0:	86 82       	std	Z+6, r8	; 0x06
     fb2:	10 87       	std	Z+8, r17	; 0x08
     fb4:	68 94       	set
     fb6:	cc 24       	eor	r12, r12
     fb8:	c4 f8       	bld	r12, 4
     fba:	c1 86       	std	Z+9, r12	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     fc0:	2c 98       	cbi	0x05, 4	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     fc2:	24 9a       	sbi	0x04, 4	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     fc4:	e9 eb       	ldi	r30, 0xB9	; 185
     fc6:	f3 e0       	ldi	r31, 0x03	; 3
     fc8:	b3 83       	std	Z+3, r27	; 0x03
     fca:	a2 83       	std	Z+2, r26	; 0x02
     fcc:	b5 82       	std	Z+5, r11	; 0x05
     fce:	a4 82       	std	Z+4, r10	; 0x04
     fd0:	97 82       	std	Z+7, r9	; 0x07
     fd2:	86 82       	std	Z+6, r8	; 0x06
     fd4:	e0 86       	std	Z+8, r14	; 0x08
     fd6:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     fdc:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     fde:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     fe0:	ef ea       	ldi	r30, 0xAF	; 175
     fe2:	f3 e0       	ldi	r31, 0x03	; 3
     fe4:	73 83       	std	Z+3, r23	; 0x03
     fe6:	62 83       	std	Z+2, r22	; 0x02
     fe8:	55 83       	std	Z+5, r21	; 0x05
     fea:	44 83       	std	Z+4, r20	; 0x04
     fec:	37 83       	std	Z+7, r19	; 0x07
     fee:	26 83       	std	Z+6, r18	; 0x06
     ff0:	0f 2e       	mov	r0, r31
     ff2:	f6 e0       	ldi	r31, 0x06	; 6
     ff4:	df 2e       	mov	r13, r31
     ff6:	f0 2d       	mov	r31, r0
     ff8:	d0 86       	std	Z+8, r13	; 0x08
     ffa:	68 94       	set
     ffc:	cc 24       	eor	r12, r12
     ffe:	c6 f8       	bld	r12, 6
    1000:	c1 86       	std	Z+9, r12	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1006:	5e 98       	cbi	0x0b, 6	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    1008:	56 9a       	sbi	0x0a, 6	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    100a:	e5 ea       	ldi	r30, 0xA5	; 165
    100c:	f3 e0       	ldi	r31, 0x03	; 3
    100e:	73 83       	std	Z+3, r23	; 0x03
    1010:	62 83       	std	Z+2, r22	; 0x02
    1012:	55 83       	std	Z+5, r21	; 0x05
    1014:	44 83       	std	Z+4, r20	; 0x04
    1016:	37 83       	std	Z+7, r19	; 0x07
    1018:	26 83       	std	Z+6, r18	; 0x06
    101a:	0f 2e       	mov	r0, r31
    101c:	f5 e0       	ldi	r31, 0x05	; 5
    101e:	cf 2e       	mov	r12, r31
    1020:	f0 2d       	mov	r31, r0
    1022:	c0 86       	std	Z+8, r12	; 0x08
    1024:	01 87       	std	Z+9, r16	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    102a:	5d 98       	cbi	0x0b, 5	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    102c:	55 9a       	sbi	0x0a, 5	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    102e:	eb e9       	ldi	r30, 0x9B	; 155
    1030:	f3 e0       	ldi	r31, 0x03	; 3
    1032:	b3 83       	std	Z+3, r27	; 0x03
    1034:	a2 83       	std	Z+2, r26	; 0x02
    1036:	b5 82       	std	Z+5, r11	; 0x05
    1038:	a4 82       	std	Z+4, r10	; 0x04
    103a:	97 82       	std	Z+7, r9	; 0x07
    103c:	86 82       	std	Z+6, r8	; 0x06
    103e:	d0 87       	std	Z+8, r29	; 0x08
    1040:	c1 87       	std	Z+9, r28	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1046:	29 98       	cbi	0x05, 1	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    1048:	21 9a       	sbi	0x04, 1	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    104a:	e1 e9       	ldi	r30, 0x91	; 145
    104c:	f3 e0       	ldi	r31, 0x03	; 3
    104e:	b3 83       	std	Z+3, r27	; 0x03
    1050:	a2 83       	std	Z+2, r26	; 0x02
    1052:	b5 82       	std	Z+5, r11	; 0x05
    1054:	a4 82       	std	Z+4, r10	; 0x04
    1056:	97 82       	std	Z+7, r9	; 0x07
    1058:	86 82       	std	Z+6, r8	; 0x06
    105a:	c0 87       	std	Z+8, r28	; 0x08
    105c:	11 87       	std	Z+9, r17	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    1062:	2a 98       	cbi	0x05, 2	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    1064:	22 9a       	sbi	0x04, 2	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1066:	e7 e8       	ldi	r30, 0x87	; 135
    1068:	f3 e0       	ldi	r31, 0x03	; 3
    106a:	b3 83       	std	Z+3, r27	; 0x03
    106c:	a2 83       	std	Z+2, r26	; 0x02
    106e:	b5 82       	std	Z+5, r11	; 0x05
    1070:	a4 82       	std	Z+4, r10	; 0x04
    1072:	97 82       	std	Z+7, r9	; 0x07
    1074:	86 82       	std	Z+6, r8	; 0x06
    1076:	e0 86       	std	Z+8, r14	; 0x08
    1078:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    107e:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
    1080:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    1082:	ed e7       	ldi	r30, 0x7D	; 125
    1084:	f3 e0       	ldi	r31, 0x03	; 3
    1086:	73 83       	std	Z+3, r23	; 0x03
    1088:	62 83       	std	Z+2, r22	; 0x02
    108a:	55 83       	std	Z+5, r21	; 0x05
    108c:	44 83       	std	Z+4, r20	; 0x04
    108e:	37 83       	std	Z+7, r19	; 0x07
    1090:	26 83       	std	Z+6, r18	; 0x06
    1092:	e0 86       	std	Z+8, r14	; 0x08
    1094:	f1 86       	std	Z+9, r15	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
    109a:	5b 98       	cbi	0x0b, 3	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
    109c:	53 9a       	sbi	0x0a, 3	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
    109e:	e3 e7       	ldi	r30, 0x73	; 115
    10a0:	f3 e0       	ldi	r31, 0x03	; 3
    10a2:	53 82       	std	Z+3, r5	; 0x03
    10a4:	42 82       	std	Z+2, r4	; 0x02
    10a6:	35 82       	std	Z+5, r3	; 0x05
    10a8:	24 82       	std	Z+4, r2	; 0x04
    10aa:	77 82       	std	Z+7, r7	; 0x07
    10ac:	66 82       	std	Z+6, r6	; 0x06
    10ae:	d0 86       	std	Z+8, r13	; 0x08
    10b0:	68 94       	set
    10b2:	dd 24       	eor	r13, r13
    10b4:	d6 f8       	bld	r13, 6
    10b6:	d1 86       	std	Z+9, r13	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
    10b8:	8f ec       	ldi	r24, 0xCF	; 207
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
    10c0:	3e 98       	cbi	0x07, 6	; 7
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	5f 90       	pop	r5
    10e0:	4f 90       	pop	r4
    10e2:	3f 90       	pop	r3
    10e4:	2f 90       	pop	r2
    10e6:	08 95       	ret

000010e8 <_GLOBAL__sub_D__ZN6opbots15_error_functionE>:
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
#include "opbots.h"
#include <stdio.h>
using namespace opbots;

// Setup power enable pins and error led
Output enable[] = {
    10ec:	cb e3       	ldi	r28, 0x3B	; 59
    10ee:	d4 e0       	ldi	r29, 0x04	; 4
    10f0:	2a 97       	sbiw	r28, 0x0a	; 10
    10f2:	e8 81       	ld	r30, Y
    10f4:	f9 81       	ldd	r31, Y+1	; 0x01
    10f6:	01 90       	ld	r0, Z+
    10f8:	f0 81       	ld	r31, Z
    10fa:	e0 2d       	mov	r30, r0
    10fc:	ce 01       	movw	r24, r28
    10fe:	09 95       	icall
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	c5 3f       	cpi	r28, 0xF5	; 245
    1104:	d8 07       	cpc	r29, r24
    1106:	a1 f7       	brne	.-24     	; 0x10f0 <_GLOBAL__sub_D__ZN6opbots15_error_functionE+0x8>
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
		buffer = (T*)malloc(size);
	}
	
	~SimpleBuffer() {
		free(buffer);
    1108:	80 91 3d 04 	lds	r24, 0x043D
    110c:	90 91 3e 04 	lds	r25, 0x043E
    1110:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <free>
    1114:	80 91 42 04 	lds	r24, 0x0442
    1118:	90 91 43 04 	lds	r25, 0x0443
    111c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <free>
	Analog::start_conversion();
	
	sei(); // Enable interrupts
	
    while (1) state::current(&pduData);
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <__udivmodsi4>:
    1126:	a1 e2       	ldi	r26, 0x21	; 33
    1128:	1a 2e       	mov	r1, r26
    112a:	aa 1b       	sub	r26, r26
    112c:	bb 1b       	sub	r27, r27
    112e:	fd 01       	movw	r30, r26
    1130:	0d c0       	rjmp	.+26     	; 0x114c <__udivmodsi4_ep>

00001132 <__udivmodsi4_loop>:
    1132:	aa 1f       	adc	r26, r26
    1134:	bb 1f       	adc	r27, r27
    1136:	ee 1f       	adc	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	a2 17       	cp	r26, r18
    113c:	b3 07       	cpc	r27, r19
    113e:	e4 07       	cpc	r30, r20
    1140:	f5 07       	cpc	r31, r21
    1142:	20 f0       	brcs	.+8      	; 0x114c <__udivmodsi4_ep>
    1144:	a2 1b       	sub	r26, r18
    1146:	b3 0b       	sbc	r27, r19
    1148:	e4 0b       	sbc	r30, r20
    114a:	f5 0b       	sbc	r31, r21

0000114c <__udivmodsi4_ep>:
    114c:	66 1f       	adc	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	1a 94       	dec	r1
    1156:	69 f7       	brne	.-38     	; 0x1132 <__udivmodsi4_loop>
    1158:	60 95       	com	r22
    115a:	70 95       	com	r23
    115c:	80 95       	com	r24
    115e:	90 95       	com	r25
    1160:	9b 01       	movw	r18, r22
    1162:	ac 01       	movw	r20, r24
    1164:	bd 01       	movw	r22, r26
    1166:	cf 01       	movw	r24, r30
    1168:	08 95       	ret

0000116a <__tablejump2__>:
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	05 90       	lpm	r0, Z+
    1170:	f4 91       	lpm	r31, Z
    1172:	e0 2d       	mov	r30, r0
    1174:	09 94       	ijmp

00001176 <__umulhisi3>:
    1176:	a2 9f       	mul	r26, r18
    1178:	b0 01       	movw	r22, r0
    117a:	b3 9f       	mul	r27, r19
    117c:	c0 01       	movw	r24, r0
    117e:	a3 9f       	mul	r26, r19
    1180:	70 0d       	add	r23, r0
    1182:	81 1d       	adc	r24, r1
    1184:	11 24       	eor	r1, r1
    1186:	91 1d       	adc	r25, r1
    1188:	b2 9f       	mul	r27, r18
    118a:	70 0d       	add	r23, r0
    118c:	81 1d       	adc	r24, r1
    118e:	11 24       	eor	r1, r1
    1190:	91 1d       	adc	r25, r1
    1192:	08 95       	ret

00001194 <__muluhisi3>:
    1194:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
    1198:	a5 9f       	mul	r26, r21
    119a:	90 0d       	add	r25, r0
    119c:	b4 9f       	mul	r27, r20
    119e:	90 0d       	add	r25, r0
    11a0:	a4 9f       	mul	r26, r20
    11a2:	80 0d       	add	r24, r0
    11a4:	91 1d       	adc	r25, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	08 95       	ret

000011aa <malloc>:
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	91 05       	cpc	r25, r1
    11b2:	10 f4       	brcc	.+4      	; 0x11b8 <malloc+0xe>
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	e0 91 50 04 	lds	r30, 0x0450
    11bc:	f0 91 51 04 	lds	r31, 0x0451
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	c0 e0       	ldi	r28, 0x00	; 0
    11c6:	d0 e0       	ldi	r29, 0x00	; 0
    11c8:	30 97       	sbiw	r30, 0x00	; 0
    11ca:	11 f1       	breq	.+68     	; 0x1210 <malloc+0x66>
    11cc:	40 81       	ld	r20, Z
    11ce:	51 81       	ldd	r21, Z+1	; 0x01
    11d0:	48 17       	cp	r20, r24
    11d2:	59 07       	cpc	r21, r25
    11d4:	c0 f0       	brcs	.+48     	; 0x1206 <malloc+0x5c>
    11d6:	48 17       	cp	r20, r24
    11d8:	59 07       	cpc	r21, r25
    11da:	61 f4       	brne	.+24     	; 0x11f4 <malloc+0x4a>
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	93 81       	ldd	r25, Z+3	; 0x03
    11e0:	20 97       	sbiw	r28, 0x00	; 0
    11e2:	19 f0       	breq	.+6      	; 0x11ea <malloc+0x40>
    11e4:	9b 83       	std	Y+3, r25	; 0x03
    11e6:	8a 83       	std	Y+2, r24	; 0x02
    11e8:	2b c0       	rjmp	.+86     	; 0x1240 <malloc+0x96>
    11ea:	90 93 51 04 	sts	0x0451, r25
    11ee:	80 93 50 04 	sts	0x0450, r24
    11f2:	26 c0       	rjmp	.+76     	; 0x1240 <malloc+0x96>
    11f4:	21 15       	cp	r18, r1
    11f6:	31 05       	cpc	r19, r1
    11f8:	19 f0       	breq	.+6      	; 0x1200 <malloc+0x56>
    11fa:	42 17       	cp	r20, r18
    11fc:	53 07       	cpc	r21, r19
    11fe:	18 f4       	brcc	.+6      	; 0x1206 <malloc+0x5c>
    1200:	9a 01       	movw	r18, r20
    1202:	be 01       	movw	r22, r28
    1204:	df 01       	movw	r26, r30
    1206:	ef 01       	movw	r28, r30
    1208:	02 80       	ldd	r0, Z+2	; 0x02
    120a:	f3 81       	ldd	r31, Z+3	; 0x03
    120c:	e0 2d       	mov	r30, r0
    120e:	dc cf       	rjmp	.-72     	; 0x11c8 <malloc+0x1e>
    1210:	21 15       	cp	r18, r1
    1212:	31 05       	cpc	r19, r1
    1214:	09 f1       	breq	.+66     	; 0x1258 <malloc+0xae>
    1216:	28 1b       	sub	r18, r24
    1218:	39 0b       	sbc	r19, r25
    121a:	24 30       	cpi	r18, 0x04	; 4
    121c:	31 05       	cpc	r19, r1
    121e:	90 f4       	brcc	.+36     	; 0x1244 <malloc+0x9a>
    1220:	12 96       	adiw	r26, 0x02	; 2
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	13 97       	sbiw	r26, 0x03	; 3
    1228:	61 15       	cp	r22, r1
    122a:	71 05       	cpc	r23, r1
    122c:	21 f0       	breq	.+8      	; 0x1236 <malloc+0x8c>
    122e:	fb 01       	movw	r30, r22
    1230:	93 83       	std	Z+3, r25	; 0x03
    1232:	82 83       	std	Z+2, r24	; 0x02
    1234:	04 c0       	rjmp	.+8      	; 0x123e <malloc+0x94>
    1236:	90 93 51 04 	sts	0x0451, r25
    123a:	80 93 50 04 	sts	0x0450, r24
    123e:	fd 01       	movw	r30, r26
    1240:	32 96       	adiw	r30, 0x02	; 2
    1242:	44 c0       	rjmp	.+136    	; 0x12cc <malloc+0x122>
    1244:	fd 01       	movw	r30, r26
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	81 93       	st	Z+, r24
    124c:	91 93       	st	Z+, r25
    124e:	22 50       	subi	r18, 0x02	; 2
    1250:	31 09       	sbc	r19, r1
    1252:	2d 93       	st	X+, r18
    1254:	3c 93       	st	X, r19
    1256:	3a c0       	rjmp	.+116    	; 0x12cc <malloc+0x122>
    1258:	20 91 4e 04 	lds	r18, 0x044E
    125c:	30 91 4f 04 	lds	r19, 0x044F
    1260:	23 2b       	or	r18, r19
    1262:	41 f4       	brne	.+16     	; 0x1274 <malloc+0xca>
    1264:	20 91 02 01 	lds	r18, 0x0102
    1268:	30 91 03 01 	lds	r19, 0x0103
    126c:	30 93 4f 04 	sts	0x044F, r19
    1270:	20 93 4e 04 	sts	0x044E, r18
    1274:	20 91 00 01 	lds	r18, 0x0100
    1278:	30 91 01 01 	lds	r19, 0x0101
    127c:	21 15       	cp	r18, r1
    127e:	31 05       	cpc	r19, r1
    1280:	41 f4       	brne	.+16     	; 0x1292 <malloc+0xe8>
    1282:	2d b7       	in	r18, 0x3d	; 61
    1284:	3e b7       	in	r19, 0x3e	; 62
    1286:	40 91 04 01 	lds	r20, 0x0104
    128a:	50 91 05 01 	lds	r21, 0x0105
    128e:	24 1b       	sub	r18, r20
    1290:	35 0b       	sbc	r19, r21
    1292:	e0 91 4e 04 	lds	r30, 0x044E
    1296:	f0 91 4f 04 	lds	r31, 0x044F
    129a:	e2 17       	cp	r30, r18
    129c:	f3 07       	cpc	r31, r19
    129e:	a0 f4       	brcc	.+40     	; 0x12c8 <malloc+0x11e>
    12a0:	2e 1b       	sub	r18, r30
    12a2:	3f 0b       	sbc	r19, r31
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	78 f0       	brcs	.+30     	; 0x12c8 <malloc+0x11e>
    12aa:	ac 01       	movw	r20, r24
    12ac:	4e 5f       	subi	r20, 0xFE	; 254
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255
    12b0:	24 17       	cp	r18, r20
    12b2:	35 07       	cpc	r19, r21
    12b4:	48 f0       	brcs	.+18     	; 0x12c8 <malloc+0x11e>
    12b6:	4e 0f       	add	r20, r30
    12b8:	5f 1f       	adc	r21, r31
    12ba:	50 93 4f 04 	sts	0x044F, r21
    12be:	40 93 4e 04 	sts	0x044E, r20
    12c2:	81 93       	st	Z+, r24
    12c4:	91 93       	st	Z+, r25
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <malloc+0x122>
    12c8:	e0 e0       	ldi	r30, 0x00	; 0
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	cf 01       	movw	r24, r30
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <free>:
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	09 f4       	brne	.+2      	; 0x12e2 <free+0xe>
    12e0:	8c c0       	rjmp	.+280    	; 0x13fa <free+0x126>
    12e2:	fc 01       	movw	r30, r24
    12e4:	32 97       	sbiw	r30, 0x02	; 2
    12e6:	13 82       	std	Z+3, r1	; 0x03
    12e8:	12 82       	std	Z+2, r1	; 0x02
    12ea:	00 91 50 04 	lds	r16, 0x0450
    12ee:	10 91 51 04 	lds	r17, 0x0451
    12f2:	01 15       	cp	r16, r1
    12f4:	11 05       	cpc	r17, r1
    12f6:	81 f4       	brne	.+32     	; 0x1318 <free+0x44>
    12f8:	20 81       	ld	r18, Z
    12fa:	31 81       	ldd	r19, Z+1	; 0x01
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	20 91 4e 04 	lds	r18, 0x044E
    1304:	30 91 4f 04 	lds	r19, 0x044F
    1308:	28 17       	cp	r18, r24
    130a:	39 07       	cpc	r19, r25
    130c:	79 f5       	brne	.+94     	; 0x136c <free+0x98>
    130e:	f0 93 4f 04 	sts	0x044F, r31
    1312:	e0 93 4e 04 	sts	0x044E, r30
    1316:	71 c0       	rjmp	.+226    	; 0x13fa <free+0x126>
    1318:	d8 01       	movw	r26, r16
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	ae 17       	cp	r26, r30
    1320:	bf 07       	cpc	r27, r31
    1322:	50 f4       	brcc	.+20     	; 0x1338 <free+0x64>
    1324:	12 96       	adiw	r26, 0x02	; 2
    1326:	2d 91       	ld	r18, X+
    1328:	3c 91       	ld	r19, X
    132a:	13 97       	sbiw	r26, 0x03	; 3
    132c:	ad 01       	movw	r20, r26
    132e:	21 15       	cp	r18, r1
    1330:	31 05       	cpc	r19, r1
    1332:	09 f1       	breq	.+66     	; 0x1376 <free+0xa2>
    1334:	d9 01       	movw	r26, r18
    1336:	f3 cf       	rjmp	.-26     	; 0x131e <free+0x4a>
    1338:	9d 01       	movw	r18, r26
    133a:	da 01       	movw	r26, r20
    133c:	33 83       	std	Z+3, r19	; 0x03
    133e:	22 83       	std	Z+2, r18	; 0x02
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	86 0f       	add	r24, r22
    1346:	97 1f       	adc	r25, r23
    1348:	82 17       	cp	r24, r18
    134a:	93 07       	cpc	r25, r19
    134c:	69 f4       	brne	.+26     	; 0x1368 <free+0x94>
    134e:	ec 01       	movw	r28, r24
    1350:	28 81       	ld	r18, Y
    1352:	39 81       	ldd	r19, Y+1	; 0x01
    1354:	26 0f       	add	r18, r22
    1356:	37 1f       	adc	r19, r23
    1358:	2e 5f       	subi	r18, 0xFE	; 254
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	31 83       	std	Z+1, r19	; 0x01
    135e:	20 83       	st	Z, r18
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	9b 81       	ldd	r25, Y+3	; 0x03
    1364:	93 83       	std	Z+3, r25	; 0x03
    1366:	82 83       	std	Z+2, r24	; 0x02
    1368:	45 2b       	or	r20, r21
    136a:	29 f4       	brne	.+10     	; 0x1376 <free+0xa2>
    136c:	f0 93 51 04 	sts	0x0451, r31
    1370:	e0 93 50 04 	sts	0x0450, r30
    1374:	42 c0       	rjmp	.+132    	; 0x13fa <free+0x126>
    1376:	13 96       	adiw	r26, 0x03	; 3
    1378:	fc 93       	st	X, r31
    137a:	ee 93       	st	-X, r30
    137c:	12 97       	sbiw	r26, 0x02	; 2
    137e:	ed 01       	movw	r28, r26
    1380:	49 91       	ld	r20, Y+
    1382:	59 91       	ld	r21, Y+
    1384:	9e 01       	movw	r18, r28
    1386:	24 0f       	add	r18, r20
    1388:	35 1f       	adc	r19, r21
    138a:	e2 17       	cp	r30, r18
    138c:	f3 07       	cpc	r31, r19
    138e:	71 f4       	brne	.+28     	; 0x13ac <free+0xd8>
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	84 0f       	add	r24, r20
    1396:	95 1f       	adc	r25, r21
    1398:	02 96       	adiw	r24, 0x02	; 2
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	9c 93       	st	X, r25
    139e:	8e 93       	st	-X, r24
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	13 96       	adiw	r26, 0x03	; 3
    13a6:	9c 93       	st	X, r25
    13a8:	8e 93       	st	-X, r24
    13aa:	12 97       	sbiw	r26, 0x02	; 2
    13ac:	e0 e0       	ldi	r30, 0x00	; 0
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	d8 01       	movw	r26, r16
    13b2:	12 96       	adiw	r26, 0x02	; 2
    13b4:	8d 91       	ld	r24, X+
    13b6:	9c 91       	ld	r25, X
    13b8:	13 97       	sbiw	r26, 0x03	; 3
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <free+0xf0>
    13be:	f8 01       	movw	r30, r16
    13c0:	8c 01       	movw	r16, r24
    13c2:	f6 cf       	rjmp	.-20     	; 0x13b0 <free+0xdc>
    13c4:	8d 91       	ld	r24, X+
    13c6:	9c 91       	ld	r25, X
    13c8:	98 01       	movw	r18, r16
    13ca:	2e 5f       	subi	r18, 0xFE	; 254
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	82 0f       	add	r24, r18
    13d0:	93 1f       	adc	r25, r19
    13d2:	20 91 4e 04 	lds	r18, 0x044E
    13d6:	30 91 4f 04 	lds	r19, 0x044F
    13da:	28 17       	cp	r18, r24
    13dc:	39 07       	cpc	r19, r25
    13de:	69 f4       	brne	.+26     	; 0x13fa <free+0x126>
    13e0:	30 97       	sbiw	r30, 0x00	; 0
    13e2:	29 f4       	brne	.+10     	; 0x13ee <free+0x11a>
    13e4:	10 92 51 04 	sts	0x0451, r1
    13e8:	10 92 50 04 	sts	0x0450, r1
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <free+0x11e>
    13ee:	13 82       	std	Z+3, r1	; 0x03
    13f0:	12 82       	std	Z+2, r1	; 0x02
    13f2:	10 93 4f 04 	sts	0x044F, r17
    13f6:	00 93 4e 04 	sts	0x044E, r16
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <memcpy>:
    1404:	fb 01       	movw	r30, r22
    1406:	dc 01       	movw	r26, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <memcpy+0xa>
    140a:	01 90       	ld	r0, Z+
    140c:	0d 92       	st	X+, r0
    140e:	41 50       	subi	r20, 0x01	; 1
    1410:	50 40       	sbci	r21, 0x00	; 0
    1412:	d8 f7       	brcc	.-10     	; 0x140a <memcpy+0x6>
    1414:	08 95       	ret

00001416 <sprintf>:
    1416:	ae e0       	ldi	r26, 0x0E	; 14
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e1 e1       	ldi	r30, 0x11	; 17
    141c:	fa e0       	ldi	r31, 0x0A	; 10
    141e:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__prologue_saves__+0x1c>
    1422:	0d 89       	ldd	r16, Y+21	; 0x15
    1424:	1e 89       	ldd	r17, Y+22	; 0x16
    1426:	86 e0       	ldi	r24, 0x06	; 6
    1428:	8c 83       	std	Y+4, r24	; 0x04
    142a:	1a 83       	std	Y+2, r17	; 0x02
    142c:	09 83       	std	Y+1, r16	; 0x01
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	9f e7       	ldi	r25, 0x7F	; 127
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	ae 01       	movw	r20, r28
    1438:	47 5e       	subi	r20, 0xE7	; 231
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
    143c:	6f 89       	ldd	r22, Y+23	; 0x17
    143e:	78 8d       	ldd	r23, Y+24	; 0x18
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	0e 94 2e 0a 	call	0x145c	; 0x145c <vfprintf>
    1448:	2f 81       	ldd	r18, Y+7	; 0x07
    144a:	38 85       	ldd	r19, Y+8	; 0x08
    144c:	f8 01       	movw	r30, r16
    144e:	e2 0f       	add	r30, r18
    1450:	f3 1f       	adc	r31, r19
    1452:	10 82       	st	Z, r1
    1454:	2e 96       	adiw	r28, 0x0e	; 14
    1456:	e4 e0       	ldi	r30, 0x04	; 4
    1458:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__epilogue_restores__+0x1c>

0000145c <vfprintf>:
    145c:	ac e0       	ldi	r26, 0x0C	; 12
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e4 e3       	ldi	r30, 0x34	; 52
    1462:	fa e0       	ldi	r31, 0x0A	; 10
    1464:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__prologue_saves__>
    1468:	7c 01       	movw	r14, r24
    146a:	6b 01       	movw	r12, r22
    146c:	8a 01       	movw	r16, r20
    146e:	fc 01       	movw	r30, r24
    1470:	17 82       	std	Z+7, r1	; 0x07
    1472:	16 82       	std	Z+6, r1	; 0x06
    1474:	83 81       	ldd	r24, Z+3	; 0x03
    1476:	81 ff       	sbrs	r24, 1
    1478:	bd c1       	rjmp	.+890    	; 0x17f4 <vfprintf+0x398>
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	4c 01       	movw	r8, r24
    1480:	f7 01       	movw	r30, r14
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	f6 01       	movw	r30, r12
    1486:	93 fd       	sbrc	r25, 3
    1488:	85 91       	lpm	r24, Z+
    148a:	93 ff       	sbrs	r25, 3
    148c:	81 91       	ld	r24, Z+
    148e:	6f 01       	movw	r12, r30
    1490:	88 23       	and	r24, r24
    1492:	09 f4       	brne	.+2      	; 0x1496 <vfprintf+0x3a>
    1494:	ab c1       	rjmp	.+854    	; 0x17ec <vfprintf+0x390>
    1496:	85 32       	cpi	r24, 0x25	; 37
    1498:	39 f4       	brne	.+14     	; 0x14a8 <vfprintf+0x4c>
    149a:	93 fd       	sbrc	r25, 3
    149c:	85 91       	lpm	r24, Z+
    149e:	93 ff       	sbrs	r25, 3
    14a0:	81 91       	ld	r24, Z+
    14a2:	6f 01       	movw	r12, r30
    14a4:	85 32       	cpi	r24, 0x25	; 37
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <vfprintf+0x56>
    14a8:	b7 01       	movw	r22, r14
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    14b0:	e7 cf       	rjmp	.-50     	; 0x1480 <vfprintf+0x24>
    14b2:	51 2c       	mov	r5, r1
    14b4:	31 2c       	mov	r3, r1
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	20 32       	cpi	r18, 0x20	; 32
    14ba:	a0 f4       	brcc	.+40     	; 0x14e4 <vfprintf+0x88>
    14bc:	8b 32       	cpi	r24, 0x2B	; 43
    14be:	69 f0       	breq	.+26     	; 0x14da <vfprintf+0x7e>
    14c0:	30 f4       	brcc	.+12     	; 0x14ce <vfprintf+0x72>
    14c2:	80 32       	cpi	r24, 0x20	; 32
    14c4:	59 f0       	breq	.+22     	; 0x14dc <vfprintf+0x80>
    14c6:	83 32       	cpi	r24, 0x23	; 35
    14c8:	69 f4       	brne	.+26     	; 0x14e4 <vfprintf+0x88>
    14ca:	20 61       	ori	r18, 0x10	; 16
    14cc:	2c c0       	rjmp	.+88     	; 0x1526 <vfprintf+0xca>
    14ce:	8d 32       	cpi	r24, 0x2D	; 45
    14d0:	39 f0       	breq	.+14     	; 0x14e0 <vfprintf+0x84>
    14d2:	80 33       	cpi	r24, 0x30	; 48
    14d4:	39 f4       	brne	.+14     	; 0x14e4 <vfprintf+0x88>
    14d6:	21 60       	ori	r18, 0x01	; 1
    14d8:	26 c0       	rjmp	.+76     	; 0x1526 <vfprintf+0xca>
    14da:	22 60       	ori	r18, 0x02	; 2
    14dc:	24 60       	ori	r18, 0x04	; 4
    14de:	23 c0       	rjmp	.+70     	; 0x1526 <vfprintf+0xca>
    14e0:	28 60       	ori	r18, 0x08	; 8
    14e2:	21 c0       	rjmp	.+66     	; 0x1526 <vfprintf+0xca>
    14e4:	27 fd       	sbrc	r18, 7
    14e6:	27 c0       	rjmp	.+78     	; 0x1536 <vfprintf+0xda>
    14e8:	30 ed       	ldi	r19, 0xD0	; 208
    14ea:	38 0f       	add	r19, r24
    14ec:	3a 30       	cpi	r19, 0x0A	; 10
    14ee:	78 f4       	brcc	.+30     	; 0x150e <vfprintf+0xb2>
    14f0:	26 ff       	sbrs	r18, 6
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <vfprintf+0xa4>
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	5f 9e       	mul	r5, r31
    14f8:	30 0d       	add	r19, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	53 2e       	mov	r5, r19
    14fe:	13 c0       	rjmp	.+38     	; 0x1526 <vfprintf+0xca>
    1500:	8a e0       	ldi	r24, 0x0A	; 10
    1502:	38 9e       	mul	r3, r24
    1504:	30 0d       	add	r19, r0
    1506:	11 24       	eor	r1, r1
    1508:	33 2e       	mov	r3, r19
    150a:	20 62       	ori	r18, 0x20	; 32
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <vfprintf+0xca>
    150e:	8e 32       	cpi	r24, 0x2E	; 46
    1510:	21 f4       	brne	.+8      	; 0x151a <vfprintf+0xbe>
    1512:	26 fd       	sbrc	r18, 6
    1514:	6b c1       	rjmp	.+726    	; 0x17ec <vfprintf+0x390>
    1516:	20 64       	ori	r18, 0x40	; 64
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <vfprintf+0xca>
    151a:	8c 36       	cpi	r24, 0x6C	; 108
    151c:	11 f4       	brne	.+4      	; 0x1522 <vfprintf+0xc6>
    151e:	20 68       	ori	r18, 0x80	; 128
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <vfprintf+0xca>
    1522:	88 36       	cpi	r24, 0x68	; 104
    1524:	41 f4       	brne	.+16     	; 0x1536 <vfprintf+0xda>
    1526:	f6 01       	movw	r30, r12
    1528:	93 fd       	sbrc	r25, 3
    152a:	85 91       	lpm	r24, Z+
    152c:	93 ff       	sbrs	r25, 3
    152e:	81 91       	ld	r24, Z+
    1530:	6f 01       	movw	r12, r30
    1532:	81 11       	cpse	r24, r1
    1534:	c1 cf       	rjmp	.-126    	; 0x14b8 <vfprintf+0x5c>
    1536:	98 2f       	mov	r25, r24
    1538:	9f 7d       	andi	r25, 0xDF	; 223
    153a:	95 54       	subi	r25, 0x45	; 69
    153c:	93 30       	cpi	r25, 0x03	; 3
    153e:	28 f4       	brcc	.+10     	; 0x154a <vfprintf+0xee>
    1540:	0c 5f       	subi	r16, 0xFC	; 252
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	ff e3       	ldi	r31, 0x3F	; 63
    1546:	f9 83       	std	Y+1, r31	; 0x01
    1548:	0d c0       	rjmp	.+26     	; 0x1564 <vfprintf+0x108>
    154a:	83 36       	cpi	r24, 0x63	; 99
    154c:	31 f0       	breq	.+12     	; 0x155a <vfprintf+0xfe>
    154e:	83 37       	cpi	r24, 0x73	; 115
    1550:	71 f0       	breq	.+28     	; 0x156e <vfprintf+0x112>
    1552:	83 35       	cpi	r24, 0x53	; 83
    1554:	09 f0       	breq	.+2      	; 0x1558 <vfprintf+0xfc>
    1556:	5b c0       	rjmp	.+182    	; 0x160e <vfprintf+0x1b2>
    1558:	22 c0       	rjmp	.+68     	; 0x159e <vfprintf+0x142>
    155a:	f8 01       	movw	r30, r16
    155c:	80 81       	ld	r24, Z
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	0e 5f       	subi	r16, 0xFE	; 254
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	44 24       	eor	r4, r4
    1566:	43 94       	inc	r4
    1568:	51 2c       	mov	r5, r1
    156a:	54 01       	movw	r10, r8
    156c:	15 c0       	rjmp	.+42     	; 0x1598 <vfprintf+0x13c>
    156e:	38 01       	movw	r6, r16
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	6f 0e       	add	r6, r31
    1574:	71 1c       	adc	r7, r1
    1576:	f8 01       	movw	r30, r16
    1578:	a0 80       	ld	r10, Z
    157a:	b1 80       	ldd	r11, Z+1	; 0x01
    157c:	26 ff       	sbrs	r18, 6
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <vfprintf+0x12a>
    1580:	65 2d       	mov	r22, r5
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	02 c0       	rjmp	.+4      	; 0x158a <vfprintf+0x12e>
    1586:	6f ef       	ldi	r22, 0xFF	; 255
    1588:	7f ef       	ldi	r23, 0xFF	; 255
    158a:	c5 01       	movw	r24, r10
    158c:	2c 87       	std	Y+12, r18	; 0x0c
    158e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <strnlen>
    1592:	2c 01       	movw	r4, r24
    1594:	83 01       	movw	r16, r6
    1596:	2c 85       	ldd	r18, Y+12	; 0x0c
    1598:	2f 77       	andi	r18, 0x7F	; 127
    159a:	22 2e       	mov	r2, r18
    159c:	17 c0       	rjmp	.+46     	; 0x15cc <vfprintf+0x170>
    159e:	38 01       	movw	r6, r16
    15a0:	f2 e0       	ldi	r31, 0x02	; 2
    15a2:	6f 0e       	add	r6, r31
    15a4:	71 1c       	adc	r7, r1
    15a6:	f8 01       	movw	r30, r16
    15a8:	a0 80       	ld	r10, Z
    15aa:	b1 80       	ldd	r11, Z+1	; 0x01
    15ac:	26 ff       	sbrs	r18, 6
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <vfprintf+0x15a>
    15b0:	65 2d       	mov	r22, r5
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfprintf+0x15e>
    15b6:	6f ef       	ldi	r22, 0xFF	; 255
    15b8:	7f ef       	ldi	r23, 0xFF	; 255
    15ba:	c5 01       	movw	r24, r10
    15bc:	2c 87       	std	Y+12, r18	; 0x0c
    15be:	0e 94 00 0c 	call	0x1800	; 0x1800 <strnlen_P>
    15c2:	2c 01       	movw	r4, r24
    15c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c6:	20 68       	ori	r18, 0x80	; 128
    15c8:	22 2e       	mov	r2, r18
    15ca:	83 01       	movw	r16, r6
    15cc:	23 fc       	sbrc	r2, 3
    15ce:	1b c0       	rjmp	.+54     	; 0x1606 <vfprintf+0x1aa>
    15d0:	83 2d       	mov	r24, r3
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	48 16       	cp	r4, r24
    15d6:	59 06       	cpc	r5, r25
    15d8:	b0 f4       	brcc	.+44     	; 0x1606 <vfprintf+0x1aa>
    15da:	b7 01       	movw	r22, r14
    15dc:	80 e2       	ldi	r24, 0x20	; 32
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    15e4:	3a 94       	dec	r3
    15e6:	f4 cf       	rjmp	.-24     	; 0x15d0 <vfprintf+0x174>
    15e8:	f5 01       	movw	r30, r10
    15ea:	27 fc       	sbrc	r2, 7
    15ec:	85 91       	lpm	r24, Z+
    15ee:	27 fe       	sbrs	r2, 7
    15f0:	81 91       	ld	r24, Z+
    15f2:	5f 01       	movw	r10, r30
    15f4:	b7 01       	movw	r22, r14
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    15fc:	31 10       	cpse	r3, r1
    15fe:	3a 94       	dec	r3
    1600:	f1 e0       	ldi	r31, 0x01	; 1
    1602:	4f 1a       	sub	r4, r31
    1604:	51 08       	sbc	r5, r1
    1606:	41 14       	cp	r4, r1
    1608:	51 04       	cpc	r5, r1
    160a:	71 f7       	brne	.-36     	; 0x15e8 <vfprintf+0x18c>
    160c:	e5 c0       	rjmp	.+458    	; 0x17d8 <vfprintf+0x37c>
    160e:	84 36       	cpi	r24, 0x64	; 100
    1610:	11 f0       	breq	.+4      	; 0x1616 <vfprintf+0x1ba>
    1612:	89 36       	cpi	r24, 0x69	; 105
    1614:	39 f5       	brne	.+78     	; 0x1664 <vfprintf+0x208>
    1616:	f8 01       	movw	r30, r16
    1618:	27 ff       	sbrs	r18, 7
    161a:	07 c0       	rjmp	.+14     	; 0x162a <vfprintf+0x1ce>
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	0c 5f       	subi	r16, 0xFC	; 252
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	08 c0       	rjmp	.+16     	; 0x163a <vfprintf+0x1de>
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	07 2e       	mov	r0, r23
    1630:	00 0c       	add	r0, r0
    1632:	88 0b       	sbc	r24, r24
    1634:	99 0b       	sbc	r25, r25
    1636:	0e 5f       	subi	r16, 0xFE	; 254
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	2f 76       	andi	r18, 0x6F	; 111
    163c:	72 2e       	mov	r7, r18
    163e:	97 ff       	sbrs	r25, 7
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <vfprintf+0x1f8>
    1642:	90 95       	com	r25
    1644:	80 95       	com	r24
    1646:	70 95       	com	r23
    1648:	61 95       	neg	r22
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	20 68       	ori	r18, 0x80	; 128
    1652:	72 2e       	mov	r7, r18
    1654:	2a e0       	ldi	r18, 0x0A	; 10
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	a4 01       	movw	r20, r8
    165a:	0e 94 4e 0c 	call	0x189c	; 0x189c <__ultoa_invert>
    165e:	a8 2e       	mov	r10, r24
    1660:	a8 18       	sub	r10, r8
    1662:	44 c0       	rjmp	.+136    	; 0x16ec <vfprintf+0x290>
    1664:	85 37       	cpi	r24, 0x75	; 117
    1666:	29 f4       	brne	.+10     	; 0x1672 <vfprintf+0x216>
    1668:	2f 7e       	andi	r18, 0xEF	; 239
    166a:	b2 2e       	mov	r11, r18
    166c:	2a e0       	ldi	r18, 0x0A	; 10
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	25 c0       	rjmp	.+74     	; 0x16bc <vfprintf+0x260>
    1672:	f2 2f       	mov	r31, r18
    1674:	f9 7f       	andi	r31, 0xF9	; 249
    1676:	bf 2e       	mov	r11, r31
    1678:	8f 36       	cpi	r24, 0x6F	; 111
    167a:	c1 f0       	breq	.+48     	; 0x16ac <vfprintf+0x250>
    167c:	18 f4       	brcc	.+6      	; 0x1684 <vfprintf+0x228>
    167e:	88 35       	cpi	r24, 0x58	; 88
    1680:	79 f0       	breq	.+30     	; 0x16a0 <vfprintf+0x244>
    1682:	b4 c0       	rjmp	.+360    	; 0x17ec <vfprintf+0x390>
    1684:	80 37       	cpi	r24, 0x70	; 112
    1686:	19 f0       	breq	.+6      	; 0x168e <vfprintf+0x232>
    1688:	88 37       	cpi	r24, 0x78	; 120
    168a:	21 f0       	breq	.+8      	; 0x1694 <vfprintf+0x238>
    168c:	af c0       	rjmp	.+350    	; 0x17ec <vfprintf+0x390>
    168e:	2f 2f       	mov	r18, r31
    1690:	20 61       	ori	r18, 0x10	; 16
    1692:	b2 2e       	mov	r11, r18
    1694:	b4 fe       	sbrs	r11, 4
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <vfprintf+0x256>
    1698:	8b 2d       	mov	r24, r11
    169a:	84 60       	ori	r24, 0x04	; 4
    169c:	b8 2e       	mov	r11, r24
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <vfprintf+0x256>
    16a0:	24 ff       	sbrs	r18, 4
    16a2:	0a c0       	rjmp	.+20     	; 0x16b8 <vfprintf+0x25c>
    16a4:	9f 2f       	mov	r25, r31
    16a6:	96 60       	ori	r25, 0x06	; 6
    16a8:	b9 2e       	mov	r11, r25
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0x25c>
    16ac:	28 e0       	ldi	r18, 0x08	; 8
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <vfprintf+0x260>
    16b2:	20 e1       	ldi	r18, 0x10	; 16
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <vfprintf+0x260>
    16b8:	20 e1       	ldi	r18, 0x10	; 16
    16ba:	32 e0       	ldi	r19, 0x02	; 2
    16bc:	f8 01       	movw	r30, r16
    16be:	b7 fe       	sbrs	r11, 7
    16c0:	07 c0       	rjmp	.+14     	; 0x16d0 <vfprintf+0x274>
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	0c 5f       	subi	r16, 0xFC	; 252
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <vfprintf+0x280>
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 5f       	subi	r16, 0xFE	; 254
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	a4 01       	movw	r20, r8
    16de:	0e 94 4e 0c 	call	0x189c	; 0x189c <__ultoa_invert>
    16e2:	a8 2e       	mov	r10, r24
    16e4:	a8 18       	sub	r10, r8
    16e6:	fb 2d       	mov	r31, r11
    16e8:	ff 77       	andi	r31, 0x7F	; 127
    16ea:	7f 2e       	mov	r7, r31
    16ec:	76 fe       	sbrs	r7, 6
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <vfprintf+0x2aa>
    16f0:	37 2d       	mov	r19, r7
    16f2:	3e 7f       	andi	r19, 0xFE	; 254
    16f4:	a5 14       	cp	r10, r5
    16f6:	50 f4       	brcc	.+20     	; 0x170c <vfprintf+0x2b0>
    16f8:	74 fe       	sbrs	r7, 4
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <vfprintf+0x2b4>
    16fc:	72 fc       	sbrc	r7, 2
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <vfprintf+0x2b4>
    1700:	37 2d       	mov	r19, r7
    1702:	3e 7e       	andi	r19, 0xEE	; 238
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <vfprintf+0x2b4>
    1706:	ba 2c       	mov	r11, r10
    1708:	37 2d       	mov	r19, r7
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x2b6>
    170c:	ba 2c       	mov	r11, r10
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <vfprintf+0x2b6>
    1710:	b5 2c       	mov	r11, r5
    1712:	34 ff       	sbrs	r19, 4
    1714:	0d c0       	rjmp	.+26     	; 0x1730 <vfprintf+0x2d4>
    1716:	fe 01       	movw	r30, r28
    1718:	ea 0d       	add	r30, r10
    171a:	f1 1d       	adc	r31, r1
    171c:	80 81       	ld	r24, Z
    171e:	80 33       	cpi	r24, 0x30	; 48
    1720:	11 f4       	brne	.+4      	; 0x1726 <vfprintf+0x2ca>
    1722:	39 7e       	andi	r19, 0xE9	; 233
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <vfprintf+0x2dc>
    1726:	32 ff       	sbrs	r19, 2
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <vfprintf+0x2da>
    172a:	b3 94       	inc	r11
    172c:	b3 94       	inc	r11
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <vfprintf+0x2dc>
    1730:	83 2f       	mov	r24, r19
    1732:	86 78       	andi	r24, 0x86	; 134
    1734:	09 f0       	breq	.+2      	; 0x1738 <vfprintf+0x2dc>
    1736:	b3 94       	inc	r11
    1738:	33 fd       	sbrc	r19, 3
    173a:	13 c0       	rjmp	.+38     	; 0x1762 <vfprintf+0x306>
    173c:	30 ff       	sbrs	r19, 0
    173e:	06 c0       	rjmp	.+12     	; 0x174c <vfprintf+0x2f0>
    1740:	5a 2c       	mov	r5, r10
    1742:	b3 14       	cp	r11, r3
    1744:	18 f4       	brcc	.+6      	; 0x174c <vfprintf+0x2f0>
    1746:	53 0c       	add	r5, r3
    1748:	5b 18       	sub	r5, r11
    174a:	b3 2c       	mov	r11, r3
    174c:	b3 14       	cp	r11, r3
    174e:	68 f4       	brcc	.+26     	; 0x176a <vfprintf+0x30e>
    1750:	b7 01       	movw	r22, r14
    1752:	80 e2       	ldi	r24, 0x20	; 32
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	3c 87       	std	Y+12, r19	; 0x0c
    1758:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    175c:	b3 94       	inc	r11
    175e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1760:	f5 cf       	rjmp	.-22     	; 0x174c <vfprintf+0x2f0>
    1762:	b3 14       	cp	r11, r3
    1764:	10 f4       	brcc	.+4      	; 0x176a <vfprintf+0x30e>
    1766:	3b 18       	sub	r3, r11
    1768:	01 c0       	rjmp	.+2      	; 0x176c <vfprintf+0x310>
    176a:	31 2c       	mov	r3, r1
    176c:	34 ff       	sbrs	r19, 4
    176e:	12 c0       	rjmp	.+36     	; 0x1794 <vfprintf+0x338>
    1770:	b7 01       	movw	r22, r14
    1772:	80 e3       	ldi	r24, 0x30	; 48
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	3c 87       	std	Y+12, r19	; 0x0c
    1778:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    177c:	3c 85       	ldd	r19, Y+12	; 0x0c
    177e:	32 ff       	sbrs	r19, 2
    1780:	17 c0       	rjmp	.+46     	; 0x17b0 <vfprintf+0x354>
    1782:	31 fd       	sbrc	r19, 1
    1784:	03 c0       	rjmp	.+6      	; 0x178c <vfprintf+0x330>
    1786:	88 e7       	ldi	r24, 0x78	; 120
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <vfprintf+0x334>
    178c:	88 e5       	ldi	r24, 0x58	; 88
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	b7 01       	movw	r22, r14
    1792:	0c c0       	rjmp	.+24     	; 0x17ac <vfprintf+0x350>
    1794:	83 2f       	mov	r24, r19
    1796:	86 78       	andi	r24, 0x86	; 134
    1798:	59 f0       	breq	.+22     	; 0x17b0 <vfprintf+0x354>
    179a:	31 ff       	sbrs	r19, 1
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x346>
    179e:	8b e2       	ldi	r24, 0x2B	; 43
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <vfprintf+0x348>
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	37 fd       	sbrc	r19, 7
    17a6:	8d e2       	ldi	r24, 0x2D	; 45
    17a8:	b7 01       	movw	r22, r14
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    17b0:	a5 14       	cp	r10, r5
    17b2:	38 f4       	brcc	.+14     	; 0x17c2 <vfprintf+0x366>
    17b4:	b7 01       	movw	r22, r14
    17b6:	80 e3       	ldi	r24, 0x30	; 48
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    17be:	5a 94       	dec	r5
    17c0:	f7 cf       	rjmp	.-18     	; 0x17b0 <vfprintf+0x354>
    17c2:	aa 94       	dec	r10
    17c4:	f4 01       	movw	r30, r8
    17c6:	ea 0d       	add	r30, r10
    17c8:	f1 1d       	adc	r31, r1
    17ca:	80 81       	ld	r24, Z
    17cc:	b7 01       	movw	r22, r14
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    17d4:	a1 10       	cpse	r10, r1
    17d6:	f5 cf       	rjmp	.-22     	; 0x17c2 <vfprintf+0x366>
    17d8:	33 20       	and	r3, r3
    17da:	09 f4       	brne	.+2      	; 0x17de <vfprintf+0x382>
    17dc:	51 ce       	rjmp	.-862    	; 0x1480 <vfprintf+0x24>
    17de:	b7 01       	movw	r22, r14
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 16 0c 	call	0x182c	; 0x182c <fputc>
    17e8:	3a 94       	dec	r3
    17ea:	f6 cf       	rjmp	.-20     	; 0x17d8 <vfprintf+0x37c>
    17ec:	f7 01       	movw	r30, r14
    17ee:	86 81       	ldd	r24, Z+6	; 0x06
    17f0:	97 81       	ldd	r25, Z+7	; 0x07
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <vfprintf+0x39c>
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	9f ef       	ldi	r25, 0xFF	; 255
    17f8:	2c 96       	adiw	r28, 0x0c	; 12
    17fa:	e2 e1       	ldi	r30, 0x12	; 18
    17fc:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__epilogue_restores__>

00001800 <strnlen_P>:
    1800:	fc 01       	movw	r30, r24
    1802:	05 90       	lpm	r0, Z+
    1804:	61 50       	subi	r22, 0x01	; 1
    1806:	70 40       	sbci	r23, 0x00	; 0
    1808:	01 10       	cpse	r0, r1
    180a:	d8 f7       	brcc	.-10     	; 0x1802 <strnlen_P+0x2>
    180c:	80 95       	com	r24
    180e:	90 95       	com	r25
    1810:	8e 0f       	add	r24, r30
    1812:	9f 1f       	adc	r25, r31
    1814:	08 95       	ret

00001816 <strnlen>:
    1816:	fc 01       	movw	r30, r24
    1818:	61 50       	subi	r22, 0x01	; 1
    181a:	70 40       	sbci	r23, 0x00	; 0
    181c:	01 90       	ld	r0, Z+
    181e:	01 10       	cpse	r0, r1
    1820:	d8 f7       	brcc	.-10     	; 0x1818 <strnlen+0x2>
    1822:	80 95       	com	r24
    1824:	90 95       	com	r25
    1826:	8e 0f       	add	r24, r30
    1828:	9f 1f       	adc	r25, r31
    182a:	08 95       	ret

0000182c <fputc>:
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	fb 01       	movw	r30, r22
    1836:	23 81       	ldd	r18, Z+3	; 0x03
    1838:	21 fd       	sbrc	r18, 1
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <fputc+0x16>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	9f ef       	ldi	r25, 0xFF	; 255
    1840:	28 c0       	rjmp	.+80     	; 0x1892 <fputc+0x66>
    1842:	22 ff       	sbrs	r18, 2
    1844:	16 c0       	rjmp	.+44     	; 0x1872 <fputc+0x46>
    1846:	46 81       	ldd	r20, Z+6	; 0x06
    1848:	57 81       	ldd	r21, Z+7	; 0x07
    184a:	24 81       	ldd	r18, Z+4	; 0x04
    184c:	35 81       	ldd	r19, Z+5	; 0x05
    184e:	42 17       	cp	r20, r18
    1850:	53 07       	cpc	r21, r19
    1852:	44 f4       	brge	.+16     	; 0x1864 <fputc+0x38>
    1854:	a0 81       	ld	r26, Z
    1856:	b1 81       	ldd	r27, Z+1	; 0x01
    1858:	9d 01       	movw	r18, r26
    185a:	2f 5f       	subi	r18, 0xFF	; 255
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	31 83       	std	Z+1, r19	; 0x01
    1860:	20 83       	st	Z, r18
    1862:	8c 93       	st	X, r24
    1864:	26 81       	ldd	r18, Z+6	; 0x06
    1866:	37 81       	ldd	r19, Z+7	; 0x07
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	37 83       	std	Z+7, r19	; 0x07
    186e:	26 83       	std	Z+6, r18	; 0x06
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <fputc+0x66>
    1872:	eb 01       	movw	r28, r22
    1874:	09 2f       	mov	r16, r25
    1876:	18 2f       	mov	r17, r24
    1878:	00 84       	ldd	r0, Z+8	; 0x08
    187a:	f1 85       	ldd	r31, Z+9	; 0x09
    187c:	e0 2d       	mov	r30, r0
    187e:	09 95       	icall
    1880:	89 2b       	or	r24, r25
    1882:	e1 f6       	brne	.-72     	; 0x183c <fputc+0x10>
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	9f 81       	ldd	r25, Y+7	; 0x07
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	9f 83       	std	Y+7, r25	; 0x07
    188c:	8e 83       	std	Y+6, r24	; 0x06
    188e:	81 2f       	mov	r24, r17
    1890:	90 2f       	mov	r25, r16
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <__ultoa_invert>:
    189c:	fa 01       	movw	r30, r20
    189e:	aa 27       	eor	r26, r26
    18a0:	28 30       	cpi	r18, 0x08	; 8
    18a2:	51 f1       	breq	.+84     	; 0x18f8 <__ultoa_invert+0x5c>
    18a4:	20 31       	cpi	r18, 0x10	; 16
    18a6:	81 f1       	breq	.+96     	; 0x1908 <__ultoa_invert+0x6c>
    18a8:	e8 94       	clt
    18aa:	6f 93       	push	r22
    18ac:	6e 7f       	andi	r22, 0xFE	; 254
    18ae:	6e 5f       	subi	r22, 0xFE	; 254
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	8f 4f       	sbci	r24, 0xFF	; 255
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	af 4f       	sbci	r26, 0xFF	; 255
    18b8:	b1 e0       	ldi	r27, 0x01	; 1
    18ba:	3e d0       	rcall	.+124    	; 0x1938 <__ultoa_invert+0x9c>
    18bc:	b4 e0       	ldi	r27, 0x04	; 4
    18be:	3c d0       	rcall	.+120    	; 0x1938 <__ultoa_invert+0x9c>
    18c0:	67 0f       	add	r22, r23
    18c2:	78 1f       	adc	r23, r24
    18c4:	89 1f       	adc	r24, r25
    18c6:	9a 1f       	adc	r25, r26
    18c8:	a1 1d       	adc	r26, r1
    18ca:	68 0f       	add	r22, r24
    18cc:	79 1f       	adc	r23, r25
    18ce:	8a 1f       	adc	r24, r26
    18d0:	91 1d       	adc	r25, r1
    18d2:	a1 1d       	adc	r26, r1
    18d4:	6a 0f       	add	r22, r26
    18d6:	71 1d       	adc	r23, r1
    18d8:	81 1d       	adc	r24, r1
    18da:	91 1d       	adc	r25, r1
    18dc:	a1 1d       	adc	r26, r1
    18de:	20 d0       	rcall	.+64     	; 0x1920 <__ultoa_invert+0x84>
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <__ultoa_invert+0x48>
    18e2:	68 94       	set
    18e4:	3f 91       	pop	r19
    18e6:	2a e0       	ldi	r18, 0x0A	; 10
    18e8:	26 9f       	mul	r18, r22
    18ea:	11 24       	eor	r1, r1
    18ec:	30 19       	sub	r19, r0
    18ee:	30 5d       	subi	r19, 0xD0	; 208
    18f0:	31 93       	st	Z+, r19
    18f2:	de f6       	brtc	.-74     	; 0x18aa <__ultoa_invert+0xe>
    18f4:	cf 01       	movw	r24, r30
    18f6:	08 95       	ret
    18f8:	46 2f       	mov	r20, r22
    18fa:	47 70       	andi	r20, 0x07	; 7
    18fc:	40 5d       	subi	r20, 0xD0	; 208
    18fe:	41 93       	st	Z+, r20
    1900:	b3 e0       	ldi	r27, 0x03	; 3
    1902:	0f d0       	rcall	.+30     	; 0x1922 <__ultoa_invert+0x86>
    1904:	c9 f7       	brne	.-14     	; 0x18f8 <__ultoa_invert+0x5c>
    1906:	f6 cf       	rjmp	.-20     	; 0x18f4 <__ultoa_invert+0x58>
    1908:	46 2f       	mov	r20, r22
    190a:	4f 70       	andi	r20, 0x0F	; 15
    190c:	40 5d       	subi	r20, 0xD0	; 208
    190e:	4a 33       	cpi	r20, 0x3A	; 58
    1910:	18 f0       	brcs	.+6      	; 0x1918 <__ultoa_invert+0x7c>
    1912:	49 5d       	subi	r20, 0xD9	; 217
    1914:	31 fd       	sbrc	r19, 1
    1916:	40 52       	subi	r20, 0x20	; 32
    1918:	41 93       	st	Z+, r20
    191a:	02 d0       	rcall	.+4      	; 0x1920 <__ultoa_invert+0x84>
    191c:	a9 f7       	brne	.-22     	; 0x1908 <__ultoa_invert+0x6c>
    191e:	ea cf       	rjmp	.-44     	; 0x18f4 <__ultoa_invert+0x58>
    1920:	b4 e0       	ldi	r27, 0x04	; 4
    1922:	a6 95       	lsr	r26
    1924:	97 95       	ror	r25
    1926:	87 95       	ror	r24
    1928:	77 95       	ror	r23
    192a:	67 95       	ror	r22
    192c:	ba 95       	dec	r27
    192e:	c9 f7       	brne	.-14     	; 0x1922 <__ultoa_invert+0x86>
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	61 05       	cpc	r22, r1
    1934:	71 05       	cpc	r23, r1
    1936:	08 95       	ret
    1938:	9b 01       	movw	r18, r22
    193a:	ac 01       	movw	r20, r24
    193c:	0a 2e       	mov	r0, r26
    193e:	06 94       	lsr	r0
    1940:	57 95       	ror	r21
    1942:	47 95       	ror	r20
    1944:	37 95       	ror	r19
    1946:	27 95       	ror	r18
    1948:	ba 95       	dec	r27
    194a:	c9 f7       	brne	.-14     	; 0x193e <__ultoa_invert+0xa2>
    194c:	62 0f       	add	r22, r18
    194e:	73 1f       	adc	r23, r19
    1950:	84 1f       	adc	r24, r20
    1952:	95 1f       	adc	r25, r21
    1954:	a0 1d       	adc	r26, r0
    1956:	08 95       	ret

00001958 <__prologue_saves__>:
    1958:	2f 92       	push	r2
    195a:	3f 92       	push	r3
    195c:	4f 92       	push	r4
    195e:	5f 92       	push	r5
    1960:	6f 92       	push	r6
    1962:	7f 92       	push	r7
    1964:	8f 92       	push	r8
    1966:	9f 92       	push	r9
    1968:	af 92       	push	r10
    196a:	bf 92       	push	r11
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	ca 1b       	sub	r28, r26
    1982:	db 0b       	sbc	r29, r27
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	09 94       	ijmp

00001990 <__epilogue_restores__>:
    1990:	2a 88       	ldd	r2, Y+18	; 0x12
    1992:	39 88       	ldd	r3, Y+17	; 0x11
    1994:	48 88       	ldd	r4, Y+16	; 0x10
    1996:	5f 84       	ldd	r5, Y+15	; 0x0f
    1998:	6e 84       	ldd	r6, Y+14	; 0x0e
    199a:	7d 84       	ldd	r7, Y+13	; 0x0d
    199c:	8c 84       	ldd	r8, Y+12	; 0x0c
    199e:	9b 84       	ldd	r9, Y+11	; 0x0b
    19a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    19a2:	b9 84       	ldd	r11, Y+9	; 0x09
    19a4:	c8 84       	ldd	r12, Y+8	; 0x08
    19a6:	df 80       	ldd	r13, Y+7	; 0x07
    19a8:	ee 80       	ldd	r14, Y+6	; 0x06
    19aa:	fd 80       	ldd	r15, Y+5	; 0x05
    19ac:	0c 81       	ldd	r16, Y+4	; 0x04
    19ae:	1b 81       	ldd	r17, Y+3	; 0x03
    19b0:	aa 81       	ldd	r26, Y+2	; 0x02
    19b2:	b9 81       	ldd	r27, Y+1	; 0x01
    19b4:	ce 0f       	add	r28, r30
    19b6:	d1 1d       	adc	r29, r1
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	ed 01       	movw	r28, r26
    19c4:	08 95       	ret

000019c6 <__do_global_dtors>:
    19c6:	10 e0       	ldi	r17, 0x00	; 0
    19c8:	cc e8       	ldi	r28, 0x8C	; 140
    19ca:	d0 e0       	ldi	r29, 0x00	; 0
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <__do_global_dtors+0x10>
    19ce:	fe 01       	movw	r30, r28
    19d0:	0e 94 b5 08 	call	0x116a	; 0x116a <__tablejump2__>
    19d4:	21 96       	adiw	r28, 0x01	; 1
    19d6:	cd 38       	cpi	r28, 0x8D	; 141
    19d8:	d1 07       	cpc	r29, r17
    19da:	c9 f7       	brne	.-14     	; 0x19ce <__do_global_dtors+0x8>
    19dc:	f8 94       	cli

000019de <__stop_program>:
    19de:	ff cf       	rjmp	.-2      	; 0x19de <__stop_program>
