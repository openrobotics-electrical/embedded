
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  000014ca  0000155e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001e4  008001e4  00001642  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d03  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a0  00000000  00000000  0000349b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000552  00000000  00000000  00003b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00004090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b22  00000000  00000000  00004318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b52  00000000  00000000  00004e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000598c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__dtors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_18>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_20>
      54:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_21>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	03 03       	mulsu	r16, r19
      6a:	64 04       	cpc	r6, r4
      6c:	19 03       	fmul	r17, r17
      6e:	64 04       	cpc	r6, r4
      70:	64 04       	cpc	r6, r4
      72:	8d 02       	muls	r24, r29
      74:	a1 02       	muls	r26, r17
      76:	b5 02       	muls	r27, r21
      78:	c9 02       	muls	r28, r25
      7a:	dd 02       	muls	r29, r29
      7c:	f1 02       	muls	r31, r17
      7e:	64 04       	cpc	r6, r4
      80:	64 04       	cpc	r6, r4
      82:	64 04       	cpc	r6, r4
      84:	64 04       	cpc	r6, r4
      86:	64 04       	cpc	r6, r4
      88:	64 04       	cpc	r6, r4
      8a:	64 04       	cpc	r6, r4
      8c:	64 04       	cpc	r6, r4
      8e:	64 04       	cpc	r6, r4
      90:	64 04       	cpc	r6, r4
      92:	64 04       	cpc	r6, r4
      94:	64 04       	cpc	r6, r4
      96:	64 04       	cpc	r6, r4
      98:	64 04       	cpc	r6, r4
      9a:	64 04       	cpc	r6, r4
      9c:	64 04       	cpc	r6, r4
      9e:	64 04       	cpc	r6, r4
      a0:	64 04       	cpc	r6, r4
      a2:	64 04       	cpc	r6, r4
      a4:	64 04       	cpc	r6, r4
      a6:	64 04       	cpc	r6, r4
      a8:	64 04       	cpc	r6, r4
      aa:	64 04       	cpc	r6, r4
      ac:	64 04       	cpc	r6, r4
      ae:	64 04       	cpc	r6, r4
      b0:	64 04       	cpc	r6, r4
      b2:	64 04       	cpc	r6, r4
      b4:	64 04       	cpc	r6, r4
      b6:	64 04       	cpc	r6, r4
      b8:	64 04       	cpc	r6, r4
      ba:	64 04       	cpc	r6, r4
      bc:	64 04       	cpc	r6, r4
      be:	64 04       	cpc	r6, r4
      c0:	64 04       	cpc	r6, r4
      c2:	64 04       	cpc	r6, r4
      c4:	64 04       	cpc	r6, r4
      c6:	64 04       	cpc	r6, r4
      c8:	64 04       	cpc	r6, r4
      ca:	64 04       	cpc	r6, r4
      cc:	64 04       	cpc	r6, r4
      ce:	64 04       	cpc	r6, r4
      d0:	64 04       	cpc	r6, r4
      d2:	2f 03       	fmul	r18, r23
      d4:	64 04       	cpc	r6, r4
      d6:	64 04       	cpc	r6, r4
      d8:	64 04       	cpc	r6, r4
      da:	60 04       	cpc	r6, r0
      dc:	64 04       	cpc	r6, r4
      de:	64 04       	cpc	r6, r4
      e0:	64 04       	cpc	r6, r4
      e2:	64 04       	cpc	r6, r4
      e4:	64 04       	cpc	r6, r4
      e6:	64 04       	cpc	r6, r4
      e8:	64 04       	cpc	r6, r4
      ea:	64 04       	cpc	r6, r4
      ec:	64 04       	cpc	r6, r4
      ee:	64 04       	cpc	r6, r4
      f0:	64 04       	cpc	r6, r4
      f2:	64 04       	cpc	r6, r4
      f4:	64 04       	cpc	r6, r4
      f6:	64 04       	cpc	r6, r4
      f8:	64 04       	cpc	r6, r4
      fa:	64 04       	cpc	r6, r4
      fc:	7d 03       	fmul	r23, r21
      fe:	cb 03       	fmulsu	r20, r19

00000100 <__ctors_start>:
     100:	b0 04       	cpc	r11, r0

00000102 <__ctors_end>:
     102:	e1 05       	cpc	r30, r1

00000104 <__dtors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	11 e0       	ldi	r17, 0x01	; 1
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	ea ec       	ldi	r30, 0xCA	; 202
     118:	f4 e1       	ldi	r31, 0x14	; 20
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a4 3e       	cpi	r26, 0xE4	; 228
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	22 e0       	ldi	r18, 0x02	; 2
     128:	a4 ee       	ldi	r26, 0xE4	; 228
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a9 3a       	cpi	r26, 0xA9	; 169
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c1 e8       	ldi	r28, 0x81	; 129
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__do_global_ctors+0x10>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	0e 94 2a 06 	call	0xc54	; 0xc54 <__tablejump2__>
     146:	c0 38       	cpi	r28, 0x80	; 128
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <__do_global_ctors+0x8>
     14c:	0e 94 01 02 	call	0x402	; 0x402 <main>
     150:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__do_global_dtors>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
     158:	08 95       	ret

0000015a <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
     15a:	08 95       	ret

0000015c <_Z14error_functionv>:
			out.clear();
		}
	}
}

void error_function() {
     15c:	eb e5       	ldi	r30, 0x5B	; 91
     15e:	f2 e0       	ldi	r31, 0x02	; 2
     160:	27 e9       	ldi	r18, 0x97	; 151
     162:	32 e0       	ldi	r19, 0x02	; 2
     164:	df 01       	movw	r26, r30
     166:	17 97       	sbiw	r26, 0x07	; 7
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     168:	0d 90       	ld	r0, X+
     16a:	bc 91       	ld	r27, X
     16c:	a0 2d       	mov	r26, r0
     16e:	9c 91       	ld	r25, X
     170:	80 81       	ld	r24, Z
     172:	80 95       	com	r24
     174:	89 23       	and	r24, r25
     176:	8c 93       	st	X, r24
     178:	3a 96       	adiw	r30, 0x0a	; 10
	for (int i=1; i<=6; ++i) enable[i].clear();
     17a:	e2 17       	cp	r30, r18
     17c:	f3 07       	cpc	r31, r19
     17e:	91 f7       	brne	.-28     	; 0x164 <_Z14error_functionv+0x8>
}
     180:	08 95       	ret

00000182 <_Z18error_led_functionv>:
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     182:	a8 e4       	ldi	r26, 0x48	; 72
     184:	b2 e0       	ldi	r27, 0x02	; 2
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	ed 91       	ld	r30, X+
     18a:	fc 91       	ld	r31, X
     18c:	13 97       	sbiw	r26, 0x03	; 3
     18e:	90 81       	ld	r25, Z
     190:	19 96       	adiw	r26, 0x09	; 9
     192:	8c 91       	ld	r24, X
     194:	89 27       	eor	r24, r25
     196:	80 83       	st	Z, r24
     198:	08 95       	ret

0000019a <_ZN6opbots12SimpleBufferIcED1Ev>:
		buffer = (T*)malloc(size);
	}
	
	virtual ~SimpleBuffer() {
		free(buffer);
	}
     19a:	2f ed       	ldi	r18, 0xDF	; 223
     19c:	31 e0       	ldi	r19, 0x01	; 1
     19e:	fc 01       	movw	r30, r24
     1a0:	31 83       	std	Z+1, r19	; 0x01
     1a2:	20 83       	st	Z, r18
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
		buffer = (T*)malloc(size);
	}
	
	virtual ~SimpleBuffer() {
		free(buffer);
     1a4:	82 81       	ldd	r24, Z+2	; 0x02
     1a6:	93 81       	ldd	r25, Z+3	; 0x03
     1a8:	0e 94 df 06 	call	0xdbe	; 0xdbe <free>
     1ac:	08 95       	ret

000001ae <_ZN6opbots5InputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
     1ae:	0e 94 df 06 	call	0xdbe	; 0xdbe <free>
     1b2:	08 95       	ret

000001b4 <_ZN6opbots12SimpleBufferIcED0Ev>:
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
		buffer = (T*)malloc(size);
	}
	
	virtual ~SimpleBuffer() {
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	ec 01       	movw	r28, r24
		free(buffer);
	}
     1ba:	8f ed       	ldi	r24, 0xDF	; 223
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	99 83       	std	Y+1, r25	; 0x01
     1c0:	88 83       	st	Y, r24
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
		buffer = (T*)malloc(size);
	}
	
	virtual ~SimpleBuffer() {
		free(buffer);
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	9b 81       	ldd	r25, Y+3	; 0x03
     1c6:	0e 94 df 06 	call	0xdbe	; 0xdbe <free>
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
     1ca:	ce 01       	movw	r24, r28
     1cc:	0e 94 df 06 	call	0xdbe	; 0xdbe <free>
		buffer = (T*)malloc(size);
	}
	
	virtual ~SimpleBuffer() {
		free(buffer);
	}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <_ZN6opbots6OutputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
     1d6:	0e 94 df 06 	call	0xdbe	; 0xdbe <free>
     1da:	08 95       	ret

000001dc <_ZN6opbots12_raise_errorENS_9ErrorTypeE>:
	BUFFER_OVERFLOW_RX=4,
	OVER_VOLTAGE=5,
	OVER_CURRENT=6
};

void _raise_error(ErrorType error) {
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
	cli();
     1e8:	f8 94       	cli
	uint16_t delay_time(100);
	if (_error_function != nullptr && _error_led_function != nullptr) {
     1ea:	e0 91 a3 02 	lds	r30, 0x02A3
     1ee:	f0 91 a4 02 	lds	r31, 0x02A4
     1f2:	30 97       	sbiw	r30, 0x00	; 0
     1f4:	d1 f1       	breq	.+116    	; 0x26a <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     1f6:	20 91 a1 02 	lds	r18, 0x02A1
     1fa:	30 91 a2 02 	lds	r19, 0x02A2
     1fe:	23 2b       	or	r18, r19
     200:	a1 f1       	breq	.+104    	; 0x26a <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8e>
     202:	08 2f       	mov	r16, r24
		// Call user-defined error function
		_error_function();	
     204:	09 95       	icall
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	e1 2c       	mov	r14, r1
     20a:	f1 2c       	mov	r15, r1
     20c:	10 16       	cp	r1, r16
     20e:	11 06       	cpc	r1, r17
     210:	14 f5       	brge	.+68     	; 0x256 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x7a>
     212:	ce 2d       	mov	r28, r14
     214:	df 2d       	mov	r29, r15
				_error_led_function();
     216:	e0 91 a1 02 	lds	r30, 0x02A1
     21a:	f0 91 a2 02 	lds	r31, 0x02A2
     21e:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	9f ef       	ldi	r25, 0xFF	; 255
     222:	21 ee       	ldi	r18, 0xE1	; 225
     224:	84 e0       	ldi	r24, 0x04	; 4
     226:	91 50       	subi	r25, 0x01	; 1
     228:	20 40       	sbci	r18, 0x00	; 0
     22a:	80 40       	sbci	r24, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x4a>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x54>
     230:	00 00       	nop
				_delay_ms(delay_time);
				_error_led_function();
     232:	e0 91 a1 02 	lds	r30, 0x02A1
     236:	f0 91 a2 02 	lds	r31, 0x02A2
     23a:	09 95       	icall
     23c:	9f ef       	ldi	r25, 0xFF	; 255
     23e:	29 e6       	ldi	r18, 0x69	; 105
     240:	88 e1       	ldi	r24, 0x18	; 24
     242:	91 50       	subi	r25, 0x01	; 1
     244:	20 40       	sbci	r18, 0x00	; 0
     246:	80 40       	sbci	r24, 0x00	; 0
     248:	e1 f7       	brne	.-8      	; 0x242 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x66>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x70>
     24c:	00 00       	nop
	if (_error_function != nullptr && _error_led_function != nullptr) {
		// Call user-defined error function
		_error_function();	
		// Flash error code on err_led forever
		while (1) {
			for (int i=0; i < uint8_t(error); ++i) {
     24e:	21 96       	adiw	r28, 0x01	; 1
     250:	c0 17       	cp	r28, r16
     252:	d1 07       	cpc	r29, r17
     254:	01 f7       	brne	.-64     	; 0x216 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x3a>
     256:	9f ef       	ldi	r25, 0xFF	; 255
     258:	23 ed       	ldi	r18, 0xD3	; 211
     25a:	80 e3       	ldi	r24, 0x30	; 48
     25c:	91 50       	subi	r25, 0x01	; 1
     25e:	20 40       	sbci	r18, 0x00	; 0
     260:	80 40       	sbci	r24, 0x00	; 0
     262:	e1 f7       	brne	.-8      	; 0x25c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x80>
     264:	00 c0       	rjmp	.+0      	; 0x266 <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x8a>
     266:	00 00       	nop
     268:	d1 cf       	rjmp	.-94     	; 0x20c <_ZN6opbots12_raise_errorENS_9ErrorTypeE+0x30>
				_delay_ms(5*delay_time);
			}
			_delay_ms(10*delay_time);
		}
	}
	sei();
     26a:	78 94       	sei
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	08 95       	ret

0000027a <__vector_21>:

} /* end of namespace opbots */

using namespace opbots;

ISR(ADC_vect) {
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	8f 93       	push	r24
	cli();
     286:	f8 94       	cli
	Analog::analog_low = ADCL;
     288:	80 91 78 00 	lds	r24, 0x0078
     28c:	80 93 9e 02 	sts	0x029E, r24
	Analog::analogHigh = ADCH;
     290:	80 91 79 00 	lds	r24, 0x0079
     294:	80 93 9f 02 	sts	0x029F, r24
	Analog::new_value = true;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 a0 02 	sts	0x02A0, r24
	sei();
     29e:	78 94       	sei
};
     2a0:	8f 91       	pop	r24
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	1f 90       	pop	r1
     2aa:	18 95       	reti

000002ac <__vector_20>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     2ac:	1f 92       	push	r1
     2ae:	0f 92       	push	r0
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	af 93       	push	r26
     2bc:	bf 93       	push	r27
     2be:	ef 93       	push	r30
     2c0:	ff 93       	push	r31
			ok = false;
			return '\0';
		}
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
     2c2:	f8 94       	cli
		tx[serial_port].head++;
     2c4:	e7 e9       	ldi	r30, 0x97	; 151
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	85 81       	ldd	r24, Z+5	; 0x05
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	85 83       	std	Z+5, r24	; 0x05
		if (tx[serial_port].head < tx[serial_port].tail) {
     2ce:	96 81       	ldd	r25, Z+6	; 0x06
     2d0:	89 17       	cp	r24, r25
     2d2:	50 f4       	brcc	.+20     	; 0x2e8 <__vector_20+0x3c>
			if (serial_port == 0) {
				UDR0 = char(tx[serial_port].buffer[tx[serial_port].head]);
     2d4:	e0 91 99 02 	lds	r30, 0x0299
     2d8:	f0 91 9a 02 	lds	r31, 0x029A
     2dc:	e8 0f       	add	r30, r24
     2de:	f1 1d       	adc	r31, r1
     2e0:	80 81       	ld	r24, Z
     2e2:	80 93 c6 00 	sts	0x00C6, r24
     2e6:	10 c0       	rjmp	.+32     	; 0x308 <__vector_20+0x5c>
			else if (serial_port == 1) {
				UDR1 = 'x';
			}
#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
     2e8:	e0 91 8e 02 	lds	r30, 0x028E
     2ec:	f0 91 8f 02 	lds	r31, 0x028F
     2f0:	30 97       	sbiw	r30, 0x00	; 0
     2f2:	51 f0       	breq	.+20     	; 0x308 <__vector_20+0x5c>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     2f4:	a2 81       	ldd	r26, Z+2	; 0x02
     2f6:	b3 81       	ldd	r27, Z+3	; 0x03
     2f8:	9c 91       	ld	r25, X
     2fa:	81 85       	ldd	r24, Z+9	; 0x09
     2fc:	80 95       	com	r24
     2fe:	89 23       	and	r24, r25
     300:	8c 93       	st	X, r24
			}
#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
				Serial::txden[serial_port]->clear();
				UCSR0B = 1<<(RXCIE0) | 1<<(RXEN0);
     302:	80 e9       	ldi	r24, 0x90	; 144
     304:	80 93 c1 00 	sts	0x00C1, r24
			}
		}
		sei();
     308:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     30a:	ff 91       	pop	r31
     30c:	ef 91       	pop	r30
     30e:	bf 91       	pop	r27
     310:	af 91       	pop	r26
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <__vector_18>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	2f 93       	push	r18
     32c:	3f 93       	push	r19
     32e:	4f 93       	push	r20
     330:	5f 93       	push	r21
     332:	6f 93       	push	r22
     334:	7f 93       	push	r23
     336:	8f 93       	push	r24
     338:	9f 93       	push	r25
     33a:	af 93       	push	r26
     33c:	bf 93       	push	r27
     33e:	ef 93       	push	r30
     340:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
     342:	f8 94       	cli
		PORTB ^= 1<<4; // MISO
     344:	95 b1       	in	r25, 0x05	; 5
     346:	80 e1       	ldi	r24, 0x10	; 16
     348:	89 27       	eor	r24, r25
     34a:	85 b9       	out	0x05, r24	; 5
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
     34c:	e0 ec       	ldi	r30, 0xC0	; 192
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	8f 77       	andi	r24, 0x7F	; 127
     354:	80 83       	st	Z, r24
			if (rx[serial_port].head < rx[serial_port].size) {
     356:	e0 e9       	ldi	r30, 0x90	; 144
     358:	f2 e0       	ldi	r31, 0x02	; 2
     35a:	85 81       	ldd	r24, Z+5	; 0x05
     35c:	94 81       	ldd	r25, Z+4	; 0x04
     35e:	89 17       	cp	r24, r25
     360:	58 f4       	brcc	.+22     	; 0x378 <__vector_18+0x58>
				rx[serial_port].buffer[rx[serial_port].head] = UDR0;
     362:	90 91 c6 00 	lds	r25, 0x00C6
     366:	a2 81       	ldd	r26, Z+2	; 0x02
     368:	b3 81       	ldd	r27, Z+3	; 0x03
     36a:	a8 0f       	add	r26, r24
     36c:	b1 1d       	adc	r27, r1
     36e:	9c 93       	st	X, r25
				rx[serial_port].head++;
     370:	85 81       	ldd	r24, Z+5	; 0x05
     372:	8f 5f       	subi	r24, 0xFF	; 255
     374:	85 83       	std	Z+5, r24	; 0x05
     376:	03 c0       	rjmp	.+6      	; 0x37e <__vector_18+0x5e>
			} else {
				_raise_error(ErrorType::BUFFER_OVERFLOW_RX);
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
		}
#endif
		sei();
     37e:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <_Z15startup_routinei>:
Output pwm0a(&PORTD,6);
Input reset(&PORTC,6);

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ac 01       	movw	r20, r24
     3ac:	08 e4       	ldi	r16, 0x48	; 72
     3ae:	12 e0       	ldi	r17, 0x02	; 2
     3b0:	61 e5       	ldi	r22, 0x51	; 81
     3b2:	72 e0       	ldi	r23, 0x02	; 2
	while (--loops >= 0) {
     3b4:	1b c0       	rjmp	.+54     	; 0x3ec <_Z15startup_routinei+0x4a>
		}
	}
	sei();
}
	
class GPIO {
     3b6:	12 96       	adiw	r26, 0x02	; 2
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	13 97       	sbiw	r26, 0x03	; 3
     3be:	98 81       	ld	r25, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     3c0:	20 81       	ld	r18, Z
     3c2:	29 2b       	or	r18, r25
     3c4:	20 83       	st	Z, r18
     3c6:	2f ef       	ldi	r18, 0xFF	; 255
     3c8:	30 e7       	ldi	r19, 0x70	; 112
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	21 50       	subi	r18, 0x01	; 1
     3ce:	30 40       	sbci	r19, 0x00	; 0
     3d0:	80 40       	sbci	r24, 0x00	; 0
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <_Z15startup_routinei+0x2a>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_Z15startup_routinei+0x34>
     3d6:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
     3d8:	20 81       	ld	r18, Z
     3da:	90 95       	com	r25
     3dc:	92 23       	and	r25, r18
     3de:	90 83       	st	Z, r25
     3e0:	1a 96       	adiw	r26, 0x0a	; 10
     3e2:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
     3e4:	22 e0       	ldi	r18, 0x02	; 2
     3e6:	ae 38       	cpi	r26, 0x8E	; 142
     3e8:	b2 07       	cpc	r27, r18
     3ea:	29 f7       	brne	.-54     	; 0x3b6 <_Z15startup_routinei+0x14>
Input reset(&PORTC,6);

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
	while (--loops >= 0) {
     3ec:	41 50       	subi	r20, 0x01	; 1
     3ee:	51 09       	sbc	r21, r1
     3f0:	1a f0       	brmi	.+6      	; 0x3f8 <_Z15startup_routinei+0x56>
     3f2:	d8 01       	movw	r26, r16
     3f4:	eb 01       	movw	r28, r22
     3f6:	df cf       	rjmp	.-66     	; 0x3b6 <_Z15startup_routinei+0x14>
			out.set();
			_delay_ms(delay_time/2);
			out.clear();
		}
	}
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <main>:
char message[16];
uint16_t volts_reading, volts, centivolts;
uint16_t amps_reading, amps, centiamps;
uint32_t watts_raw, watts, centiwatts;  

int main(void) {
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	2b 97       	sbiw	r28, 0x0b	; 11
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
	_error_function = error_function;
     416:	8e ea       	ldi	r24, 0xAE	; 174
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 a4 02 	sts	0x02A4, r25
     41e:	80 93 a3 02 	sts	0x02A3, r24
	_error_led_function = error_led_function;
     422:	81 ec       	ldi	r24, 0xC1	; 193
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 a2 02 	sts	0x02A2, r25
     42a:	80 93 a1 02 	sts	0x02A1, r24
     42e:	a8 e4       	ldi	r26, 0x48	; 72
     430:	b2 e0       	ldi	r27, 0x02	; 2
     432:	12 96       	adiw	r26, 0x02	; 2
     434:	ed 91       	ld	r30, X+
     436:	fc 91       	ld	r31, X
     438:	13 97       	sbiw	r26, 0x03	; 3
     43a:	80 81       	ld	r24, Z
     43c:	19 96       	adiw	r26, 0x09	; 9
     43e:	9c 91       	ld	r25, X
     440:	90 95       	com	r25
     442:	89 23       	and	r24, r25
     444:	80 83       	st	Z, r24
	err_led.clear();
	startup_routine(2);
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z15startup_routinei>
				UDR1 = transmitting[tx_head];
			}
		#endif
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
     44e:	8e e3       	ldi	r24, 0x3E	; 62
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	90 93 8f 02 	sts	0x028F, r25
     456:	80 93 8e 02 	sts	0x028E, r24
	
	static void init(const uint32_t baud_rate, const uint8_t serial_port=0) {
		uint8_t offset = 0;
		const uint16_t baud = (F_CPU / 8 / baud_rate) - 1;
		if (serial_port == 1) offset = 0x10;
		*(&UBRR0H+offset) = baud / 0xFF;
     45a:	10 92 c5 00 	sts	0x00C5, r1
		*(&UBRR0L+offset) = baud % 0xFF;
     45e:	80 e1       	ldi	r24, 0x10	; 16
     460:	80 93 c4 00 	sts	0x00C4, r24
		*(&UCSR0A+offset) = 1<<(U2X0);
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	80 93 c0 00 	sts	0x00C0, r24
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
     46a:	88 ed       	ldi	r24, 0xD8	; 216
     46c:	80 93 c1 00 	sts	0x00C1, r24
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	80 93 c2 00 	sts	0x00C2, r24
	     
	Serial::set_txden_pin(txden);
	Serial::init(115200);
	uint16_t pulse_width(1500);
	sei(); // Enable interrupts
     476:	78 94       	sei
	
	const char name[] = "@pdu";
     478:	85 e0       	ldi	r24, 0x05	; 5
     47a:	e6 ec       	ldi	r30, 0xC6	; 198
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	de 01       	movw	r26, r28
     480:	11 96       	adiw	r26, 0x01	; 1
     482:	01 90       	ld	r0, Z+
     484:	0d 92       	st	X+, r0
     486:	8a 95       	dec	r24
     488:	e1 f7       	brne	.-8      	; 0x482 <main+0x80>
	uint8_t stage(0);
     48a:	20 e0       	ldi	r18, 0x00	; 0
	err_led.clear();
	startup_routine(2);
	     
	Serial::set_txden_pin(txden);
	Serial::init(115200);
	uint16_t pulse_width(1500);
     48c:	8c ed       	ldi	r24, 0xDC	; 220
     48e:	95 e0       	ldi	r25, 0x05	; 5
     490:	9f 83       	std	Y+7, r25	; 0x07
     492:	8e 83       	std	Y+6, r24	; 0x06
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     494:	00 e9       	ldi	r16, 0x90	; 144
     496:	12 e0       	ldi	r17, 0x02	; 2
						_raise_error(ErrorType::OUT_OF_MEMORY);
						break;
					default:
						sprintf(message,"Bad command\r\n");
				}
				Serial::transmit(message,strlen(message));
     498:	0f 2e       	mov	r0, r31
     49a:	fc ef       	ldi	r31, 0xFC	; 252
     49c:	af 2e       	mov	r10, r31
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	bf 2e       	mov	r11, r31
     4a2:	f0 2d       	mov	r31, r0
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (txden[serial_port] != nullptr) {
     4a4:	0f 2e       	mov	r0, r31
     4a6:	fe e8       	ldi	r31, 0x8E	; 142
     4a8:	8f 2e       	mov	r8, r31
     4aa:	f2 e0       	ldi	r31, 0x02	; 2
     4ac:	9f 2e       	mov	r9, r31
     4ae:	f0 2d       	mov	r31, r0
			txden[serial_port]->set();
			UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
		}
		auto& udr = UDR0;
		if (serial_port == 0) {
			if (char_count > tx[0].size) {
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f7 e9       	ldi	r31, 0x97	; 151
     4b4:	cf 2e       	mov	r12, r31
     4b6:	f2 e0       	ldi	r31, 0x02	; 2
     4b8:	df 2e       	mov	r13, r31
     4ba:	f0 2d       	mov	r31, r0
				_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
			}
			memcpy(tx[0].buffer, buffer, char_count);
			tx[0].head = 0;
			tx[0].tail = char_count;
			UDR0 = tx[0].buffer[tx[0].head];
     4bc:	0f 2e       	mov	r0, r31
     4be:	f6 ec       	ldi	r31, 0xC6	; 198
     4c0:	2f 2e       	mov	r2, r31
     4c2:	31 2c       	mov	r3, r1
     4c4:	f0 2d       	mov	r31, r0
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <main+0xc8>
				stage = 0;
			} else {
				if (c == name[stage]) 
					stage++;
				else
					stage = 0;
     4c8:	20 e0       	ldi	r18, 0x00	; 0
	
	const char name[] = "@pdu";
	uint8_t stage(0);
	bool char_available;
    while (1) {	
		cli();
     4ca:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     4cc:	d8 01       	movw	r26, r16
     4ce:	15 96       	adiw	r26, 0x05	; 5
     4d0:	8c 91       	ld	r24, X
     4d2:	15 97       	sbiw	r26, 0x05	; 5
     4d4:	88 23       	and	r24, r24
     4d6:	69 f0       	breq	.+26     	; 0x4f2 <main+0xf0>
			rx[0].head--;
     4d8:	81 50       	subi	r24, 0x01	; 1
     4da:	15 96       	adiw	r26, 0x05	; 5
     4dc:	8c 93       	st	X, r24
     4de:	15 97       	sbiw	r26, 0x05	; 5
			ok = true;
			return rx[0].buffer[rx[0].head];
     4e0:	12 96       	adiw	r26, 0x02	; 2
     4e2:	ed 91       	ld	r30, X+
     4e4:	fc 91       	ld	r31, X
     4e6:	13 97       	sbiw	r26, 0x03	; 3
     4e8:	e8 0f       	add	r30, r24
     4ea:	f1 1d       	adc	r31, r1
     4ec:	e0 81       	ld	r30, Z
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
			rx[0].head--;
			ok = true;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <main+0xf4>
			return rx[0].buffer[rx[0].head];
		} else {
			ok = false;
     4f2:	80 e0       	ldi	r24, 0x00	; 0
			return '\0';
     4f4:	e0 e0       	ldi	r30, 0x00	; 0
		char c(Serial::get_char(char_available));
		sei();
     4f6:	78 94       	sei
		if (char_available) {
     4f8:	88 23       	and	r24, r24
     4fa:	39 f3       	breq	.-50     	; 0x4ca <main+0xc8>
			if (stage == 4) {
     4fc:	24 30       	cpi	r18, 0x04	; 4
     4fe:	09 f0       	breq	.+2      	; 0x502 <main+0x100>
     500:	24 c2       	rjmp	.+1096   	; 0x94a <__stack+0x4b>
				switch(c) {
     502:	8e 2f       	mov	r24, r30
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	fc 01       	movw	r30, r24
     508:	bc 97       	sbiw	r30, 0x2c	; 44
     50a:	ec 34       	cpi	r30, 0x4C	; 76
     50c:	f1 05       	cpc	r31, r1
     50e:	08 f0       	brcs	.+2      	; 0x512 <main+0x110>
     510:	db c1       	rjmp	.+950    	; 0x8c8 <main+0x4c6>
     512:	ec 5c       	subi	r30, 0xCC	; 204
     514:	ff 4f       	sbci	r31, 0xFF	; 255
     516:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__tablejump2__>
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     51a:	a8 e4       	ldi	r26, 0x48	; 72
     51c:	b2 e0       	ldi	r27, 0x02	; 2
     51e:	1c 96       	adiw	r26, 0x0c	; 12
     520:	ed 91       	ld	r30, X+
     522:	fc 91       	ld	r31, X
     524:	1d 97       	sbiw	r26, 0x0d	; 13
     526:	90 81       	ld	r25, Z
     528:	53 96       	adiw	r26, 0x13	; 19
     52a:	8c 91       	ld	r24, X
     52c:	89 27       	eor	r24, r25
     52e:	80 83       	st	Z, r24
					case '1':
						enable[1].toggle();
						sprintf(message,"Enable 1 toggled\r\n");
     530:	83 e1       	ldi	r24, 0x13	; 19
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	d5 01       	movw	r26, r10
     538:	01 90       	ld	r0, Z+
     53a:	0d 92       	st	X+, r0
     53c:	8a 95       	dec	r24
     53e:	e1 f7       	brne	.-8      	; 0x538 <main+0x136>
						break;
     540:	cb c1       	rjmp	.+918    	; 0x8d8 <main+0x4d6>
     542:	a8 e4       	ldi	r26, 0x48	; 72
     544:	b2 e0       	ldi	r27, 0x02	; 2
     546:	56 96       	adiw	r26, 0x16	; 22
     548:	ed 91       	ld	r30, X+
     54a:	fc 91       	ld	r31, X
     54c:	57 97       	sbiw	r26, 0x17	; 23
     54e:	90 81       	ld	r25, Z
     550:	5d 96       	adiw	r26, 0x1d	; 29
     552:	8c 91       	ld	r24, X
     554:	89 27       	eor	r24, r25
     556:	80 83       	st	Z, r24
					case '2':
						enable[2].toggle();
						sprintf(message,"Enable 2 toggled\r\n");
     558:	83 e1       	ldi	r24, 0x13	; 19
     55a:	e9 e1       	ldi	r30, 0x19	; 25
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	d5 01       	movw	r26, r10
     560:	01 90       	ld	r0, Z+
     562:	0d 92       	st	X+, r0
     564:	8a 95       	dec	r24
     566:	e1 f7       	brne	.-8      	; 0x560 <main+0x15e>
						break;
     568:	b7 c1       	rjmp	.+878    	; 0x8d8 <main+0x4d6>
     56a:	a8 e4       	ldi	r26, 0x48	; 72
     56c:	b2 e0       	ldi	r27, 0x02	; 2
     56e:	90 96       	adiw	r26, 0x20	; 32
     570:	ed 91       	ld	r30, X+
     572:	fc 91       	ld	r31, X
     574:	91 97       	sbiw	r26, 0x21	; 33
     576:	90 81       	ld	r25, Z
     578:	97 96       	adiw	r26, 0x27	; 39
     57a:	8c 91       	ld	r24, X
     57c:	89 27       	eor	r24, r25
     57e:	80 83       	st	Z, r24
					case '3':
						enable[3].toggle();
						sprintf(message,"Enable 3 toggled\r\n");
     580:	83 e1       	ldi	r24, 0x13	; 19
     582:	ec e2       	ldi	r30, 0x2C	; 44
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	d5 01       	movw	r26, r10
     588:	01 90       	ld	r0, Z+
     58a:	0d 92       	st	X+, r0
     58c:	8a 95       	dec	r24
     58e:	e1 f7       	brne	.-8      	; 0x588 <main+0x186>
						break;
     590:	a3 c1       	rjmp	.+838    	; 0x8d8 <main+0x4d6>
     592:	a8 e4       	ldi	r26, 0x48	; 72
     594:	b2 e0       	ldi	r27, 0x02	; 2
     596:	9a 96       	adiw	r26, 0x2a	; 42
     598:	ed 91       	ld	r30, X+
     59a:	fc 91       	ld	r31, X
     59c:	9b 97       	sbiw	r26, 0x2b	; 43
     59e:	90 81       	ld	r25, Z
     5a0:	d1 96       	adiw	r26, 0x31	; 49
     5a2:	8c 91       	ld	r24, X
     5a4:	89 27       	eor	r24, r25
     5a6:	80 83       	st	Z, r24
					case '4':
						enable[4].toggle();
						sprintf(message,"Enable 4 toggled\r\n");
     5a8:	83 e1       	ldi	r24, 0x13	; 19
     5aa:	ef e3       	ldi	r30, 0x3F	; 63
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	d5 01       	movw	r26, r10
     5b0:	01 90       	ld	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	8a 95       	dec	r24
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x1ae>
						break;
     5b8:	8f c1       	rjmp	.+798    	; 0x8d8 <main+0x4d6>
     5ba:	a8 e4       	ldi	r26, 0x48	; 72
     5bc:	b2 e0       	ldi	r27, 0x02	; 2
     5be:	d4 96       	adiw	r26, 0x34	; 52
     5c0:	ed 91       	ld	r30, X+
     5c2:	fc 91       	ld	r31, X
     5c4:	d5 97       	sbiw	r26, 0x35	; 53
     5c6:	90 81       	ld	r25, Z
     5c8:	db 96       	adiw	r26, 0x3b	; 59
     5ca:	8c 91       	ld	r24, X
     5cc:	89 27       	eor	r24, r25
     5ce:	80 83       	st	Z, r24
					case '5':
						enable[5].toggle();
						sprintf(message,"Enable 5 toggled\r\n");
     5d0:	83 e1       	ldi	r24, 0x13	; 19
     5d2:	e2 e5       	ldi	r30, 0x52	; 82
     5d4:	f1 e0       	ldi	r31, 0x01	; 1
     5d6:	d5 01       	movw	r26, r10
     5d8:	01 90       	ld	r0, Z+
     5da:	0d 92       	st	X+, r0
     5dc:	8a 95       	dec	r24
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0x1d6>
						break;
     5e0:	7b c1       	rjmp	.+758    	; 0x8d8 <main+0x4d6>
     5e2:	e0 91 86 02 	lds	r30, 0x0286
     5e6:	f0 91 87 02 	lds	r31, 0x0287
     5ea:	90 81       	ld	r25, Z
     5ec:	80 91 8d 02 	lds	r24, 0x028D
     5f0:	89 27       	eor	r24, r25
     5f2:	80 83       	st	Z, r24
					case '6':
						enable[6].toggle();
						sprintf(message,"Enable 6 toggled\r\n");
     5f4:	83 e1       	ldi	r24, 0x13	; 19
     5f6:	e5 e6       	ldi	r30, 0x65	; 101
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	d5 01       	movw	r26, r10
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x1fa>
						break;
     604:	69 c1       	rjmp	.+722    	; 0x8d8 <main+0x4d6>
					case ',':
						pulse_width += 10;
     606:	ee 81       	ldd	r30, Y+6	; 0x06
     608:	ff 81       	ldd	r31, Y+7	; 0x07
     60a:	3a 96       	adiw	r30, 0x0a	; 10
     60c:	ff 83       	std	Y+7, r31	; 0x07
     60e:	ee 83       	std	Y+6, r30	; 0x06
						sprintf(message,"Pulse width %u\r\n",pulse_width);
     610:	ff 93       	push	r31
     612:	ef 93       	push	r30
     614:	88 e7       	ldi	r24, 0x78	; 120
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	bf 92       	push	r11
     61e:	af 92       	push	r10
     620:	0e 94 80 07 	call	0xf00	; 0xf00 <sprintf>
						break;
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	53 c1       	rjmp	.+678    	; 0x8d8 <main+0x4d6>
					case '.':
						pulse_width -= 10;
     632:	8e 81       	ldd	r24, Y+6	; 0x06
     634:	9f 81       	ldd	r25, Y+7	; 0x07
     636:	0a 97       	sbiw	r24, 0x0a	; 10
     638:	9f 83       	std	Y+7, r25	; 0x07
     63a:	8e 83       	std	Y+6, r24	; 0x06
						sprintf(message,"Pulse width %u\r\n",pulse_width);
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	88 e7       	ldi	r24, 0x78	; 120
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	bf 92       	push	r11
     64a:	af 92       	push	r10
     64c:	0e 94 80 07 	call	0xf00	; 0xf00 <sprintf>
						break;
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	3d c1       	rjmp	.+634    	; 0x8d8 <main+0x4d6>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
			//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
			DDRC = DDRC & ~(1<<n);
     65e:	3e 98       	cbi	0x07, 6	; 7
			ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     660:	86 e4       	ldi	r24, 0x46	; 70
     662:	ac e7       	ldi	r26, 0x7C	; 124
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	8c 93       	st	X, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     668:	8f e8       	ldi	r24, 0x8F	; 143
     66a:	ea e7       	ldi	r30, 0x7A	; 122
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     670:	ab e7       	ldi	r26, 0x7B	; 123
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	1c 92       	st	X, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     676:	10 92 a0 02 	sts	0x02A0, r1
		ADCSRA |= 1<<(ADSC); 
     67a:	80 81       	ld	r24, Z
     67c:	80 64       	ori	r24, 0x40	; 64
     67e:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     680:	80 91 a0 02 	lds	r24, 0x02A0
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     684:	88 23       	and	r24, r24
     686:	e1 f3       	breq	.-8      	; 0x680 <main+0x27e>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     688:	80 91 9f 02 	lds	r24, 0x029F
     68c:	20 91 9e 02 	lds	r18, 0x029E
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	38 2b       	or	r19, r24
					case 'a':
						volts_reading = Analog::immediate_read(6);
     694:	30 93 fb 01 	sts	0x01FB, r19
     698:	20 93 fa 01 	sts	0x01FA, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     69c:	a0 e4       	ldi	r26, 0x40	; 64
     69e:	b6 e0       	ldi	r27, 0x06	; 6
     6a0:	0e 94 30 06 	call	0xc60	; 0xc60 <__umulhisi3>
     6a4:	2b 01       	movw	r4, r22
     6a6:	3c 01       	movw	r6, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	44 27       	eor	r20, r20
     6ae:	55 27       	eor	r21, r21
     6b0:	a4 e6       	ldi	r26, 0x64	; 100
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__muluhisi3>
     6b8:	90 93 f1 01 	sts	0x01F1, r25
     6bc:	80 93 f0 01 	sts	0x01F0, r24
		}
		temp_result = temp_result >> 16;
     6c0:	c3 01       	movw	r24, r6
     6c2:	aa 27       	eor	r26, r26
     6c4:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     6c6:	80 93 f2 01 	sts	0x01F2, r24
     6ca:	90 93 f3 01 	sts	0x01F3, r25
						Analog::adc_scale<MAX_VOLTS>(volts_reading, &amps, &centiamps);
						sprintf(message, "%2u.%02u A  \r\n", amps, centiamps);
     6ce:	20 91 f1 01 	lds	r18, 0x01F1
     6d2:	2f 93       	push	r18
     6d4:	20 91 f0 01 	lds	r18, 0x01F0
     6d8:	2f 93       	push	r18
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	a9 e8       	ldi	r26, 0x89	; 137
     6e0:	b1 e0       	ldi	r27, 0x01	; 1
     6e2:	bf 93       	push	r27
     6e4:	af 93       	push	r26
     6e6:	bf 92       	push	r11
     6e8:	af 92       	push	r10
     6ea:	0e 94 80 07 	call	0xf00	; 0xf00 <sprintf>
						break;
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	ef c0       	rjmp	.+478    	; 0x8d8 <main+0x4d6>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
			//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
			DDRC = DDRC & ~(1<<n);
     6fa:	3f 98       	cbi	0x07, 7	; 7
			ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     6fc:	87 e4       	ldi	r24, 0x47	; 71
     6fe:	ac e7       	ldi	r26, 0x7C	; 124
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	8c 93       	st	X, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     704:	8f e8       	ldi	r24, 0x8F	; 143
     706:	ea e7       	ldi	r30, 0x7A	; 122
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     70c:	ab e7       	ldi	r26, 0x7B	; 123
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	1c 92       	st	X, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     712:	10 92 a0 02 	sts	0x02A0, r1
		ADCSRA |= 1<<(ADSC); 
     716:	80 81       	ld	r24, Z
     718:	80 64       	ori	r24, 0x40	; 64
     71a:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     71c:	80 91 a0 02 	lds	r24, 0x02A0
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     720:	88 23       	and	r24, r24
     722:	e1 f3       	breq	.-8      	; 0x71c <main+0x31a>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     724:	80 91 9f 02 	lds	r24, 0x029F
     728:	20 91 9e 02 	lds	r18, 0x029E
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	38 2b       	or	r19, r24
					case 'v':
						amps_reading = Analog::immediate_read(7);
     730:	30 93 f5 01 	sts	0x01F5, r19
     734:	20 93 f4 01 	sts	0x01F4, r18
	static void inline adc_scale(const uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
		uint32_t temp_result(adc_reading);
		if (result == nullptr) {
			_raise_error(ErrorType::NULL_POINTER);
		}
		temp_result *= (SCALE*0x10000 / 0x400);
     738:	a0 e4       	ldi	r26, 0x40	; 64
     73a:	b6 e0       	ldi	r27, 0x06	; 6
     73c:	0e 94 30 06 	call	0xc60	; 0xc60 <__umulhisi3>
     740:	2b 01       	movw	r4, r22
     742:	3c 01       	movw	r6, r24
		if (result_centis != nullptr) {
			*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	44 27       	eor	r20, r20
     74a:	55 27       	eor	r21, r21
     74c:	a4 e6       	ldi	r26, 0x64	; 100
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__muluhisi3>
     754:	90 93 f7 01 	sts	0x01F7, r25
     758:	80 93 f6 01 	sts	0x01F6, r24
		}
		temp_result = temp_result >> 16;
     75c:	c3 01       	movw	r24, r6
     75e:	aa 27       	eor	r26, r26
     760:	bb 27       	eor	r27, r27
		*result = uint16_t(temp_result);
     762:	80 93 f8 01 	sts	0x01F8, r24
     766:	90 93 f9 01 	sts	0x01F9, r25
						Analog::adc_scale<MAX_AMPS>(amps_reading, &volts, &centivolts);
						sprintf(message, "%2u.%02u V  \r\n", volts, centivolts);
     76a:	20 91 f7 01 	lds	r18, 0x01F7
     76e:	2f 93       	push	r18
     770:	20 91 f6 01 	lds	r18, 0x01F6
     774:	2f 93       	push	r18
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	a8 e9       	ldi	r26, 0x98	; 152
     77c:	b1 e0       	ldi	r27, 0x01	; 1
     77e:	bf 93       	push	r27
     780:	af 93       	push	r26
     782:	bf 92       	push	r11
     784:	af 92       	push	r10
     786:	0e 94 80 07 	call	0xf00	; 0xf00 <sprintf>
						break;
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	a1 c0       	rjmp	.+322    	; 0x8d8 <main+0x4d6>
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
			//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
			DDRC = DDRC & ~(1<<n);
     796:	3e 98       	cbi	0x07, 6	; 7
			ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     798:	86 e4       	ldi	r24, 0x46	; 70
     79a:	ac e7       	ldi	r26, 0x7C	; 124
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	8c 93       	st	X, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     7a0:	8f e8       	ldi	r24, 0x8F	; 143
     7a2:	ea e7       	ldi	r30, 0x7A	; 122
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     7a8:	ab e7       	ldi	r26, 0x7B	; 123
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	1c 92       	st	X, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     7ae:	10 92 a0 02 	sts	0x02A0, r1
		ADCSRA |= 1<<(ADSC); 
     7b2:	80 81       	ld	r24, Z
     7b4:	80 64       	ori	r24, 0x40	; 64
     7b6:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     7b8:	80 91 a0 02 	lds	r24, 0x02A0
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     7bc:	88 23       	and	r24, r24
     7be:	e1 f3       	breq	.-8      	; 0x7b8 <main+0x3b6>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     7c0:	20 91 9f 02 	lds	r18, 0x029F
     7c4:	80 91 9e 02 	lds	r24, 0x029E
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	92 2b       	or	r25, r18
					case 'w':
						volts_reading = Analog::immediate_read(6);
     7cc:	90 93 fb 01 	sts	0x01FB, r25
     7d0:	80 93 fa 01 	sts	0x01FA, r24
	static void select_channel(uint8_t n) {
		#ifdef _AVR_ATTINY841_H_INCLUDED
			//! TODO		
		#endif
		#ifndef _AVR_ATTINY841_H_INCLUDED
			DDRC = DDRC & ~(1<<n);
     7d4:	3f 98       	cbi	0x07, 7	; 7
			ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     7d6:	87 e4       	ldi	r24, 0x47	; 71
     7d8:	ec e7       	ldi	r30, 0x7C	; 124
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 83       	st	Z, r24
		#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     7de:	8f e8       	ldi	r24, 0x8F	; 143
     7e0:	aa e7       	ldi	r26, 0x7A	; 122
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	8c 93       	st	X, r24
		ADCSRB = 0; // free running
     7e6:	eb e7       	ldi	r30, 0x7B	; 123
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	10 82       	st	Z, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     7ec:	10 92 a0 02 	sts	0x02A0, r1
		ADCSRA |= 1<<(ADSC); 
     7f0:	8c 91       	ld	r24, X
     7f2:	80 64       	ori	r24, 0x40	; 64
     7f4:	8c 93       	st	X, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     7f6:	80 91 a0 02 	lds	r24, 0x02A0
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     7fa:	88 23       	and	r24, r24
     7fc:	e1 f3       	breq	.-8      	; 0x7f6 <main+0x3f4>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     7fe:	80 91 9f 02 	lds	r24, 0x029F
     802:	20 91 9e 02 	lds	r18, 0x029E
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	38 2b       	or	r19, r24
						amps_reading = Analog::immediate_read(7);
     80a:	30 93 f5 01 	sts	0x01F5, r19
     80e:	20 93 f4 01 	sts	0x01F4, r18
						watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     812:	a0 91 fa 01 	lds	r26, 0x01FA
     816:	b0 91 fb 01 	lds	r27, 0x01FB
     81a:	0e 94 30 06 	call	0xc60	; 0xc60 <__umulhisi3>
     81e:	68 87       	std	Y+8, r22	; 0x08
     820:	79 87       	std	Y+9, r23	; 0x09
     822:	8a 87       	std	Y+10, r24	; 0x0a
     824:	9b 87       	std	Y+11, r25	; 0x0b
     826:	60 93 ec 01 	sts	0x01EC, r22
     82a:	70 93 ed 01 	sts	0x01ED, r23
     82e:	80 93 ee 01 	sts	0x01EE, r24
     832:	90 93 ef 01 	sts	0x01EF, r25
						watts = (watts_raw * 39) >> 16;
     836:	a7 e2       	ldi	r26, 0x27	; 39
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	9b 01       	movw	r18, r22
     83c:	ac 01       	movw	r20, r24
     83e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__muluhisi3>
     842:	2c 01       	movw	r4, r24
     844:	66 24       	eor	r6, r6
     846:	77 24       	eor	r7, r7
     848:	40 92 e8 01 	sts	0x01E8, r4
     84c:	50 92 e9 01 	sts	0x01E9, r5
     850:	60 92 ea 01 	sts	0x01EA, r6
     854:	70 92 eb 01 	sts	0x01EB, r7
						centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
     858:	a0 e9       	ldi	r26, 0x90	; 144
     85a:	b6 e0       	ldi	r27, 0x06	; 6
     85c:	a3 01       	movw	r20, r6
     85e:	92 01       	movw	r18, r4
     860:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__muluhisi3>
     864:	9b 01       	movw	r18, r22
     866:	ac 01       	movw	r20, r24
     868:	68 85       	ldd	r22, Y+8	; 0x08
     86a:	79 85       	ldd	r23, Y+9	; 0x09
     86c:	8a 85       	ldd	r24, Y+10	; 0x0a
     86e:	9b 85       	ldd	r25, Y+11	; 0x0b
     870:	0e 94 08 06 	call	0xc10	; 0xc10 <__udivmodsi4>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	ad e3       	ldi	r26, 0x3D	; 61
     87a:	bf e0       	ldi	r27, 0x0F	; 15
     87c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__muluhisi3>
     880:	aa 27       	eor	r26, r26
     882:	bb 27       	eor	r27, r27
     884:	80 93 e4 01 	sts	0x01E4, r24
     888:	90 93 e5 01 	sts	0x01E5, r25
     88c:	a0 93 e6 01 	sts	0x01E6, r26
     890:	b0 93 e7 01 	sts	0x01E7, r27
						sprintf(message, "%2lu.%02lu W  \r\n", watts, centiwatts);
     894:	bf 93       	push	r27
     896:	af 93       	push	r26
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	7f 92       	push	r7
     89e:	6f 92       	push	r6
     8a0:	5f 92       	push	r5
     8a2:	4f 92       	push	r4
     8a4:	a7 ea       	ldi	r26, 0xA7	; 167
     8a6:	b1 e0       	ldi	r27, 0x01	; 1
     8a8:	bf 93       	push	r27
     8aa:	af 93       	push	r26
     8ac:	bf 92       	push	r11
     8ae:	af 92       	push	r10
     8b0:	0e 94 80 07 	call	0xf00	; 0xf00 <sprintf>
						break;
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	0c c0       	rjmp	.+24     	; 0x8d8 <main+0x4d6>
					case 'e':
						_raise_error(ErrorType::OUT_OF_MEMORY);
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
						break;
     8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <main+0x4d6>
					default:
						sprintf(message,"Bad command\r\n");
     8c8:	8e e0       	ldi	r24, 0x0E	; 14
     8ca:	e8 eb       	ldi	r30, 0xB8	; 184
     8cc:	f1 e0       	ldi	r31, 0x01	; 1
     8ce:	d5 01       	movw	r26, r10
     8d0:	01 90       	ld	r0, Z+
     8d2:	0d 92       	st	X+, r0
     8d4:	8a 95       	dec	r24
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <main+0x4ce>
				}
				Serial::transmit(message,strlen(message));
     8d8:	f5 01       	movw	r30, r10
     8da:	01 90       	ld	r0, Z+
     8dc:	00 20       	and	r0, r0
     8de:	e9 f7       	brne	.-6      	; 0x8da <main+0x4d8>
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	df 01       	movw	r26, r30
     8e4:	ac 5f       	subi	r26, 0xFC	; 252
     8e6:	b1 40       	sbci	r27, 0x01	; 1
     8e8:	7d 01       	movw	r14, r26
     8ea:	9a 2f       	mov	r25, r26
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (txden[serial_port] != nullptr) {
     8ec:	d4 01       	movw	r26, r8
     8ee:	ed 91       	ld	r30, X+
     8f0:	fc 91       	ld	r31, X
     8f2:	30 97       	sbiw	r30, 0x00	; 0
     8f4:	51 f0       	breq	.+20     	; 0x90a <__stack+0xb>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     8f6:	a2 81       	ldd	r26, Z+2	; 0x02
     8f8:	b3 81       	ldd	r27, Z+3	; 0x03
     8fa:	2c 91       	ld	r18, X
     8fc:	81 85       	ldd	r24, Z+9	; 0x09
     8fe:	82 2b       	or	r24, r18
     900:	8c 93       	st	X, r24
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (txden[serial_port] != nullptr) {
			txden[serial_port]->set();
			UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     902:	88 e4       	ldi	r24, 0x48	; 72
     904:	e1 ec       	ldi	r30, 0xC1	; 193
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 83       	st	Z, r24
		}
		auto& udr = UDR0;
		if (serial_port == 0) {
			if (char_count > tx[0].size) {
     90a:	d6 01       	movw	r26, r12
     90c:	14 96       	adiw	r26, 0x04	; 4
     90e:	8c 91       	ld	r24, X
     910:	89 17       	cp	r24, r25
     912:	18 f4       	brcc	.+6      	; 0x91a <__stack+0x1b>
				_raise_error(ErrorType::BUFFER_OVERFLOW_TX);
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN6opbots12_raise_errorENS_9ErrorTypeE>
			}
			memcpy(tx[0].buffer, buffer, char_count);
     91a:	a7 01       	movw	r20, r14
     91c:	55 27       	eor	r21, r21
     91e:	b5 01       	movw	r22, r10
     920:	f6 01       	movw	r30, r12
     922:	82 81       	ldd	r24, Z+2	; 0x02
     924:	93 81       	ldd	r25, Z+3	; 0x03
     926:	0e 94 77 07 	call	0xeee	; 0xeee <memcpy>
			tx[0].head = 0;
     92a:	d6 01       	movw	r26, r12
     92c:	15 96       	adiw	r26, 0x05	; 5
     92e:	1c 92       	st	X, r1
     930:	15 97       	sbiw	r26, 0x05	; 5
			tx[0].tail = char_count;
     932:	16 96       	adiw	r26, 0x06	; 6
     934:	ec 92       	st	X, r14
     936:	16 97       	sbiw	r26, 0x06	; 6
			UDR0 = tx[0].buffer[tx[0].head];
     938:	12 96       	adiw	r26, 0x02	; 2
     93a:	ed 91       	ld	r30, X+
     93c:	fc 91       	ld	r31, X
     93e:	13 97       	sbiw	r26, 0x03	; 3
     940:	80 81       	ld	r24, Z
     942:	f1 01       	movw	r30, r2
     944:	80 83       	st	Z, r24
				stage = 0;
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	c0 cd       	rjmp	.-1152   	; 0x4ca <main+0xc8>
			} else {
				if (c == name[stage]) 
     94a:	a1 e0       	ldi	r26, 0x01	; 1
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	ac 0f       	add	r26, r28
     950:	bd 1f       	adc	r27, r29
     952:	a2 0f       	add	r26, r18
     954:	b1 1d       	adc	r27, r1
     956:	8c 91       	ld	r24, X
     958:	8e 13       	cpse	r24, r30
     95a:	b6 cd       	rjmp	.-1172   	; 0x4c8 <main+0xc6>
					stage++;
     95c:	2f 5f       	subi	r18, 0xFF	; 255
     95e:	b5 cd       	rjmp	.-1174   	; 0x4ca <main+0xc8>

00000960 <_GLOBAL__sub_I__Znwj>:
			_delay_us(9);
		pwm0a.clear();
		*/
		//_delay_ms(20);
    }
}
     960:	3f 92       	push	r3
     962:	4f 92       	push	r4
     964:	5f 92       	push	r5
     966:	6f 92       	push	r6
     968:	7f 92       	push	r7
     96a:	8f 92       	push	r8
     96c:	9f 92       	push	r9
     96e:	af 92       	push	r10
     970:	bf 92       	push	r11
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     982:	c7 e9       	ldi	r28, 0x97	; 151
     984:	d2 e0       	ldi	r29, 0x02	; 2
     986:	0f ed       	ldi	r16, 0xDF	; 223
     988:	11 e0       	ldi	r17, 0x01	; 1
     98a:	19 83       	std	Y+1, r17	; 0x01
     98c:	08 83       	st	Y, r16
     98e:	68 94       	set
     990:	99 24       	eor	r9, r9
     992:	95 f8       	bld	r9, 5
     994:	9c 82       	std	Y+4, r9	; 0x04
     996:	1d 82       	std	Y+5, r1	; 0x05
     998:	1e 82       	std	Y+6, r1	; 0x06
		buffer = (T*)malloc(size);
     99a:	80 e2       	ldi	r24, 0x20	; 32
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 4a 06 	call	0xc94	; 0xc94 <malloc>
     9a2:	9b 83       	std	Y+3, r25	; 0x03
     9a4:	8a 83       	std	Y+2, r24	; 0x02
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     9a6:	c0 e9       	ldi	r28, 0x90	; 144
     9a8:	d2 e0       	ldi	r29, 0x02	; 2
     9aa:	19 83       	std	Y+1, r17	; 0x01
     9ac:	08 83       	st	Y, r16
     9ae:	9c 82       	std	Y+4, r9	; 0x04
     9b0:	1d 82       	std	Y+5, r1	; 0x05
     9b2:	1e 82       	std	Y+6, r1	; 0x06
		buffer = (T*)malloc(size);
     9b4:	80 e2       	ldi	r24, 0x20	; 32
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 4a 06 	call	0xc94	; 0xc94 <malloc>
     9bc:	9b 83       	std	Y+3, r25	; 0x03
     9be:	8a 83       	std	Y+2, r24	; 0x02
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     9c0:	e8 e4       	ldi	r30, 0x48	; 72
     9c2:	f2 e0       	ldi	r31, 0x02	; 2
     9c4:	0f 2e       	mov	r0, r31
     9c6:	f5 e2       	ldi	r31, 0x25	; 37
     9c8:	cf 2e       	mov	r12, r31
     9ca:	d1 2c       	mov	r13, r1
     9cc:	f0 2d       	mov	r31, r0
     9ce:	d3 82       	std	Z+3, r13	; 0x03
     9d0:	c2 82       	std	Z+2, r12	; 0x02
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f4 e2       	ldi	r31, 0x24	; 36
     9d6:	ef 2e       	mov	r14, r31
     9d8:	f1 2c       	mov	r15, r1
     9da:	f0 2d       	mov	r31, r0
     9dc:	f5 82       	std	Z+5, r15	; 0x05
     9de:	e4 82       	std	Z+4, r14	; 0x04
     9e0:	03 e2       	ldi	r16, 0x23	; 35
     9e2:	10 e0       	ldi	r17, 0x00	; 0
     9e4:	17 83       	std	Z+7, r17	; 0x07
     9e6:	06 83       	std	Z+6, r16	; 0x06
     9e8:	10 86       	std	Z+8, r1	; 0x08
     9ea:	33 24       	eor	r3, r3
     9ec:	33 94       	inc	r3
     9ee:	31 86       	std	Z+9, r3	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     9f0:	8f ec       	ldi	r24, 0xCF	; 207
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     9f8:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     9fa:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     9fc:	68 e2       	ldi	r22, 0x28	; 40
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	75 87       	std	Z+13, r23	; 0x0d
     a02:	64 87       	std	Z+12, r22	; 0x0c
     a04:	47 e2       	ldi	r20, 0x27	; 39
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	57 87       	std	Z+15, r21	; 0x0f
     a0a:	46 87       	std	Z+14, r20	; 0x0e
     a0c:	26 e2       	ldi	r18, 0x26	; 38
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	31 8b       	std	Z+17, r19	; 0x11
     a12:	20 8b       	std	Z+16, r18	; 0x10
     a14:	0f 2e       	mov	r0, r31
     a16:	f3 e0       	ldi	r31, 0x03	; 3
     a18:	6f 2e       	mov	r6, r31
     a1a:	f0 2d       	mov	r31, r0
     a1c:	62 8a       	std	Z+18, r6	; 0x12
     a1e:	68 94       	set
     a20:	55 24       	eor	r5, r5
     a22:	53 f8       	bld	r5, 3
     a24:	53 8a       	std	Z+19, r5	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     a26:	93 87       	std	Z+11, r25	; 0x0b
     a28:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     a2a:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     a2c:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     a2e:	cb e2       	ldi	r28, 0x2B	; 43
     a30:	d0 e0       	ldi	r29, 0x00	; 0
     a32:	d7 8b       	std	Z+23, r29	; 0x17
     a34:	c6 8b       	std	Z+22, r28	; 0x16
     a36:	aa e2       	ldi	r26, 0x2A	; 42
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	b1 8f       	std	Z+25, r27	; 0x19
     a3c:	a0 8f       	std	Z+24, r26	; 0x18
     a3e:	0f 2e       	mov	r0, r31
     a40:	f9 e2       	ldi	r31, 0x29	; 41
     a42:	af 2e       	mov	r10, r31
     a44:	b1 2c       	mov	r11, r1
     a46:	f0 2d       	mov	r31, r0
     a48:	b3 8e       	std	Z+27, r11	; 0x1b
     a4a:	a2 8e       	std	Z+26, r10	; 0x1a
     a4c:	68 94       	set
     a4e:	44 24       	eor	r4, r4
     a50:	41 f8       	bld	r4, 1
     a52:	44 8e       	std	Z+28, r4	; 0x1c
     a54:	68 94       	set
     a56:	88 24       	eor	r8, r8
     a58:	82 f8       	bld	r8, 2
     a5a:	85 8e       	std	Z+29, r8	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     a5c:	95 8b       	std	Z+21, r25	; 0x15
     a5e:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     a60:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     a62:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     a64:	d1 a3       	std	Z+33, r29	; 0x21
     a66:	c0 a3       	std	Z+32, r28	; 0x20
     a68:	b3 a3       	std	Z+35, r27	; 0x23
     a6a:	a2 a3       	std	Z+34, r26	; 0x22
     a6c:	b5 a2       	std	Z+37, r11	; 0x25
     a6e:	a4 a2       	std	Z+36, r10	; 0x24
     a70:	86 a2       	std	Z+38, r8	; 0x26
     a72:	68 94       	set
     a74:	77 24       	eor	r7, r7
     a76:	74 f8       	bld	r7, 4
     a78:	77 a2       	std	Z+39, r7	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     a7a:	97 8f       	std	Z+31, r25	; 0x1f
     a7c:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     a7e:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     a80:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     a82:	73 a7       	std	Z+43, r23	; 0x2b
     a84:	62 a7       	std	Z+42, r22	; 0x2a
     a86:	55 a7       	std	Z+45, r21	; 0x2d
     a88:	44 a7       	std	Z+44, r20	; 0x2c
     a8a:	37 a7       	std	Z+47, r19	; 0x2f
     a8c:	26 a7       	std	Z+46, r18	; 0x2e
     a8e:	10 aa       	std	Z+48, r1	; 0x30
     a90:	31 aa       	std	Z+49, r3	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     a92:	91 a7       	std	Z+41, r25	; 0x29
     a94:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     a96:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     a98:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     a9a:	75 ab       	std	Z+53, r23	; 0x35
     a9c:	64 ab       	std	Z+52, r22	; 0x34
     a9e:	57 ab       	std	Z+55, r21	; 0x37
     aa0:	46 ab       	std	Z+54, r20	; 0x36
     aa2:	31 af       	std	Z+57, r19	; 0x39
     aa4:	20 af       	std	Z+56, r18	; 0x38
     aa6:	32 ae       	std	Z+58, r3	; 0x3a
     aa8:	43 ae       	std	Z+59, r4	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     aaa:	93 ab       	std	Z+51, r25	; 0x33
     aac:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     aae:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     ab0:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     ab2:	70 93 87 02 	sts	0x0287, r23
     ab6:	60 93 86 02 	sts	0x0286, r22
     aba:	50 93 89 02 	sts	0x0289, r21
     abe:	40 93 88 02 	sts	0x0288, r20
     ac2:	30 93 8b 02 	sts	0x028B, r19
     ac6:	20 93 8a 02 	sts	0x028A, r18
     aca:	40 92 8c 02 	sts	0x028C, r4
     ace:	80 92 8d 02 	sts	0x028D, r8
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     ad2:	95 af       	std	Z+61, r25	; 0x3d
     ad4:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
     ad6:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     ad8:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     ada:	ee e3       	ldi	r30, 0x3E	; 62
     adc:	f2 e0       	ldi	r31, 0x02	; 2
     ade:	d3 83       	std	Z+3, r29	; 0x03
     ae0:	c2 83       	std	Z+2, r28	; 0x02
     ae2:	b5 83       	std	Z+5, r27	; 0x05
     ae4:	a4 83       	std	Z+4, r26	; 0x04
     ae6:	b7 82       	std	Z+7, r11	; 0x07
     ae8:	a6 82       	std	Z+6, r10	; 0x06
     aea:	0f 2e       	mov	r0, r31
     aec:	f7 e0       	ldi	r31, 0x07	; 7
     aee:	4f 2e       	mov	r4, r31
     af0:	f0 2d       	mov	r31, r0
     af2:	40 86       	std	Z+8, r4	; 0x08
     af4:	68 94       	set
     af6:	44 24       	eor	r4, r4
     af8:	47 f8       	bld	r4, 7
     afa:	41 86       	std	Z+9, r4	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     afc:	91 83       	std	Z+1, r25	; 0x01
     afe:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     b00:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     b02:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     b04:	e4 e3       	ldi	r30, 0x34	; 52
     b06:	f2 e0       	ldi	r31, 0x02	; 2
     b08:	d3 82       	std	Z+3, r13	; 0x03
     b0a:	c2 82       	std	Z+2, r12	; 0x02
     b0c:	f5 82       	std	Z+5, r15	; 0x05
     b0e:	e4 82       	std	Z+4, r14	; 0x04
     b10:	17 83       	std	Z+7, r17	; 0x07
     b12:	06 83       	std	Z+6, r16	; 0x06
     b14:	0f 2e       	mov	r0, r31
     b16:	f5 e0       	ldi	r31, 0x05	; 5
     b18:	4f 2e       	mov	r4, r31
     b1a:	f0 2d       	mov	r31, r0
     b1c:	40 86       	std	Z+8, r4	; 0x08
     b1e:	91 86       	std	Z+9, r9	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     b20:	91 83       	std	Z+1, r25	; 0x01
     b22:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     b24:	2d 98       	cbi	0x05, 5	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     b26:	25 9a       	sbi	0x04, 5	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     b28:	ea e2       	ldi	r30, 0x2A	; 42
     b2a:	f2 e0       	ldi	r31, 0x02	; 2
     b2c:	d3 82       	std	Z+3, r13	; 0x03
     b2e:	c2 82       	std	Z+2, r12	; 0x02
     b30:	f5 82       	std	Z+5, r15	; 0x05
     b32:	e4 82       	std	Z+4, r14	; 0x04
     b34:	17 83       	std	Z+7, r17	; 0x07
     b36:	06 83       	std	Z+6, r16	; 0x06
     b38:	80 86       	std	Z+8, r8	; 0x08
     b3a:	71 86       	std	Z+9, r7	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     b40:	2c 98       	cbi	0x05, 4	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     b42:	24 9a       	sbi	0x04, 4	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     b44:	e0 e2       	ldi	r30, 0x20	; 32
     b46:	f2 e0       	ldi	r31, 0x02	; 2
     b48:	d3 82       	std	Z+3, r13	; 0x03
     b4a:	c2 82       	std	Z+2, r12	; 0x02
     b4c:	f5 82       	std	Z+5, r15	; 0x05
     b4e:	e4 82       	std	Z+4, r14	; 0x04
     b50:	17 83       	std	Z+7, r17	; 0x07
     b52:	06 83       	std	Z+6, r16	; 0x06
     b54:	60 86       	std	Z+8, r6	; 0x08
     b56:	51 86       	std	Z+9, r5	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     b5c:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     b5e:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     b60:	e6 e1       	ldi	r30, 0x16	; 22
     b62:	f2 e0       	ldi	r31, 0x02	; 2
     b64:	d3 83       	std	Z+3, r29	; 0x03
     b66:	c2 83       	std	Z+2, r28	; 0x02
     b68:	b5 83       	std	Z+5, r27	; 0x05
     b6a:	a4 83       	std	Z+4, r26	; 0x04
     b6c:	b7 82       	std	Z+7, r11	; 0x07
     b6e:	a6 82       	std	Z+6, r10	; 0x06
     b70:	b6 e0       	ldi	r27, 0x06	; 6
     b72:	b0 87       	std	Z+8, r27	; 0x08
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     b7c:	5e 98       	cbi	0x0b, 6	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     b7e:	56 9a       	sbi	0x0a, 6	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     b80:	ec e0       	ldi	r30, 0x0C	; 12
     b82:	f2 e0       	ldi	r31, 0x02	; 2
     b84:	73 83       	std	Z+3, r23	; 0x03
     b86:	62 83       	std	Z+2, r22	; 0x02
     b88:	55 83       	std	Z+5, r21	; 0x05
     b8a:	44 83       	std	Z+4, r20	; 0x04
     b8c:	37 83       	std	Z+7, r19	; 0x07
     b8e:	26 83       	std	Z+6, r18	; 0x06
     b90:	b0 87       	std	Z+8, r27	; 0x08
     b92:	a1 87       	std	Z+9, r26	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     b94:	87 ed       	ldi	r24, 0xD7	; 215
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	91 83       	std	Z+1, r25	; 0x01
     b9a:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     b9c:	3e 98       	cbi	0x07, 6	; 7
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	bf 90       	pop	r11
     bb0:	af 90       	pop	r10
     bb2:	9f 90       	pop	r9
     bb4:	8f 90       	pop	r8
     bb6:	7f 90       	pop	r7
     bb8:	6f 90       	pop	r6
     bba:	5f 90       	pop	r5
     bbc:	4f 90       	pop	r4
     bbe:	3f 90       	pop	r3
     bc0:	08 95       	ret

00000bc2 <_GLOBAL__sub_D__Znwj>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29

#include "opbots.h"
#include <stdio.h>
using namespace opbots;

Output enable[] = {
     bc6:	ce e8       	ldi	r28, 0x8E	; 142
     bc8:	d2 e0       	ldi	r29, 0x02	; 2
     bca:	2a 97       	sbiw	r28, 0x0a	; 10
     bcc:	e8 81       	ld	r30, Y
     bce:	f9 81       	ldd	r31, Y+1	; 0x01
     bd0:	01 90       	ld	r0, Z+
     bd2:	f0 81       	ld	r31, Z
     bd4:	e0 2d       	mov	r30, r0
     bd6:	ce 01       	movw	r24, r28
     bd8:	09 95       	icall
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	c8 34       	cpi	r28, 0x48	; 72
     bde:	d8 07       	cpc	r29, r24
     be0:	a1 f7       	brne	.-24     	; 0xbca <_GLOBAL__sub_D__Znwj+0x8>
		sei();
	}
};

SimpleBuffer<char> Serial::tx[] = { SimpleBuffer<char>(32) };
SimpleBuffer<char> Serial::rx[] = { SimpleBuffer<char>(32) };
     be2:	e0 91 90 02 	lds	r30, 0x0290
     be6:	f0 91 91 02 	lds	r31, 0x0291
     bea:	01 90       	ld	r0, Z+
     bec:	f0 81       	ld	r31, Z
     bee:	e0 2d       	mov	r30, r0
     bf0:	80 e9       	ldi	r24, 0x90	; 144
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	09 95       	icall
#endif
		sei();
	}
};

SimpleBuffer<char> Serial::tx[] = { SimpleBuffer<char>(32) };
     bf6:	e0 91 97 02 	lds	r30, 0x0297
     bfa:	f0 91 98 02 	lds	r31, 0x0298
     bfe:	01 90       	ld	r0, Z+
     c00:	f0 81       	ld	r31, Z
     c02:	e0 2d       	mov	r30, r0
     c04:	87 e9       	ldi	r24, 0x97	; 151
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	09 95       	icall
			_delay_us(9);
		pwm0a.clear();
		*/
		//_delay_ms(20);
    }
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <__udivmodsi4>:
     c10:	a1 e2       	ldi	r26, 0x21	; 33
     c12:	1a 2e       	mov	r1, r26
     c14:	aa 1b       	sub	r26, r26
     c16:	bb 1b       	sub	r27, r27
     c18:	fd 01       	movw	r30, r26
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__udivmodsi4_ep>

00000c1c <__udivmodsi4_loop>:
     c1c:	aa 1f       	adc	r26, r26
     c1e:	bb 1f       	adc	r27, r27
     c20:	ee 1f       	adc	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	a2 17       	cp	r26, r18
     c26:	b3 07       	cpc	r27, r19
     c28:	e4 07       	cpc	r30, r20
     c2a:	f5 07       	cpc	r31, r21
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <__udivmodsi4_ep>
     c2e:	a2 1b       	sub	r26, r18
     c30:	b3 0b       	sbc	r27, r19
     c32:	e4 0b       	sbc	r30, r20
     c34:	f5 0b       	sbc	r31, r21

00000c36 <__udivmodsi4_ep>:
     c36:	66 1f       	adc	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	88 1f       	adc	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	1a 94       	dec	r1
     c40:	69 f7       	brne	.-38     	; 0xc1c <__udivmodsi4_loop>
     c42:	60 95       	com	r22
     c44:	70 95       	com	r23
     c46:	80 95       	com	r24
     c48:	90 95       	com	r25
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	bd 01       	movw	r22, r26
     c50:	cf 01       	movw	r24, r30
     c52:	08 95       	ret

00000c54 <__tablejump2__>:
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	05 90       	lpm	r0, Z+
     c5a:	f4 91       	lpm	r31, Z
     c5c:	e0 2d       	mov	r30, r0
     c5e:	09 94       	ijmp

00000c60 <__umulhisi3>:
     c60:	a2 9f       	mul	r26, r18
     c62:	b0 01       	movw	r22, r0
     c64:	b3 9f       	mul	r27, r19
     c66:	c0 01       	movw	r24, r0
     c68:	a3 9f       	mul	r26, r19
     c6a:	70 0d       	add	r23, r0
     c6c:	81 1d       	adc	r24, r1
     c6e:	11 24       	eor	r1, r1
     c70:	91 1d       	adc	r25, r1
     c72:	b2 9f       	mul	r27, r18
     c74:	70 0d       	add	r23, r0
     c76:	81 1d       	adc	r24, r1
     c78:	11 24       	eor	r1, r1
     c7a:	91 1d       	adc	r25, r1
     c7c:	08 95       	ret

00000c7e <__muluhisi3>:
     c7e:	0e 94 30 06 	call	0xc60	; 0xc60 <__umulhisi3>
     c82:	a5 9f       	mul	r26, r21
     c84:	90 0d       	add	r25, r0
     c86:	b4 9f       	mul	r27, r20
     c88:	90 0d       	add	r25, r0
     c8a:	a4 9f       	mul	r26, r20
     c8c:	80 0d       	add	r24, r0
     c8e:	91 1d       	adc	r25, r1
     c90:	11 24       	eor	r1, r1
     c92:	08 95       	ret

00000c94 <malloc>:
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	91 05       	cpc	r25, r1
     c9c:	10 f4       	brcc	.+4      	; 0xca2 <malloc+0xe>
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	e0 91 a7 02 	lds	r30, 0x02A7
     ca6:	f0 91 a8 02 	lds	r31, 0x02A8
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	c0 e0       	ldi	r28, 0x00	; 0
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	30 97       	sbiw	r30, 0x00	; 0
     cb4:	11 f1       	breq	.+68     	; 0xcfa <malloc+0x66>
     cb6:	40 81       	ld	r20, Z
     cb8:	51 81       	ldd	r21, Z+1	; 0x01
     cba:	48 17       	cp	r20, r24
     cbc:	59 07       	cpc	r21, r25
     cbe:	c0 f0       	brcs	.+48     	; 0xcf0 <malloc+0x5c>
     cc0:	48 17       	cp	r20, r24
     cc2:	59 07       	cpc	r21, r25
     cc4:	61 f4       	brne	.+24     	; 0xcde <malloc+0x4a>
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	93 81       	ldd	r25, Z+3	; 0x03
     cca:	20 97       	sbiw	r28, 0x00	; 0
     ccc:	19 f0       	breq	.+6      	; 0xcd4 <malloc+0x40>
     cce:	9b 83       	std	Y+3, r25	; 0x03
     cd0:	8a 83       	std	Y+2, r24	; 0x02
     cd2:	2b c0       	rjmp	.+86     	; 0xd2a <malloc+0x96>
     cd4:	90 93 a8 02 	sts	0x02A8, r25
     cd8:	80 93 a7 02 	sts	0x02A7, r24
     cdc:	26 c0       	rjmp	.+76     	; 0xd2a <malloc+0x96>
     cde:	21 15       	cp	r18, r1
     ce0:	31 05       	cpc	r19, r1
     ce2:	19 f0       	breq	.+6      	; 0xcea <malloc+0x56>
     ce4:	42 17       	cp	r20, r18
     ce6:	53 07       	cpc	r21, r19
     ce8:	18 f4       	brcc	.+6      	; 0xcf0 <malloc+0x5c>
     cea:	9a 01       	movw	r18, r20
     cec:	be 01       	movw	r22, r28
     cee:	df 01       	movw	r26, r30
     cf0:	ef 01       	movw	r28, r30
     cf2:	02 80       	ldd	r0, Z+2	; 0x02
     cf4:	f3 81       	ldd	r31, Z+3	; 0x03
     cf6:	e0 2d       	mov	r30, r0
     cf8:	dc cf       	rjmp	.-72     	; 0xcb2 <malloc+0x1e>
     cfa:	21 15       	cp	r18, r1
     cfc:	31 05       	cpc	r19, r1
     cfe:	09 f1       	breq	.+66     	; 0xd42 <malloc+0xae>
     d00:	28 1b       	sub	r18, r24
     d02:	39 0b       	sbc	r19, r25
     d04:	24 30       	cpi	r18, 0x04	; 4
     d06:	31 05       	cpc	r19, r1
     d08:	90 f4       	brcc	.+36     	; 0xd2e <malloc+0x9a>
     d0a:	12 96       	adiw	r26, 0x02	; 2
     d0c:	8d 91       	ld	r24, X+
     d0e:	9c 91       	ld	r25, X
     d10:	13 97       	sbiw	r26, 0x03	; 3
     d12:	61 15       	cp	r22, r1
     d14:	71 05       	cpc	r23, r1
     d16:	21 f0       	breq	.+8      	; 0xd20 <malloc+0x8c>
     d18:	fb 01       	movw	r30, r22
     d1a:	93 83       	std	Z+3, r25	; 0x03
     d1c:	82 83       	std	Z+2, r24	; 0x02
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <malloc+0x94>
     d20:	90 93 a8 02 	sts	0x02A8, r25
     d24:	80 93 a7 02 	sts	0x02A7, r24
     d28:	fd 01       	movw	r30, r26
     d2a:	32 96       	adiw	r30, 0x02	; 2
     d2c:	44 c0       	rjmp	.+136    	; 0xdb6 <malloc+0x122>
     d2e:	fd 01       	movw	r30, r26
     d30:	e2 0f       	add	r30, r18
     d32:	f3 1f       	adc	r31, r19
     d34:	81 93       	st	Z+, r24
     d36:	91 93       	st	Z+, r25
     d38:	22 50       	subi	r18, 0x02	; 2
     d3a:	31 09       	sbc	r19, r1
     d3c:	2d 93       	st	X+, r18
     d3e:	3c 93       	st	X, r19
     d40:	3a c0       	rjmp	.+116    	; 0xdb6 <malloc+0x122>
     d42:	20 91 a5 02 	lds	r18, 0x02A5
     d46:	30 91 a6 02 	lds	r19, 0x02A6
     d4a:	23 2b       	or	r18, r19
     d4c:	41 f4       	brne	.+16     	; 0xd5e <malloc+0xca>
     d4e:	20 91 02 01 	lds	r18, 0x0102
     d52:	30 91 03 01 	lds	r19, 0x0103
     d56:	30 93 a6 02 	sts	0x02A6, r19
     d5a:	20 93 a5 02 	sts	0x02A5, r18
     d5e:	20 91 00 01 	lds	r18, 0x0100
     d62:	30 91 01 01 	lds	r19, 0x0101
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	41 f4       	brne	.+16     	; 0xd7c <malloc+0xe8>
     d6c:	2d b7       	in	r18, 0x3d	; 61
     d6e:	3e b7       	in	r19, 0x3e	; 62
     d70:	40 91 04 01 	lds	r20, 0x0104
     d74:	50 91 05 01 	lds	r21, 0x0105
     d78:	24 1b       	sub	r18, r20
     d7a:	35 0b       	sbc	r19, r21
     d7c:	e0 91 a5 02 	lds	r30, 0x02A5
     d80:	f0 91 a6 02 	lds	r31, 0x02A6
     d84:	e2 17       	cp	r30, r18
     d86:	f3 07       	cpc	r31, r19
     d88:	a0 f4       	brcc	.+40     	; 0xdb2 <malloc+0x11e>
     d8a:	2e 1b       	sub	r18, r30
     d8c:	3f 0b       	sbc	r19, r31
     d8e:	28 17       	cp	r18, r24
     d90:	39 07       	cpc	r19, r25
     d92:	78 f0       	brcs	.+30     	; 0xdb2 <malloc+0x11e>
     d94:	ac 01       	movw	r20, r24
     d96:	4e 5f       	subi	r20, 0xFE	; 254
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	24 17       	cp	r18, r20
     d9c:	35 07       	cpc	r19, r21
     d9e:	48 f0       	brcs	.+18     	; 0xdb2 <malloc+0x11e>
     da0:	4e 0f       	add	r20, r30
     da2:	5f 1f       	adc	r21, r31
     da4:	50 93 a6 02 	sts	0x02A6, r21
     da8:	40 93 a5 02 	sts	0x02A5, r20
     dac:	81 93       	st	Z+, r24
     dae:	91 93       	st	Z+, r25
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <malloc+0x122>
     db2:	e0 e0       	ldi	r30, 0x00	; 0
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	cf 01       	movw	r24, r30
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <free>:
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	09 f4       	brne	.+2      	; 0xdcc <free+0xe>
     dca:	8c c0       	rjmp	.+280    	; 0xee4 <free+0x126>
     dcc:	fc 01       	movw	r30, r24
     dce:	32 97       	sbiw	r30, 0x02	; 2
     dd0:	13 82       	std	Z+3, r1	; 0x03
     dd2:	12 82       	std	Z+2, r1	; 0x02
     dd4:	00 91 a7 02 	lds	r16, 0x02A7
     dd8:	10 91 a8 02 	lds	r17, 0x02A8
     ddc:	01 15       	cp	r16, r1
     dde:	11 05       	cpc	r17, r1
     de0:	81 f4       	brne	.+32     	; 0xe02 <free+0x44>
     de2:	20 81       	ld	r18, Z
     de4:	31 81       	ldd	r19, Z+1	; 0x01
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	20 91 a5 02 	lds	r18, 0x02A5
     dee:	30 91 a6 02 	lds	r19, 0x02A6
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	79 f5       	brne	.+94     	; 0xe56 <free+0x98>
     df8:	f0 93 a6 02 	sts	0x02A6, r31
     dfc:	e0 93 a5 02 	sts	0x02A5, r30
     e00:	71 c0       	rjmp	.+226    	; 0xee4 <free+0x126>
     e02:	d8 01       	movw	r26, r16
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	ae 17       	cp	r26, r30
     e0a:	bf 07       	cpc	r27, r31
     e0c:	50 f4       	brcc	.+20     	; 0xe22 <free+0x64>
     e0e:	12 96       	adiw	r26, 0x02	; 2
     e10:	2d 91       	ld	r18, X+
     e12:	3c 91       	ld	r19, X
     e14:	13 97       	sbiw	r26, 0x03	; 3
     e16:	ad 01       	movw	r20, r26
     e18:	21 15       	cp	r18, r1
     e1a:	31 05       	cpc	r19, r1
     e1c:	09 f1       	breq	.+66     	; 0xe60 <free+0xa2>
     e1e:	d9 01       	movw	r26, r18
     e20:	f3 cf       	rjmp	.-26     	; 0xe08 <free+0x4a>
     e22:	9d 01       	movw	r18, r26
     e24:	da 01       	movw	r26, r20
     e26:	33 83       	std	Z+3, r19	; 0x03
     e28:	22 83       	std	Z+2, r18	; 0x02
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	86 0f       	add	r24, r22
     e30:	97 1f       	adc	r25, r23
     e32:	82 17       	cp	r24, r18
     e34:	93 07       	cpc	r25, r19
     e36:	69 f4       	brne	.+26     	; 0xe52 <free+0x94>
     e38:	ec 01       	movw	r28, r24
     e3a:	28 81       	ld	r18, Y
     e3c:	39 81       	ldd	r19, Y+1	; 0x01
     e3e:	26 0f       	add	r18, r22
     e40:	37 1f       	adc	r19, r23
     e42:	2e 5f       	subi	r18, 0xFE	; 254
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	31 83       	std	Z+1, r19	; 0x01
     e48:	20 83       	st	Z, r18
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
     e4e:	93 83       	std	Z+3, r25	; 0x03
     e50:	82 83       	std	Z+2, r24	; 0x02
     e52:	45 2b       	or	r20, r21
     e54:	29 f4       	brne	.+10     	; 0xe60 <free+0xa2>
     e56:	f0 93 a8 02 	sts	0x02A8, r31
     e5a:	e0 93 a7 02 	sts	0x02A7, r30
     e5e:	42 c0       	rjmp	.+132    	; 0xee4 <free+0x126>
     e60:	13 96       	adiw	r26, 0x03	; 3
     e62:	fc 93       	st	X, r31
     e64:	ee 93       	st	-X, r30
     e66:	12 97       	sbiw	r26, 0x02	; 2
     e68:	ed 01       	movw	r28, r26
     e6a:	49 91       	ld	r20, Y+
     e6c:	59 91       	ld	r21, Y+
     e6e:	9e 01       	movw	r18, r28
     e70:	24 0f       	add	r18, r20
     e72:	35 1f       	adc	r19, r21
     e74:	e2 17       	cp	r30, r18
     e76:	f3 07       	cpc	r31, r19
     e78:	71 f4       	brne	.+28     	; 0xe96 <free+0xd8>
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	84 0f       	add	r24, r20
     e80:	95 1f       	adc	r25, r21
     e82:	02 96       	adiw	r24, 0x02	; 2
     e84:	11 96       	adiw	r26, 0x01	; 1
     e86:	9c 93       	st	X, r25
     e88:	8e 93       	st	-X, r24
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	13 96       	adiw	r26, 0x03	; 3
     e90:	9c 93       	st	X, r25
     e92:	8e 93       	st	-X, r24
     e94:	12 97       	sbiw	r26, 0x02	; 2
     e96:	e0 e0       	ldi	r30, 0x00	; 0
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	d8 01       	movw	r26, r16
     e9c:	12 96       	adiw	r26, 0x02	; 2
     e9e:	8d 91       	ld	r24, X+
     ea0:	9c 91       	ld	r25, X
     ea2:	13 97       	sbiw	r26, 0x03	; 3
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	19 f0       	breq	.+6      	; 0xeae <free+0xf0>
     ea8:	f8 01       	movw	r30, r16
     eaa:	8c 01       	movw	r16, r24
     eac:	f6 cf       	rjmp	.-20     	; 0xe9a <free+0xdc>
     eae:	8d 91       	ld	r24, X+
     eb0:	9c 91       	ld	r25, X
     eb2:	98 01       	movw	r18, r16
     eb4:	2e 5f       	subi	r18, 0xFE	; 254
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	20 91 a5 02 	lds	r18, 0x02A5
     ec0:	30 91 a6 02 	lds	r19, 0x02A6
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	69 f4       	brne	.+26     	; 0xee4 <free+0x126>
     eca:	30 97       	sbiw	r30, 0x00	; 0
     ecc:	29 f4       	brne	.+10     	; 0xed8 <free+0x11a>
     ece:	10 92 a8 02 	sts	0x02A8, r1
     ed2:	10 92 a7 02 	sts	0x02A7, r1
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <free+0x11e>
     ed8:	13 82       	std	Z+3, r1	; 0x03
     eda:	12 82       	std	Z+2, r1	; 0x02
     edc:	10 93 a6 02 	sts	0x02A6, r17
     ee0:	00 93 a5 02 	sts	0x02A5, r16
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <memcpy>:
     eee:	fb 01       	movw	r30, r22
     ef0:	dc 01       	movw	r26, r24
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <memcpy+0xa>
     ef4:	01 90       	ld	r0, Z+
     ef6:	0d 92       	st	X+, r0
     ef8:	41 50       	subi	r20, 0x01	; 1
     efa:	50 40       	sbci	r21, 0x00	; 0
     efc:	d8 f7       	brcc	.-10     	; 0xef4 <memcpy+0x6>
     efe:	08 95       	ret

00000f00 <sprintf>:
     f00:	ae e0       	ldi	r26, 0x0E	; 14
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e6 e8       	ldi	r30, 0x86	; 134
     f06:	f7 e0       	ldi	r31, 0x07	; 7
     f08:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__prologue_saves__+0x1c>
     f0c:	0d 89       	ldd	r16, Y+21	; 0x15
     f0e:	1e 89       	ldd	r17, Y+22	; 0x16
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	8c 83       	std	Y+4, r24	; 0x04
     f14:	1a 83       	std	Y+2, r17	; 0x02
     f16:	09 83       	std	Y+1, r16	; 0x01
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9f e7       	ldi	r25, 0x7F	; 127
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
     f20:	ae 01       	movw	r20, r28
     f22:	47 5e       	subi	r20, 0xE7	; 231
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
     f26:	6f 89       	ldd	r22, Y+23	; 0x17
     f28:	78 8d       	ldd	r23, Y+24	; 0x18
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	0e 94 a3 07 	call	0xf46	; 0xf46 <vfprintf>
     f32:	2f 81       	ldd	r18, Y+7	; 0x07
     f34:	38 85       	ldd	r19, Y+8	; 0x08
     f36:	f8 01       	movw	r30, r16
     f38:	e2 0f       	add	r30, r18
     f3a:	f3 1f       	adc	r31, r19
     f3c:	10 82       	st	Z, r1
     f3e:	2e 96       	adiw	r28, 0x0e	; 14
     f40:	e4 e0       	ldi	r30, 0x04	; 4
     f42:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__epilogue_restores__+0x1c>

00000f46 <vfprintf>:
     f46:	ac e0       	ldi	r26, 0x0C	; 12
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e9 ea       	ldi	r30, 0xA9	; 169
     f4c:	f7 e0       	ldi	r31, 0x07	; 7
     f4e:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__prologue_saves__>
     f52:	7c 01       	movw	r14, r24
     f54:	6b 01       	movw	r12, r22
     f56:	8a 01       	movw	r16, r20
     f58:	fc 01       	movw	r30, r24
     f5a:	17 82       	std	Z+7, r1	; 0x07
     f5c:	16 82       	std	Z+6, r1	; 0x06
     f5e:	83 81       	ldd	r24, Z+3	; 0x03
     f60:	81 ff       	sbrs	r24, 1
     f62:	bd c1       	rjmp	.+890    	; 0x12de <vfprintf+0x398>
     f64:	ce 01       	movw	r24, r28
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	4c 01       	movw	r8, r24
     f6a:	f7 01       	movw	r30, r14
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	f6 01       	movw	r30, r12
     f70:	93 fd       	sbrc	r25, 3
     f72:	85 91       	lpm	r24, Z+
     f74:	93 ff       	sbrs	r25, 3
     f76:	81 91       	ld	r24, Z+
     f78:	6f 01       	movw	r12, r30
     f7a:	88 23       	and	r24, r24
     f7c:	09 f4       	brne	.+2      	; 0xf80 <vfprintf+0x3a>
     f7e:	ab c1       	rjmp	.+854    	; 0x12d6 <vfprintf+0x390>
     f80:	85 32       	cpi	r24, 0x25	; 37
     f82:	39 f4       	brne	.+14     	; 0xf92 <vfprintf+0x4c>
     f84:	93 fd       	sbrc	r25, 3
     f86:	85 91       	lpm	r24, Z+
     f88:	93 ff       	sbrs	r25, 3
     f8a:	81 91       	ld	r24, Z+
     f8c:	6f 01       	movw	r12, r30
     f8e:	85 32       	cpi	r24, 0x25	; 37
     f90:	29 f4       	brne	.+10     	; 0xf9c <vfprintf+0x56>
     f92:	b7 01       	movw	r22, r14
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
     f9a:	e7 cf       	rjmp	.-50     	; 0xf6a <vfprintf+0x24>
     f9c:	51 2c       	mov	r5, r1
     f9e:	31 2c       	mov	r3, r1
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	20 32       	cpi	r18, 0x20	; 32
     fa4:	a0 f4       	brcc	.+40     	; 0xfce <vfprintf+0x88>
     fa6:	8b 32       	cpi	r24, 0x2B	; 43
     fa8:	69 f0       	breq	.+26     	; 0xfc4 <vfprintf+0x7e>
     faa:	30 f4       	brcc	.+12     	; 0xfb8 <vfprintf+0x72>
     fac:	80 32       	cpi	r24, 0x20	; 32
     fae:	59 f0       	breq	.+22     	; 0xfc6 <vfprintf+0x80>
     fb0:	83 32       	cpi	r24, 0x23	; 35
     fb2:	69 f4       	brne	.+26     	; 0xfce <vfprintf+0x88>
     fb4:	20 61       	ori	r18, 0x10	; 16
     fb6:	2c c0       	rjmp	.+88     	; 0x1010 <vfprintf+0xca>
     fb8:	8d 32       	cpi	r24, 0x2D	; 45
     fba:	39 f0       	breq	.+14     	; 0xfca <vfprintf+0x84>
     fbc:	80 33       	cpi	r24, 0x30	; 48
     fbe:	39 f4       	brne	.+14     	; 0xfce <vfprintf+0x88>
     fc0:	21 60       	ori	r18, 0x01	; 1
     fc2:	26 c0       	rjmp	.+76     	; 0x1010 <vfprintf+0xca>
     fc4:	22 60       	ori	r18, 0x02	; 2
     fc6:	24 60       	ori	r18, 0x04	; 4
     fc8:	23 c0       	rjmp	.+70     	; 0x1010 <vfprintf+0xca>
     fca:	28 60       	ori	r18, 0x08	; 8
     fcc:	21 c0       	rjmp	.+66     	; 0x1010 <vfprintf+0xca>
     fce:	27 fd       	sbrc	r18, 7
     fd0:	27 c0       	rjmp	.+78     	; 0x1020 <vfprintf+0xda>
     fd2:	30 ed       	ldi	r19, 0xD0	; 208
     fd4:	38 0f       	add	r19, r24
     fd6:	3a 30       	cpi	r19, 0x0A	; 10
     fd8:	78 f4       	brcc	.+30     	; 0xff8 <vfprintf+0xb2>
     fda:	26 ff       	sbrs	r18, 6
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <vfprintf+0xa4>
     fde:	fa e0       	ldi	r31, 0x0A	; 10
     fe0:	5f 9e       	mul	r5, r31
     fe2:	30 0d       	add	r19, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	53 2e       	mov	r5, r19
     fe8:	13 c0       	rjmp	.+38     	; 0x1010 <vfprintf+0xca>
     fea:	8a e0       	ldi	r24, 0x0A	; 10
     fec:	38 9e       	mul	r3, r24
     fee:	30 0d       	add	r19, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	33 2e       	mov	r3, r19
     ff4:	20 62       	ori	r18, 0x20	; 32
     ff6:	0c c0       	rjmp	.+24     	; 0x1010 <vfprintf+0xca>
     ff8:	8e 32       	cpi	r24, 0x2E	; 46
     ffa:	21 f4       	brne	.+8      	; 0x1004 <vfprintf+0xbe>
     ffc:	26 fd       	sbrc	r18, 6
     ffe:	6b c1       	rjmp	.+726    	; 0x12d6 <vfprintf+0x390>
    1000:	20 64       	ori	r18, 0x40	; 64
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <vfprintf+0xca>
    1004:	8c 36       	cpi	r24, 0x6C	; 108
    1006:	11 f4       	brne	.+4      	; 0x100c <vfprintf+0xc6>
    1008:	20 68       	ori	r18, 0x80	; 128
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vfprintf+0xca>
    100c:	88 36       	cpi	r24, 0x68	; 104
    100e:	41 f4       	brne	.+16     	; 0x1020 <vfprintf+0xda>
    1010:	f6 01       	movw	r30, r12
    1012:	93 fd       	sbrc	r25, 3
    1014:	85 91       	lpm	r24, Z+
    1016:	93 ff       	sbrs	r25, 3
    1018:	81 91       	ld	r24, Z+
    101a:	6f 01       	movw	r12, r30
    101c:	81 11       	cpse	r24, r1
    101e:	c1 cf       	rjmp	.-126    	; 0xfa2 <vfprintf+0x5c>
    1020:	98 2f       	mov	r25, r24
    1022:	9f 7d       	andi	r25, 0xDF	; 223
    1024:	95 54       	subi	r25, 0x45	; 69
    1026:	93 30       	cpi	r25, 0x03	; 3
    1028:	28 f4       	brcc	.+10     	; 0x1034 <vfprintf+0xee>
    102a:	0c 5f       	subi	r16, 0xFC	; 252
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
    102e:	ff e3       	ldi	r31, 0x3F	; 63
    1030:	f9 83       	std	Y+1, r31	; 0x01
    1032:	0d c0       	rjmp	.+26     	; 0x104e <vfprintf+0x108>
    1034:	83 36       	cpi	r24, 0x63	; 99
    1036:	31 f0       	breq	.+12     	; 0x1044 <vfprintf+0xfe>
    1038:	83 37       	cpi	r24, 0x73	; 115
    103a:	71 f0       	breq	.+28     	; 0x1058 <vfprintf+0x112>
    103c:	83 35       	cpi	r24, 0x53	; 83
    103e:	09 f0       	breq	.+2      	; 0x1042 <vfprintf+0xfc>
    1040:	5b c0       	rjmp	.+182    	; 0x10f8 <vfprintf+0x1b2>
    1042:	22 c0       	rjmp	.+68     	; 0x1088 <vfprintf+0x142>
    1044:	f8 01       	movw	r30, r16
    1046:	80 81       	ld	r24, Z
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	0e 5f       	subi	r16, 0xFE	; 254
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	44 24       	eor	r4, r4
    1050:	43 94       	inc	r4
    1052:	51 2c       	mov	r5, r1
    1054:	54 01       	movw	r10, r8
    1056:	15 c0       	rjmp	.+42     	; 0x1082 <vfprintf+0x13c>
    1058:	38 01       	movw	r6, r16
    105a:	f2 e0       	ldi	r31, 0x02	; 2
    105c:	6f 0e       	add	r6, r31
    105e:	71 1c       	adc	r7, r1
    1060:	f8 01       	movw	r30, r16
    1062:	a0 80       	ld	r10, Z
    1064:	b1 80       	ldd	r11, Z+1	; 0x01
    1066:	26 ff       	sbrs	r18, 6
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <vfprintf+0x12a>
    106a:	65 2d       	mov	r22, r5
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <vfprintf+0x12e>
    1070:	6f ef       	ldi	r22, 0xFF	; 255
    1072:	7f ef       	ldi	r23, 0xFF	; 255
    1074:	c5 01       	movw	r24, r10
    1076:	2c 87       	std	Y+12, r18	; 0x0c
    1078:	0e 94 80 09 	call	0x1300	; 0x1300 <strnlen>
    107c:	2c 01       	movw	r4, r24
    107e:	83 01       	movw	r16, r6
    1080:	2c 85       	ldd	r18, Y+12	; 0x0c
    1082:	2f 77       	andi	r18, 0x7F	; 127
    1084:	22 2e       	mov	r2, r18
    1086:	17 c0       	rjmp	.+46     	; 0x10b6 <vfprintf+0x170>
    1088:	38 01       	movw	r6, r16
    108a:	f2 e0       	ldi	r31, 0x02	; 2
    108c:	6f 0e       	add	r6, r31
    108e:	71 1c       	adc	r7, r1
    1090:	f8 01       	movw	r30, r16
    1092:	a0 80       	ld	r10, Z
    1094:	b1 80       	ldd	r11, Z+1	; 0x01
    1096:	26 ff       	sbrs	r18, 6
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vfprintf+0x15a>
    109a:	65 2d       	mov	r22, r5
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x15e>
    10a0:	6f ef       	ldi	r22, 0xFF	; 255
    10a2:	7f ef       	ldi	r23, 0xFF	; 255
    10a4:	c5 01       	movw	r24, r10
    10a6:	2c 87       	std	Y+12, r18	; 0x0c
    10a8:	0e 94 75 09 	call	0x12ea	; 0x12ea <strnlen_P>
    10ac:	2c 01       	movw	r4, r24
    10ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b0:	20 68       	ori	r18, 0x80	; 128
    10b2:	22 2e       	mov	r2, r18
    10b4:	83 01       	movw	r16, r6
    10b6:	23 fc       	sbrc	r2, 3
    10b8:	1b c0       	rjmp	.+54     	; 0x10f0 <vfprintf+0x1aa>
    10ba:	83 2d       	mov	r24, r3
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	48 16       	cp	r4, r24
    10c0:	59 06       	cpc	r5, r25
    10c2:	b0 f4       	brcc	.+44     	; 0x10f0 <vfprintf+0x1aa>
    10c4:	b7 01       	movw	r22, r14
    10c6:	80 e2       	ldi	r24, 0x20	; 32
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    10ce:	3a 94       	dec	r3
    10d0:	f4 cf       	rjmp	.-24     	; 0x10ba <vfprintf+0x174>
    10d2:	f5 01       	movw	r30, r10
    10d4:	27 fc       	sbrc	r2, 7
    10d6:	85 91       	lpm	r24, Z+
    10d8:	27 fe       	sbrs	r2, 7
    10da:	81 91       	ld	r24, Z+
    10dc:	5f 01       	movw	r10, r30
    10de:	b7 01       	movw	r22, r14
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    10e6:	31 10       	cpse	r3, r1
    10e8:	3a 94       	dec	r3
    10ea:	f1 e0       	ldi	r31, 0x01	; 1
    10ec:	4f 1a       	sub	r4, r31
    10ee:	51 08       	sbc	r5, r1
    10f0:	41 14       	cp	r4, r1
    10f2:	51 04       	cpc	r5, r1
    10f4:	71 f7       	brne	.-36     	; 0x10d2 <vfprintf+0x18c>
    10f6:	e5 c0       	rjmp	.+458    	; 0x12c2 <vfprintf+0x37c>
    10f8:	84 36       	cpi	r24, 0x64	; 100
    10fa:	11 f0       	breq	.+4      	; 0x1100 <vfprintf+0x1ba>
    10fc:	89 36       	cpi	r24, 0x69	; 105
    10fe:	39 f5       	brne	.+78     	; 0x114e <vfprintf+0x208>
    1100:	f8 01       	movw	r30, r16
    1102:	27 ff       	sbrs	r18, 7
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <vfprintf+0x1ce>
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	93 81       	ldd	r25, Z+3	; 0x03
    110e:	0c 5f       	subi	r16, 0xFC	; 252
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <vfprintf+0x1de>
    1114:	60 81       	ld	r22, Z
    1116:	71 81       	ldd	r23, Z+1	; 0x01
    1118:	07 2e       	mov	r0, r23
    111a:	00 0c       	add	r0, r0
    111c:	88 0b       	sbc	r24, r24
    111e:	99 0b       	sbc	r25, r25
    1120:	0e 5f       	subi	r16, 0xFE	; 254
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	2f 76       	andi	r18, 0x6F	; 111
    1126:	72 2e       	mov	r7, r18
    1128:	97 ff       	sbrs	r25, 7
    112a:	09 c0       	rjmp	.+18     	; 0x113e <vfprintf+0x1f8>
    112c:	90 95       	com	r25
    112e:	80 95       	com	r24
    1130:	70 95       	com	r23
    1132:	61 95       	neg	r22
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	8f 4f       	sbci	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	20 68       	ori	r18, 0x80	; 128
    113c:	72 2e       	mov	r7, r18
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	a4 01       	movw	r20, r8
    1144:	0e 94 c3 09 	call	0x1386	; 0x1386 <__ultoa_invert>
    1148:	a8 2e       	mov	r10, r24
    114a:	a8 18       	sub	r10, r8
    114c:	44 c0       	rjmp	.+136    	; 0x11d6 <vfprintf+0x290>
    114e:	85 37       	cpi	r24, 0x75	; 117
    1150:	29 f4       	brne	.+10     	; 0x115c <vfprintf+0x216>
    1152:	2f 7e       	andi	r18, 0xEF	; 239
    1154:	b2 2e       	mov	r11, r18
    1156:	2a e0       	ldi	r18, 0x0A	; 10
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	25 c0       	rjmp	.+74     	; 0x11a6 <vfprintf+0x260>
    115c:	f2 2f       	mov	r31, r18
    115e:	f9 7f       	andi	r31, 0xF9	; 249
    1160:	bf 2e       	mov	r11, r31
    1162:	8f 36       	cpi	r24, 0x6F	; 111
    1164:	c1 f0       	breq	.+48     	; 0x1196 <vfprintf+0x250>
    1166:	18 f4       	brcc	.+6      	; 0x116e <vfprintf+0x228>
    1168:	88 35       	cpi	r24, 0x58	; 88
    116a:	79 f0       	breq	.+30     	; 0x118a <vfprintf+0x244>
    116c:	b4 c0       	rjmp	.+360    	; 0x12d6 <vfprintf+0x390>
    116e:	80 37       	cpi	r24, 0x70	; 112
    1170:	19 f0       	breq	.+6      	; 0x1178 <vfprintf+0x232>
    1172:	88 37       	cpi	r24, 0x78	; 120
    1174:	21 f0       	breq	.+8      	; 0x117e <vfprintf+0x238>
    1176:	af c0       	rjmp	.+350    	; 0x12d6 <vfprintf+0x390>
    1178:	2f 2f       	mov	r18, r31
    117a:	20 61       	ori	r18, 0x10	; 16
    117c:	b2 2e       	mov	r11, r18
    117e:	b4 fe       	sbrs	r11, 4
    1180:	0d c0       	rjmp	.+26     	; 0x119c <vfprintf+0x256>
    1182:	8b 2d       	mov	r24, r11
    1184:	84 60       	ori	r24, 0x04	; 4
    1186:	b8 2e       	mov	r11, r24
    1188:	09 c0       	rjmp	.+18     	; 0x119c <vfprintf+0x256>
    118a:	24 ff       	sbrs	r18, 4
    118c:	0a c0       	rjmp	.+20     	; 0x11a2 <vfprintf+0x25c>
    118e:	9f 2f       	mov	r25, r31
    1190:	96 60       	ori	r25, 0x06	; 6
    1192:	b9 2e       	mov	r11, r25
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <vfprintf+0x25c>
    1196:	28 e0       	ldi	r18, 0x08	; 8
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <vfprintf+0x260>
    119c:	20 e1       	ldi	r18, 0x10	; 16
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <vfprintf+0x260>
    11a2:	20 e1       	ldi	r18, 0x10	; 16
    11a4:	32 e0       	ldi	r19, 0x02	; 2
    11a6:	f8 01       	movw	r30, r16
    11a8:	b7 fe       	sbrs	r11, 7
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <vfprintf+0x274>
    11ac:	60 81       	ld	r22, Z
    11ae:	71 81       	ldd	r23, Z+1	; 0x01
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	0c 5f       	subi	r16, 0xFC	; 252
    11b6:	1f 4f       	sbci	r17, 0xFF	; 255
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0x280>
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 5f       	subi	r16, 0xFE	; 254
    11c4:	1f 4f       	sbci	r17, 0xFF	; 255
    11c6:	a4 01       	movw	r20, r8
    11c8:	0e 94 c3 09 	call	0x1386	; 0x1386 <__ultoa_invert>
    11cc:	a8 2e       	mov	r10, r24
    11ce:	a8 18       	sub	r10, r8
    11d0:	fb 2d       	mov	r31, r11
    11d2:	ff 77       	andi	r31, 0x7F	; 127
    11d4:	7f 2e       	mov	r7, r31
    11d6:	76 fe       	sbrs	r7, 6
    11d8:	0b c0       	rjmp	.+22     	; 0x11f0 <vfprintf+0x2aa>
    11da:	37 2d       	mov	r19, r7
    11dc:	3e 7f       	andi	r19, 0xFE	; 254
    11de:	a5 14       	cp	r10, r5
    11e0:	50 f4       	brcc	.+20     	; 0x11f6 <vfprintf+0x2b0>
    11e2:	74 fe       	sbrs	r7, 4
    11e4:	0a c0       	rjmp	.+20     	; 0x11fa <vfprintf+0x2b4>
    11e6:	72 fc       	sbrc	r7, 2
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <vfprintf+0x2b4>
    11ea:	37 2d       	mov	r19, r7
    11ec:	3e 7e       	andi	r19, 0xEE	; 238
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <vfprintf+0x2b4>
    11f0:	ba 2c       	mov	r11, r10
    11f2:	37 2d       	mov	r19, r7
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <vfprintf+0x2b6>
    11f6:	ba 2c       	mov	r11, r10
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <vfprintf+0x2b6>
    11fa:	b5 2c       	mov	r11, r5
    11fc:	34 ff       	sbrs	r19, 4
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <vfprintf+0x2d4>
    1200:	fe 01       	movw	r30, r28
    1202:	ea 0d       	add	r30, r10
    1204:	f1 1d       	adc	r31, r1
    1206:	80 81       	ld	r24, Z
    1208:	80 33       	cpi	r24, 0x30	; 48
    120a:	11 f4       	brne	.+4      	; 0x1210 <vfprintf+0x2ca>
    120c:	39 7e       	andi	r19, 0xE9	; 233
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <vfprintf+0x2dc>
    1210:	32 ff       	sbrs	r19, 2
    1212:	06 c0       	rjmp	.+12     	; 0x1220 <vfprintf+0x2da>
    1214:	b3 94       	inc	r11
    1216:	b3 94       	inc	r11
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <vfprintf+0x2dc>
    121a:	83 2f       	mov	r24, r19
    121c:	86 78       	andi	r24, 0x86	; 134
    121e:	09 f0       	breq	.+2      	; 0x1222 <vfprintf+0x2dc>
    1220:	b3 94       	inc	r11
    1222:	33 fd       	sbrc	r19, 3
    1224:	13 c0       	rjmp	.+38     	; 0x124c <vfprintf+0x306>
    1226:	30 ff       	sbrs	r19, 0
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <vfprintf+0x2f0>
    122a:	5a 2c       	mov	r5, r10
    122c:	b3 14       	cp	r11, r3
    122e:	18 f4       	brcc	.+6      	; 0x1236 <vfprintf+0x2f0>
    1230:	53 0c       	add	r5, r3
    1232:	5b 18       	sub	r5, r11
    1234:	b3 2c       	mov	r11, r3
    1236:	b3 14       	cp	r11, r3
    1238:	68 f4       	brcc	.+26     	; 0x1254 <vfprintf+0x30e>
    123a:	b7 01       	movw	r22, r14
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	3c 87       	std	Y+12, r19	; 0x0c
    1242:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    1246:	b3 94       	inc	r11
    1248:	3c 85       	ldd	r19, Y+12	; 0x0c
    124a:	f5 cf       	rjmp	.-22     	; 0x1236 <vfprintf+0x2f0>
    124c:	b3 14       	cp	r11, r3
    124e:	10 f4       	brcc	.+4      	; 0x1254 <vfprintf+0x30e>
    1250:	3b 18       	sub	r3, r11
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <vfprintf+0x310>
    1254:	31 2c       	mov	r3, r1
    1256:	34 ff       	sbrs	r19, 4
    1258:	12 c0       	rjmp	.+36     	; 0x127e <vfprintf+0x338>
    125a:	b7 01       	movw	r22, r14
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	3c 87       	std	Y+12, r19	; 0x0c
    1262:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    1266:	3c 85       	ldd	r19, Y+12	; 0x0c
    1268:	32 ff       	sbrs	r19, 2
    126a:	17 c0       	rjmp	.+46     	; 0x129a <vfprintf+0x354>
    126c:	31 fd       	sbrc	r19, 1
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <vfprintf+0x330>
    1270:	88 e7       	ldi	r24, 0x78	; 120
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <vfprintf+0x334>
    1276:	88 e5       	ldi	r24, 0x58	; 88
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	b7 01       	movw	r22, r14
    127c:	0c c0       	rjmp	.+24     	; 0x1296 <vfprintf+0x350>
    127e:	83 2f       	mov	r24, r19
    1280:	86 78       	andi	r24, 0x86	; 134
    1282:	59 f0       	breq	.+22     	; 0x129a <vfprintf+0x354>
    1284:	31 ff       	sbrs	r19, 1
    1286:	02 c0       	rjmp	.+4      	; 0x128c <vfprintf+0x346>
    1288:	8b e2       	ldi	r24, 0x2B	; 43
    128a:	01 c0       	rjmp	.+2      	; 0x128e <vfprintf+0x348>
    128c:	80 e2       	ldi	r24, 0x20	; 32
    128e:	37 fd       	sbrc	r19, 7
    1290:	8d e2       	ldi	r24, 0x2D	; 45
    1292:	b7 01       	movw	r22, r14
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    129a:	a5 14       	cp	r10, r5
    129c:	38 f4       	brcc	.+14     	; 0x12ac <vfprintf+0x366>
    129e:	b7 01       	movw	r22, r14
    12a0:	80 e3       	ldi	r24, 0x30	; 48
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    12a8:	5a 94       	dec	r5
    12aa:	f7 cf       	rjmp	.-18     	; 0x129a <vfprintf+0x354>
    12ac:	aa 94       	dec	r10
    12ae:	f4 01       	movw	r30, r8
    12b0:	ea 0d       	add	r30, r10
    12b2:	f1 1d       	adc	r31, r1
    12b4:	80 81       	ld	r24, Z
    12b6:	b7 01       	movw	r22, r14
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    12be:	a1 10       	cpse	r10, r1
    12c0:	f5 cf       	rjmp	.-22     	; 0x12ac <vfprintf+0x366>
    12c2:	33 20       	and	r3, r3
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <vfprintf+0x382>
    12c6:	51 ce       	rjmp	.-862    	; 0xf6a <vfprintf+0x24>
    12c8:	b7 01       	movw	r22, r14
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 8b 09 	call	0x1316	; 0x1316 <fputc>
    12d2:	3a 94       	dec	r3
    12d4:	f6 cf       	rjmp	.-20     	; 0x12c2 <vfprintf+0x37c>
    12d6:	f7 01       	movw	r30, r14
    12d8:	86 81       	ldd	r24, Z+6	; 0x06
    12da:	97 81       	ldd	r25, Z+7	; 0x07
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <vfprintf+0x39c>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	9f ef       	ldi	r25, 0xFF	; 255
    12e2:	2c 96       	adiw	r28, 0x0c	; 12
    12e4:	e2 e1       	ldi	r30, 0x12	; 18
    12e6:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__epilogue_restores__>

000012ea <strnlen_P>:
    12ea:	fc 01       	movw	r30, r24
    12ec:	05 90       	lpm	r0, Z+
    12ee:	61 50       	subi	r22, 0x01	; 1
    12f0:	70 40       	sbci	r23, 0x00	; 0
    12f2:	01 10       	cpse	r0, r1
    12f4:	d8 f7       	brcc	.-10     	; 0x12ec <strnlen_P+0x2>
    12f6:	80 95       	com	r24
    12f8:	90 95       	com	r25
    12fa:	8e 0f       	add	r24, r30
    12fc:	9f 1f       	adc	r25, r31
    12fe:	08 95       	ret

00001300 <strnlen>:
    1300:	fc 01       	movw	r30, r24
    1302:	61 50       	subi	r22, 0x01	; 1
    1304:	70 40       	sbci	r23, 0x00	; 0
    1306:	01 90       	ld	r0, Z+
    1308:	01 10       	cpse	r0, r1
    130a:	d8 f7       	brcc	.-10     	; 0x1302 <strnlen+0x2>
    130c:	80 95       	com	r24
    130e:	90 95       	com	r25
    1310:	8e 0f       	add	r24, r30
    1312:	9f 1f       	adc	r25, r31
    1314:	08 95       	ret

00001316 <fputc>:
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	fb 01       	movw	r30, r22
    1320:	23 81       	ldd	r18, Z+3	; 0x03
    1322:	21 fd       	sbrc	r18, 1
    1324:	03 c0       	rjmp	.+6      	; 0x132c <fputc+0x16>
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	28 c0       	rjmp	.+80     	; 0x137c <fputc+0x66>
    132c:	22 ff       	sbrs	r18, 2
    132e:	16 c0       	rjmp	.+44     	; 0x135c <fputc+0x46>
    1330:	46 81       	ldd	r20, Z+6	; 0x06
    1332:	57 81       	ldd	r21, Z+7	; 0x07
    1334:	24 81       	ldd	r18, Z+4	; 0x04
    1336:	35 81       	ldd	r19, Z+5	; 0x05
    1338:	42 17       	cp	r20, r18
    133a:	53 07       	cpc	r21, r19
    133c:	44 f4       	brge	.+16     	; 0x134e <fputc+0x38>
    133e:	a0 81       	ld	r26, Z
    1340:	b1 81       	ldd	r27, Z+1	; 0x01
    1342:	9d 01       	movw	r18, r26
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
    1348:	31 83       	std	Z+1, r19	; 0x01
    134a:	20 83       	st	Z, r18
    134c:	8c 93       	st	X, r24
    134e:	26 81       	ldd	r18, Z+6	; 0x06
    1350:	37 81       	ldd	r19, Z+7	; 0x07
    1352:	2f 5f       	subi	r18, 0xFF	; 255
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	37 83       	std	Z+7, r19	; 0x07
    1358:	26 83       	std	Z+6, r18	; 0x06
    135a:	10 c0       	rjmp	.+32     	; 0x137c <fputc+0x66>
    135c:	eb 01       	movw	r28, r22
    135e:	09 2f       	mov	r16, r25
    1360:	18 2f       	mov	r17, r24
    1362:	00 84       	ldd	r0, Z+8	; 0x08
    1364:	f1 85       	ldd	r31, Z+9	; 0x09
    1366:	e0 2d       	mov	r30, r0
    1368:	09 95       	icall
    136a:	89 2b       	or	r24, r25
    136c:	e1 f6       	brne	.-72     	; 0x1326 <fputc+0x10>
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	9f 83       	std	Y+7, r25	; 0x07
    1376:	8e 83       	std	Y+6, r24	; 0x06
    1378:	81 2f       	mov	r24, r17
    137a:	90 2f       	mov	r25, r16
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <__ultoa_invert>:
    1386:	fa 01       	movw	r30, r20
    1388:	aa 27       	eor	r26, r26
    138a:	28 30       	cpi	r18, 0x08	; 8
    138c:	51 f1       	breq	.+84     	; 0x13e2 <__ultoa_invert+0x5c>
    138e:	20 31       	cpi	r18, 0x10	; 16
    1390:	81 f1       	breq	.+96     	; 0x13f2 <__ultoa_invert+0x6c>
    1392:	e8 94       	clt
    1394:	6f 93       	push	r22
    1396:	6e 7f       	andi	r22, 0xFE	; 254
    1398:	6e 5f       	subi	r22, 0xFE	; 254
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8f 4f       	sbci	r24, 0xFF	; 255
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	af 4f       	sbci	r26, 0xFF	; 255
    13a2:	b1 e0       	ldi	r27, 0x01	; 1
    13a4:	3e d0       	rcall	.+124    	; 0x1422 <__ultoa_invert+0x9c>
    13a6:	b4 e0       	ldi	r27, 0x04	; 4
    13a8:	3c d0       	rcall	.+120    	; 0x1422 <__ultoa_invert+0x9c>
    13aa:	67 0f       	add	r22, r23
    13ac:	78 1f       	adc	r23, r24
    13ae:	89 1f       	adc	r24, r25
    13b0:	9a 1f       	adc	r25, r26
    13b2:	a1 1d       	adc	r26, r1
    13b4:	68 0f       	add	r22, r24
    13b6:	79 1f       	adc	r23, r25
    13b8:	8a 1f       	adc	r24, r26
    13ba:	91 1d       	adc	r25, r1
    13bc:	a1 1d       	adc	r26, r1
    13be:	6a 0f       	add	r22, r26
    13c0:	71 1d       	adc	r23, r1
    13c2:	81 1d       	adc	r24, r1
    13c4:	91 1d       	adc	r25, r1
    13c6:	a1 1d       	adc	r26, r1
    13c8:	20 d0       	rcall	.+64     	; 0x140a <__ultoa_invert+0x84>
    13ca:	09 f4       	brne	.+2      	; 0x13ce <__ultoa_invert+0x48>
    13cc:	68 94       	set
    13ce:	3f 91       	pop	r19
    13d0:	2a e0       	ldi	r18, 0x0A	; 10
    13d2:	26 9f       	mul	r18, r22
    13d4:	11 24       	eor	r1, r1
    13d6:	30 19       	sub	r19, r0
    13d8:	30 5d       	subi	r19, 0xD0	; 208
    13da:	31 93       	st	Z+, r19
    13dc:	de f6       	brtc	.-74     	; 0x1394 <__ultoa_invert+0xe>
    13de:	cf 01       	movw	r24, r30
    13e0:	08 95       	ret
    13e2:	46 2f       	mov	r20, r22
    13e4:	47 70       	andi	r20, 0x07	; 7
    13e6:	40 5d       	subi	r20, 0xD0	; 208
    13e8:	41 93       	st	Z+, r20
    13ea:	b3 e0       	ldi	r27, 0x03	; 3
    13ec:	0f d0       	rcall	.+30     	; 0x140c <__ultoa_invert+0x86>
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__ultoa_invert+0x5c>
    13f0:	f6 cf       	rjmp	.-20     	; 0x13de <__ultoa_invert+0x58>
    13f2:	46 2f       	mov	r20, r22
    13f4:	4f 70       	andi	r20, 0x0F	; 15
    13f6:	40 5d       	subi	r20, 0xD0	; 208
    13f8:	4a 33       	cpi	r20, 0x3A	; 58
    13fa:	18 f0       	brcs	.+6      	; 0x1402 <__ultoa_invert+0x7c>
    13fc:	49 5d       	subi	r20, 0xD9	; 217
    13fe:	31 fd       	sbrc	r19, 1
    1400:	40 52       	subi	r20, 0x20	; 32
    1402:	41 93       	st	Z+, r20
    1404:	02 d0       	rcall	.+4      	; 0x140a <__ultoa_invert+0x84>
    1406:	a9 f7       	brne	.-22     	; 0x13f2 <__ultoa_invert+0x6c>
    1408:	ea cf       	rjmp	.-44     	; 0x13de <__ultoa_invert+0x58>
    140a:	b4 e0       	ldi	r27, 0x04	; 4
    140c:	a6 95       	lsr	r26
    140e:	97 95       	ror	r25
    1410:	87 95       	ror	r24
    1412:	77 95       	ror	r23
    1414:	67 95       	ror	r22
    1416:	ba 95       	dec	r27
    1418:	c9 f7       	brne	.-14     	; 0x140c <__ultoa_invert+0x86>
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 05       	cpc	r22, r1
    141e:	71 05       	cpc	r23, r1
    1420:	08 95       	ret
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	0a 2e       	mov	r0, r26
    1428:	06 94       	lsr	r0
    142a:	57 95       	ror	r21
    142c:	47 95       	ror	r20
    142e:	37 95       	ror	r19
    1430:	27 95       	ror	r18
    1432:	ba 95       	dec	r27
    1434:	c9 f7       	brne	.-14     	; 0x1428 <__ultoa_invert+0xa2>
    1436:	62 0f       	add	r22, r18
    1438:	73 1f       	adc	r23, r19
    143a:	84 1f       	adc	r24, r20
    143c:	95 1f       	adc	r25, r21
    143e:	a0 1d       	adc	r26, r0
    1440:	08 95       	ret

00001442 <__prologue_saves__>:
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	ca 1b       	sub	r28, r26
    146c:	db 0b       	sbc	r29, r27
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	09 94       	ijmp

0000147a <__epilogue_restores__>:
    147a:	2a 88       	ldd	r2, Y+18	; 0x12
    147c:	39 88       	ldd	r3, Y+17	; 0x11
    147e:	48 88       	ldd	r4, Y+16	; 0x10
    1480:	5f 84       	ldd	r5, Y+15	; 0x0f
    1482:	6e 84       	ldd	r6, Y+14	; 0x0e
    1484:	7d 84       	ldd	r7, Y+13	; 0x0d
    1486:	8c 84       	ldd	r8, Y+12	; 0x0c
    1488:	9b 84       	ldd	r9, Y+11	; 0x0b
    148a:	aa 84       	ldd	r10, Y+10	; 0x0a
    148c:	b9 84       	ldd	r11, Y+9	; 0x09
    148e:	c8 84       	ldd	r12, Y+8	; 0x08
    1490:	df 80       	ldd	r13, Y+7	; 0x07
    1492:	ee 80       	ldd	r14, Y+6	; 0x06
    1494:	fd 80       	ldd	r15, Y+5	; 0x05
    1496:	0c 81       	ldd	r16, Y+4	; 0x04
    1498:	1b 81       	ldd	r17, Y+3	; 0x03
    149a:	aa 81       	ldd	r26, Y+2	; 0x02
    149c:	b9 81       	ldd	r27, Y+1	; 0x01
    149e:	ce 0f       	add	r28, r30
    14a0:	d1 1d       	adc	r29, r1
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	ed 01       	movw	r28, r26
    14ae:	08 95       	ret

000014b0 <__do_global_dtors>:
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	c1 e8       	ldi	r28, 0x81	; 129
    14b4:	d0 e0       	ldi	r29, 0x00	; 0
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <__do_global_dtors+0x10>
    14b8:	fe 01       	movw	r30, r28
    14ba:	0e 94 2a 06 	call	0xc54	; 0xc54 <__tablejump2__>
    14be:	21 96       	adiw	r28, 0x01	; 1
    14c0:	c2 38       	cpi	r28, 0x82	; 130
    14c2:	d1 07       	cpc	r29, r17
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__do_global_dtors+0x8>
    14c6:	f8 94       	cli

000014c8 <__stop_program>:
    14c8:	ff cf       	rjmp	.-2      	; 0x14c8 <__stop_program>
