
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000010d8  0000116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  00800140  00800140  000011ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b4  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a8  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047a  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000034b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e2  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000816  00000000  00000000  0000405a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_18>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_20>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_21>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	47 03       	mulsu	r20, r23

0000006a <__ctors_end>:
      6a:	05 04       	cpc	r0, r5

0000006c <__dtors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e8 ed       	ldi	r30, 0xD8	; 216
      80:	f0 e1       	ldi	r31, 0x10	; 16
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	a0 34       	cpi	r26, 0x40	; 64
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	21 e0       	ldi	r18, 0x01	; 1
      90:	a0 e4       	ldi	r26, 0x40	; 64
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a8 3f       	cpi	r26, 0xF8	; 248
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c5 e3       	ldi	r28, 0x35	; 53
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
      b8:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__do_global_dtors>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
      c0:	08 95       	ret

000000c2 <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
      c2:	08 95       	ret

000000c4 <_ZN6opbots5InputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
      c4:	0e 94 ef 04 	call	0x9de	; 0x9de <free>
      c8:	08 95       	ret

000000ca <_ZN6opbots6OutputD0Ev>:
      ca:	0e 94 ef 04 	call	0x9de	; 0x9de <free>
      ce:	08 95       	ret

000000d0 <__vector_21>:

} /* end of namespace opbots */

using namespace opbots;

ISR(ADC_vect) {
      d0:	1f 92       	push	r1
      d2:	0f 92       	push	r0
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	0f 92       	push	r0
      d8:	11 24       	eor	r1, r1
      da:	8f 93       	push	r24
	cli();
      dc:	f8 94       	cli
	Analog::analog_low = ADCL;
      de:	80 91 78 00 	lds	r24, 0x0078
      e2:	80 93 f1 01 	sts	0x01F1, r24
	Analog::analogHigh = ADCH;
      e6:	80 91 79 00 	lds	r24, 0x0079
      ea:	80 93 f2 01 	sts	0x01F2, r24
	Analog::new_value = true;
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 93 f3 01 	sts	0x01F3, r24
	sei();
      f4:	78 94       	sei
};
      f6:	8f 91       	pop	r24
      f8:	0f 90       	pop	r0
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	0f 90       	pop	r0
      fe:	1f 90       	pop	r1
     100:	18 95       	reti

00000102 <__vector_20>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	8f 93       	push	r24
     10e:	9f 93       	push	r25
     110:	af 93       	push	r26
     112:	bf 93       	push	r27
     114:	ef 93       	push	r30
     116:	ff 93       	push	r31
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
     118:	f8 94       	cli
		if (Serial::chars_left > 0) {
     11a:	80 91 ce 01 	lds	r24, 0x01CE
     11e:	88 23       	and	r24, r24
     120:	e1 f0       	breq	.+56     	; 0x15a <__vector_20+0x58>
			if (serial_port == 0) {
				UDR0 = Serial::transmitting[Serial::tx_head];
     122:	e0 91 cf 01 	lds	r30, 0x01CF
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	ef 52       	subi	r30, 0x2F	; 47
     12a:	fe 4f       	sbci	r31, 0xFE	; 254
     12c:	80 81       	ld	r24, Z
     12e:	80 93 c6 00 	sts	0x00C6, r24
#ifdef _AVR_ATTINY841_H_INCLUDED 
			else if (serial_port == 1) {
				UDR1 = Serial::transmitting[Serial::tx_head];
			}
#endif
			Serial::tx_head = (Serial::tx_head + 1) % TX_BUFFER_SIZE;
     132:	80 91 cf 01 	lds	r24, 0x01CF
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	01 96       	adiw	r24, 0x01	; 1
     13a:	8f 71       	andi	r24, 0x1F	; 31
     13c:	90 78       	andi	r25, 0x80	; 128
     13e:	99 23       	and	r25, r25
     140:	24 f4       	brge	.+8      	; 0x14a <__vector_20+0x48>
     142:	01 97       	sbiw	r24, 0x01	; 1
     144:	80 6e       	ori	r24, 0xE0	; 224
     146:	9f 6f       	ori	r25, 0xFF	; 255
     148:	01 96       	adiw	r24, 0x01	; 1
     14a:	80 93 cf 01 	sts	0x01CF, r24
			Serial::chars_left--;
     14e:	80 91 ce 01 	lds	r24, 0x01CE
     152:	81 50       	subi	r24, 0x01	; 1
     154:	80 93 ce 01 	sts	0x01CE, r24
     158:	0d c0       	rjmp	.+26     	; 0x174 <__vector_20+0x72>
		} else {
			if (Serial::txden[serial_port] != nullptr) {
     15a:	e0 91 cc 01 	lds	r30, 0x01CC
     15e:	f0 91 cd 01 	lds	r31, 0x01CD
     162:	30 97       	sbiw	r30, 0x00	; 0
     164:	39 f0       	breq	.+14     	; 0x174 <__vector_20+0x72>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     166:	a2 81       	ldd	r26, Z+2	; 0x02
     168:	b3 81       	ldd	r27, Z+3	; 0x03
     16a:	9c 91       	ld	r25, X
     16c:	81 85       	ldd	r24, Z+9	; 0x09
     16e:	80 95       	com	r24
     170:	89 23       	and	r24, r25
     172:	8c 93       	st	X, r24
		} else {
			if (Serial::txden[serial_port] != nullptr) {
				Serial::txden[serial_port]->clear();
			}
		}
		sei();
     174:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	bf 91       	pop	r27
     17c:	af 91       	pop	r26
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	0f 90       	pop	r0
     184:	0f be       	out	0x3f, r0	; 63
     186:	0f 90       	pop	r0
     188:	1f 90       	pop	r1
     18a:	18 95       	reti

0000018c <__vector_18>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	11 24       	eor	r1, r1
     196:	8f 93       	push	r24
     198:	ef 93       	push	r30
     19a:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
     19c:	f8 94       	cli
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
     19e:	e0 ec       	ldi	r30, 0xC0	; 192
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	8f 77       	andi	r24, 0x7F	; 127
     1a6:	80 83       	st	Z, r24
#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
		}
#endif
		sei();
     1a8:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	8f 91       	pop	r24
     1b0:	0f 90       	pop	r0
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	0f 90       	pop	r0
     1b6:	1f 90       	pop	r1
     1b8:	18 95       	reti

000001ba <_Z15startup_routinei>:
Input current_pin(&PORTC,7); // 0.2 V per amp
Input voltage_pin(&PORTC,6); // 0.2 V per volt

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	ac 01       	movw	r20, r24
     1c4:	06 e8       	ldi	r16, 0x86	; 134
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	6f e8       	ldi	r22, 0x8F	; 143
     1ca:	71 e0       	ldi	r23, 0x01	; 1
	while (--loops >= 0) {
     1cc:	1b c0       	rjmp	.+54     	; 0x204 <_Z15startup_routinei+0x4a>
	BUFFER_OVERFLOW=3,
	OVER_VOLTAGE=4,
	OVER_CURRENT=5
};
	
class GPIO {
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	ed 91       	ld	r30, X+
     1d2:	fc 91       	ld	r31, X
     1d4:	13 97       	sbiw	r26, 0x03	; 3
     1d6:	98 81       	ld	r25, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     1d8:	20 81       	ld	r18, Z
     1da:	29 2b       	or	r18, r25
     1dc:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	30 e7       	ldi	r19, 0x70	; 112
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	21 50       	subi	r18, 0x01	; 1
     1e6:	30 40       	sbci	r19, 0x00	; 0
     1e8:	80 40       	sbci	r24, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <_Z15startup_routinei+0x2a>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_Z15startup_routinei+0x34>
     1ee:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
     1f0:	20 81       	ld	r18, Z
     1f2:	90 95       	com	r25
     1f4:	92 23       	and	r25, r18
     1f6:	90 83       	st	Z, r25
     1f8:	1a 96       	adiw	r26, 0x0a	; 10
     1fa:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
     1fc:	21 e0       	ldi	r18, 0x01	; 1
     1fe:	ac 3c       	cpi	r26, 0xCC	; 204
     200:	b2 07       	cpc	r27, r18
     202:	29 f7       	brne	.-54     	; 0x1ce <_Z15startup_routinei+0x14>
Input voltage_pin(&PORTC,6); // 0.2 V per volt

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
	while (--loops >= 0) {
     204:	41 50       	subi	r20, 0x01	; 1
     206:	51 09       	sbc	r21, r1
     208:	1a f0       	brmi	.+6      	; 0x210 <_Z15startup_routinei+0x56>
     20a:	d8 01       	movw	r26, r16
     20c:	eb 01       	movw	r28, r22
     20e:	df cf       	rjmp	.-66     	; 0x1ce <_Z15startup_routinei+0x14>
			out.set();
			_delay_ms(delay_time/2);
			out.clear();
		}
	}
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	08 95       	ret

0000021a <main>:
char message[16];
uint16_t volts_reading, volts, centivolts;
uint16_t amps_reading, amps, centiamps;
uint32_t watts_raw, watts, centiwatts;

int main(void) {
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <main+0x6>
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	startup_routine(2);
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z15startup_routinei>
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     22e:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     230:	87 e4       	ldi	r24, 0x47	; 71
     232:	80 93 7c 00 	sts	0x007C, r24
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     236:	8f e8       	ldi	r24, 0x8F	; 143
     238:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB = 0; // free running
     23c:	10 92 7b 00 	sts	0x007B, r1
#ifdef _AVR_ATTINY841_H_INCLUDED 
		if (serial_port == 1) {
			offset = 0x10;
		} 
#endif
		*(&UBRR0H+offset) = baud / 0xFF;
     240:	10 92 c5 00 	sts	0x00C5, r1
		*(&UBRR0L+offset) = baud % 0xFF;
     244:	80 e1       	ldi	r24, 0x10	; 16
     246:	80 93 c4 00 	sts	0x00C4, r24
		*(&UCSR0A+offset) = 1<<(U2X0);
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	80 93 c0 00 	sts	0x00C0, r24
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
     250:	88 ed       	ldi	r24, 0xD8	; 216
     252:	80 93 c1 00 	sts	0x00C1, r24
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
     256:	86 e0       	ldi	r24, 0x06	; 6
     258:	80 93 c2 00 	sts	0x00C2, r24
			Serial::txden[serial_port]->set();
		}
		sei();
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
     25c:	8c e7       	ldi	r24, 0x7C	; 124
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	90 93 cd 01 	sts	0x01CD, r25
     264:	80 93 cc 01 	sts	0x01CC, r24
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     268:	a6 e8       	ldi	r26, 0x86	; 134
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	12 96       	adiw	r26, 0x02	; 2
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	13 97       	sbiw	r26, 0x03	; 3
     274:	80 81       	ld	r24, Z
     276:	19 96       	adiw	r26, 0x09	; 9
     278:	9c 91       	ld	r25, X
     27a:	90 95       	com	r25
     27c:	89 23       	and	r24, r25
     27e:	80 83       	st	Z, r24
	
	Analog::select_channel(7);
	Serial::init(115200);
	Serial::set_txden_pin(txden);
	err_led.clear();
	sei(); // Enable interrupts
     280:	78 94       	sei
     282:	0f 2e       	mov	r0, r31
     284:	f5 ed       	ldi	r31, 0xD5	; 213
     286:	cf 2e       	mov	r12, r31
     288:	f1 e0       	ldi	r31, 0x01	; 1
     28a:	df 2e       	mov	r13, r31
     28c:	f0 2d       	mov	r31, r0
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     28e:	0f 2e       	mov	r0, r31
     290:	fa e7       	ldi	r31, 0x7A	; 122
     292:	ef 2e       	mov	r14, r31
     294:	f1 2c       	mov	r15, r1
     296:	f0 2d       	mov	r31, r0
     298:	2f e8       	ldi	r18, 0x8F	; 143
     29a:	29 83       	std	Y+1, r18	; 0x01
		Analog::select_channel(6);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) { /* idle */ }
		volts_reading = Analog::get_value();
		adc_scale<MAX_ADC_UNITS>(volts_reading, &amps, &centiamps);
		sprintf(message, "%2u.%02u A\r\n", amps, centiamps);
     29c:	0f 2e       	mov	r0, r31
     29e:	f8 e5       	ldi	r31, 0x58	; 88
     2a0:	2f 2e       	mov	r2, r31
     2a2:	f1 e0       	ldi	r31, 0x01	; 1
     2a4:	3f 2e       	mov	r3, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	02 e6       	ldi	r16, 0x62	; 98
     2aa:	11 e0       	ldi	r17, 0x01	; 1
     2ac:	e9 e9       	ldi	r30, 0x99	; 153
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
     2b0:	df 01       	movw	r26, r30
     2b2:	17 97       	sbiw	r26, 0x07	; 7
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     2b4:	0d 90       	ld	r0, X+
     2b6:	bc 91       	ld	r27, X
     2b8:	a0 2d       	mov	r26, r0
     2ba:	9c 91       	ld	r25, X
     2bc:	80 81       	ld	r24, Z
     2be:	89 27       	eor	r24, r25
     2c0:	8c 93       	st	X, r24
     2c2:	3a 96       	adiw	r30, 0x0a	; 10
	Serial::set_txden_pin(txden);
	err_led.clear();
	sei(); // Enable interrupts
	
    while (1) {
		for (int i=1; i<=6; ++i) enable[i].toggle();
     2c4:	ec 15       	cp	r30, r12
     2c6:	fd 05       	cpc	r31, r13
     2c8:	99 f7       	brne	.-26     	; 0x2b0 <main+0x96>
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     2ca:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     2cc:	e6 e4       	ldi	r30, 0x46	; 70
     2ce:	ac e7       	ldi	r26, 0x7C	; 124
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	ec 93       	st	X, r30
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     2d4:	e9 81       	ldd	r30, Y+1	; 0x01
     2d6:	d7 01       	movw	r26, r14
     2d8:	ec 93       	st	X, r30
		ADCSRB = 0; // free running
     2da:	ab e7       	ldi	r26, 0x7B	; 123
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	1c 92       	st	X, r1
	}
	static void auto_trigger_enable(bool enabled) {
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static void start_conversion() {
		new_value = false;
     2e0:	10 92 f3 01 	sts	0x01F3, r1
		ADCSRA |= 1<<(ADSC); 
     2e4:	f7 01       	movw	r30, r14
     2e6:	80 81       	ld	r24, Z
     2e8:	80 64       	ori	r24, 0x40	; 64
     2ea:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     2ec:	80 91 f3 01 	lds	r24, 0x01F3
		
		Analog::select_channel(6);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) { /* idle */ }
     2f0:	88 23       	and	r24, r24
     2f2:	e1 f3       	breq	.-8      	; 0x2ec <main+0xd2>
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     2f4:	80 91 f2 01 	lds	r24, 0x01F2
     2f8:	20 91 f1 01 	lds	r18, 0x01F1
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	38 2b       	or	r19, r24
		volts_reading = Analog::get_value();
     300:	30 93 57 01 	sts	0x0157, r19
     304:	20 93 56 01 	sts	0x0156, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     308:	a0 e4       	ldi	r26, 0x40	; 64
     30a:	b6 e0       	ldi	r27, 0x06	; 6
     30c:	0e 94 3a 04 	call	0x874	; 0x874 <__umulhisi3>
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	44 27       	eor	r20, r20
     31a:	55 27       	eor	r21, r21
     31c:	a4 e6       	ldi	r26, 0x64	; 100
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	0e 94 49 04 	call	0x892	; 0x892 <__muluhisi3>
     324:	90 93 4d 01 	sts	0x014D, r25
     328:	80 93 4c 01 	sts	0x014C, r24
	}
	temp_result = temp_result >> 16;
     32c:	c3 01       	movw	r24, r6
     32e:	aa 27       	eor	r26, r26
     330:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     332:	80 93 4e 01 	sts	0x014E, r24
     336:	90 93 4f 01 	sts	0x014F, r25
		Analog::select_channel(6);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) { /* idle */ }
		volts_reading = Analog::get_value();
		adc_scale<MAX_ADC_UNITS>(volts_reading, &amps, &centiamps);
		sprintf(message, "%2u.%02u A\r\n", amps, centiamps);
     33a:	20 91 4d 01 	lds	r18, 0x014D
     33e:	2f 93       	push	r18
     340:	20 91 4c 01 	lds	r18, 0x014C
     344:	2f 93       	push	r18
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	a6 e0       	ldi	r26, 0x06	; 6
     34c:	b1 e0       	ldi	r27, 0x01	; 1
     34e:	bf 93       	push	r27
     350:	af 93       	push	r26
     352:	3f 92       	push	r3
     354:	2f 92       	push	r2
     356:	0e 94 87 05 	call	0xb0e	; 0xb0e <sprintf>
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     35a:	f8 94       	cli
     35c:	3b 82       	std	Y+3, r3	; 0x03
     35e:	2a 82       	std	Y+2, r2	; 0x02
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	d1 01       	movw	r26, r2
     36c:	91 01       	movw	r18, r2
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = buffer[chars_added];
     36e:	e0 91 d0 01 	lds	r30, 0x01D0
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	8d 91       	ld	r24, X+
     376:	ef 52       	subi	r30, 0x2F	; 47
     378:	fe 4f       	sbci	r31, 0xFE	; 254
     37a:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     37c:	80 91 d0 01 	lds	r24, 0x01D0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	8f 71       	andi	r24, 0x1F	; 31
     386:	90 78       	andi	r25, 0x80	; 128
     388:	99 23       	and	r25, r25
     38a:	24 f4       	brge	.+8      	; 0x394 <main+0x17a>
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	80 6e       	ori	r24, 0xE0	; 224
     390:	9f 6f       	ori	r25, 0xFF	; 255
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	80 93 d0 01 	sts	0x01D0, r24
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     398:	a0 17       	cp	r26, r16
     39a:	b1 07       	cpc	r27, r17
     39c:	41 f7       	brne	.-48     	; 0x36e <main+0x154>
     39e:	3b 83       	std	Y+3, r19	; 0x03
     3a0:	2a 83       	std	Y+2, r18	; 0x02
			transmitting[tx_index] = buffer[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		}
		if (serial_port == 0) {
			UDR0 = transmitting[tx_head];
     3a2:	e0 91 cf 01 	lds	r30, 0x01CF
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ef 52       	subi	r30, 0x2F	; 47
     3aa:	fe 4f       	sbci	r31, 0xFE	; 254
     3ac:	80 81       	ld	r24, Z
     3ae:	a6 ec       	ldi	r26, 0xC6	; 198
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	8c 93       	st	X, r24
#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UDR1 = transmitting[tx_head];
		}
#endif
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     3b4:	80 91 cf 01 	lds	r24, 0x01CF
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	8f 71       	andi	r24, 0x1F	; 31
     3be:	90 78       	andi	r25, 0x80	; 128
     3c0:	99 23       	and	r25, r25
     3c2:	24 f4       	brge	.+8      	; 0x3cc <main+0x1b2>
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	80 6e       	ori	r24, 0xE0	; 224
     3c8:	9f 6f       	ori	r25, 0xFF	; 255
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	80 93 cf 01 	sts	0x01CF, r24
		chars_left += (char_count - 1);
     3d0:	80 91 ce 01 	lds	r24, 0x01CE
     3d4:	87 5f       	subi	r24, 0xF7	; 247
     3d6:	80 93 ce 01 	sts	0x01CE, r24
		if (Serial::txden[serial_port] != nullptr) {
     3da:	ac ec       	ldi	r26, 0xCC	; 204
     3dc:	b1 e0       	ldi	r27, 0x01	; 1
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	30 97       	sbiw	r30, 0x00	; 0
     3e4:	31 f0       	breq	.+12     	; 0x3f2 <main+0x1d8>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     3e6:	a2 81       	ldd	r26, Z+2	; 0x02
     3e8:	b3 81       	ldd	r27, Z+3	; 0x03
     3ea:	9c 91       	ld	r25, X
     3ec:	81 85       	ldd	r24, Z+9	; 0x09
     3ee:	89 2b       	or	r24, r25
     3f0:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
		chars_left += (char_count - 1);
		if (Serial::txden[serial_port] != nullptr) {
			Serial::txden[serial_port]->set();
		}
		sei();
     3f2:	78 94       	sei
     3f4:	bf ef       	ldi	r27, 0xFF	; 255
     3f6:	e9 e6       	ldi	r30, 0x69	; 105
     3f8:	f8 e1       	ldi	r31, 0x18	; 24
     3fa:	b1 50       	subi	r27, 0x01	; 1
     3fc:	e0 40       	sbci	r30, 0x00	; 0
     3fe:	f0 40       	sbci	r31, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x1e0>
     402:	00 c0       	rjmp	.+0      	; 0x404 <main+0x1ea>
     404:	00 00       	nop
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     406:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     408:	87 e4       	ldi	r24, 0x47	; 71
     40a:	ac e7       	ldi	r26, 0x7C	; 124
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	8c 93       	st	X, r24
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     410:	2f e8       	ldi	r18, 0x8F	; 143
     412:	f7 01       	movw	r30, r14
     414:	20 83       	st	Z, r18
		ADCSRB = 0; // free running
     416:	ab e7       	ldi	r26, 0x7B	; 123
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	1c 92       	st	X, r1
	}
	static void auto_trigger_enable(bool enabled) {
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static void start_conversion() {
		new_value = false;
     41c:	10 92 f3 01 	sts	0x01F3, r1
		ADCSRA |= 1<<(ADSC); 
     420:	80 81       	ld	r24, Z
     422:	80 64       	ori	r24, 0x40	; 64
     424:	80 83       	st	Z, r24
     426:	2a 81       	ldd	r18, Y+2	; 0x02
     428:	3b 81       	ldd	r19, Y+3	; 0x03
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     42a:	80 91 f3 01 	lds	r24, 0x01F3
		Serial::transmit(message, 10);
		_delay_ms(500);
		
		Analog::select_channel(7);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) { /* idle */ }
     42e:	88 23       	and	r24, r24
     430:	e1 f3       	breq	.-8      	; 0x42a <main+0x210>
     432:	3b 83       	std	Y+3, r19	; 0x03
     434:	2a 83       	std	Y+2, r18	; 0x02
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     436:	80 91 f2 01 	lds	r24, 0x01F2
     43a:	20 91 f1 01 	lds	r18, 0x01F1
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	38 2b       	or	r19, r24
		amps_reading = Analog::get_value();
     442:	30 93 51 01 	sts	0x0151, r19
     446:	20 93 50 01 	sts	0x0150, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     44a:	a0 e4       	ldi	r26, 0x40	; 64
     44c:	b6 e0       	ldi	r27, 0x06	; 6
     44e:	0e 94 3a 04 	call	0x874	; 0x874 <__umulhisi3>
     452:	2b 01       	movw	r4, r22
     454:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     456:	9b 01       	movw	r18, r22
     458:	ac 01       	movw	r20, r24
     45a:	44 27       	eor	r20, r20
     45c:	55 27       	eor	r21, r21
     45e:	a4 e6       	ldi	r26, 0x64	; 100
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	0e 94 49 04 	call	0x892	; 0x892 <__muluhisi3>
     466:	90 93 53 01 	sts	0x0153, r25
     46a:	80 93 52 01 	sts	0x0152, r24
	}
	temp_result = temp_result >> 16;
     46e:	c3 01       	movw	r24, r6
     470:	aa 27       	eor	r26, r26
     472:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     474:	80 93 54 01 	sts	0x0154, r24
     478:	90 93 55 01 	sts	0x0155, r25
		Analog::select_channel(7);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) { /* idle */ }
		amps_reading = Analog::get_value();
		adc_scale<MAX_ADC_UNITS>(amps_reading, &volts, &centivolts);
		sprintf(message, "%2u.%02u V\r\n", volts, centivolts);
     47c:	20 91 53 01 	lds	r18, 0x0153
     480:	2f 93       	push	r18
     482:	20 91 52 01 	lds	r18, 0x0152
     486:	2f 93       	push	r18
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	a3 e1       	ldi	r26, 0x13	; 19
     48e:	b1 e0       	ldi	r27, 0x01	; 1
     490:	bf 93       	push	r27
     492:	af 93       	push	r26
     494:	3f 92       	push	r3
     496:	2f 92       	push	r2
     498:	0e 94 87 05 	call	0xb0e	; 0xb0e <sprintf>
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     49c:	f8 94       	cli
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	d1 01       	movw	r26, r2
     4aa:	2a 81       	ldd	r18, Y+2	; 0x02
     4ac:	3b 81       	ldd	r19, Y+3	; 0x03
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = buffer[chars_added];
     4ae:	e0 91 d0 01 	lds	r30, 0x01D0
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	8d 91       	ld	r24, X+
     4b6:	ef 52       	subi	r30, 0x2F	; 47
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     4bc:	80 91 d0 01 	lds	r24, 0x01D0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	8f 71       	andi	r24, 0x1F	; 31
     4c6:	90 78       	andi	r25, 0x80	; 128
     4c8:	99 23       	and	r25, r25
     4ca:	24 f4       	brge	.+8      	; 0x4d4 <main+0x2ba>
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	80 6e       	ori	r24, 0xE0	; 224
     4d0:	9f 6f       	ori	r25, 0xFF	; 255
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	80 93 d0 01 	sts	0x01D0, r24
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     4d8:	0a 17       	cp	r16, r26
     4da:	1b 07       	cpc	r17, r27
     4dc:	41 f7       	brne	.-48     	; 0x4ae <main+0x294>
     4de:	3b 83       	std	Y+3, r19	; 0x03
     4e0:	2a 83       	std	Y+2, r18	; 0x02
			transmitting[tx_index] = buffer[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		}
		if (serial_port == 0) {
			UDR0 = transmitting[tx_head];
     4e2:	e0 91 cf 01 	lds	r30, 0x01CF
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	ef 52       	subi	r30, 0x2F	; 47
     4ea:	fe 4f       	sbci	r31, 0xFE	; 254
     4ec:	80 81       	ld	r24, Z
     4ee:	a6 ec       	ldi	r26, 0xC6	; 198
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	8c 93       	st	X, r24
#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UDR1 = transmitting[tx_head];
		}
#endif
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     4f4:	80 91 cf 01 	lds	r24, 0x01CF
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	8f 71       	andi	r24, 0x1F	; 31
     4fe:	90 78       	andi	r25, 0x80	; 128
     500:	99 23       	and	r25, r25
     502:	24 f4       	brge	.+8      	; 0x50c <main+0x2f2>
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	80 6e       	ori	r24, 0xE0	; 224
     508:	9f 6f       	ori	r25, 0xFF	; 255
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	80 93 cf 01 	sts	0x01CF, r24
		chars_left += (char_count - 1);
     510:	80 91 ce 01 	lds	r24, 0x01CE
     514:	87 5f       	subi	r24, 0xF7	; 247
     516:	80 93 ce 01 	sts	0x01CE, r24
		if (Serial::txden[serial_port] != nullptr) {
     51a:	ac ec       	ldi	r26, 0xCC	; 204
     51c:	b1 e0       	ldi	r27, 0x01	; 1
     51e:	ed 91       	ld	r30, X+
     520:	fc 91       	ld	r31, X
     522:	30 97       	sbiw	r30, 0x00	; 0
     524:	31 f0       	breq	.+12     	; 0x532 <main+0x318>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     526:	a2 81       	ldd	r26, Z+2	; 0x02
     528:	b3 81       	ldd	r27, Z+3	; 0x03
     52a:	9c 91       	ld	r25, X
     52c:	81 85       	ldd	r24, Z+9	; 0x09
     52e:	89 2b       	or	r24, r25
     530:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
		chars_left += (char_count - 1);
		if (Serial::txden[serial_port] != nullptr) {
			Serial::txden[serial_port]->set();
		}
		sei();
     532:	78 94       	sei
     534:	bf ef       	ldi	r27, 0xFF	; 255
     536:	e9 e6       	ldi	r30, 0x69	; 105
     538:	f8 e1       	ldi	r31, 0x18	; 24
     53a:	b1 50       	subi	r27, 0x01	; 1
     53c:	e0 40       	sbci	r30, 0x00	; 0
     53e:	f0 40       	sbci	r31, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <main+0x320>
     542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x32a>
     544:	00 00       	nop
		Serial::transmit(message, 10);
		_delay_ms(500);
		
		watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     546:	20 91 50 01 	lds	r18, 0x0150
     54a:	30 91 51 01 	lds	r19, 0x0151
     54e:	a0 91 56 01 	lds	r26, 0x0156
     552:	b0 91 57 01 	lds	r27, 0x0157
     556:	0e 94 3a 04 	call	0x874	; 0x874 <__umulhisi3>
     55a:	4b 01       	movw	r8, r22
     55c:	5c 01       	movw	r10, r24
     55e:	60 93 48 01 	sts	0x0148, r22
     562:	70 93 49 01 	sts	0x0149, r23
     566:	80 93 4a 01 	sts	0x014A, r24
     56a:	90 93 4b 01 	sts	0x014B, r25
		watts = (watts_raw * 39) >> 16;
     56e:	a7 e2       	ldi	r26, 0x27	; 39
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	9b 01       	movw	r18, r22
     574:	ac 01       	movw	r20, r24
     576:	0e 94 49 04 	call	0x892	; 0x892 <__muluhisi3>
     57a:	2c 01       	movw	r4, r24
     57c:	66 24       	eor	r6, r6
     57e:	77 24       	eor	r7, r7
     580:	40 92 44 01 	sts	0x0144, r4
     584:	50 92 45 01 	sts	0x0145, r5
     588:	60 92 46 01 	sts	0x0146, r6
     58c:	70 92 47 01 	sts	0x0147, r7
		centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
     590:	a0 e9       	ldi	r26, 0x90	; 144
     592:	b6 e0       	ldi	r27, 0x06	; 6
     594:	a3 01       	movw	r20, r6
     596:	92 01       	movw	r18, r4
     598:	0e 94 49 04 	call	0x892	; 0x892 <__muluhisi3>
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	c5 01       	movw	r24, r10
     5a2:	b4 01       	movw	r22, r8
     5a4:	0e 94 18 04 	call	0x830	; 0x830 <__udivmodsi4>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	ad e3       	ldi	r26, 0x3D	; 61
     5ae:	bf e0       	ldi	r27, 0x0F	; 15
     5b0:	0e 94 49 04 	call	0x892	; 0x892 <__muluhisi3>
     5b4:	aa 27       	eor	r26, r26
     5b6:	bb 27       	eor	r27, r27
     5b8:	80 93 40 01 	sts	0x0140, r24
     5bc:	90 93 41 01 	sts	0x0141, r25
     5c0:	a0 93 42 01 	sts	0x0142, r26
     5c4:	b0 93 43 01 	sts	0x0143, r27
		sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
     5c8:	bf 93       	push	r27
     5ca:	af 93       	push	r26
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	7f 92       	push	r7
     5d2:	6f 92       	push	r6
     5d4:	5f 92       	push	r5
     5d6:	4f 92       	push	r4
     5d8:	a0 e2       	ldi	r26, 0x20	; 32
     5da:	b1 e0       	ldi	r27, 0x01	; 1
     5dc:	bf 93       	push	r27
     5de:	af 93       	push	r26
     5e0:	3f 92       	push	r3
     5e2:	2f 92       	push	r2
     5e4:	0e 94 87 05 	call	0xb0e	; 0xb0e <sprintf>
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
     5e8:	f8 94       	cli
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	aa 81       	ldd	r26, Y+2	; 0x02
     5f6:	bb 81       	ldd	r27, Y+3	; 0x03
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
			transmitting[tx_index] = buffer[chars_added];
     5f8:	e0 91 d0 01 	lds	r30, 0x01D0
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	8d 91       	ld	r24, X+
     600:	ef 52       	subi	r30, 0x2F	; 47
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	80 83       	st	Z, r24
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
     606:	80 91 d0 01 	lds	r24, 0x01D0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	8f 71       	andi	r24, 0x1F	; 31
     610:	90 78       	andi	r25, 0x80	; 128
     612:	99 23       	and	r25, r25
     614:	24 f4       	brge	.+8      	; 0x61e <main+0x404>
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	80 6e       	ori	r24, 0xE0	; 224
     61a:	9f 6f       	ori	r25, 0xFF	; 255
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	80 93 d0 01 	sts	0x01D0, r24
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		cli();
		// TODO optimize all this shit
		for (uint8_t chars_added(0); chars_added < char_count; chars_added++) {
     622:	0a 17       	cp	r16, r26
     624:	1b 07       	cpc	r17, r27
     626:	41 f7       	brne	.-48     	; 0x5f8 <main+0x3de>
			transmitting[tx_index] = buffer[chars_added];
			tx_index = (tx_index + 1) % TX_BUFFER_SIZE;
		}
		if (serial_port == 0) {
			UDR0 = transmitting[tx_head];
     628:	e0 91 cf 01 	lds	r30, 0x01CF
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	ef 52       	subi	r30, 0x2F	; 47
     630:	fe 4f       	sbci	r31, 0xFE	; 254
     632:	80 81       	ld	r24, Z
     634:	a6 ec       	ldi	r26, 0xC6	; 198
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	8c 93       	st	X, r24
#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UDR1 = transmitting[tx_head];
		}
#endif
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
     63a:	80 91 cf 01 	lds	r24, 0x01CF
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	8f 71       	andi	r24, 0x1F	; 31
     644:	90 78       	andi	r25, 0x80	; 128
     646:	99 23       	and	r25, r25
     648:	24 f4       	brge	.+8      	; 0x652 <main+0x438>
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	80 6e       	ori	r24, 0xE0	; 224
     64e:	9f 6f       	ori	r25, 0xFF	; 255
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	80 93 cf 01 	sts	0x01CF, r24
		chars_left += (char_count - 1);
     656:	80 91 ce 01 	lds	r24, 0x01CE
     65a:	87 5f       	subi	r24, 0xF7	; 247
     65c:	80 93 ce 01 	sts	0x01CE, r24
		if (Serial::txden[serial_port] != nullptr) {
     660:	ac ec       	ldi	r26, 0xCC	; 204
     662:	b1 e0       	ldi	r27, 0x01	; 1
     664:	ed 91       	ld	r30, X+
     666:	fc 91       	ld	r31, X
     668:	30 97       	sbiw	r30, 0x00	; 0
     66a:	31 f0       	breq	.+12     	; 0x678 <main+0x45e>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     66c:	a2 81       	ldd	r26, Z+2	; 0x02
     66e:	b3 81       	ldd	r27, Z+3	; 0x03
     670:	9c 91       	ld	r25, X
     672:	81 85       	ldd	r24, Z+9	; 0x09
     674:	89 2b       	or	r24, r25
     676:	8c 93       	st	X, r24
		tx_head = (tx_head + 1) % TX_BUFFER_SIZE;
		chars_left += (char_count - 1);
		if (Serial::txden[serial_port] != nullptr) {
			Serial::txden[serial_port]->set();
		}
		sei();
     678:	78 94       	sei
     67a:	bf ef       	ldi	r27, 0xFF	; 255
     67c:	e9 e6       	ldi	r30, 0x69	; 105
     67e:	f8 e1       	ldi	r31, 0x18	; 24
     680:	b1 50       	subi	r27, 0x01	; 1
     682:	e0 40       	sbci	r30, 0x00	; 0
     684:	f0 40       	sbci	r31, 0x00	; 0
     686:	e1 f7       	brne	.-8      	; 0x680 <main+0x466>
     688:	00 c0       	rjmp	.+0      	; 0x68a <main+0x470>
     68a:	00 00       	nop
     68c:	0f ce       	rjmp	.-994    	; 0x2ac <main+0x92>

0000068e <_GLOBAL__sub_I__Znwj>:
		Serial::transmit(message, 10);
		_delay_ms(500);
    }
}
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     69e:	e6 e8       	ldi	r30, 0x86	; 134
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	85 e2       	ldi	r24, 0x25	; 37
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	93 83       	std	Z+3, r25	; 0x03
     6a8:	82 83       	std	Z+2, r24	; 0x02
     6aa:	84 e2       	ldi	r24, 0x24	; 36
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	95 83       	std	Z+5, r25	; 0x05
     6b0:	84 83       	std	Z+4, r24	; 0x04
     6b2:	83 e2       	ldi	r24, 0x23	; 35
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	97 83       	std	Z+7, r25	; 0x07
     6b8:	86 83       	std	Z+6, r24	; 0x06
     6ba:	10 86       	std	Z+8, r1	; 0x08
     6bc:	dd 24       	eor	r13, r13
     6be:	d3 94       	inc	r13
     6c0:	d1 86       	std	Z+9, r13	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     6c2:	83 e3       	ldi	r24, 0x33	; 51
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	91 83       	std	Z+1, r25	; 0x01
     6c8:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     6ca:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     6cc:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     6ce:	68 e2       	ldi	r22, 0x28	; 40
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	75 87       	std	Z+13, r23	; 0x0d
     6d4:	64 87       	std	Z+12, r22	; 0x0c
     6d6:	47 e2       	ldi	r20, 0x27	; 39
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	57 87       	std	Z+15, r21	; 0x0f
     6dc:	46 87       	std	Z+14, r20	; 0x0e
     6de:	26 e2       	ldi	r18, 0x26	; 38
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	31 8b       	std	Z+17, r19	; 0x11
     6e4:	20 8b       	std	Z+16, r18	; 0x10
     6e6:	a3 e0       	ldi	r26, 0x03	; 3
     6e8:	a2 8b       	std	Z+18, r26	; 0x12
     6ea:	a8 e0       	ldi	r26, 0x08	; 8
     6ec:	a3 8b       	std	Z+19, r26	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     6ee:	93 87       	std	Z+11, r25	; 0x0b
     6f0:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     6f2:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     6f4:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     6f6:	0b e2       	ldi	r16, 0x2B	; 43
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	17 8b       	std	Z+23, r17	; 0x17
     6fc:	06 8b       	std	Z+22, r16	; 0x16
     6fe:	ca e2       	ldi	r28, 0x2A	; 42
     700:	d0 e0       	ldi	r29, 0x00	; 0
     702:	d1 8f       	std	Z+25, r29	; 0x19
     704:	c0 8f       	std	Z+24, r28	; 0x18
     706:	a9 e2       	ldi	r26, 0x29	; 41
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	b3 8f       	std	Z+27, r27	; 0x1b
     70c:	a2 8f       	std	Z+26, r26	; 0x1a
     70e:	68 94       	set
     710:	ee 24       	eor	r14, r14
     712:	e1 f8       	bld	r14, 1
     714:	e4 8e       	std	Z+28, r14	; 0x1c
     716:	68 94       	set
     718:	ff 24       	eor	r15, r15
     71a:	f2 f8       	bld	r15, 2
     71c:	f5 8e       	std	Z+29, r15	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     71e:	95 8b       	std	Z+21, r25	; 0x15
     720:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     722:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     724:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     726:	11 a3       	std	Z+33, r17	; 0x21
     728:	00 a3       	std	Z+32, r16	; 0x20
     72a:	d3 a3       	std	Z+35, r29	; 0x23
     72c:	c2 a3       	std	Z+34, r28	; 0x22
     72e:	b5 a3       	std	Z+37, r27	; 0x25
     730:	a4 a3       	std	Z+36, r26	; 0x24
     732:	f6 a2       	std	Z+38, r15	; 0x26
     734:	68 94       	set
     736:	cc 24       	eor	r12, r12
     738:	c4 f8       	bld	r12, 4
     73a:	c7 a2       	std	Z+39, r12	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     73c:	97 8f       	std	Z+31, r25	; 0x1f
     73e:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     740:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     742:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     744:	73 a7       	std	Z+43, r23	; 0x2b
     746:	62 a7       	std	Z+42, r22	; 0x2a
     748:	55 a7       	std	Z+45, r21	; 0x2d
     74a:	44 a7       	std	Z+44, r20	; 0x2c
     74c:	37 a7       	std	Z+47, r19	; 0x2f
     74e:	26 a7       	std	Z+46, r18	; 0x2e
     750:	10 aa       	std	Z+48, r1	; 0x30
     752:	d1 aa       	std	Z+49, r13	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     754:	91 a7       	std	Z+41, r25	; 0x29
     756:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     758:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     75a:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     75c:	75 ab       	std	Z+53, r23	; 0x35
     75e:	64 ab       	std	Z+52, r22	; 0x34
     760:	57 ab       	std	Z+55, r21	; 0x37
     762:	46 ab       	std	Z+54, r20	; 0x36
     764:	31 af       	std	Z+57, r19	; 0x39
     766:	20 af       	std	Z+56, r18	; 0x38
     768:	d2 ae       	std	Z+58, r13	; 0x3a
     76a:	e3 ae       	std	Z+59, r14	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     76c:	93 ab       	std	Z+51, r25	; 0x33
     76e:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     770:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     772:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     774:	70 93 c5 01 	sts	0x01C5, r23
     778:	60 93 c4 01 	sts	0x01C4, r22
     77c:	50 93 c7 01 	sts	0x01C7, r21
     780:	40 93 c6 01 	sts	0x01C6, r20
     784:	30 93 c9 01 	sts	0x01C9, r19
     788:	20 93 c8 01 	sts	0x01C8, r18
     78c:	e0 92 ca 01 	sts	0x01CA, r14
     790:	f0 92 cb 01 	sts	0x01CB, r15
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     794:	95 af       	std	Z+61, r25	; 0x3d
     796:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
     798:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     79a:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     79c:	ec e7       	ldi	r30, 0x7C	; 124
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	13 83       	std	Z+3, r17	; 0x03
     7a2:	02 83       	std	Z+2, r16	; 0x02
     7a4:	d5 83       	std	Z+5, r29	; 0x05
     7a6:	c4 83       	std	Z+4, r28	; 0x04
     7a8:	b7 83       	std	Z+7, r27	; 0x07
     7aa:	a6 83       	std	Z+6, r26	; 0x06
     7ac:	b7 e0       	ldi	r27, 0x07	; 7
     7ae:	b0 87       	std	Z+8, r27	; 0x08
     7b0:	a0 e8       	ldi	r26, 0x80	; 128
     7b2:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     7b4:	91 83       	std	Z+1, r25	; 0x01
     7b6:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     7b8:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     7ba:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     7bc:	e2 e7       	ldi	r30, 0x72	; 114
     7be:	f1 e0       	ldi	r31, 0x01	; 1
     7c0:	73 83       	std	Z+3, r23	; 0x03
     7c2:	62 83       	std	Z+2, r22	; 0x02
     7c4:	55 83       	std	Z+5, r21	; 0x05
     7c6:	44 83       	std	Z+4, r20	; 0x04
     7c8:	37 83       	std	Z+7, r19	; 0x07
     7ca:	26 83       	std	Z+6, r18	; 0x06
     7cc:	b0 87       	std	Z+8, r27	; 0x08
     7ce:	a1 87       	std	Z+9, r26	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     7d0:	8b e3       	ldi	r24, 0x3B	; 59
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	91 83       	std	Z+1, r25	; 0x01
     7d6:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     7d8:	3f 98       	cbi	0x07, 7	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     7da:	e8 e6       	ldi	r30, 0x68	; 104
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	73 83       	std	Z+3, r23	; 0x03
     7e0:	62 83       	std	Z+2, r22	; 0x02
     7e2:	55 83       	std	Z+5, r21	; 0x05
     7e4:	44 83       	std	Z+4, r20	; 0x04
     7e6:	37 83       	std	Z+7, r19	; 0x07
     7e8:	26 83       	std	Z+6, r18	; 0x06
     7ea:	26 e0       	ldi	r18, 0x06	; 6
     7ec:	20 87       	std	Z+8, r18	; 0x08
     7ee:	20 e4       	ldi	r18, 0x40	; 64
     7f0:	21 87       	std	Z+9, r18	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     7f2:	91 83       	std	Z+1, r25	; 0x01
     7f4:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     7f6:	3e 98       	cbi	0x07, 6	; 7
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	08 95       	ret

0000080a <_GLOBAL__sub_D__Znwj>:
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
#include <stdio.h>
using namespace opbots;

const uint8_t ERR(0);

Output enable[] = {
     80e:	cc ec       	ldi	r28, 0xCC	; 204
     810:	d1 e0       	ldi	r29, 0x01	; 1
     812:	2a 97       	sbiw	r28, 0x0a	; 10
     814:	e8 81       	ld	r30, Y
     816:	f9 81       	ldd	r31, Y+1	; 0x01
     818:	01 90       	ld	r0, Z+
     81a:	f0 81       	ld	r31, Z
     81c:	e0 2d       	mov	r30, r0
     81e:	ce 01       	movw	r24, r28
     820:	09 95       	icall
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	c6 38       	cpi	r28, 0x86	; 134
     826:	d8 07       	cpc	r29, r24
     828:	a1 f7       	brne	.-24     	; 0x812 <_GLOBAL__sub_D__Znwj+0x8>
		centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
		sprintf(message, "%2lu.%02lu W\r\n", watts, centiwatts);
		Serial::transmit(message, 10);
		_delay_ms(500);
    }
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <__udivmodsi4>:
     830:	a1 e2       	ldi	r26, 0x21	; 33
     832:	1a 2e       	mov	r1, r26
     834:	aa 1b       	sub	r26, r26
     836:	bb 1b       	sub	r27, r27
     838:	fd 01       	movw	r30, r26
     83a:	0d c0       	rjmp	.+26     	; 0x856 <__udivmodsi4_ep>

0000083c <__udivmodsi4_loop>:
     83c:	aa 1f       	adc	r26, r26
     83e:	bb 1f       	adc	r27, r27
     840:	ee 1f       	adc	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	a2 17       	cp	r26, r18
     846:	b3 07       	cpc	r27, r19
     848:	e4 07       	cpc	r30, r20
     84a:	f5 07       	cpc	r31, r21
     84c:	20 f0       	brcs	.+8      	; 0x856 <__udivmodsi4_ep>
     84e:	a2 1b       	sub	r26, r18
     850:	b3 0b       	sbc	r27, r19
     852:	e4 0b       	sbc	r30, r20
     854:	f5 0b       	sbc	r31, r21

00000856 <__udivmodsi4_ep>:
     856:	66 1f       	adc	r22, r22
     858:	77 1f       	adc	r23, r23
     85a:	88 1f       	adc	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	1a 94       	dec	r1
     860:	69 f7       	brne	.-38     	; 0x83c <__udivmodsi4_loop>
     862:	60 95       	com	r22
     864:	70 95       	com	r23
     866:	80 95       	com	r24
     868:	90 95       	com	r25
     86a:	9b 01       	movw	r18, r22
     86c:	ac 01       	movw	r20, r24
     86e:	bd 01       	movw	r22, r26
     870:	cf 01       	movw	r24, r30
     872:	08 95       	ret

00000874 <__umulhisi3>:
     874:	a2 9f       	mul	r26, r18
     876:	b0 01       	movw	r22, r0
     878:	b3 9f       	mul	r27, r19
     87a:	c0 01       	movw	r24, r0
     87c:	a3 9f       	mul	r26, r19
     87e:	70 0d       	add	r23, r0
     880:	81 1d       	adc	r24, r1
     882:	11 24       	eor	r1, r1
     884:	91 1d       	adc	r25, r1
     886:	b2 9f       	mul	r27, r18
     888:	70 0d       	add	r23, r0
     88a:	81 1d       	adc	r24, r1
     88c:	11 24       	eor	r1, r1
     88e:	91 1d       	adc	r25, r1
     890:	08 95       	ret

00000892 <__muluhisi3>:
     892:	0e 94 3a 04 	call	0x874	; 0x874 <__umulhisi3>
     896:	a5 9f       	mul	r26, r21
     898:	90 0d       	add	r25, r0
     89a:	b4 9f       	mul	r27, r20
     89c:	90 0d       	add	r25, r0
     89e:	a4 9f       	mul	r26, r20
     8a0:	80 0d       	add	r24, r0
     8a2:	91 1d       	adc	r25, r1
     8a4:	11 24       	eor	r1, r1
     8a6:	08 95       	ret

000008a8 <__tablejump2__>:
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	05 90       	lpm	r0, Z+
     8ae:	f4 91       	lpm	r31, Z
     8b0:	e0 2d       	mov	r30, r0
     8b2:	09 94       	ijmp

000008b4 <malloc>:
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	82 30       	cpi	r24, 0x02	; 2
     8ba:	91 05       	cpc	r25, r1
     8bc:	10 f4       	brcc	.+4      	; 0x8c2 <malloc+0xe>
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	e0 91 f6 01 	lds	r30, 0x01F6
     8c6:	f0 91 f7 01 	lds	r31, 0x01F7
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	c0 e0       	ldi	r28, 0x00	; 0
     8d0:	d0 e0       	ldi	r29, 0x00	; 0
     8d2:	30 97       	sbiw	r30, 0x00	; 0
     8d4:	11 f1       	breq	.+68     	; 0x91a <__stack+0x1b>
     8d6:	40 81       	ld	r20, Z
     8d8:	51 81       	ldd	r21, Z+1	; 0x01
     8da:	48 17       	cp	r20, r24
     8dc:	59 07       	cpc	r21, r25
     8de:	c0 f0       	brcs	.+48     	; 0x910 <__stack+0x11>
     8e0:	48 17       	cp	r20, r24
     8e2:	59 07       	cpc	r21, r25
     8e4:	61 f4       	brne	.+24     	; 0x8fe <malloc+0x4a>
     8e6:	82 81       	ldd	r24, Z+2	; 0x02
     8e8:	93 81       	ldd	r25, Z+3	; 0x03
     8ea:	20 97       	sbiw	r28, 0x00	; 0
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <malloc+0x40>
     8ee:	9b 83       	std	Y+3, r25	; 0x03
     8f0:	8a 83       	std	Y+2, r24	; 0x02
     8f2:	2b c0       	rjmp	.+86     	; 0x94a <__stack+0x4b>
     8f4:	90 93 f7 01 	sts	0x01F7, r25
     8f8:	80 93 f6 01 	sts	0x01F6, r24
     8fc:	26 c0       	rjmp	.+76     	; 0x94a <__stack+0x4b>
     8fe:	21 15       	cp	r18, r1
     900:	31 05       	cpc	r19, r1
     902:	19 f0       	breq	.+6      	; 0x90a <__stack+0xb>
     904:	42 17       	cp	r20, r18
     906:	53 07       	cpc	r21, r19
     908:	18 f4       	brcc	.+6      	; 0x910 <__stack+0x11>
     90a:	9a 01       	movw	r18, r20
     90c:	be 01       	movw	r22, r28
     90e:	df 01       	movw	r26, r30
     910:	ef 01       	movw	r28, r30
     912:	02 80       	ldd	r0, Z+2	; 0x02
     914:	f3 81       	ldd	r31, Z+3	; 0x03
     916:	e0 2d       	mov	r30, r0
     918:	dc cf       	rjmp	.-72     	; 0x8d2 <malloc+0x1e>
     91a:	21 15       	cp	r18, r1
     91c:	31 05       	cpc	r19, r1
     91e:	09 f1       	breq	.+66     	; 0x962 <__stack+0x63>
     920:	28 1b       	sub	r18, r24
     922:	39 0b       	sbc	r19, r25
     924:	24 30       	cpi	r18, 0x04	; 4
     926:	31 05       	cpc	r19, r1
     928:	90 f4       	brcc	.+36     	; 0x94e <__stack+0x4f>
     92a:	12 96       	adiw	r26, 0x02	; 2
     92c:	8d 91       	ld	r24, X+
     92e:	9c 91       	ld	r25, X
     930:	13 97       	sbiw	r26, 0x03	; 3
     932:	61 15       	cp	r22, r1
     934:	71 05       	cpc	r23, r1
     936:	21 f0       	breq	.+8      	; 0x940 <__stack+0x41>
     938:	fb 01       	movw	r30, r22
     93a:	93 83       	std	Z+3, r25	; 0x03
     93c:	82 83       	std	Z+2, r24	; 0x02
     93e:	04 c0       	rjmp	.+8      	; 0x948 <__stack+0x49>
     940:	90 93 f7 01 	sts	0x01F7, r25
     944:	80 93 f6 01 	sts	0x01F6, r24
     948:	fd 01       	movw	r30, r26
     94a:	32 96       	adiw	r30, 0x02	; 2
     94c:	44 c0       	rjmp	.+136    	; 0x9d6 <__stack+0xd7>
     94e:	fd 01       	movw	r30, r26
     950:	e2 0f       	add	r30, r18
     952:	f3 1f       	adc	r31, r19
     954:	81 93       	st	Z+, r24
     956:	91 93       	st	Z+, r25
     958:	22 50       	subi	r18, 0x02	; 2
     95a:	31 09       	sbc	r19, r1
     95c:	2d 93       	st	X+, r18
     95e:	3c 93       	st	X, r19
     960:	3a c0       	rjmp	.+116    	; 0x9d6 <__stack+0xd7>
     962:	20 91 f4 01 	lds	r18, 0x01F4
     966:	30 91 f5 01 	lds	r19, 0x01F5
     96a:	23 2b       	or	r18, r19
     96c:	41 f4       	brne	.+16     	; 0x97e <__stack+0x7f>
     96e:	20 91 02 01 	lds	r18, 0x0102
     972:	30 91 03 01 	lds	r19, 0x0103
     976:	30 93 f5 01 	sts	0x01F5, r19
     97a:	20 93 f4 01 	sts	0x01F4, r18
     97e:	20 91 00 01 	lds	r18, 0x0100
     982:	30 91 01 01 	lds	r19, 0x0101
     986:	21 15       	cp	r18, r1
     988:	31 05       	cpc	r19, r1
     98a:	41 f4       	brne	.+16     	; 0x99c <__stack+0x9d>
     98c:	2d b7       	in	r18, 0x3d	; 61
     98e:	3e b7       	in	r19, 0x3e	; 62
     990:	40 91 04 01 	lds	r20, 0x0104
     994:	50 91 05 01 	lds	r21, 0x0105
     998:	24 1b       	sub	r18, r20
     99a:	35 0b       	sbc	r19, r21
     99c:	e0 91 f4 01 	lds	r30, 0x01F4
     9a0:	f0 91 f5 01 	lds	r31, 0x01F5
     9a4:	e2 17       	cp	r30, r18
     9a6:	f3 07       	cpc	r31, r19
     9a8:	a0 f4       	brcc	.+40     	; 0x9d2 <__stack+0xd3>
     9aa:	2e 1b       	sub	r18, r30
     9ac:	3f 0b       	sbc	r19, r31
     9ae:	28 17       	cp	r18, r24
     9b0:	39 07       	cpc	r19, r25
     9b2:	78 f0       	brcs	.+30     	; 0x9d2 <__stack+0xd3>
     9b4:	ac 01       	movw	r20, r24
     9b6:	4e 5f       	subi	r20, 0xFE	; 254
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	24 17       	cp	r18, r20
     9bc:	35 07       	cpc	r19, r21
     9be:	48 f0       	brcs	.+18     	; 0x9d2 <__stack+0xd3>
     9c0:	4e 0f       	add	r20, r30
     9c2:	5f 1f       	adc	r21, r31
     9c4:	50 93 f5 01 	sts	0x01F5, r21
     9c8:	40 93 f4 01 	sts	0x01F4, r20
     9cc:	81 93       	st	Z+, r24
     9ce:	91 93       	st	Z+, r25
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
     9d2:	e0 e0       	ldi	r30, 0x00	; 0
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	cf 01       	movw	r24, r30
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <free>:
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	00 97       	sbiw	r24, 0x00	; 0
     9e8:	09 f4       	brne	.+2      	; 0x9ec <free+0xe>
     9ea:	8c c0       	rjmp	.+280    	; 0xb04 <free+0x126>
     9ec:	fc 01       	movw	r30, r24
     9ee:	32 97       	sbiw	r30, 0x02	; 2
     9f0:	13 82       	std	Z+3, r1	; 0x03
     9f2:	12 82       	std	Z+2, r1	; 0x02
     9f4:	00 91 f6 01 	lds	r16, 0x01F6
     9f8:	10 91 f7 01 	lds	r17, 0x01F7
     9fc:	01 15       	cp	r16, r1
     9fe:	11 05       	cpc	r17, r1
     a00:	81 f4       	brne	.+32     	; 0xa22 <free+0x44>
     a02:	20 81       	ld	r18, Z
     a04:	31 81       	ldd	r19, Z+1	; 0x01
     a06:	82 0f       	add	r24, r18
     a08:	93 1f       	adc	r25, r19
     a0a:	20 91 f4 01 	lds	r18, 0x01F4
     a0e:	30 91 f5 01 	lds	r19, 0x01F5
     a12:	28 17       	cp	r18, r24
     a14:	39 07       	cpc	r19, r25
     a16:	79 f5       	brne	.+94     	; 0xa76 <free+0x98>
     a18:	f0 93 f5 01 	sts	0x01F5, r31
     a1c:	e0 93 f4 01 	sts	0x01F4, r30
     a20:	71 c0       	rjmp	.+226    	; 0xb04 <free+0x126>
     a22:	d8 01       	movw	r26, r16
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	ae 17       	cp	r26, r30
     a2a:	bf 07       	cpc	r27, r31
     a2c:	50 f4       	brcc	.+20     	; 0xa42 <free+0x64>
     a2e:	12 96       	adiw	r26, 0x02	; 2
     a30:	2d 91       	ld	r18, X+
     a32:	3c 91       	ld	r19, X
     a34:	13 97       	sbiw	r26, 0x03	; 3
     a36:	ad 01       	movw	r20, r26
     a38:	21 15       	cp	r18, r1
     a3a:	31 05       	cpc	r19, r1
     a3c:	09 f1       	breq	.+66     	; 0xa80 <free+0xa2>
     a3e:	d9 01       	movw	r26, r18
     a40:	f3 cf       	rjmp	.-26     	; 0xa28 <free+0x4a>
     a42:	9d 01       	movw	r18, r26
     a44:	da 01       	movw	r26, r20
     a46:	33 83       	std	Z+3, r19	; 0x03
     a48:	22 83       	std	Z+2, r18	; 0x02
     a4a:	60 81       	ld	r22, Z
     a4c:	71 81       	ldd	r23, Z+1	; 0x01
     a4e:	86 0f       	add	r24, r22
     a50:	97 1f       	adc	r25, r23
     a52:	82 17       	cp	r24, r18
     a54:	93 07       	cpc	r25, r19
     a56:	69 f4       	brne	.+26     	; 0xa72 <free+0x94>
     a58:	ec 01       	movw	r28, r24
     a5a:	28 81       	ld	r18, Y
     a5c:	39 81       	ldd	r19, Y+1	; 0x01
     a5e:	26 0f       	add	r18, r22
     a60:	37 1f       	adc	r19, r23
     a62:	2e 5f       	subi	r18, 0xFE	; 254
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	31 83       	std	Z+1, r19	; 0x01
     a68:	20 83       	st	Z, r18
     a6a:	8a 81       	ldd	r24, Y+2	; 0x02
     a6c:	9b 81       	ldd	r25, Y+3	; 0x03
     a6e:	93 83       	std	Z+3, r25	; 0x03
     a70:	82 83       	std	Z+2, r24	; 0x02
     a72:	45 2b       	or	r20, r21
     a74:	29 f4       	brne	.+10     	; 0xa80 <free+0xa2>
     a76:	f0 93 f7 01 	sts	0x01F7, r31
     a7a:	e0 93 f6 01 	sts	0x01F6, r30
     a7e:	42 c0       	rjmp	.+132    	; 0xb04 <free+0x126>
     a80:	13 96       	adiw	r26, 0x03	; 3
     a82:	fc 93       	st	X, r31
     a84:	ee 93       	st	-X, r30
     a86:	12 97       	sbiw	r26, 0x02	; 2
     a88:	ed 01       	movw	r28, r26
     a8a:	49 91       	ld	r20, Y+
     a8c:	59 91       	ld	r21, Y+
     a8e:	9e 01       	movw	r18, r28
     a90:	24 0f       	add	r18, r20
     a92:	35 1f       	adc	r19, r21
     a94:	e2 17       	cp	r30, r18
     a96:	f3 07       	cpc	r31, r19
     a98:	71 f4       	brne	.+28     	; 0xab6 <free+0xd8>
     a9a:	80 81       	ld	r24, Z
     a9c:	91 81       	ldd	r25, Z+1	; 0x01
     a9e:	84 0f       	add	r24, r20
     aa0:	95 1f       	adc	r25, r21
     aa2:	02 96       	adiw	r24, 0x02	; 2
     aa4:	11 96       	adiw	r26, 0x01	; 1
     aa6:	9c 93       	st	X, r25
     aa8:	8e 93       	st	-X, r24
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	93 81       	ldd	r25, Z+3	; 0x03
     aae:	13 96       	adiw	r26, 0x03	; 3
     ab0:	9c 93       	st	X, r25
     ab2:	8e 93       	st	-X, r24
     ab4:	12 97       	sbiw	r26, 0x02	; 2
     ab6:	e0 e0       	ldi	r30, 0x00	; 0
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	d8 01       	movw	r26, r16
     abc:	12 96       	adiw	r26, 0x02	; 2
     abe:	8d 91       	ld	r24, X+
     ac0:	9c 91       	ld	r25, X
     ac2:	13 97       	sbiw	r26, 0x03	; 3
     ac4:	00 97       	sbiw	r24, 0x00	; 0
     ac6:	19 f0       	breq	.+6      	; 0xace <free+0xf0>
     ac8:	f8 01       	movw	r30, r16
     aca:	8c 01       	movw	r16, r24
     acc:	f6 cf       	rjmp	.-20     	; 0xaba <free+0xdc>
     ace:	8d 91       	ld	r24, X+
     ad0:	9c 91       	ld	r25, X
     ad2:	98 01       	movw	r18, r16
     ad4:	2e 5f       	subi	r18, 0xFE	; 254
     ad6:	3f 4f       	sbci	r19, 0xFF	; 255
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	20 91 f4 01 	lds	r18, 0x01F4
     ae0:	30 91 f5 01 	lds	r19, 0x01F5
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	69 f4       	brne	.+26     	; 0xb04 <free+0x126>
     aea:	30 97       	sbiw	r30, 0x00	; 0
     aec:	29 f4       	brne	.+10     	; 0xaf8 <free+0x11a>
     aee:	10 92 f7 01 	sts	0x01F7, r1
     af2:	10 92 f6 01 	sts	0x01F6, r1
     af6:	02 c0       	rjmp	.+4      	; 0xafc <free+0x11e>
     af8:	13 82       	std	Z+3, r1	; 0x03
     afa:	12 82       	std	Z+2, r1	; 0x02
     afc:	10 93 f5 01 	sts	0x01F5, r17
     b00:	00 93 f4 01 	sts	0x01F4, r16
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <sprintf>:
     b0e:	ae e0       	ldi	r26, 0x0E	; 14
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ed e8       	ldi	r30, 0x8D	; 141
     b14:	f5 e0       	ldi	r31, 0x05	; 5
     b16:	0c 94 36 08 	jmp	0x106c	; 0x106c <__prologue_saves__+0x1c>
     b1a:	0d 89       	ldd	r16, Y+21	; 0x15
     b1c:	1e 89       	ldd	r17, Y+22	; 0x16
     b1e:	86 e0       	ldi	r24, 0x06	; 6
     b20:	8c 83       	std	Y+4, r24	; 0x04
     b22:	1a 83       	std	Y+2, r17	; 0x02
     b24:	09 83       	std	Y+1, r16	; 0x01
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	9f e7       	ldi	r25, 0x7F	; 127
     b2a:	9e 83       	std	Y+6, r25	; 0x06
     b2c:	8d 83       	std	Y+5, r24	; 0x05
     b2e:	ae 01       	movw	r20, r28
     b30:	47 5e       	subi	r20, 0xE7	; 231
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	6f 89       	ldd	r22, Y+23	; 0x17
     b36:	78 8d       	ldd	r23, Y+24	; 0x18
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 aa 05 	call	0xb54	; 0xb54 <vfprintf>
     b40:	2f 81       	ldd	r18, Y+7	; 0x07
     b42:	38 85       	ldd	r19, Y+8	; 0x08
     b44:	f8 01       	movw	r30, r16
     b46:	e2 0f       	add	r30, r18
     b48:	f3 1f       	adc	r31, r19
     b4a:	10 82       	st	Z, r1
     b4c:	2e 96       	adiw	r28, 0x0e	; 14
     b4e:	e4 e0       	ldi	r30, 0x04	; 4
     b50:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__epilogue_restores__+0x1c>

00000b54 <vfprintf>:
     b54:	ac e0       	ldi	r26, 0x0C	; 12
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e0 eb       	ldi	r30, 0xB0	; 176
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__prologue_saves__>
     b60:	7c 01       	movw	r14, r24
     b62:	6b 01       	movw	r12, r22
     b64:	8a 01       	movw	r16, r20
     b66:	fc 01       	movw	r30, r24
     b68:	17 82       	std	Z+7, r1	; 0x07
     b6a:	16 82       	std	Z+6, r1	; 0x06
     b6c:	83 81       	ldd	r24, Z+3	; 0x03
     b6e:	81 ff       	sbrs	r24, 1
     b70:	bd c1       	rjmp	.+890    	; 0xeec <vfprintf+0x398>
     b72:	ce 01       	movw	r24, r28
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	4c 01       	movw	r8, r24
     b78:	f7 01       	movw	r30, r14
     b7a:	93 81       	ldd	r25, Z+3	; 0x03
     b7c:	f6 01       	movw	r30, r12
     b7e:	93 fd       	sbrc	r25, 3
     b80:	85 91       	lpm	r24, Z+
     b82:	93 ff       	sbrs	r25, 3
     b84:	81 91       	ld	r24, Z+
     b86:	6f 01       	movw	r12, r30
     b88:	88 23       	and	r24, r24
     b8a:	09 f4       	brne	.+2      	; 0xb8e <vfprintf+0x3a>
     b8c:	ab c1       	rjmp	.+854    	; 0xee4 <vfprintf+0x390>
     b8e:	85 32       	cpi	r24, 0x25	; 37
     b90:	39 f4       	brne	.+14     	; 0xba0 <vfprintf+0x4c>
     b92:	93 fd       	sbrc	r25, 3
     b94:	85 91       	lpm	r24, Z+
     b96:	93 ff       	sbrs	r25, 3
     b98:	81 91       	ld	r24, Z+
     b9a:	6f 01       	movw	r12, r30
     b9c:	85 32       	cpi	r24, 0x25	; 37
     b9e:	29 f4       	brne	.+10     	; 0xbaa <vfprintf+0x56>
     ba0:	b7 01       	movw	r22, r14
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ba8:	e7 cf       	rjmp	.-50     	; 0xb78 <vfprintf+0x24>
     baa:	51 2c       	mov	r5, r1
     bac:	31 2c       	mov	r3, r1
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	20 32       	cpi	r18, 0x20	; 32
     bb2:	a0 f4       	brcc	.+40     	; 0xbdc <vfprintf+0x88>
     bb4:	8b 32       	cpi	r24, 0x2B	; 43
     bb6:	69 f0       	breq	.+26     	; 0xbd2 <vfprintf+0x7e>
     bb8:	30 f4       	brcc	.+12     	; 0xbc6 <vfprintf+0x72>
     bba:	80 32       	cpi	r24, 0x20	; 32
     bbc:	59 f0       	breq	.+22     	; 0xbd4 <vfprintf+0x80>
     bbe:	83 32       	cpi	r24, 0x23	; 35
     bc0:	69 f4       	brne	.+26     	; 0xbdc <vfprintf+0x88>
     bc2:	20 61       	ori	r18, 0x10	; 16
     bc4:	2c c0       	rjmp	.+88     	; 0xc1e <vfprintf+0xca>
     bc6:	8d 32       	cpi	r24, 0x2D	; 45
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <vfprintf+0x84>
     bca:	80 33       	cpi	r24, 0x30	; 48
     bcc:	39 f4       	brne	.+14     	; 0xbdc <vfprintf+0x88>
     bce:	21 60       	ori	r18, 0x01	; 1
     bd0:	26 c0       	rjmp	.+76     	; 0xc1e <vfprintf+0xca>
     bd2:	22 60       	ori	r18, 0x02	; 2
     bd4:	24 60       	ori	r18, 0x04	; 4
     bd6:	23 c0       	rjmp	.+70     	; 0xc1e <vfprintf+0xca>
     bd8:	28 60       	ori	r18, 0x08	; 8
     bda:	21 c0       	rjmp	.+66     	; 0xc1e <vfprintf+0xca>
     bdc:	27 fd       	sbrc	r18, 7
     bde:	27 c0       	rjmp	.+78     	; 0xc2e <vfprintf+0xda>
     be0:	30 ed       	ldi	r19, 0xD0	; 208
     be2:	38 0f       	add	r19, r24
     be4:	3a 30       	cpi	r19, 0x0A	; 10
     be6:	78 f4       	brcc	.+30     	; 0xc06 <vfprintf+0xb2>
     be8:	26 ff       	sbrs	r18, 6
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <vfprintf+0xa4>
     bec:	fa e0       	ldi	r31, 0x0A	; 10
     bee:	5f 9e       	mul	r5, r31
     bf0:	30 0d       	add	r19, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	53 2e       	mov	r5, r19
     bf6:	13 c0       	rjmp	.+38     	; 0xc1e <vfprintf+0xca>
     bf8:	8a e0       	ldi	r24, 0x0A	; 10
     bfa:	38 9e       	mul	r3, r24
     bfc:	30 0d       	add	r19, r0
     bfe:	11 24       	eor	r1, r1
     c00:	33 2e       	mov	r3, r19
     c02:	20 62       	ori	r18, 0x20	; 32
     c04:	0c c0       	rjmp	.+24     	; 0xc1e <vfprintf+0xca>
     c06:	8e 32       	cpi	r24, 0x2E	; 46
     c08:	21 f4       	brne	.+8      	; 0xc12 <vfprintf+0xbe>
     c0a:	26 fd       	sbrc	r18, 6
     c0c:	6b c1       	rjmp	.+726    	; 0xee4 <vfprintf+0x390>
     c0e:	20 64       	ori	r18, 0x40	; 64
     c10:	06 c0       	rjmp	.+12     	; 0xc1e <vfprintf+0xca>
     c12:	8c 36       	cpi	r24, 0x6C	; 108
     c14:	11 f4       	brne	.+4      	; 0xc1a <vfprintf+0xc6>
     c16:	20 68       	ori	r18, 0x80	; 128
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <vfprintf+0xca>
     c1a:	88 36       	cpi	r24, 0x68	; 104
     c1c:	41 f4       	brne	.+16     	; 0xc2e <vfprintf+0xda>
     c1e:	f6 01       	movw	r30, r12
     c20:	93 fd       	sbrc	r25, 3
     c22:	85 91       	lpm	r24, Z+
     c24:	93 ff       	sbrs	r25, 3
     c26:	81 91       	ld	r24, Z+
     c28:	6f 01       	movw	r12, r30
     c2a:	81 11       	cpse	r24, r1
     c2c:	c1 cf       	rjmp	.-126    	; 0xbb0 <vfprintf+0x5c>
     c2e:	98 2f       	mov	r25, r24
     c30:	9f 7d       	andi	r25, 0xDF	; 223
     c32:	95 54       	subi	r25, 0x45	; 69
     c34:	93 30       	cpi	r25, 0x03	; 3
     c36:	28 f4       	brcc	.+10     	; 0xc42 <vfprintf+0xee>
     c38:	0c 5f       	subi	r16, 0xFC	; 252
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	ff e3       	ldi	r31, 0x3F	; 63
     c3e:	f9 83       	std	Y+1, r31	; 0x01
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <vfprintf+0x108>
     c42:	83 36       	cpi	r24, 0x63	; 99
     c44:	31 f0       	breq	.+12     	; 0xc52 <vfprintf+0xfe>
     c46:	83 37       	cpi	r24, 0x73	; 115
     c48:	71 f0       	breq	.+28     	; 0xc66 <vfprintf+0x112>
     c4a:	83 35       	cpi	r24, 0x53	; 83
     c4c:	09 f0       	breq	.+2      	; 0xc50 <vfprintf+0xfc>
     c4e:	5b c0       	rjmp	.+182    	; 0xd06 <vfprintf+0x1b2>
     c50:	22 c0       	rjmp	.+68     	; 0xc96 <vfprintf+0x142>
     c52:	f8 01       	movw	r30, r16
     c54:	80 81       	ld	r24, Z
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	0e 5f       	subi	r16, 0xFE	; 254
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	44 24       	eor	r4, r4
     c5e:	43 94       	inc	r4
     c60:	51 2c       	mov	r5, r1
     c62:	54 01       	movw	r10, r8
     c64:	15 c0       	rjmp	.+42     	; 0xc90 <vfprintf+0x13c>
     c66:	38 01       	movw	r6, r16
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	6f 0e       	add	r6, r31
     c6c:	71 1c       	adc	r7, r1
     c6e:	f8 01       	movw	r30, r16
     c70:	a0 80       	ld	r10, Z
     c72:	b1 80       	ldd	r11, Z+1	; 0x01
     c74:	26 ff       	sbrs	r18, 6
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x12a>
     c78:	65 2d       	mov	r22, r5
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x12e>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	c5 01       	movw	r24, r10
     c84:	2c 87       	std	Y+12, r18	; 0x0c
     c86:	0e 94 87 07 	call	0xf0e	; 0xf0e <strnlen>
     c8a:	2c 01       	movw	r4, r24
     c8c:	83 01       	movw	r16, r6
     c8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c90:	2f 77       	andi	r18, 0x7F	; 127
     c92:	22 2e       	mov	r2, r18
     c94:	17 c0       	rjmp	.+46     	; 0xcc4 <vfprintf+0x170>
     c96:	38 01       	movw	r6, r16
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	6f 0e       	add	r6, r31
     c9c:	71 1c       	adc	r7, r1
     c9e:	f8 01       	movw	r30, r16
     ca0:	a0 80       	ld	r10, Z
     ca2:	b1 80       	ldd	r11, Z+1	; 0x01
     ca4:	26 ff       	sbrs	r18, 6
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <vfprintf+0x15a>
     ca8:	65 2d       	mov	r22, r5
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x15e>
     cae:	6f ef       	ldi	r22, 0xFF	; 255
     cb0:	7f ef       	ldi	r23, 0xFF	; 255
     cb2:	c5 01       	movw	r24, r10
     cb4:	2c 87       	std	Y+12, r18	; 0x0c
     cb6:	0e 94 7c 07 	call	0xef8	; 0xef8 <strnlen_P>
     cba:	2c 01       	movw	r4, r24
     cbc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cbe:	20 68       	ori	r18, 0x80	; 128
     cc0:	22 2e       	mov	r2, r18
     cc2:	83 01       	movw	r16, r6
     cc4:	23 fc       	sbrc	r2, 3
     cc6:	1b c0       	rjmp	.+54     	; 0xcfe <vfprintf+0x1aa>
     cc8:	83 2d       	mov	r24, r3
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	48 16       	cp	r4, r24
     cce:	59 06       	cpc	r5, r25
     cd0:	b0 f4       	brcc	.+44     	; 0xcfe <vfprintf+0x1aa>
     cd2:	b7 01       	movw	r22, r14
     cd4:	80 e2       	ldi	r24, 0x20	; 32
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     cdc:	3a 94       	dec	r3
     cde:	f4 cf       	rjmp	.-24     	; 0xcc8 <vfprintf+0x174>
     ce0:	f5 01       	movw	r30, r10
     ce2:	27 fc       	sbrc	r2, 7
     ce4:	85 91       	lpm	r24, Z+
     ce6:	27 fe       	sbrs	r2, 7
     ce8:	81 91       	ld	r24, Z+
     cea:	5f 01       	movw	r10, r30
     cec:	b7 01       	movw	r22, r14
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     cf4:	31 10       	cpse	r3, r1
     cf6:	3a 94       	dec	r3
     cf8:	f1 e0       	ldi	r31, 0x01	; 1
     cfa:	4f 1a       	sub	r4, r31
     cfc:	51 08       	sbc	r5, r1
     cfe:	41 14       	cp	r4, r1
     d00:	51 04       	cpc	r5, r1
     d02:	71 f7       	brne	.-36     	; 0xce0 <vfprintf+0x18c>
     d04:	e5 c0       	rjmp	.+458    	; 0xed0 <vfprintf+0x37c>
     d06:	84 36       	cpi	r24, 0x64	; 100
     d08:	11 f0       	breq	.+4      	; 0xd0e <vfprintf+0x1ba>
     d0a:	89 36       	cpi	r24, 0x69	; 105
     d0c:	39 f5       	brne	.+78     	; 0xd5c <vfprintf+0x208>
     d0e:	f8 01       	movw	r30, r16
     d10:	27 ff       	sbrs	r18, 7
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <vfprintf+0x1ce>
     d14:	60 81       	ld	r22, Z
     d16:	71 81       	ldd	r23, Z+1	; 0x01
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	0c 5f       	subi	r16, 0xFC	; 252
     d1e:	1f 4f       	sbci	r17, 0xFF	; 255
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <vfprintf+0x1de>
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	07 2e       	mov	r0, r23
     d28:	00 0c       	add	r0, r0
     d2a:	88 0b       	sbc	r24, r24
     d2c:	99 0b       	sbc	r25, r25
     d2e:	0e 5f       	subi	r16, 0xFE	; 254
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	2f 76       	andi	r18, 0x6F	; 111
     d34:	72 2e       	mov	r7, r18
     d36:	97 ff       	sbrs	r25, 7
     d38:	09 c0       	rjmp	.+18     	; 0xd4c <vfprintf+0x1f8>
     d3a:	90 95       	com	r25
     d3c:	80 95       	com	r24
     d3e:	70 95       	com	r23
     d40:	61 95       	neg	r22
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	8f 4f       	sbci	r24, 0xFF	; 255
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	20 68       	ori	r18, 0x80	; 128
     d4a:	72 2e       	mov	r7, r18
     d4c:	2a e0       	ldi	r18, 0x0A	; 10
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	a4 01       	movw	r20, r8
     d52:	0e 94 ca 07 	call	0xf94	; 0xf94 <__ultoa_invert>
     d56:	a8 2e       	mov	r10, r24
     d58:	a8 18       	sub	r10, r8
     d5a:	44 c0       	rjmp	.+136    	; 0xde4 <vfprintf+0x290>
     d5c:	85 37       	cpi	r24, 0x75	; 117
     d5e:	29 f4       	brne	.+10     	; 0xd6a <vfprintf+0x216>
     d60:	2f 7e       	andi	r18, 0xEF	; 239
     d62:	b2 2e       	mov	r11, r18
     d64:	2a e0       	ldi	r18, 0x0A	; 10
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	25 c0       	rjmp	.+74     	; 0xdb4 <vfprintf+0x260>
     d6a:	f2 2f       	mov	r31, r18
     d6c:	f9 7f       	andi	r31, 0xF9	; 249
     d6e:	bf 2e       	mov	r11, r31
     d70:	8f 36       	cpi	r24, 0x6F	; 111
     d72:	c1 f0       	breq	.+48     	; 0xda4 <vfprintf+0x250>
     d74:	18 f4       	brcc	.+6      	; 0xd7c <vfprintf+0x228>
     d76:	88 35       	cpi	r24, 0x58	; 88
     d78:	79 f0       	breq	.+30     	; 0xd98 <vfprintf+0x244>
     d7a:	b4 c0       	rjmp	.+360    	; 0xee4 <vfprintf+0x390>
     d7c:	80 37       	cpi	r24, 0x70	; 112
     d7e:	19 f0       	breq	.+6      	; 0xd86 <vfprintf+0x232>
     d80:	88 37       	cpi	r24, 0x78	; 120
     d82:	21 f0       	breq	.+8      	; 0xd8c <vfprintf+0x238>
     d84:	af c0       	rjmp	.+350    	; 0xee4 <vfprintf+0x390>
     d86:	2f 2f       	mov	r18, r31
     d88:	20 61       	ori	r18, 0x10	; 16
     d8a:	b2 2e       	mov	r11, r18
     d8c:	b4 fe       	sbrs	r11, 4
     d8e:	0d c0       	rjmp	.+26     	; 0xdaa <vfprintf+0x256>
     d90:	8b 2d       	mov	r24, r11
     d92:	84 60       	ori	r24, 0x04	; 4
     d94:	b8 2e       	mov	r11, r24
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <vfprintf+0x256>
     d98:	24 ff       	sbrs	r18, 4
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <vfprintf+0x25c>
     d9c:	9f 2f       	mov	r25, r31
     d9e:	96 60       	ori	r25, 0x06	; 6
     da0:	b9 2e       	mov	r11, r25
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <vfprintf+0x25c>
     da4:	28 e0       	ldi	r18, 0x08	; 8
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <vfprintf+0x260>
     daa:	20 e1       	ldi	r18, 0x10	; 16
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <vfprintf+0x260>
     db0:	20 e1       	ldi	r18, 0x10	; 16
     db2:	32 e0       	ldi	r19, 0x02	; 2
     db4:	f8 01       	movw	r30, r16
     db6:	b7 fe       	sbrs	r11, 7
     db8:	07 c0       	rjmp	.+14     	; 0xdc8 <vfprintf+0x274>
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	0c 5f       	subi	r16, 0xFC	; 252
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <vfprintf+0x280>
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 5f       	subi	r16, 0xFE	; 254
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	a4 01       	movw	r20, r8
     dd6:	0e 94 ca 07 	call	0xf94	; 0xf94 <__ultoa_invert>
     dda:	a8 2e       	mov	r10, r24
     ddc:	a8 18       	sub	r10, r8
     dde:	fb 2d       	mov	r31, r11
     de0:	ff 77       	andi	r31, 0x7F	; 127
     de2:	7f 2e       	mov	r7, r31
     de4:	76 fe       	sbrs	r7, 6
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <vfprintf+0x2aa>
     de8:	37 2d       	mov	r19, r7
     dea:	3e 7f       	andi	r19, 0xFE	; 254
     dec:	a5 14       	cp	r10, r5
     dee:	50 f4       	brcc	.+20     	; 0xe04 <vfprintf+0x2b0>
     df0:	74 fe       	sbrs	r7, 4
     df2:	0a c0       	rjmp	.+20     	; 0xe08 <vfprintf+0x2b4>
     df4:	72 fc       	sbrc	r7, 2
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <vfprintf+0x2b4>
     df8:	37 2d       	mov	r19, r7
     dfa:	3e 7e       	andi	r19, 0xEE	; 238
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <vfprintf+0x2b4>
     dfe:	ba 2c       	mov	r11, r10
     e00:	37 2d       	mov	r19, r7
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <vfprintf+0x2b6>
     e04:	ba 2c       	mov	r11, r10
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <vfprintf+0x2b6>
     e08:	b5 2c       	mov	r11, r5
     e0a:	34 ff       	sbrs	r19, 4
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <vfprintf+0x2d4>
     e0e:	fe 01       	movw	r30, r28
     e10:	ea 0d       	add	r30, r10
     e12:	f1 1d       	adc	r31, r1
     e14:	80 81       	ld	r24, Z
     e16:	80 33       	cpi	r24, 0x30	; 48
     e18:	11 f4       	brne	.+4      	; 0xe1e <vfprintf+0x2ca>
     e1a:	39 7e       	andi	r19, 0xE9	; 233
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x2dc>
     e1e:	32 ff       	sbrs	r19, 2
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0x2da>
     e22:	b3 94       	inc	r11
     e24:	b3 94       	inc	r11
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <vfprintf+0x2dc>
     e28:	83 2f       	mov	r24, r19
     e2a:	86 78       	andi	r24, 0x86	; 134
     e2c:	09 f0       	breq	.+2      	; 0xe30 <vfprintf+0x2dc>
     e2e:	b3 94       	inc	r11
     e30:	33 fd       	sbrc	r19, 3
     e32:	13 c0       	rjmp	.+38     	; 0xe5a <vfprintf+0x306>
     e34:	30 ff       	sbrs	r19, 0
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x2f0>
     e38:	5a 2c       	mov	r5, r10
     e3a:	b3 14       	cp	r11, r3
     e3c:	18 f4       	brcc	.+6      	; 0xe44 <vfprintf+0x2f0>
     e3e:	53 0c       	add	r5, r3
     e40:	5b 18       	sub	r5, r11
     e42:	b3 2c       	mov	r11, r3
     e44:	b3 14       	cp	r11, r3
     e46:	68 f4       	brcc	.+26     	; 0xe62 <vfprintf+0x30e>
     e48:	b7 01       	movw	r22, r14
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	3c 87       	std	Y+12, r19	; 0x0c
     e50:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     e54:	b3 94       	inc	r11
     e56:	3c 85       	ldd	r19, Y+12	; 0x0c
     e58:	f5 cf       	rjmp	.-22     	; 0xe44 <vfprintf+0x2f0>
     e5a:	b3 14       	cp	r11, r3
     e5c:	10 f4       	brcc	.+4      	; 0xe62 <vfprintf+0x30e>
     e5e:	3b 18       	sub	r3, r11
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <vfprintf+0x310>
     e62:	31 2c       	mov	r3, r1
     e64:	34 ff       	sbrs	r19, 4
     e66:	12 c0       	rjmp	.+36     	; 0xe8c <vfprintf+0x338>
     e68:	b7 01       	movw	r22, r14
     e6a:	80 e3       	ldi	r24, 0x30	; 48
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	3c 87       	std	Y+12, r19	; 0x0c
     e70:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     e74:	3c 85       	ldd	r19, Y+12	; 0x0c
     e76:	32 ff       	sbrs	r19, 2
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <vfprintf+0x354>
     e7a:	31 fd       	sbrc	r19, 1
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <vfprintf+0x330>
     e7e:	88 e7       	ldi	r24, 0x78	; 120
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x334>
     e84:	88 e5       	ldi	r24, 0x58	; 88
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	b7 01       	movw	r22, r14
     e8a:	0c c0       	rjmp	.+24     	; 0xea4 <vfprintf+0x350>
     e8c:	83 2f       	mov	r24, r19
     e8e:	86 78       	andi	r24, 0x86	; 134
     e90:	59 f0       	breq	.+22     	; 0xea8 <vfprintf+0x354>
     e92:	31 ff       	sbrs	r19, 1
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x346>
     e96:	8b e2       	ldi	r24, 0x2B	; 43
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <vfprintf+0x348>
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	37 fd       	sbrc	r19, 7
     e9e:	8d e2       	ldi	r24, 0x2D	; 45
     ea0:	b7 01       	movw	r22, r14
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ea8:	a5 14       	cp	r10, r5
     eaa:	38 f4       	brcc	.+14     	; 0xeba <vfprintf+0x366>
     eac:	b7 01       	movw	r22, r14
     eae:	80 e3       	ldi	r24, 0x30	; 48
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     eb6:	5a 94       	dec	r5
     eb8:	f7 cf       	rjmp	.-18     	; 0xea8 <vfprintf+0x354>
     eba:	aa 94       	dec	r10
     ebc:	f4 01       	movw	r30, r8
     ebe:	ea 0d       	add	r30, r10
     ec0:	f1 1d       	adc	r31, r1
     ec2:	80 81       	ld	r24, Z
     ec4:	b7 01       	movw	r22, r14
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ecc:	a1 10       	cpse	r10, r1
     ece:	f5 cf       	rjmp	.-22     	; 0xeba <vfprintf+0x366>
     ed0:	33 20       	and	r3, r3
     ed2:	09 f4       	brne	.+2      	; 0xed6 <vfprintf+0x382>
     ed4:	51 ce       	rjmp	.-862    	; 0xb78 <vfprintf+0x24>
     ed6:	b7 01       	movw	r22, r14
     ed8:	80 e2       	ldi	r24, 0x20	; 32
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ee0:	3a 94       	dec	r3
     ee2:	f6 cf       	rjmp	.-20     	; 0xed0 <vfprintf+0x37c>
     ee4:	f7 01       	movw	r30, r14
     ee6:	86 81       	ldd	r24, Z+6	; 0x06
     ee8:	97 81       	ldd	r25, Z+7	; 0x07
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x39c>
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	2c 96       	adiw	r28, 0x0c	; 12
     ef2:	e2 e1       	ldi	r30, 0x12	; 18
     ef4:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__epilogue_restores__>

00000ef8 <strnlen_P>:
     ef8:	fc 01       	movw	r30, r24
     efa:	05 90       	lpm	r0, Z+
     efc:	61 50       	subi	r22, 0x01	; 1
     efe:	70 40       	sbci	r23, 0x00	; 0
     f00:	01 10       	cpse	r0, r1
     f02:	d8 f7       	brcc	.-10     	; 0xefa <strnlen_P+0x2>
     f04:	80 95       	com	r24
     f06:	90 95       	com	r25
     f08:	8e 0f       	add	r24, r30
     f0a:	9f 1f       	adc	r25, r31
     f0c:	08 95       	ret

00000f0e <strnlen>:
     f0e:	fc 01       	movw	r30, r24
     f10:	61 50       	subi	r22, 0x01	; 1
     f12:	70 40       	sbci	r23, 0x00	; 0
     f14:	01 90       	ld	r0, Z+
     f16:	01 10       	cpse	r0, r1
     f18:	d8 f7       	brcc	.-10     	; 0xf10 <strnlen+0x2>
     f1a:	80 95       	com	r24
     f1c:	90 95       	com	r25
     f1e:	8e 0f       	add	r24, r30
     f20:	9f 1f       	adc	r25, r31
     f22:	08 95       	ret

00000f24 <fputc>:
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	fb 01       	movw	r30, r22
     f2e:	23 81       	ldd	r18, Z+3	; 0x03
     f30:	21 fd       	sbrc	r18, 1
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <fputc+0x16>
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	28 c0       	rjmp	.+80     	; 0xf8a <fputc+0x66>
     f3a:	22 ff       	sbrs	r18, 2
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <fputc+0x46>
     f3e:	46 81       	ldd	r20, Z+6	; 0x06
     f40:	57 81       	ldd	r21, Z+7	; 0x07
     f42:	24 81       	ldd	r18, Z+4	; 0x04
     f44:	35 81       	ldd	r19, Z+5	; 0x05
     f46:	42 17       	cp	r20, r18
     f48:	53 07       	cpc	r21, r19
     f4a:	44 f4       	brge	.+16     	; 0xf5c <fputc+0x38>
     f4c:	a0 81       	ld	r26, Z
     f4e:	b1 81       	ldd	r27, Z+1	; 0x01
     f50:	9d 01       	movw	r18, r26
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	31 83       	std	Z+1, r19	; 0x01
     f58:	20 83       	st	Z, r18
     f5a:	8c 93       	st	X, r24
     f5c:	26 81       	ldd	r18, Z+6	; 0x06
     f5e:	37 81       	ldd	r19, Z+7	; 0x07
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	37 83       	std	Z+7, r19	; 0x07
     f66:	26 83       	std	Z+6, r18	; 0x06
     f68:	10 c0       	rjmp	.+32     	; 0xf8a <fputc+0x66>
     f6a:	eb 01       	movw	r28, r22
     f6c:	09 2f       	mov	r16, r25
     f6e:	18 2f       	mov	r17, r24
     f70:	00 84       	ldd	r0, Z+8	; 0x08
     f72:	f1 85       	ldd	r31, Z+9	; 0x09
     f74:	e0 2d       	mov	r30, r0
     f76:	09 95       	icall
     f78:	89 2b       	or	r24, r25
     f7a:	e1 f6       	brne	.-72     	; 0xf34 <fputc+0x10>
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	9f 83       	std	Y+7, r25	; 0x07
     f84:	8e 83       	std	Y+6, r24	; 0x06
     f86:	81 2f       	mov	r24, r17
     f88:	90 2f       	mov	r25, r16
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <__ultoa_invert>:
     f94:	fa 01       	movw	r30, r20
     f96:	aa 27       	eor	r26, r26
     f98:	28 30       	cpi	r18, 0x08	; 8
     f9a:	51 f1       	breq	.+84     	; 0xff0 <__ultoa_invert+0x5c>
     f9c:	20 31       	cpi	r18, 0x10	; 16
     f9e:	81 f1       	breq	.+96     	; 0x1000 <__ultoa_invert+0x6c>
     fa0:	e8 94       	clt
     fa2:	6f 93       	push	r22
     fa4:	6e 7f       	andi	r22, 0xFE	; 254
     fa6:	6e 5f       	subi	r22, 0xFE	; 254
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	af 4f       	sbci	r26, 0xFF	; 255
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	3e d0       	rcall	.+124    	; 0x1030 <__ultoa_invert+0x9c>
     fb4:	b4 e0       	ldi	r27, 0x04	; 4
     fb6:	3c d0       	rcall	.+120    	; 0x1030 <__ultoa_invert+0x9c>
     fb8:	67 0f       	add	r22, r23
     fba:	78 1f       	adc	r23, r24
     fbc:	89 1f       	adc	r24, r25
     fbe:	9a 1f       	adc	r25, r26
     fc0:	a1 1d       	adc	r26, r1
     fc2:	68 0f       	add	r22, r24
     fc4:	79 1f       	adc	r23, r25
     fc6:	8a 1f       	adc	r24, r26
     fc8:	91 1d       	adc	r25, r1
     fca:	a1 1d       	adc	r26, r1
     fcc:	6a 0f       	add	r22, r26
     fce:	71 1d       	adc	r23, r1
     fd0:	81 1d       	adc	r24, r1
     fd2:	91 1d       	adc	r25, r1
     fd4:	a1 1d       	adc	r26, r1
     fd6:	20 d0       	rcall	.+64     	; 0x1018 <__ultoa_invert+0x84>
     fd8:	09 f4       	brne	.+2      	; 0xfdc <__ultoa_invert+0x48>
     fda:	68 94       	set
     fdc:	3f 91       	pop	r19
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	26 9f       	mul	r18, r22
     fe2:	11 24       	eor	r1, r1
     fe4:	30 19       	sub	r19, r0
     fe6:	30 5d       	subi	r19, 0xD0	; 208
     fe8:	31 93       	st	Z+, r19
     fea:	de f6       	brtc	.-74     	; 0xfa2 <__ultoa_invert+0xe>
     fec:	cf 01       	movw	r24, r30
     fee:	08 95       	ret
     ff0:	46 2f       	mov	r20, r22
     ff2:	47 70       	andi	r20, 0x07	; 7
     ff4:	40 5d       	subi	r20, 0xD0	; 208
     ff6:	41 93       	st	Z+, r20
     ff8:	b3 e0       	ldi	r27, 0x03	; 3
     ffa:	0f d0       	rcall	.+30     	; 0x101a <__ultoa_invert+0x86>
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__ultoa_invert+0x5c>
     ffe:	f6 cf       	rjmp	.-20     	; 0xfec <__ultoa_invert+0x58>
    1000:	46 2f       	mov	r20, r22
    1002:	4f 70       	andi	r20, 0x0F	; 15
    1004:	40 5d       	subi	r20, 0xD0	; 208
    1006:	4a 33       	cpi	r20, 0x3A	; 58
    1008:	18 f0       	brcs	.+6      	; 0x1010 <__ultoa_invert+0x7c>
    100a:	49 5d       	subi	r20, 0xD9	; 217
    100c:	31 fd       	sbrc	r19, 1
    100e:	40 52       	subi	r20, 0x20	; 32
    1010:	41 93       	st	Z+, r20
    1012:	02 d0       	rcall	.+4      	; 0x1018 <__ultoa_invert+0x84>
    1014:	a9 f7       	brne	.-22     	; 0x1000 <__ultoa_invert+0x6c>
    1016:	ea cf       	rjmp	.-44     	; 0xfec <__ultoa_invert+0x58>
    1018:	b4 e0       	ldi	r27, 0x04	; 4
    101a:	a6 95       	lsr	r26
    101c:	97 95       	ror	r25
    101e:	87 95       	ror	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	ba 95       	dec	r27
    1026:	c9 f7       	brne	.-14     	; 0x101a <__ultoa_invert+0x86>
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	61 05       	cpc	r22, r1
    102c:	71 05       	cpc	r23, r1
    102e:	08 95       	ret
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	0a 2e       	mov	r0, r26
    1036:	06 94       	lsr	r0
    1038:	57 95       	ror	r21
    103a:	47 95       	ror	r20
    103c:	37 95       	ror	r19
    103e:	27 95       	ror	r18
    1040:	ba 95       	dec	r27
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__ultoa_invert+0xa2>
    1044:	62 0f       	add	r22, r18
    1046:	73 1f       	adc	r23, r19
    1048:	84 1f       	adc	r24, r20
    104a:	95 1f       	adc	r25, r21
    104c:	a0 1d       	adc	r26, r0
    104e:	08 95       	ret

00001050 <__prologue_saves__>:
    1050:	2f 92       	push	r2
    1052:	3f 92       	push	r3
    1054:	4f 92       	push	r4
    1056:	5f 92       	push	r5
    1058:	6f 92       	push	r6
    105a:	7f 92       	push	r7
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	ca 1b       	sub	r28, r26
    107a:	db 0b       	sbc	r29, r27
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	09 94       	ijmp

00001088 <__epilogue_restores__>:
    1088:	2a 88       	ldd	r2, Y+18	; 0x12
    108a:	39 88       	ldd	r3, Y+17	; 0x11
    108c:	48 88       	ldd	r4, Y+16	; 0x10
    108e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1090:	6e 84       	ldd	r6, Y+14	; 0x0e
    1092:	7d 84       	ldd	r7, Y+13	; 0x0d
    1094:	8c 84       	ldd	r8, Y+12	; 0x0c
    1096:	9b 84       	ldd	r9, Y+11	; 0x0b
    1098:	aa 84       	ldd	r10, Y+10	; 0x0a
    109a:	b9 84       	ldd	r11, Y+9	; 0x09
    109c:	c8 84       	ldd	r12, Y+8	; 0x08
    109e:	df 80       	ldd	r13, Y+7	; 0x07
    10a0:	ee 80       	ldd	r14, Y+6	; 0x06
    10a2:	fd 80       	ldd	r15, Y+5	; 0x05
    10a4:	0c 81       	ldd	r16, Y+4	; 0x04
    10a6:	1b 81       	ldd	r17, Y+3	; 0x03
    10a8:	aa 81       	ldd	r26, Y+2	; 0x02
    10aa:	b9 81       	ldd	r27, Y+1	; 0x01
    10ac:	ce 0f       	add	r28, r30
    10ae:	d1 1d       	adc	r29, r1
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	ed 01       	movw	r28, r26
    10bc:	08 95       	ret

000010be <__do_global_dtors>:
    10be:	10 e0       	ldi	r17, 0x00	; 0
    10c0:	c5 e3       	ldi	r28, 0x35	; 53
    10c2:	d0 e0       	ldi	r29, 0x00	; 0
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <__do_global_dtors+0x10>
    10c6:	fe 01       	movw	r30, r28
    10c8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__tablejump2__>
    10cc:	21 96       	adiw	r28, 0x01	; 1
    10ce:	c6 33       	cpi	r28, 0x36	; 54
    10d0:	d1 07       	cpc	r29, r17
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__do_global_dtors+0x8>
    10d4:	f8 94       	cli

000010d6 <__stop_program>:
    10d6:	ff cf       	rjmp	.-2      	; 0x10d6 <__stop_program>
