
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000132e  000013c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000132e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  00800184  00800184  00001446  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b69  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000654  00000000  00000000  000030ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ac  00000000  00000000  00003741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa2  00000000  00000000  00003dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000830  00000000  00000000  0000489e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000050ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__dtors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_18>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_20>
      54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_21>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	27 02       	muls	r18, r23
      6a:	89 03       	fmulsu	r16, r17
      6c:	3b 02       	muls	r19, r27
      6e:	89 03       	fmulsu	r16, r17
      70:	89 03       	fmulsu	r16, r17
      72:	e1 01       	movw	r28, r2
      74:	ed 01       	movw	r28, r26
      76:	f9 01       	movw	r30, r18
      78:	05 02       	muls	r16, r21
      7a:	11 02       	muls	r17, r17
      7c:	1d 02       	muls	r17, r29
      7e:	89 03       	fmulsu	r16, r17
      80:	89 03       	fmulsu	r16, r17
      82:	89 03       	fmulsu	r16, r17
      84:	89 03       	fmulsu	r16, r17
      86:	89 03       	fmulsu	r16, r17
      88:	89 03       	fmulsu	r16, r17
      8a:	89 03       	fmulsu	r16, r17
      8c:	89 03       	fmulsu	r16, r17
      8e:	89 03       	fmulsu	r16, r17
      90:	89 03       	fmulsu	r16, r17
      92:	89 03       	fmulsu	r16, r17
      94:	89 03       	fmulsu	r16, r17
      96:	89 03       	fmulsu	r16, r17
      98:	89 03       	fmulsu	r16, r17
      9a:	89 03       	fmulsu	r16, r17
      9c:	89 03       	fmulsu	r16, r17
      9e:	89 03       	fmulsu	r16, r17
      a0:	89 03       	fmulsu	r16, r17
      a2:	89 03       	fmulsu	r16, r17
      a4:	89 03       	fmulsu	r16, r17
      a6:	89 03       	fmulsu	r16, r17
      a8:	89 03       	fmulsu	r16, r17
      aa:	89 03       	fmulsu	r16, r17
      ac:	89 03       	fmulsu	r16, r17
      ae:	89 03       	fmulsu	r16, r17
      b0:	89 03       	fmulsu	r16, r17
      b2:	89 03       	fmulsu	r16, r17
      b4:	89 03       	fmulsu	r16, r17
      b6:	89 03       	fmulsu	r16, r17
      b8:	89 03       	fmulsu	r16, r17
      ba:	89 03       	fmulsu	r16, r17
      bc:	89 03       	fmulsu	r16, r17
      be:	89 03       	fmulsu	r16, r17
      c0:	89 03       	fmulsu	r16, r17
      c2:	89 03       	fmulsu	r16, r17
      c4:	89 03       	fmulsu	r16, r17
      c6:	89 03       	fmulsu	r16, r17
      c8:	89 03       	fmulsu	r16, r17
      ca:	89 03       	fmulsu	r16, r17
      cc:	89 03       	fmulsu	r16, r17
      ce:	89 03       	fmulsu	r16, r17
      d0:	89 03       	fmulsu	r16, r17
      d2:	4f 02       	muls	r20, r31
      d4:	89 03       	fmulsu	r16, r17
      d6:	89 03       	fmulsu	r16, r17
      d8:	89 03       	fmulsu	r16, r17
      da:	80 03       	fmuls	r16, r16
      dc:	89 03       	fmulsu	r16, r17
      de:	89 03       	fmulsu	r16, r17
      e0:	89 03       	fmulsu	r16, r17
      e2:	89 03       	fmulsu	r16, r17
      e4:	89 03       	fmulsu	r16, r17
      e6:	89 03       	fmulsu	r16, r17
      e8:	89 03       	fmulsu	r16, r17
      ea:	89 03       	fmulsu	r16, r17
      ec:	89 03       	fmulsu	r16, r17
      ee:	89 03       	fmulsu	r16, r17
      f0:	89 03       	fmulsu	r16, r17
      f2:	89 03       	fmulsu	r16, r17
      f4:	89 03       	fmulsu	r16, r17
      f6:	89 03       	fmulsu	r16, r17
      f8:	89 03       	fmulsu	r16, r17
      fa:	89 03       	fmulsu	r16, r17
      fc:	9d 02       	muls	r25, r29
      fe:	eb 02       	muls	r30, r27

00000100 <__ctors_start>:
     100:	fc 03       	fmulsu	r23, r20

00000102 <__ctors_end>:
     102:	27 05       	cpc	r18, r7

00000104 <__dtors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	11 e0       	ldi	r17, 0x01	; 1
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	ee e2       	ldi	r30, 0x2E	; 46
     118:	f3 e1       	ldi	r31, 0x13	; 19
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a4 38       	cpi	r26, 0x84	; 132
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	22 e0       	ldi	r18, 0x02	; 2
     128:	a4 e8       	ldi	r26, 0x84	; 132
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a1 34       	cpi	r26, 0x41	; 65
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c1 e8       	ldi	r28, 0x81	; 129
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__do_global_ctors+0x10>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	0e 94 5c 05 	call	0xab8	; 0xab8 <__tablejump2__>
     146:	c0 38       	cpi	r28, 0x80	; 128
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <__do_global_ctors+0x8>
     14c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
     150:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__do_global_dtors>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <_ZN6opbots6OutputD1Ev>:
		// Set output low
		*port_out &= ~pin_mask;
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
     158:	08 95       	ret

0000015a <_ZN6opbots5InputD1Ev>:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
	};
	~Input() {}
     15a:	08 95       	ret

0000015c <_ZN6opbots5InputD0Ev>:
	// TODO: handle p == 0
	return p;
}

void operator delete(void * p) {
	free(p);
     15c:	0e 94 11 06 	call	0xc22	; 0xc22 <free>
     160:	08 95       	ret

00000162 <_ZN6opbots6OutputD0Ev>:
     162:	0e 94 11 06 	call	0xc22	; 0xc22 <free>
     166:	08 95       	ret

00000168 <__vector_21>:

} /* end of namespace opbots */

using namespace opbots;

ISR(ADC_vect) {
     168:	1f 92       	push	r1
     16a:	0f 92       	push	r0
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	11 24       	eor	r1, r1
     172:	8f 93       	push	r24
	cli();
     174:	f8 94       	cli
	Analog::analog_low = ADCL;
     176:	80 91 78 00 	lds	r24, 0x0078
     17a:	80 93 3a 02 	sts	0x023A, r24
	Analog::analogHigh = ADCH;
     17e:	80 91 79 00 	lds	r24, 0x0079
     182:	80 93 3b 02 	sts	0x023B, r24
	Analog::new_value = true;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	80 93 3c 02 	sts	0x023C, r24
	sei();
     18c:	78 94       	sei
};
     18e:	8f 91       	pop	r24
     190:	0f 90       	pop	r0
     192:	0f be       	out	0x3f, r0	; 63
     194:	0f 90       	pop	r0
     196:	1f 90       	pop	r1
     198:	18 95       	reti

0000019a <__vector_20>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     19a:	1f 92       	push	r1
     19c:	0f 92       	push	r0
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	0f 92       	push	r0
     1a2:	11 24       	eor	r1, r1
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	af 93       	push	r26
     1aa:	bf 93       	push	r27
     1ac:	ef 93       	push	r30
     1ae:	ff 93       	push	r31
			ok = false;
			return '\0';
		}
	}
	static inline void service_tx_interrupt(const uint8_t serial_port=0) {
		cli();
     1b0:	f8 94       	cli
		tx[serial_port].head++;
     1b2:	e5 e3       	ldi	r30, 0x35	; 53
     1b4:	f2 e0       	ldi	r31, 0x02	; 2
     1b6:	83 81       	ldd	r24, Z+3	; 0x03
     1b8:	8f 5f       	subi	r24, 0xFF	; 255
     1ba:	83 83       	std	Z+3, r24	; 0x03
		if (tx[serial_port].head < tx[serial_port].tail) {
     1bc:	94 81       	ldd	r25, Z+4	; 0x04
     1be:	89 17       	cp	r24, r25
     1c0:	50 f4       	brcc	.+20     	; 0x1d6 <__vector_20+0x3c>
			if (serial_port == 0) {
				UDR0 = char(tx[serial_port].buffer[tx[serial_port].head]);
     1c2:	e0 91 35 02 	lds	r30, 0x0235
     1c6:	f0 91 36 02 	lds	r31, 0x0236
     1ca:	e8 0f       	add	r30, r24
     1cc:	f1 1d       	adc	r31, r1
     1ce:	80 81       	ld	r24, Z
     1d0:	80 93 c6 00 	sts	0x00C6, r24
     1d4:	10 c0       	rjmp	.+32     	; 0x1f6 <__vector_20+0x5c>
			else if (serial_port == 1) {
				UDR1 = 'x';
			}
#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
     1d6:	e0 91 2e 02 	lds	r30, 0x022E
     1da:	f0 91 2f 02 	lds	r31, 0x022F
     1de:	30 97       	sbiw	r30, 0x00	; 0
     1e0:	51 f0       	breq	.+20     	; 0x1f6 <__vector_20+0x5c>
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     1e2:	a2 81       	ldd	r26, Z+2	; 0x02
     1e4:	b3 81       	ldd	r27, Z+3	; 0x03
     1e6:	9c 91       	ld	r25, X
     1e8:	81 85       	ldd	r24, Z+9	; 0x09
     1ea:	80 95       	com	r24
     1ec:	89 23       	and	r24, r25
     1ee:	8c 93       	st	X, r24
			}
#endif
		} else {
			if (Serial::txden[serial_port] != nullptr) {
				Serial::txden[serial_port]->clear();
				UCSR0B = 1<<(RXCIE0) | 1<<(RXEN0);
     1f0:	80 e9       	ldi	r24, 0x90	; 144
     1f2:	80 93 c1 00 	sts	0x00C1, r24
			}
		}
		sei();
     1f6:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_TX_vect) { Serial::service_tx_interrupt(0); }
ISR(USART1_TX_vect) { Serial::service_tx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_TX_vect) { Serial::service_tx_interrupt(0); }
     1f8:	ff 91       	pop	r31
     1fa:	ef 91       	pop	r30
     1fc:	bf 91       	pop	r27
     1fe:	af 91       	pop	r26
     200:	9f 91       	pop	r25
     202:	8f 91       	pop	r24
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <__vector_18>:
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     20e:	1f 92       	push	r1
     210:	0f 92       	push	r0
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	0f 92       	push	r0
     216:	11 24       	eor	r1, r1
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	af 93       	push	r26
     21e:	bf 93       	push	r27
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
			}
		}
		sei();
	}
	static inline void service_rx_interrupt(const uint8_t serial_port=0) {
		cli();
     224:	f8 94       	cli
		PORTB ^= 1<<4; // MISO
     226:	95 b1       	in	r25, 0x05	; 5
     228:	80 e1       	ldi	r24, 0x10	; 16
     22a:	89 27       	eor	r24, r25
     22c:	85 b9       	out	0x05, r24	; 5
		if (serial_port == 0) {
			UCSR0A &= ~(1<<RXC0); // clear flag -- do I need this?
     22e:	e0 ec       	ldi	r30, 0xC0	; 192
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8f 77       	andi	r24, 0x7F	; 127
     236:	80 83       	st	Z, r24
			if (rx[serial_port].head < rx[serial_port].size) {
     238:	e0 e3       	ldi	r30, 0x30	; 48
     23a:	f2 e0       	ldi	r31, 0x02	; 2
     23c:	83 81       	ldd	r24, Z+3	; 0x03
     23e:	92 81       	ldd	r25, Z+2	; 0x02
     240:	89 17       	cp	r24, r25
     242:	58 f4       	brcc	.+22     	; 0x25a <__vector_18+0x4c>
				rx[serial_port].buffer[rx[serial_port].head] = UDR0;
     244:	90 91 c6 00 	lds	r25, 0x00C6
     248:	a0 81       	ld	r26, Z
     24a:	b1 81       	ldd	r27, Z+1	; 0x01
     24c:	a8 0f       	add	r26, r24
     24e:	b1 1d       	adc	r27, r1
     250:	9c 93       	st	X, r25
				rx[serial_port].head++;
     252:	83 81       	ldd	r24, Z+3	; 0x03
     254:	8f 5f       	subi	r24, 0xFF	; 255
     256:	83 83       	std	Z+3, r24	; 0x03
     258:	01 c0       	rjmp	.+2      	; 0x25c <__vector_18+0x4e>
	OVER_VOLTAGE=4,
	OVER_CURRENT=5
};

void _raise_error(ErrorType error) {
	cli(); // Disable all interrupts
     25a:	f8 94       	cli
#ifdef _AVR_ATTINY841_H_INCLUDED 
		else if (serial_port == 1) {
			UCSR1A &= ~(1<<RXC1); // clear flag -- do I need this?
		}
#endif
		sei();
     25c:	78 94       	sei
#ifdef _AVR_ATTINY841_H_INCLUDED
ISR(USART0_RX_vect) { Serial::service_rx_interrupt(0); }
ISR(USART1_RX_vect) { Serial::service_rx_interrupt(1); }
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
ISR(USART_RX_vect) { Serial::service_rx_interrupt(0); }
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <_Z15startup_routinei>:
Output pwm0a(&PORTD,6);
Input reset(&PORTC,6);

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	ac 01       	movw	r20, r24
     27e:	08 ee       	ldi	r16, 0xE8	; 232
     280:	11 e0       	ldi	r17, 0x01	; 1
     282:	61 ef       	ldi	r22, 0xF1	; 241
     284:	71 e0       	ldi	r23, 0x01	; 1
	while (--loops >= 0) {
     286:	1b c0       	rjmp	.+54     	; 0x2be <_Z15startup_routinei+0x4a>
		_delay_ms(10*delay_time);
	}
	*/
}
	
class GPIO {
     288:	12 96       	adiw	r26, 0x02	; 2
     28a:	ed 91       	ld	r30, X+
     28c:	fc 91       	ld	r31, X
     28e:	13 97       	sbiw	r26, 0x03	; 3
     290:	98 81       	ld	r25, Y
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     292:	20 81       	ld	r18, Z
     294:	29 2b       	or	r18, r25
     296:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     298:	2f ef       	ldi	r18, 0xFF	; 255
     29a:	30 e7       	ldi	r19, 0x70	; 112
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	30 40       	sbci	r19, 0x00	; 0
     2a2:	80 40       	sbci	r24, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <_Z15startup_routinei+0x2a>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <_Z15startup_routinei+0x34>
     2a8:	00 00       	nop
	void inline clear() { *port_out &= ~pin_mask; }
     2aa:	20 81       	ld	r18, Z
     2ac:	90 95       	com	r25
     2ae:	92 23       	and	r25, r18
     2b0:	90 83       	st	Z, r25
     2b2:	1a 96       	adiw	r26, 0x0a	; 10
     2b4:	2a 96       	adiw	r28, 0x0a	; 10
		for (Output out : enable) {
     2b6:	22 e0       	ldi	r18, 0x02	; 2
     2b8:	ae 32       	cpi	r26, 0x2E	; 46
     2ba:	b2 07       	cpc	r27, r18
     2bc:	29 f7       	brne	.-54     	; 0x288 <_Z15startup_routinei+0x14>
Input reset(&PORTC,6);

const uint8_t delay_time(100); // ms interval base for flashing lights

void startup_routine(int loops=1) {	
	while (--loops >= 0) {
     2be:	41 50       	subi	r20, 0x01	; 1
     2c0:	51 09       	sbc	r21, r1
     2c2:	1a f0       	brmi	.+6      	; 0x2ca <_Z15startup_routinei+0x56>
     2c4:	d8 01       	movw	r26, r16
     2c6:	eb 01       	movw	r28, r22
     2c8:	df cf       	rjmp	.-66     	; 0x288 <_Z15startup_routinei+0x14>
			out.set();
			_delay_ms(delay_time/2);
			out.clear();
		}
	}
}
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <main>:
char message[16];
uint16_t volts_reading, volts, centivolts;
uint16_t amps_reading, amps, centiamps;
uint32_t watts_raw, watts, centiwatts;  

int main(void) {
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	00 d0       	rcall	.+0      	; 0x2da <main+0x6>
     2da:	00 d0       	rcall	.+0      	; 0x2dc <main+0x8>
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
	startup_routine(2);
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 3a 01 	call	0x274	; 0x274 <_Z15startup_routinei>
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     2e8:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     2ea:	87 e4       	ldi	r24, 0x47	; 71
     2ec:	80 93 7c 00 	sts	0x007C, r24
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     2f0:	8f e8       	ldi	r24, 0x8F	; 143
     2f2:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB = 0; // free running
     2f6:	10 92 7b 00 	sts	0x007B, r1
			UDR1 = transmitting[tx_head];
		}
#endif
	}
	static void set_txden_pin(Output& txden_pin, const uint8_t serial_port=0) {
		Serial::txden[serial_port] = &txden_pin;
     2fa:	8e ed       	ldi	r24, 0xDE	; 222
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	90 93 2f 02 	sts	0x022F, r25
     302:	80 93 2e 02 	sts	0x022E, r24
#ifdef _AVR_ATTINY841_H_INCLUDED 
		if (serial_port == 1) {
			offset = 0x10;
		} 
#endif
		*(&UBRR0H+offset) = baud / 0xFF;
     306:	10 92 c5 00 	sts	0x00C5, r1
		*(&UBRR0L+offset) = baud % 0xFF;
     30a:	80 e1       	ldi	r24, 0x10	; 16
     30c:	80 93 c4 00 	sts	0x00C4, r24
		*(&UCSR0A+offset) = 1<<(U2X0);
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	80 93 c0 00 	sts	0x00C0, r24
		*(&UCSR0B+offset) = 1<<(TXCIE0) | 1<<(RXCIE0) | 1<<(RXEN0) | 1<<(TXEN0);
     316:	88 ed       	ldi	r24, 0xD8	; 216
     318:	80 93 c1 00 	sts	0x00C1, r24
		*(&UCSR0C+offset) = 1<<(UCSZ01) | 1<<(UCSZ00);
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	80 93 c2 00 	sts	0x00C2, r24
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
	void inline clear() { *port_out &= ~pin_mask; }
     322:	a8 ee       	ldi	r26, 0xE8	; 232
     324:	b1 e0       	ldi	r27, 0x01	; 1
     326:	12 96       	adiw	r26, 0x02	; 2
     328:	ed 91       	ld	r30, X+
     32a:	fc 91       	ld	r31, X
     32c:	13 97       	sbiw	r26, 0x03	; 3
     32e:	80 81       	ld	r24, Z
     330:	19 96       	adiw	r26, 0x09	; 9
     332:	9c 91       	ld	r25, X
     334:	90 95       	com	r25
     336:	89 23       	and	r24, r25
     338:	80 83       	st	Z, r24
	Analog::select_channel(7);
	Serial::set_txden_pin(txden);
	Serial::init(115200);
	err_led.clear();
	uint16_t pulse_width(1500);
	sei(); // Enable interrupts
     33a:	78 94       	sei
	     
	Analog::select_channel(7);
	Serial::set_txden_pin(txden);
	Serial::init(115200);
	err_led.clear();
	uint16_t pulse_width(1500);
     33c:	0f 2e       	mov	r0, r31
     33e:	fc ed       	ldi	r31, 0xDC	; 220
     340:	2f 2e       	mov	r2, r31
     342:	f5 e0       	ldi	r31, 0x05	; 5
     344:	3f 2e       	mov	r3, r31
     346:	f0 2d       	mov	r31, r0
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     348:	0f 2e       	mov	r0, r31
     34a:	f0 e3       	ldi	r31, 0x30	; 48
     34c:	ef 2e       	mov	r14, r31
     34e:	f2 e0       	ldi	r31, 0x02	; 2
     350:	ff 2e       	mov	r15, r31
     352:	f0 2d       	mov	r31, r0
					sprintf(message,"max@embeddedprofessional.com\r\n");
					break;
				default:
					sprintf(message,"Bad command\r\n");
			}
			Serial::transmit(message,strlen(message));
     354:	0f 2e       	mov	r0, r31
     356:	fc e9       	ldi	r31, 0x9C	; 156
     358:	cf 2e       	mov	r12, r31
     35a:	f1 e0       	ldi	r31, 0x01	; 1
     35c:	df 2e       	mov	r13, r31
     35e:	f0 2d       	mov	r31, r0
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (Serial::txden[serial_port] != nullptr) {
     360:	0f 2e       	mov	r0, r31
     362:	fe e2       	ldi	r31, 0x2E	; 46
     364:	af 2e       	mov	r10, r31
     366:	f2 e0       	ldi	r31, 0x02	; 2
     368:	bf 2e       	mov	r11, r31
     36a:	f0 2d       	mov	r31, r0
			Serial::txden[serial_port]->set();
			UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
		}
		if (serial_port == 0) {
			if (char_count > tx[0].size) {
     36c:	05 e3       	ldi	r16, 0x35	; 53
     36e:	12 e0       	ldi	r17, 0x02	; 2
				_raise_error(ErrorType::BUFFER_OVERFLOW);
			}
			memcpy(tx[0].buffer, buffer, char_count);
			tx[0].head = 0;
			tx[0].tail = char_count;
			UDR0 = tx[0].buffer[tx[0].head];
     370:	0f 2e       	mov	r0, r31
     372:	f6 ec       	ldi	r31, 0xC6	; 198
     374:	8f 2e       	mov	r8, r31
     376:	91 2c       	mov	r9, r1
     378:	f0 2d       	mov	r31, r0
	uint16_t pulse_width(1500);
	sei(); // Enable interrupts
	
    while (1) {	
		bool ok;
		cli();
     37a:	f8 94       	cli
	}
	static bool empty() {
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
     37c:	d7 01       	movw	r26, r14
     37e:	13 96       	adiw	r26, 0x03	; 3
     380:	8c 91       	ld	r24, X
     382:	13 97       	sbiw	r26, 0x03	; 3
     384:	88 23       	and	r24, r24
     386:	59 f0       	breq	.+22     	; 0x39e <main+0xca>
			rx[0].head--;
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	13 96       	adiw	r26, 0x03	; 3
     38c:	8c 93       	st	X, r24
     38e:	13 97       	sbiw	r26, 0x03	; 3
			ok = true;
			return rx[0].buffer[rx[0].head];
     390:	ed 91       	ld	r30, X+
     392:	fc 91       	ld	r31, X
     394:	e8 0f       	add	r30, r24
     396:	f1 1d       	adc	r31, r1
     398:	e0 81       	ld	r30, Z
		return Serial::rx[0].head == 0;
	} 
	static char get_char(bool& ok) {
		if(!Serial::rx[0].head == 0) {
			rx[0].head--;
			ok = true;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <main+0xce>
			return rx[0].buffer[rx[0].head];
		} else {
			ok = false;
     39e:	80 e0       	ldi	r24, 0x00	; 0
			return '\0';
     3a0:	e0 e0       	ldi	r30, 0x00	; 0
		char c(Serial::get_char(ok));
		sei();
     3a2:	78 94       	sei
		if (ok) {
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <main+0xd6>
     3a8:	ef c1       	rjmp	.+990    	; 0x788 <main+0x4b4>
			switch(c) {
     3aa:	8e 2f       	mov	r24, r30
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	fc 01       	movw	r30, r24
     3b0:	bc 97       	sbiw	r30, 0x2c	; 44
     3b2:	ec 34       	cpi	r30, 0x4C	; 76
     3b4:	f1 05       	cpc	r31, r1
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <main+0xe6>
     3b8:	ac c1       	rjmp	.+856    	; 0x712 <main+0x43e>
     3ba:	ec 5c       	subi	r30, 0xCC	; 204
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__tablejump2__>
		// Set pin in port to output
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
     3c2:	a8 ee       	ldi	r26, 0xE8	; 232
     3c4:	b1 e0       	ldi	r27, 0x01	; 1
     3c6:	1c 96       	adiw	r26, 0x0c	; 12
     3c8:	ed 91       	ld	r30, X+
     3ca:	fc 91       	ld	r31, X
     3cc:	1d 97       	sbiw	r26, 0x0d	; 13
     3ce:	90 81       	ld	r25, Z
     3d0:	53 96       	adiw	r26, 0x13	; 19
     3d2:	8c 91       	ld	r24, X
     3d4:	89 27       	eor	r24, r25
     3d6:	80 83       	st	Z, r24
     3d8:	a4 c1       	rjmp	.+840    	; 0x722 <main+0x44e>
     3da:	a8 ee       	ldi	r26, 0xE8	; 232
     3dc:	b1 e0       	ldi	r27, 0x01	; 1
     3de:	56 96       	adiw	r26, 0x16	; 22
     3e0:	ed 91       	ld	r30, X+
     3e2:	fc 91       	ld	r31, X
     3e4:	57 97       	sbiw	r26, 0x17	; 23
     3e6:	90 81       	ld	r25, Z
     3e8:	5d 96       	adiw	r26, 0x1d	; 29
     3ea:	8c 91       	ld	r24, X
     3ec:	89 27       	eor	r24, r25
     3ee:	80 83       	st	Z, r24
     3f0:	98 c1       	rjmp	.+816    	; 0x722 <main+0x44e>
     3f2:	a8 ee       	ldi	r26, 0xE8	; 232
     3f4:	b1 e0       	ldi	r27, 0x01	; 1
     3f6:	90 96       	adiw	r26, 0x20	; 32
     3f8:	ed 91       	ld	r30, X+
     3fa:	fc 91       	ld	r31, X
     3fc:	91 97       	sbiw	r26, 0x21	; 33
     3fe:	90 81       	ld	r25, Z
     400:	97 96       	adiw	r26, 0x27	; 39
     402:	8c 91       	ld	r24, X
     404:	89 27       	eor	r24, r25
     406:	80 83       	st	Z, r24
     408:	8c c1       	rjmp	.+792    	; 0x722 <main+0x44e>
     40a:	a8 ee       	ldi	r26, 0xE8	; 232
     40c:	b1 e0       	ldi	r27, 0x01	; 1
     40e:	9a 96       	adiw	r26, 0x2a	; 42
     410:	ed 91       	ld	r30, X+
     412:	fc 91       	ld	r31, X
     414:	9b 97       	sbiw	r26, 0x2b	; 43
     416:	90 81       	ld	r25, Z
     418:	d1 96       	adiw	r26, 0x31	; 49
     41a:	8c 91       	ld	r24, X
     41c:	89 27       	eor	r24, r25
     41e:	80 83       	st	Z, r24
     420:	80 c1       	rjmp	.+768    	; 0x722 <main+0x44e>
     422:	a8 ee       	ldi	r26, 0xE8	; 232
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	d4 96       	adiw	r26, 0x34	; 52
     428:	ed 91       	ld	r30, X+
     42a:	fc 91       	ld	r31, X
     42c:	d5 97       	sbiw	r26, 0x35	; 53
     42e:	90 81       	ld	r25, Z
     430:	db 96       	adiw	r26, 0x3b	; 59
     432:	8c 91       	ld	r24, X
     434:	89 27       	eor	r24, r25
     436:	80 83       	st	Z, r24
     438:	74 c1       	rjmp	.+744    	; 0x722 <main+0x44e>
     43a:	e0 91 26 02 	lds	r30, 0x0226
     43e:	f0 91 27 02 	lds	r31, 0x0227
     442:	90 81       	ld	r25, Z
     444:	80 91 2d 02 	lds	r24, 0x022D
     448:	89 27       	eor	r24, r25
     44a:	80 83       	st	Z, r24
     44c:	6a c1       	rjmp	.+724    	; 0x722 <main+0x44e>
				case '3': enable[3].toggle(); break;
				case '4': enable[4].toggle(); break;
				case '5': enable[5].toggle(); break;
				case '6': enable[6].toggle(); break;
				case ',': 
					pulse_width += 10; 
     44e:	ba e0       	ldi	r27, 0x0A	; 10
     450:	2b 0e       	add	r2, r27
     452:	31 1c       	adc	r3, r1
					sprintf(message,"Pulse width %u\r\n",pulse_width);
     454:	3f 92       	push	r3
     456:	2f 92       	push	r2
     458:	a6 e0       	ldi	r26, 0x06	; 6
     45a:	b1 e0       	ldi	r27, 0x01	; 1
     45c:	bf 93       	push	r27
     45e:	af 93       	push	r26
     460:	df 92       	push	r13
     462:	cf 92       	push	r12
     464:	0e 94 b2 06 	call	0xd64	; 0xd64 <sprintf>
					break;
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	56 c1       	rjmp	.+684    	; 0x722 <main+0x44e>
				case '.': 
					pulse_width -= 10; 
     476:	fa e0       	ldi	r31, 0x0A	; 10
     478:	2f 1a       	sub	r2, r31
     47a:	31 08       	sbc	r3, r1
					sprintf(message,"Pulse width %u\r\n",pulse_width);
     47c:	3f 92       	push	r3
     47e:	2f 92       	push	r2
     480:	a6 e0       	ldi	r26, 0x06	; 6
     482:	b1 e0       	ldi	r27, 0x01	; 1
     484:	bf 93       	push	r27
     486:	af 93       	push	r26
     488:	df 92       	push	r13
     48a:	cf 92       	push	r12
     48c:	0e 94 b2 06 	call	0xd64	; 0xd64 <sprintf>
					break;
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	42 c1       	rjmp	.+644    	; 0x722 <main+0x44e>
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     49e:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     4a0:	86 e4       	ldi	r24, 0x46	; 70
     4a2:	ac e7       	ldi	r26, 0x7C	; 124
     4a4:	b0 e0       	ldi	r27, 0x00	; 0
     4a6:	8c 93       	st	X, r24
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     4a8:	8f e8       	ldi	r24, 0x8F	; 143
     4aa:	ea e7       	ldi	r30, 0x7A	; 122
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     4b0:	ab e7       	ldi	r26, 0x7B	; 123
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	1c 92       	st	X, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     4b6:	10 92 3c 02 	sts	0x023C, r1
		ADCSRA |= 1<<(ADSC); 
     4ba:	80 81       	ld	r24, Z
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     4c0:	80 91 3c 02 	lds	r24, 0x023C
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     4c4:	88 23       	and	r24, r24
     4c6:	e1 f3       	breq	.-8      	; 0x4c0 <main+0x1ec>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     4c8:	80 91 3b 02 	lds	r24, 0x023B
     4cc:	20 91 3a 02 	lds	r18, 0x023A
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	38 2b       	or	r19, r24
				case 'a':
					volts_reading = Analog::immediate_read(6);
     4d4:	30 93 9b 01 	sts	0x019B, r19
     4d8:	20 93 9a 01 	sts	0x019A, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		_raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     4dc:	a0 e4       	ldi	r26, 0x40	; 64
     4de:	b6 e0       	ldi	r27, 0x06	; 6
     4e0:	0e 94 62 05 	call	0xac4	; 0xac4 <__umulhisi3>
     4e4:	2b 01       	movw	r4, r22
     4e6:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     4e8:	9b 01       	movw	r18, r22
     4ea:	ac 01       	movw	r20, r24
     4ec:	44 27       	eor	r20, r20
     4ee:	55 27       	eor	r21, r21
     4f0:	a4 e6       	ldi	r26, 0x64	; 100
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	0e 94 71 05 	call	0xae2	; 0xae2 <__muluhisi3>
     4f8:	90 93 91 01 	sts	0x0191, r25
     4fc:	80 93 90 01 	sts	0x0190, r24
	}
	temp_result = temp_result >> 16;
     500:	c3 01       	movw	r24, r6
     502:	aa 27       	eor	r26, r26
     504:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     506:	80 93 92 01 	sts	0x0192, r24
     50a:	90 93 93 01 	sts	0x0193, r25
					sprintf(message,"Pulse width %u\r\n",pulse_width);
					break;
				case 'a':
					volts_reading = Analog::immediate_read(6);
					adc_scale<MAX_VOLTS>(volts_reading, &amps, &centiamps);
					sprintf(message, "%2u.%02u A  \r\n", amps, centiamps);
     50e:	20 91 91 01 	lds	r18, 0x0191
     512:	2f 93       	push	r18
     514:	20 91 90 01 	lds	r18, 0x0190
     518:	2f 93       	push	r18
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	a7 e1       	ldi	r26, 0x17	; 23
     520:	b1 e0       	ldi	r27, 0x01	; 1
     522:	bf 93       	push	r27
     524:	af 93       	push	r26
     526:	df 92       	push	r13
     528:	cf 92       	push	r12
     52a:	0e 94 b2 06 	call	0xd64	; 0xd64 <sprintf>
					break;
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	f4 c0       	rjmp	.+488    	; 0x722 <main+0x44e>
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     53a:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     53c:	87 e4       	ldi	r24, 0x47	; 71
     53e:	ac e7       	ldi	r26, 0x7C	; 124
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	8c 93       	st	X, r24
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     544:	8f e8       	ldi	r24, 0x8F	; 143
     546:	ea e7       	ldi	r30, 0x7A	; 122
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     54c:	ab e7       	ldi	r26, 0x7B	; 123
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	1c 92       	st	X, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     552:	10 92 3c 02 	sts	0x023C, r1
		ADCSRA |= 1<<(ADSC); 
     556:	80 81       	ld	r24, Z
     558:	80 64       	ori	r24, 0x40	; 64
     55a:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     55c:	80 91 3c 02 	lds	r24, 0x023C
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     560:	88 23       	and	r24, r24
     562:	e1 f3       	breq	.-8      	; 0x55c <main+0x288>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     564:	80 91 3b 02 	lds	r24, 0x023B
     568:	20 91 3a 02 	lds	r18, 0x023A
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	38 2b       	or	r19, r24
				case 'v':
					amps_reading = Analog::immediate_read(7);
     570:	30 93 95 01 	sts	0x0195, r19
     574:	20 93 94 01 	sts	0x0194, r18
void inline adc_scale(uint16_t adc_reading, uint16_t *result, uint16_t *result_centis=nullptr) {
	uint32_t temp_result(adc_reading);
	if (result == nullptr) {
		_raise_error(ErrorType::NULL_POINTER);
	}
	temp_result *= (SCALE*0x10000 / 0x400);
     578:	a0 e4       	ldi	r26, 0x40	; 64
     57a:	b6 e0       	ldi	r27, 0x06	; 6
     57c:	0e 94 62 05 	call	0xac4	; 0xac4 <__umulhisi3>
     580:	2b 01       	movw	r4, r22
     582:	3c 01       	movw	r6, r24
	if (result_centis != nullptr) {
		*result_centis = uint16_t(((temp_result % 0x10000) * 100) >> 16);
     584:	9b 01       	movw	r18, r22
     586:	ac 01       	movw	r20, r24
     588:	44 27       	eor	r20, r20
     58a:	55 27       	eor	r21, r21
     58c:	a4 e6       	ldi	r26, 0x64	; 100
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	0e 94 71 05 	call	0xae2	; 0xae2 <__muluhisi3>
     594:	90 93 97 01 	sts	0x0197, r25
     598:	80 93 96 01 	sts	0x0196, r24
	}
	temp_result = temp_result >> 16;
     59c:	c3 01       	movw	r24, r6
     59e:	aa 27       	eor	r26, r26
     5a0:	bb 27       	eor	r27, r27
	*result = uint16_t(temp_result);
     5a2:	80 93 98 01 	sts	0x0198, r24
     5a6:	90 93 99 01 	sts	0x0199, r25
					sprintf(message, "%2u.%02u A  \r\n", amps, centiamps);
					break;
				case 'v':
					amps_reading = Analog::immediate_read(7);
					adc_scale<MAX_AMPS>(amps_reading, &volts, &centivolts);
					sprintf(message, "%2u.%02u V  \r\n", volts, centivolts);
     5aa:	20 91 97 01 	lds	r18, 0x0197
     5ae:	2f 93       	push	r18
     5b0:	20 91 96 01 	lds	r18, 0x0196
     5b4:	2f 93       	push	r18
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	a6 e2       	ldi	r26, 0x26	; 38
     5bc:	b1 e0       	ldi	r27, 0x01	; 1
     5be:	bf 93       	push	r27
     5c0:	af 93       	push	r26
     5c2:	df 92       	push	r13
     5c4:	cf 92       	push	r12
     5c6:	0e 94 b2 06 	call	0xd64	; 0xd64 <sprintf>
					break;
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	a6 c0       	rjmp	.+332    	; 0x722 <main+0x44e>
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     5d6:	3e 98       	cbi	0x07, 6	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     5d8:	86 e4       	ldi	r24, 0x46	; 70
     5da:	ac e7       	ldi	r26, 0x7C	; 124
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	8c 93       	st	X, r24
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     5e0:	8f e8       	ldi	r24, 0x8F	; 143
     5e2:	ea e7       	ldi	r30, 0x7A	; 122
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 83       	st	Z, r24
		ADCSRB = 0; // free running
     5e8:	ab e7       	ldi	r26, 0x7B	; 123
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	1c 92       	st	X, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     5ee:	10 92 3c 02 	sts	0x023C, r1
		ADCSRA |= 1<<(ADSC); 
     5f2:	80 81       	ld	r24, Z
     5f4:	80 64       	ori	r24, 0x40	; 64
     5f6:	80 83       	st	Z, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     5f8:	80 91 3c 02 	lds	r24, 0x023C
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     5fc:	88 23       	and	r24, r24
     5fe:	e1 f3       	breq	.-8      	; 0x5f8 <main+0x324>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     600:	20 91 3b 02 	lds	r18, 0x023B
     604:	80 91 3a 02 	lds	r24, 0x023A
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	92 2b       	or	r25, r18
				case 'w':
					volts_reading = Analog::immediate_read(6);
     60c:	90 93 9b 01 	sts	0x019B, r25
     610:	80 93 9a 01 	sts	0x019A, r24
	static void select_channel(uint8_t n) {
#ifdef _AVR_ATTINY841_H_INCLUDED
		//! TODO		
#endif
#ifndef _AVR_ATTINY841_H_INCLUDED
		DDRC = DDRC & ~(1<<n);
     614:	3f 98       	cbi	0x07, 7	; 7
		ADMUX  = (1<<REFS0) | n; // AREF = AVCC
     616:	87 e4       	ldi	r24, 0x47	; 71
     618:	ec e7       	ldi	r30, 0x7C	; 124
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 83       	st	Z, r24
#endif
		ADCSRA = 1<<(ADEN) | 1<<(ADIE) | 0b111; // on, interrupt enabled, 1/128 clock
     61e:	8f e8       	ldi	r24, 0x8F	; 143
     620:	aa e7       	ldi	r26, 0x7A	; 122
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	8c 93       	st	X, r24
		ADCSRB = 0; // free running
     626:	eb e7       	ldi	r30, 0x7B	; 123
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	10 82       	st	Z, r1
			// idle
		}
		return Analog::get_value();
	}
	static void start_conversion() {
		new_value = false;
     62c:	10 92 3c 02 	sts	0x023C, r1
		ADCSRA |= 1<<(ADSC); 
     630:	8c 91       	ld	r24, X
     632:	80 64       	ori	r24, 0x40	; 64
     634:	8c 93       	st	X, r24
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
     636:	80 91 3c 02 	lds	r24, 0x023C
		ADCSRA = enabled? ADCSRA | 1<<(ADATE) : ADCSRA & ~1<<(ADATE);
	}
	static uint16_t immediate_read(uint8_t n) {
		Analog::select_channel(n);
		Analog::start_conversion();
		while (!Analog::conversion_complete()) {
     63a:	88 23       	and	r24, r24
     63c:	e1 f3       	breq	.-8      	; 0x636 <main+0x362>
		ADCSRA |= 1<<(ADSC); 
	}
	static void stop_conversion() { ADCSRA &= ~1<<(ADSC); }
	static bool inline conversion_complete() { return new_value; }
	static uint16_t inline get_value () { 
		return ((Analog::analogHigh << 8)) | (Analog::analog_low); 
     63e:	80 91 3b 02 	lds	r24, 0x023B
     642:	20 91 3a 02 	lds	r18, 0x023A
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	38 2b       	or	r19, r24
					amps_reading = Analog::immediate_read(7);
     64a:	30 93 95 01 	sts	0x0195, r19
     64e:	20 93 94 01 	sts	0x0194, r18
					watts_raw = uint32_t(volts_reading) * uint32_t(amps_reading);
     652:	a0 91 9a 01 	lds	r26, 0x019A
     656:	b0 91 9b 01 	lds	r27, 0x019B
     65a:	0e 94 62 05 	call	0xac4	; 0xac4 <__umulhisi3>
     65e:	69 83       	std	Y+1, r22	; 0x01
     660:	7a 83       	std	Y+2, r23	; 0x02
     662:	8b 83       	std	Y+3, r24	; 0x03
     664:	9c 83       	std	Y+4, r25	; 0x04
     666:	60 93 8c 01 	sts	0x018C, r22
     66a:	70 93 8d 01 	sts	0x018D, r23
     66e:	80 93 8e 01 	sts	0x018E, r24
     672:	90 93 8f 01 	sts	0x018F, r25
					watts = (watts_raw * 39) >> 16;
     676:	a7 e2       	ldi	r26, 0x27	; 39
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	0e 94 71 05 	call	0xae2	; 0xae2 <__muluhisi3>
     682:	2c 01       	movw	r4, r24
     684:	66 24       	eor	r6, r6
     686:	77 24       	eor	r7, r7
     688:	40 92 88 01 	sts	0x0188, r4
     68c:	50 92 89 01 	sts	0x0189, r5
     690:	60 92 8a 01 	sts	0x018A, r6
     694:	70 92 8b 01 	sts	0x018B, r7
					centiwatts = ((watts_raw % (watts * 1680)) * 3901) >> 16;
     698:	a0 e9       	ldi	r26, 0x90	; 144
     69a:	b6 e0       	ldi	r27, 0x06	; 6
     69c:	a3 01       	movw	r20, r6
     69e:	92 01       	movw	r18, r4
     6a0:	0e 94 71 05 	call	0xae2	; 0xae2 <__muluhisi3>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	69 81       	ldd	r22, Y+1	; 0x01
     6aa:	7a 81       	ldd	r23, Y+2	; 0x02
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__udivmodsi4>
     6b4:	9b 01       	movw	r18, r22
     6b6:	ac 01       	movw	r20, r24
     6b8:	ad e3       	ldi	r26, 0x3D	; 61
     6ba:	bf e0       	ldi	r27, 0x0F	; 15
     6bc:	0e 94 71 05 	call	0xae2	; 0xae2 <__muluhisi3>
     6c0:	aa 27       	eor	r26, r26
     6c2:	bb 27       	eor	r27, r27
     6c4:	80 93 84 01 	sts	0x0184, r24
     6c8:	90 93 85 01 	sts	0x0185, r25
     6cc:	a0 93 86 01 	sts	0x0186, r26
     6d0:	b0 93 87 01 	sts	0x0187, r27
					sprintf(message, "%2lu.%02lu W  \r\n", watts, centiwatts);
     6d4:	bf 93       	push	r27
     6d6:	af 93       	push	r26
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	7f 92       	push	r7
     6de:	6f 92       	push	r6
     6e0:	5f 92       	push	r5
     6e2:	4f 92       	push	r4
     6e4:	a5 e3       	ldi	r26, 0x35	; 53
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	bf 93       	push	r27
     6ea:	af 93       	push	r26
     6ec:	df 92       	push	r13
     6ee:	cf 92       	push	r12
     6f0:	0e 94 b2 06 	call	0xd64	; 0xd64 <sprintf>
					break;
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	11 c0       	rjmp	.+34     	; 0x722 <main+0x44e>
				case 'e':
					sprintf(message,"max@embeddedprofessional.com\r\n");
     700:	8f e1       	ldi	r24, 0x1F	; 31
     702:	e6 e4       	ldi	r30, 0x46	; 70
     704:	f1 e0       	ldi	r31, 0x01	; 1
     706:	d6 01       	movw	r26, r12
     708:	01 90       	ld	r0, Z+
     70a:	0d 92       	st	X+, r0
     70c:	8a 95       	dec	r24
     70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x434>
					break;
     710:	08 c0       	rjmp	.+16     	; 0x722 <main+0x44e>
				default:
					sprintf(message,"Bad command\r\n");
     712:	8e e0       	ldi	r24, 0x0E	; 14
     714:	e5 e6       	ldi	r30, 0x65	; 101
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	d6 01       	movw	r26, r12
     71a:	01 90       	ld	r0, Z+
     71c:	0d 92       	st	X+, r0
     71e:	8a 95       	dec	r24
     720:	e1 f7       	brne	.-8      	; 0x71a <main+0x446>
			}
			Serial::transmit(message,strlen(message));
     722:	f6 01       	movw	r30, r12
     724:	01 90       	ld	r0, Z+
     726:	00 20       	and	r0, r0
     728:	e9 f7       	brne	.-6      	; 0x724 <main+0x450>
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	df 01       	movw	r26, r30
     72e:	ac 59       	subi	r26, 0x9C	; 156
     730:	b1 40       	sbci	r27, 0x01	; 1
     732:	3d 01       	movw	r6, r26
     734:	9a 2f       	mov	r25, r26
	template<typename T>
	static void transmit(T* buffer, uint8_t char_count, const uint8_t serial_port=0) {
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (Serial::txden[serial_port] != nullptr) {
     736:	d5 01       	movw	r26, r10
     738:	ed 91       	ld	r30, X+
     73a:	fc 91       	ld	r31, X
     73c:	30 97       	sbiw	r30, 0x00	; 0
     73e:	51 f0       	breq	.+20     	; 0x754 <main+0x480>
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     740:	a2 81       	ldd	r26, Z+2	; 0x02
     742:	b3 81       	ldd	r27, Z+3	; 0x03
     744:	2c 91       	ld	r18, X
     746:	81 85       	ldd	r24, Z+9	; 0x09
     748:	82 2b       	or	r24, r18
     74a:	8c 93       	st	X, r24
		// sends between 1 and 255 chars if large enough buffer allocated
		// does not prevent against buffer overwrites, increase
		// buffer size if needed
		if (Serial::txden[serial_port] != nullptr) {
			Serial::txden[serial_port]->set();
			UCSR0B = 1<<(TXCIE0) | 1<<(TXEN0);
     74c:	88 e4       	ldi	r24, 0x48	; 72
     74e:	e1 ec       	ldi	r30, 0xC1	; 193
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 83       	st	Z, r24
		}
		if (serial_port == 0) {
			if (char_count > tx[0].size) {
     754:	d8 01       	movw	r26, r16
     756:	12 96       	adiw	r26, 0x02	; 2
     758:	8c 91       	ld	r24, X
     75a:	89 17       	cp	r24, r25
     75c:	08 f4       	brcc	.+2      	; 0x760 <main+0x48c>
	OVER_VOLTAGE=4,
	OVER_CURRENT=5
};

void _raise_error(ErrorType error) {
	cli(); // Disable all interrupts
     75e:	f8 94       	cli
		}
		if (serial_port == 0) {
			if (char_count > tx[0].size) {
				_raise_error(ErrorType::BUFFER_OVERFLOW);
			}
			memcpy(tx[0].buffer, buffer, char_count);
     760:	a3 01       	movw	r20, r6
     762:	55 27       	eor	r21, r21
     764:	b6 01       	movw	r22, r12
     766:	f8 01       	movw	r30, r16
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	0e 94 a9 06 	call	0xd52	; 0xd52 <memcpy>
			tx[0].head = 0;
     770:	d8 01       	movw	r26, r16
     772:	13 96       	adiw	r26, 0x03	; 3
     774:	1c 92       	st	X, r1
     776:	13 97       	sbiw	r26, 0x03	; 3
			tx[0].tail = char_count;
     778:	14 96       	adiw	r26, 0x04	; 4
     77a:	6c 92       	st	X, r6
     77c:	14 97       	sbiw	r26, 0x04	; 4
			UDR0 = tx[0].buffer[tx[0].head];
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	80 81       	ld	r24, Z
     784:	f4 01       	movw	r30, r8
     786:	80 83       	st	Z, r24
		*port_dir |= pin_mask;
	};
	~Output() {}
		
	void inline toggle() { *port_out ^= pin_mask; }
	void inline set() { *port_out |= pin_mask; }
     788:	a6 eb       	ldi	r26, 0xB6	; 182
     78a:	b1 e0       	ldi	r27, 0x01	; 1
     78c:	12 96       	adiw	r26, 0x02	; 2
     78e:	ed 91       	ld	r30, X+
     790:	fc 91       	ld	r31, X
     792:	13 97       	sbiw	r26, 0x03	; 3
     794:	90 81       	ld	r25, Z
     796:	19 96       	adiw	r26, 0x09	; 9
     798:	8c 91       	ld	r24, X
     79a:	89 2b       	or	r24, r25
     79c:	80 83       	st	Z, r24
		}
		pwm0a.set();
		uint16_t m(pulse_width/10);
     79e:	91 01       	movw	r18, r2
     7a0:	ad ec       	ldi	r26, 0xCD	; 205
     7a2:	bc ec       	ldi	r27, 0xCC	; 204
     7a4:	0e 94 62 05 	call	0xac4	; 0xac4 <__umulhisi3>
     7a8:	96 95       	lsr	r25
     7aa:	87 95       	ror	r24
     7ac:	96 95       	lsr	r25
     7ae:	87 95       	ror	r24
     7b0:	96 95       	lsr	r25
     7b2:	87 95       	ror	r24
		for (uint16_t i(0); i < m; ++i)
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	51 f0       	breq	.+20     	; 0x7cc <main+0x4f8>
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	50 e0       	ldi	r21, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7bc:	f0 e3       	ldi	r31, 0x30	; 48
     7be:	fa 95       	dec	r31
     7c0:	f1 f7       	brne	.-4      	; 0x7be <main+0x4ea>
     7c2:	4f 5f       	subi	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	48 17       	cp	r20, r24
     7c8:	59 07       	cpc	r21, r25
     7ca:	c1 f7       	brne	.-16     	; 0x7bc <main+0x4e8>
	void inline clear() { *port_out &= ~pin_mask; }
     7cc:	a6 eb       	ldi	r26, 0xB6	; 182
     7ce:	b1 e0       	ldi	r27, 0x01	; 1
     7d0:	12 96       	adiw	r26, 0x02	; 2
     7d2:	ed 91       	ld	r30, X+
     7d4:	fc 91       	ld	r31, X
     7d6:	13 97       	sbiw	r26, 0x03	; 3
     7d8:	90 81       	ld	r25, Z
     7da:	19 96       	adiw	r26, 0x09	; 9
     7dc:	8c 91       	ld	r24, X
     7de:	80 95       	com	r24
     7e0:	89 23       	and	r24, r25
     7e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e4:	2f ef       	ldi	r18, 0xFF	; 255
     7e6:	89 ef       	ldi	r24, 0xF9	; 249
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	80 40       	sbci	r24, 0x00	; 0
     7ee:	90 40       	sbci	r25, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <main+0x516>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <main+0x520>
     7f4:	00 00       	nop
     7f6:	c1 cd       	rjmp	.-1150   	; 0x37a <main+0xa6>

000007f8 <_GLOBAL__sub_I__Znwj>:
    }
}

void toggle_lights() {
	for (int i=1; i<=6; ++i) enable[i].toggle();
}
     7f8:	3f 92       	push	r3
     7fa:	4f 92       	push	r4
     7fc:	5f 92       	push	r5
     7fe:	6f 92       	push	r6
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     81a:	c5 e3       	ldi	r28, 0x35	; 53
     81c:	d2 e0       	ldi	r29, 0x02	; 2
     81e:	68 94       	set
     820:	99 24       	eor	r9, r9
     822:	95 f8       	bld	r9, 5
     824:	9a 82       	std	Y+2, r9	; 0x02
     826:	1b 82       	std	Y+3, r1	; 0x03
     828:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     82a:	80 e2       	ldi	r24, 0x20	; 32
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <malloc>
     832:	99 83       	std	Y+1, r25	; 0x01
     834:	88 83       	st	Y, r24
	T* buffer;
	const uint8_t size;
	uint8_t head;
	uint8_t tail;
	
	SimpleBuffer(const uint8_t buffer_size) : size(buffer_size), head(0), tail(0) {
     836:	c0 e3       	ldi	r28, 0x30	; 48
     838:	d2 e0       	ldi	r29, 0x02	; 2
     83a:	9a 82       	std	Y+2, r9	; 0x02
     83c:	1b 82       	std	Y+3, r1	; 0x03
     83e:	1c 82       	std	Y+4, r1	; 0x04
		buffer = (T*)malloc(size);
     840:	80 e2       	ldi	r24, 0x20	; 32
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <malloc>
     848:	99 83       	std	Y+1, r25	; 0x01
     84a:	88 83       	st	Y, r24
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     84c:	e8 ee       	ldi	r30, 0xE8	; 232
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	0f 2e       	mov	r0, r31
     852:	f5 e2       	ldi	r31, 0x25	; 37
     854:	cf 2e       	mov	r12, r31
     856:	d1 2c       	mov	r13, r1
     858:	f0 2d       	mov	r31, r0
     85a:	d3 82       	std	Z+3, r13	; 0x03
     85c:	c2 82       	std	Z+2, r12	; 0x02
     85e:	0f 2e       	mov	r0, r31
     860:	f4 e2       	ldi	r31, 0x24	; 36
     862:	ef 2e       	mov	r14, r31
     864:	f1 2c       	mov	r15, r1
     866:	f0 2d       	mov	r31, r0
     868:	f5 82       	std	Z+5, r15	; 0x05
     86a:	e4 82       	std	Z+4, r14	; 0x04
     86c:	03 e2       	ldi	r16, 0x23	; 35
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	17 83       	std	Z+7, r17	; 0x07
     872:	06 83       	std	Z+6, r16	; 0x06
     874:	10 86       	std	Z+8, r1	; 0x08
     876:	33 24       	eor	r3, r3
     878:	33 94       	inc	r3
     87a:	31 86       	std	Z+9, r3	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     87c:	87 e7       	ldi	r24, 0x77	; 119
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	91 83       	std	Z+1, r25	; 0x01
     882:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     884:	28 98       	cbi	0x05, 0	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     886:	20 9a       	sbi	0x04, 0	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     888:	68 e2       	ldi	r22, 0x28	; 40
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	75 87       	std	Z+13, r23	; 0x0d
     88e:	64 87       	std	Z+12, r22	; 0x0c
     890:	47 e2       	ldi	r20, 0x27	; 39
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	57 87       	std	Z+15, r21	; 0x0f
     896:	46 87       	std	Z+14, r20	; 0x0e
     898:	26 e2       	ldi	r18, 0x26	; 38
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	31 8b       	std	Z+17, r19	; 0x11
     89e:	20 8b       	std	Z+16, r18	; 0x10
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	6f 2e       	mov	r6, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	62 8a       	std	Z+18, r6	; 0x12
     8aa:	68 94       	set
     8ac:	55 24       	eor	r5, r5
     8ae:	53 f8       	bld	r5, 3
     8b0:	53 8a       	std	Z+19, r5	; 0x13
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     8b2:	93 87       	std	Z+11, r25	; 0x0b
     8b4:	82 87       	std	Z+10, r24	; 0x0a
		// Set output low
		*port_out &= ~pin_mask;
     8b6:	43 98       	cbi	0x08, 3	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     8b8:	3b 9a       	sbi	0x07, 3	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     8ba:	cb e2       	ldi	r28, 0x2B	; 43
     8bc:	d0 e0       	ldi	r29, 0x00	; 0
     8be:	d7 8b       	std	Z+23, r29	; 0x17
     8c0:	c6 8b       	std	Z+22, r28	; 0x16
     8c2:	aa e2       	ldi	r26, 0x2A	; 42
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	b1 8f       	std	Z+25, r27	; 0x19
     8c8:	a0 8f       	std	Z+24, r26	; 0x18
     8ca:	0f 2e       	mov	r0, r31
     8cc:	f9 e2       	ldi	r31, 0x29	; 41
     8ce:	af 2e       	mov	r10, r31
     8d0:	b1 2c       	mov	r11, r1
     8d2:	f0 2d       	mov	r31, r0
     8d4:	b3 8e       	std	Z+27, r11	; 0x1b
     8d6:	a2 8e       	std	Z+26, r10	; 0x1a
     8d8:	68 94       	set
     8da:	44 24       	eor	r4, r4
     8dc:	41 f8       	bld	r4, 1
     8de:	44 8e       	std	Z+28, r4	; 0x1c
     8e0:	68 94       	set
     8e2:	88 24       	eor	r8, r8
     8e4:	82 f8       	bld	r8, 2
     8e6:	85 8e       	std	Z+29, r8	; 0x1d
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     8e8:	95 8b       	std	Z+21, r25	; 0x15
     8ea:	84 8b       	std	Z+20, r24	; 0x14
		// Set output low
		*port_out &= ~pin_mask;
     8ec:	5a 98       	cbi	0x0b, 2	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     8ee:	52 9a       	sbi	0x0a, 2	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     8f0:	d1 a3       	std	Z+33, r29	; 0x21
     8f2:	c0 a3       	std	Z+32, r28	; 0x20
     8f4:	b3 a3       	std	Z+35, r27	; 0x23
     8f6:	a2 a3       	std	Z+34, r26	; 0x22
     8f8:	b5 a2       	std	Z+37, r11	; 0x25
     8fa:	a4 a2       	std	Z+36, r10	; 0x24
     8fc:	86 a2       	std	Z+38, r8	; 0x26
     8fe:	68 94       	set
     900:	77 24       	eor	r7, r7
     902:	74 f8       	bld	r7, 4
     904:	77 a2       	std	Z+39, r7	; 0x27
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     906:	97 8f       	std	Z+31, r25	; 0x1f
     908:	86 8f       	std	Z+30, r24	; 0x1e
		// Set output low
		*port_out &= ~pin_mask;
     90a:	5c 98       	cbi	0x0b, 4	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     90c:	54 9a       	sbi	0x0a, 4	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     90e:	73 a7       	std	Z+43, r23	; 0x2b
     910:	62 a7       	std	Z+42, r22	; 0x2a
     912:	55 a7       	std	Z+45, r21	; 0x2d
     914:	44 a7       	std	Z+44, r20	; 0x2c
     916:	37 a7       	std	Z+47, r19	; 0x2f
     918:	26 a7       	std	Z+46, r18	; 0x2e
     91a:	10 aa       	std	Z+48, r1	; 0x30
     91c:	31 aa       	std	Z+49, r3	; 0x31
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     91e:	91 a7       	std	Z+41, r25	; 0x29
     920:	80 a7       	std	Z+40, r24	; 0x28
		// Set output low
		*port_out &= ~pin_mask;
     922:	40 98       	cbi	0x08, 0	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     924:	38 9a       	sbi	0x07, 0	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     926:	75 ab       	std	Z+53, r23	; 0x35
     928:	64 ab       	std	Z+52, r22	; 0x34
     92a:	57 ab       	std	Z+55, r21	; 0x37
     92c:	46 ab       	std	Z+54, r20	; 0x36
     92e:	31 af       	std	Z+57, r19	; 0x39
     930:	20 af       	std	Z+56, r18	; 0x38
     932:	32 ae       	std	Z+58, r3	; 0x3a
     934:	43 ae       	std	Z+59, r4	; 0x3b
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     936:	93 ab       	std	Z+51, r25	; 0x33
     938:	82 ab       	std	Z+50, r24	; 0x32
		// Set output low
		*port_out &= ~pin_mask;
     93a:	41 98       	cbi	0x08, 1	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     93c:	39 9a       	sbi	0x07, 1	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     93e:	70 93 27 02 	sts	0x0227, r23
     942:	60 93 26 02 	sts	0x0226, r22
     946:	50 93 29 02 	sts	0x0229, r21
     94a:	40 93 28 02 	sts	0x0228, r20
     94e:	30 93 2b 02 	sts	0x022B, r19
     952:	20 93 2a 02 	sts	0x022A, r18
     956:	40 92 2c 02 	sts	0x022C, r4
     95a:	80 92 2d 02 	sts	0x022D, r8
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     95e:	95 af       	std	Z+61, r25	; 0x3d
     960:	84 af       	std	Z+60, r24	; 0x3c
		// Set output low
		*port_out &= ~pin_mask;
     962:	42 98       	cbi	0x08, 2	; 8
		// Set pin in port to output
		*port_dir |= pin_mask;
     964:	3a 9a       	sbi	0x07, 2	; 7
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     966:	ee ed       	ldi	r30, 0xDE	; 222
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	d3 83       	std	Z+3, r29	; 0x03
     96c:	c2 83       	std	Z+2, r28	; 0x02
     96e:	b5 83       	std	Z+5, r27	; 0x05
     970:	a4 83       	std	Z+4, r26	; 0x04
     972:	b7 82       	std	Z+7, r11	; 0x07
     974:	a6 82       	std	Z+6, r10	; 0x06
     976:	0f 2e       	mov	r0, r31
     978:	f7 e0       	ldi	r31, 0x07	; 7
     97a:	4f 2e       	mov	r4, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	40 86       	std	Z+8, r4	; 0x08
     980:	68 94       	set
     982:	44 24       	eor	r4, r4
     984:	47 f8       	bld	r4, 7
     986:	41 86       	std	Z+9, r4	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     98c:	5f 98       	cbi	0x0b, 7	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     98e:	57 9a       	sbi	0x0a, 7	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     990:	e4 ed       	ldi	r30, 0xD4	; 212
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	d3 82       	std	Z+3, r13	; 0x03
     996:	c2 82       	std	Z+2, r12	; 0x02
     998:	f5 82       	std	Z+5, r15	; 0x05
     99a:	e4 82       	std	Z+4, r14	; 0x04
     99c:	17 83       	std	Z+7, r17	; 0x07
     99e:	06 83       	std	Z+6, r16	; 0x06
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f5 e0       	ldi	r31, 0x05	; 5
     9a4:	4f 2e       	mov	r4, r31
     9a6:	f0 2d       	mov	r31, r0
     9a8:	40 86       	std	Z+8, r4	; 0x08
     9aa:	91 86       	std	Z+9, r9	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     9b0:	2d 98       	cbi	0x05, 5	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     9b2:	25 9a       	sbi	0x04, 5	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     9b4:	ea ec       	ldi	r30, 0xCA	; 202
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	d3 82       	std	Z+3, r13	; 0x03
     9ba:	c2 82       	std	Z+2, r12	; 0x02
     9bc:	f5 82       	std	Z+5, r15	; 0x05
     9be:	e4 82       	std	Z+4, r14	; 0x04
     9c0:	17 83       	std	Z+7, r17	; 0x07
     9c2:	06 83       	std	Z+6, r16	; 0x06
     9c4:	80 86       	std	Z+8, r8	; 0x08
     9c6:	71 86       	std	Z+9, r7	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     9cc:	2c 98       	cbi	0x05, 4	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     9ce:	24 9a       	sbi	0x04, 4	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     9d0:	e0 ec       	ldi	r30, 0xC0	; 192
     9d2:	f1 e0       	ldi	r31, 0x01	; 1
     9d4:	d3 82       	std	Z+3, r13	; 0x03
     9d6:	c2 82       	std	Z+2, r12	; 0x02
     9d8:	f5 82       	std	Z+5, r15	; 0x05
     9da:	e4 82       	std	Z+4, r14	; 0x04
     9dc:	17 83       	std	Z+7, r17	; 0x07
     9de:	06 83       	std	Z+6, r16	; 0x06
     9e0:	60 86       	std	Z+8, r6	; 0x08
     9e2:	51 86       	std	Z+9, r5	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     9e4:	91 83       	std	Z+1, r25	; 0x01
     9e6:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     9e8:	2b 98       	cbi	0x05, 3	; 5
		// Set pin in port to output
		*port_dir |= pin_mask;
     9ea:	23 9a       	sbi	0x04, 3	; 4
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     9ec:	e6 eb       	ldi	r30, 0xB6	; 182
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	d3 83       	std	Z+3, r29	; 0x03
     9f2:	c2 83       	std	Z+2, r28	; 0x02
     9f4:	b5 83       	std	Z+5, r27	; 0x05
     9f6:	a4 83       	std	Z+4, r26	; 0x04
     9f8:	b7 82       	std	Z+7, r11	; 0x07
     9fa:	a6 82       	std	Z+6, r10	; 0x06
     9fc:	b6 e0       	ldi	r27, 0x06	; 6
     9fe:	b0 87       	std	Z+8, r27	; 0x08
     a00:	a0 e4       	ldi	r26, 0x40	; 64
     a02:	a1 87       	std	Z+9, r26	; 0x09
};

class Output : public GPIO {
public:
	Output(volatile uint8_t *const io_port, const uint8_t io_pin) 
			: GPIO(io_port, io_pin) {
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
		// Set output low
		*port_out &= ~pin_mask;
     a08:	5e 98       	cbi	0x0b, 6	; 11
		// Set pin in port to output
		*port_dir |= pin_mask;
     a0a:	56 9a       	sbi	0x0a, 6	; 10
	const uint8_t pin;
	const uint8_t pin_mask;
	
	GPIO(volatile uint8_t *const io_port, const uint8_t io_pin) :
		port_out(io_port), port_dir(io_port-1U), port_in(io_port-2U),
		pin(io_pin), pin_mask(1<<io_pin) {}
     a0c:	ec ea       	ldi	r30, 0xAC	; 172
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	73 83       	std	Z+3, r23	; 0x03
     a12:	62 83       	std	Z+2, r22	; 0x02
     a14:	55 83       	std	Z+5, r21	; 0x05
     a16:	44 83       	std	Z+4, r20	; 0x04
     a18:	37 83       	std	Z+7, r19	; 0x07
     a1a:	26 83       	std	Z+6, r18	; 0x06
     a1c:	b0 87       	std	Z+8, r27	; 0x08
     a1e:	a1 87       	std	Z+9, r26	; 0x09
};

class Input : public GPIO {
public:
	Input(volatile uint8_t *const io_port, const uint8_t io_pin)
			: GPIO(io_port, io_pin) {
     a20:	8f e7       	ldi	r24, 0x7F	; 127
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	80 83       	st	Z, r24
		// Set pin in port to input;
		*port_dir &= ~pin_mask;
     a28:	3e 98       	cbi	0x07, 6	; 7
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	bf 90       	pop	r11
     a3c:	af 90       	pop	r10
     a3e:	9f 90       	pop	r9
     a40:	8f 90       	pop	r8
     a42:	7f 90       	pop	r7
     a44:	6f 90       	pop	r6
     a46:	5f 90       	pop	r5
     a48:	4f 90       	pop	r4
     a4a:	3f 90       	pop	r3
     a4c:	08 95       	ret

00000a4e <_GLOBAL__sub_D__Znwj>:
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29

#include "opbots.h"
#include <stdio.h>
using namespace opbots;

Output enable[] = {
     a52:	ce e2       	ldi	r28, 0x2E	; 46
     a54:	d2 e0       	ldi	r29, 0x02	; 2
     a56:	2a 97       	sbiw	r28, 0x0a	; 10
     a58:	e8 81       	ld	r30, Y
     a5a:	f9 81       	ldd	r31, Y+1	; 0x01
     a5c:	01 90       	ld	r0, Z+
     a5e:	f0 81       	ld	r31, Z
     a60:	e0 2d       	mov	r30, r0
     a62:	ce 01       	movw	r24, r28
     a64:	09 95       	icall
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	c8 3e       	cpi	r28, 0xE8	; 232
     a6a:	d8 07       	cpc	r29, r24
     a6c:	a1 f7       	brne	.-24     	; 0xa56 <_GLOBAL__sub_D__Znwj+0x8>
    }
}

void toggle_lights() {
	for (int i=1; i<=6; ++i) enable[i].toggle();
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <__udivmodsi4>:
     a74:	a1 e2       	ldi	r26, 0x21	; 33
     a76:	1a 2e       	mov	r1, r26
     a78:	aa 1b       	sub	r26, r26
     a7a:	bb 1b       	sub	r27, r27
     a7c:	fd 01       	movw	r30, r26
     a7e:	0d c0       	rjmp	.+26     	; 0xa9a <__udivmodsi4_ep>

00000a80 <__udivmodsi4_loop>:
     a80:	aa 1f       	adc	r26, r26
     a82:	bb 1f       	adc	r27, r27
     a84:	ee 1f       	adc	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	a2 17       	cp	r26, r18
     a8a:	b3 07       	cpc	r27, r19
     a8c:	e4 07       	cpc	r30, r20
     a8e:	f5 07       	cpc	r31, r21
     a90:	20 f0       	brcs	.+8      	; 0xa9a <__udivmodsi4_ep>
     a92:	a2 1b       	sub	r26, r18
     a94:	b3 0b       	sbc	r27, r19
     a96:	e4 0b       	sbc	r30, r20
     a98:	f5 0b       	sbc	r31, r21

00000a9a <__udivmodsi4_ep>:
     a9a:	66 1f       	adc	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	88 1f       	adc	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	1a 94       	dec	r1
     aa4:	69 f7       	brne	.-38     	; 0xa80 <__udivmodsi4_loop>
     aa6:	60 95       	com	r22
     aa8:	70 95       	com	r23
     aaa:	80 95       	com	r24
     aac:	90 95       	com	r25
     aae:	9b 01       	movw	r18, r22
     ab0:	ac 01       	movw	r20, r24
     ab2:	bd 01       	movw	r22, r26
     ab4:	cf 01       	movw	r24, r30
     ab6:	08 95       	ret

00000ab8 <__tablejump2__>:
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	05 90       	lpm	r0, Z+
     abe:	f4 91       	lpm	r31, Z
     ac0:	e0 2d       	mov	r30, r0
     ac2:	09 94       	ijmp

00000ac4 <__umulhisi3>:
     ac4:	a2 9f       	mul	r26, r18
     ac6:	b0 01       	movw	r22, r0
     ac8:	b3 9f       	mul	r27, r19
     aca:	c0 01       	movw	r24, r0
     acc:	a3 9f       	mul	r26, r19
     ace:	70 0d       	add	r23, r0
     ad0:	81 1d       	adc	r24, r1
     ad2:	11 24       	eor	r1, r1
     ad4:	91 1d       	adc	r25, r1
     ad6:	b2 9f       	mul	r27, r18
     ad8:	70 0d       	add	r23, r0
     ada:	81 1d       	adc	r24, r1
     adc:	11 24       	eor	r1, r1
     ade:	91 1d       	adc	r25, r1
     ae0:	08 95       	ret

00000ae2 <__muluhisi3>:
     ae2:	0e 94 62 05 	call	0xac4	; 0xac4 <__umulhisi3>
     ae6:	a5 9f       	mul	r26, r21
     ae8:	90 0d       	add	r25, r0
     aea:	b4 9f       	mul	r27, r20
     aec:	90 0d       	add	r25, r0
     aee:	a4 9f       	mul	r26, r20
     af0:	80 0d       	add	r24, r0
     af2:	91 1d       	adc	r25, r1
     af4:	11 24       	eor	r1, r1
     af6:	08 95       	ret

00000af8 <malloc>:
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	91 05       	cpc	r25, r1
     b00:	10 f4       	brcc	.+4      	; 0xb06 <malloc+0xe>
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	e0 91 3f 02 	lds	r30, 0x023F
     b0a:	f0 91 40 02 	lds	r31, 0x0240
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	c0 e0       	ldi	r28, 0x00	; 0
     b14:	d0 e0       	ldi	r29, 0x00	; 0
     b16:	30 97       	sbiw	r30, 0x00	; 0
     b18:	11 f1       	breq	.+68     	; 0xb5e <malloc+0x66>
     b1a:	40 81       	ld	r20, Z
     b1c:	51 81       	ldd	r21, Z+1	; 0x01
     b1e:	48 17       	cp	r20, r24
     b20:	59 07       	cpc	r21, r25
     b22:	c0 f0       	brcs	.+48     	; 0xb54 <malloc+0x5c>
     b24:	48 17       	cp	r20, r24
     b26:	59 07       	cpc	r21, r25
     b28:	61 f4       	brne	.+24     	; 0xb42 <malloc+0x4a>
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	20 97       	sbiw	r28, 0x00	; 0
     b30:	19 f0       	breq	.+6      	; 0xb38 <malloc+0x40>
     b32:	9b 83       	std	Y+3, r25	; 0x03
     b34:	8a 83       	std	Y+2, r24	; 0x02
     b36:	2b c0       	rjmp	.+86     	; 0xb8e <malloc+0x96>
     b38:	90 93 40 02 	sts	0x0240, r25
     b3c:	80 93 3f 02 	sts	0x023F, r24
     b40:	26 c0       	rjmp	.+76     	; 0xb8e <malloc+0x96>
     b42:	21 15       	cp	r18, r1
     b44:	31 05       	cpc	r19, r1
     b46:	19 f0       	breq	.+6      	; 0xb4e <malloc+0x56>
     b48:	42 17       	cp	r20, r18
     b4a:	53 07       	cpc	r21, r19
     b4c:	18 f4       	brcc	.+6      	; 0xb54 <malloc+0x5c>
     b4e:	9a 01       	movw	r18, r20
     b50:	be 01       	movw	r22, r28
     b52:	df 01       	movw	r26, r30
     b54:	ef 01       	movw	r28, r30
     b56:	02 80       	ldd	r0, Z+2	; 0x02
     b58:	f3 81       	ldd	r31, Z+3	; 0x03
     b5a:	e0 2d       	mov	r30, r0
     b5c:	dc cf       	rjmp	.-72     	; 0xb16 <malloc+0x1e>
     b5e:	21 15       	cp	r18, r1
     b60:	31 05       	cpc	r19, r1
     b62:	09 f1       	breq	.+66     	; 0xba6 <malloc+0xae>
     b64:	28 1b       	sub	r18, r24
     b66:	39 0b       	sbc	r19, r25
     b68:	24 30       	cpi	r18, 0x04	; 4
     b6a:	31 05       	cpc	r19, r1
     b6c:	90 f4       	brcc	.+36     	; 0xb92 <malloc+0x9a>
     b6e:	12 96       	adiw	r26, 0x02	; 2
     b70:	8d 91       	ld	r24, X+
     b72:	9c 91       	ld	r25, X
     b74:	13 97       	sbiw	r26, 0x03	; 3
     b76:	61 15       	cp	r22, r1
     b78:	71 05       	cpc	r23, r1
     b7a:	21 f0       	breq	.+8      	; 0xb84 <malloc+0x8c>
     b7c:	fb 01       	movw	r30, r22
     b7e:	93 83       	std	Z+3, r25	; 0x03
     b80:	82 83       	std	Z+2, r24	; 0x02
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <malloc+0x94>
     b84:	90 93 40 02 	sts	0x0240, r25
     b88:	80 93 3f 02 	sts	0x023F, r24
     b8c:	fd 01       	movw	r30, r26
     b8e:	32 96       	adiw	r30, 0x02	; 2
     b90:	44 c0       	rjmp	.+136    	; 0xc1a <malloc+0x122>
     b92:	fd 01       	movw	r30, r26
     b94:	e2 0f       	add	r30, r18
     b96:	f3 1f       	adc	r31, r19
     b98:	81 93       	st	Z+, r24
     b9a:	91 93       	st	Z+, r25
     b9c:	22 50       	subi	r18, 0x02	; 2
     b9e:	31 09       	sbc	r19, r1
     ba0:	2d 93       	st	X+, r18
     ba2:	3c 93       	st	X, r19
     ba4:	3a c0       	rjmp	.+116    	; 0xc1a <malloc+0x122>
     ba6:	20 91 3d 02 	lds	r18, 0x023D
     baa:	30 91 3e 02 	lds	r19, 0x023E
     bae:	23 2b       	or	r18, r19
     bb0:	41 f4       	brne	.+16     	; 0xbc2 <malloc+0xca>
     bb2:	20 91 02 01 	lds	r18, 0x0102
     bb6:	30 91 03 01 	lds	r19, 0x0103
     bba:	30 93 3e 02 	sts	0x023E, r19
     bbe:	20 93 3d 02 	sts	0x023D, r18
     bc2:	20 91 00 01 	lds	r18, 0x0100
     bc6:	30 91 01 01 	lds	r19, 0x0101
     bca:	21 15       	cp	r18, r1
     bcc:	31 05       	cpc	r19, r1
     bce:	41 f4       	brne	.+16     	; 0xbe0 <malloc+0xe8>
     bd0:	2d b7       	in	r18, 0x3d	; 61
     bd2:	3e b7       	in	r19, 0x3e	; 62
     bd4:	40 91 04 01 	lds	r20, 0x0104
     bd8:	50 91 05 01 	lds	r21, 0x0105
     bdc:	24 1b       	sub	r18, r20
     bde:	35 0b       	sbc	r19, r21
     be0:	e0 91 3d 02 	lds	r30, 0x023D
     be4:	f0 91 3e 02 	lds	r31, 0x023E
     be8:	e2 17       	cp	r30, r18
     bea:	f3 07       	cpc	r31, r19
     bec:	a0 f4       	brcc	.+40     	; 0xc16 <malloc+0x11e>
     bee:	2e 1b       	sub	r18, r30
     bf0:	3f 0b       	sbc	r19, r31
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	78 f0       	brcs	.+30     	; 0xc16 <malloc+0x11e>
     bf8:	ac 01       	movw	r20, r24
     bfa:	4e 5f       	subi	r20, 0xFE	; 254
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
     bfe:	24 17       	cp	r18, r20
     c00:	35 07       	cpc	r19, r21
     c02:	48 f0       	brcs	.+18     	; 0xc16 <malloc+0x11e>
     c04:	4e 0f       	add	r20, r30
     c06:	5f 1f       	adc	r21, r31
     c08:	50 93 3e 02 	sts	0x023E, r21
     c0c:	40 93 3d 02 	sts	0x023D, r20
     c10:	81 93       	st	Z+, r24
     c12:	91 93       	st	Z+, r25
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <malloc+0x122>
     c16:	e0 e0       	ldi	r30, 0x00	; 0
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	cf 01       	movw	r24, r30
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <free>:
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	09 f4       	brne	.+2      	; 0xc30 <free+0xe>
     c2e:	8c c0       	rjmp	.+280    	; 0xd48 <free+0x126>
     c30:	fc 01       	movw	r30, r24
     c32:	32 97       	sbiw	r30, 0x02	; 2
     c34:	13 82       	std	Z+3, r1	; 0x03
     c36:	12 82       	std	Z+2, r1	; 0x02
     c38:	00 91 3f 02 	lds	r16, 0x023F
     c3c:	10 91 40 02 	lds	r17, 0x0240
     c40:	01 15       	cp	r16, r1
     c42:	11 05       	cpc	r17, r1
     c44:	81 f4       	brne	.+32     	; 0xc66 <free+0x44>
     c46:	20 81       	ld	r18, Z
     c48:	31 81       	ldd	r19, Z+1	; 0x01
     c4a:	82 0f       	add	r24, r18
     c4c:	93 1f       	adc	r25, r19
     c4e:	20 91 3d 02 	lds	r18, 0x023D
     c52:	30 91 3e 02 	lds	r19, 0x023E
     c56:	28 17       	cp	r18, r24
     c58:	39 07       	cpc	r19, r25
     c5a:	79 f5       	brne	.+94     	; 0xcba <free+0x98>
     c5c:	f0 93 3e 02 	sts	0x023E, r31
     c60:	e0 93 3d 02 	sts	0x023D, r30
     c64:	71 c0       	rjmp	.+226    	; 0xd48 <free+0x126>
     c66:	d8 01       	movw	r26, r16
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	ae 17       	cp	r26, r30
     c6e:	bf 07       	cpc	r27, r31
     c70:	50 f4       	brcc	.+20     	; 0xc86 <free+0x64>
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	2d 91       	ld	r18, X+
     c76:	3c 91       	ld	r19, X
     c78:	13 97       	sbiw	r26, 0x03	; 3
     c7a:	ad 01       	movw	r20, r26
     c7c:	21 15       	cp	r18, r1
     c7e:	31 05       	cpc	r19, r1
     c80:	09 f1       	breq	.+66     	; 0xcc4 <free+0xa2>
     c82:	d9 01       	movw	r26, r18
     c84:	f3 cf       	rjmp	.-26     	; 0xc6c <free+0x4a>
     c86:	9d 01       	movw	r18, r26
     c88:	da 01       	movw	r26, r20
     c8a:	33 83       	std	Z+3, r19	; 0x03
     c8c:	22 83       	std	Z+2, r18	; 0x02
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	86 0f       	add	r24, r22
     c94:	97 1f       	adc	r25, r23
     c96:	82 17       	cp	r24, r18
     c98:	93 07       	cpc	r25, r19
     c9a:	69 f4       	brne	.+26     	; 0xcb6 <free+0x94>
     c9c:	ec 01       	movw	r28, r24
     c9e:	28 81       	ld	r18, Y
     ca0:	39 81       	ldd	r19, Y+1	; 0x01
     ca2:	26 0f       	add	r18, r22
     ca4:	37 1f       	adc	r19, r23
     ca6:	2e 5f       	subi	r18, 0xFE	; 254
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	31 83       	std	Z+1, r19	; 0x01
     cac:	20 83       	st	Z, r18
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	93 83       	std	Z+3, r25	; 0x03
     cb4:	82 83       	std	Z+2, r24	; 0x02
     cb6:	45 2b       	or	r20, r21
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <free+0xa2>
     cba:	f0 93 40 02 	sts	0x0240, r31
     cbe:	e0 93 3f 02 	sts	0x023F, r30
     cc2:	42 c0       	rjmp	.+132    	; 0xd48 <free+0x126>
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	fc 93       	st	X, r31
     cc8:	ee 93       	st	-X, r30
     cca:	12 97       	sbiw	r26, 0x02	; 2
     ccc:	ed 01       	movw	r28, r26
     cce:	49 91       	ld	r20, Y+
     cd0:	59 91       	ld	r21, Y+
     cd2:	9e 01       	movw	r18, r28
     cd4:	24 0f       	add	r18, r20
     cd6:	35 1f       	adc	r19, r21
     cd8:	e2 17       	cp	r30, r18
     cda:	f3 07       	cpc	r31, r19
     cdc:	71 f4       	brne	.+28     	; 0xcfa <free+0xd8>
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	84 0f       	add	r24, r20
     ce4:	95 1f       	adc	r25, r21
     ce6:	02 96       	adiw	r24, 0x02	; 2
     ce8:	11 96       	adiw	r26, 0x01	; 1
     cea:	9c 93       	st	X, r25
     cec:	8e 93       	st	-X, r24
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	9c 93       	st	X, r25
     cf6:	8e 93       	st	-X, r24
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	e0 e0       	ldi	r30, 0x00	; 0
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	d8 01       	movw	r26, r16
     d00:	12 96       	adiw	r26, 0x02	; 2
     d02:	8d 91       	ld	r24, X+
     d04:	9c 91       	ld	r25, X
     d06:	13 97       	sbiw	r26, 0x03	; 3
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	19 f0       	breq	.+6      	; 0xd12 <free+0xf0>
     d0c:	f8 01       	movw	r30, r16
     d0e:	8c 01       	movw	r16, r24
     d10:	f6 cf       	rjmp	.-20     	; 0xcfe <free+0xdc>
     d12:	8d 91       	ld	r24, X+
     d14:	9c 91       	ld	r25, X
     d16:	98 01       	movw	r18, r16
     d18:	2e 5f       	subi	r18, 0xFE	; 254
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	82 0f       	add	r24, r18
     d1e:	93 1f       	adc	r25, r19
     d20:	20 91 3d 02 	lds	r18, 0x023D
     d24:	30 91 3e 02 	lds	r19, 0x023E
     d28:	28 17       	cp	r18, r24
     d2a:	39 07       	cpc	r19, r25
     d2c:	69 f4       	brne	.+26     	; 0xd48 <free+0x126>
     d2e:	30 97       	sbiw	r30, 0x00	; 0
     d30:	29 f4       	brne	.+10     	; 0xd3c <free+0x11a>
     d32:	10 92 40 02 	sts	0x0240, r1
     d36:	10 92 3f 02 	sts	0x023F, r1
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <free+0x11e>
     d3c:	13 82       	std	Z+3, r1	; 0x03
     d3e:	12 82       	std	Z+2, r1	; 0x02
     d40:	10 93 3e 02 	sts	0x023E, r17
     d44:	00 93 3d 02 	sts	0x023D, r16
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	08 95       	ret

00000d52 <memcpy>:
     d52:	fb 01       	movw	r30, r22
     d54:	dc 01       	movw	r26, r24
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <memcpy+0xa>
     d58:	01 90       	ld	r0, Z+
     d5a:	0d 92       	st	X+, r0
     d5c:	41 50       	subi	r20, 0x01	; 1
     d5e:	50 40       	sbci	r21, 0x00	; 0
     d60:	d8 f7       	brcc	.-10     	; 0xd58 <memcpy+0x6>
     d62:	08 95       	ret

00000d64 <sprintf>:
     d64:	ae e0       	ldi	r26, 0x0E	; 14
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e8 eb       	ldi	r30, 0xB8	; 184
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__prologue_saves__+0x1c>
     d70:	0d 89       	ldd	r16, Y+21	; 0x15
     d72:	1e 89       	ldd	r17, Y+22	; 0x16
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	8c 83       	std	Y+4, r24	; 0x04
     d78:	1a 83       	std	Y+2, r17	; 0x02
     d7a:	09 83       	std	Y+1, r16	; 0x01
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	9f e7       	ldi	r25, 0x7F	; 127
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
     d84:	ae 01       	movw	r20, r28
     d86:	47 5e       	subi	r20, 0xE7	; 231
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	6f 89       	ldd	r22, Y+23	; 0x17
     d8c:	78 8d       	ldd	r23, Y+24	; 0x18
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 d5 06 	call	0xdaa	; 0xdaa <vfprintf>
     d96:	2f 81       	ldd	r18, Y+7	; 0x07
     d98:	38 85       	ldd	r19, Y+8	; 0x08
     d9a:	f8 01       	movw	r30, r16
     d9c:	e2 0f       	add	r30, r18
     d9e:	f3 1f       	adc	r31, r19
     da0:	10 82       	st	Z, r1
     da2:	2e 96       	adiw	r28, 0x0e	; 14
     da4:	e4 e0       	ldi	r30, 0x04	; 4
     da6:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__epilogue_restores__+0x1c>

00000daa <vfprintf>:
     daa:	ac e0       	ldi	r26, 0x0C	; 12
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	eb ed       	ldi	r30, 0xDB	; 219
     db0:	f6 e0       	ldi	r31, 0x06	; 6
     db2:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__prologue_saves__>
     db6:	7c 01       	movw	r14, r24
     db8:	6b 01       	movw	r12, r22
     dba:	8a 01       	movw	r16, r20
     dbc:	fc 01       	movw	r30, r24
     dbe:	17 82       	std	Z+7, r1	; 0x07
     dc0:	16 82       	std	Z+6, r1	; 0x06
     dc2:	83 81       	ldd	r24, Z+3	; 0x03
     dc4:	81 ff       	sbrs	r24, 1
     dc6:	bd c1       	rjmp	.+890    	; 0x1142 <vfprintf+0x398>
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	4c 01       	movw	r8, r24
     dce:	f7 01       	movw	r30, r14
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	f6 01       	movw	r30, r12
     dd4:	93 fd       	sbrc	r25, 3
     dd6:	85 91       	lpm	r24, Z+
     dd8:	93 ff       	sbrs	r25, 3
     dda:	81 91       	ld	r24, Z+
     ddc:	6f 01       	movw	r12, r30
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <vfprintf+0x3a>
     de2:	ab c1       	rjmp	.+854    	; 0x113a <vfprintf+0x390>
     de4:	85 32       	cpi	r24, 0x25	; 37
     de6:	39 f4       	brne	.+14     	; 0xdf6 <vfprintf+0x4c>
     de8:	93 fd       	sbrc	r25, 3
     dea:	85 91       	lpm	r24, Z+
     dec:	93 ff       	sbrs	r25, 3
     dee:	81 91       	ld	r24, Z+
     df0:	6f 01       	movw	r12, r30
     df2:	85 32       	cpi	r24, 0x25	; 37
     df4:	29 f4       	brne	.+10     	; 0xe00 <vfprintf+0x56>
     df6:	b7 01       	movw	r22, r14
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
     dfe:	e7 cf       	rjmp	.-50     	; 0xdce <vfprintf+0x24>
     e00:	51 2c       	mov	r5, r1
     e02:	31 2c       	mov	r3, r1
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	20 32       	cpi	r18, 0x20	; 32
     e08:	a0 f4       	brcc	.+40     	; 0xe32 <vfprintf+0x88>
     e0a:	8b 32       	cpi	r24, 0x2B	; 43
     e0c:	69 f0       	breq	.+26     	; 0xe28 <vfprintf+0x7e>
     e0e:	30 f4       	brcc	.+12     	; 0xe1c <vfprintf+0x72>
     e10:	80 32       	cpi	r24, 0x20	; 32
     e12:	59 f0       	breq	.+22     	; 0xe2a <vfprintf+0x80>
     e14:	83 32       	cpi	r24, 0x23	; 35
     e16:	69 f4       	brne	.+26     	; 0xe32 <vfprintf+0x88>
     e18:	20 61       	ori	r18, 0x10	; 16
     e1a:	2c c0       	rjmp	.+88     	; 0xe74 <vfprintf+0xca>
     e1c:	8d 32       	cpi	r24, 0x2D	; 45
     e1e:	39 f0       	breq	.+14     	; 0xe2e <vfprintf+0x84>
     e20:	80 33       	cpi	r24, 0x30	; 48
     e22:	39 f4       	brne	.+14     	; 0xe32 <vfprintf+0x88>
     e24:	21 60       	ori	r18, 0x01	; 1
     e26:	26 c0       	rjmp	.+76     	; 0xe74 <vfprintf+0xca>
     e28:	22 60       	ori	r18, 0x02	; 2
     e2a:	24 60       	ori	r18, 0x04	; 4
     e2c:	23 c0       	rjmp	.+70     	; 0xe74 <vfprintf+0xca>
     e2e:	28 60       	ori	r18, 0x08	; 8
     e30:	21 c0       	rjmp	.+66     	; 0xe74 <vfprintf+0xca>
     e32:	27 fd       	sbrc	r18, 7
     e34:	27 c0       	rjmp	.+78     	; 0xe84 <vfprintf+0xda>
     e36:	30 ed       	ldi	r19, 0xD0	; 208
     e38:	38 0f       	add	r19, r24
     e3a:	3a 30       	cpi	r19, 0x0A	; 10
     e3c:	78 f4       	brcc	.+30     	; 0xe5c <vfprintf+0xb2>
     e3e:	26 ff       	sbrs	r18, 6
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0xa4>
     e42:	fa e0       	ldi	r31, 0x0A	; 10
     e44:	5f 9e       	mul	r5, r31
     e46:	30 0d       	add	r19, r0
     e48:	11 24       	eor	r1, r1
     e4a:	53 2e       	mov	r5, r19
     e4c:	13 c0       	rjmp	.+38     	; 0xe74 <vfprintf+0xca>
     e4e:	8a e0       	ldi	r24, 0x0A	; 10
     e50:	38 9e       	mul	r3, r24
     e52:	30 0d       	add	r19, r0
     e54:	11 24       	eor	r1, r1
     e56:	33 2e       	mov	r3, r19
     e58:	20 62       	ori	r18, 0x20	; 32
     e5a:	0c c0       	rjmp	.+24     	; 0xe74 <vfprintf+0xca>
     e5c:	8e 32       	cpi	r24, 0x2E	; 46
     e5e:	21 f4       	brne	.+8      	; 0xe68 <vfprintf+0xbe>
     e60:	26 fd       	sbrc	r18, 6
     e62:	6b c1       	rjmp	.+726    	; 0x113a <vfprintf+0x390>
     e64:	20 64       	ori	r18, 0x40	; 64
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <vfprintf+0xca>
     e68:	8c 36       	cpi	r24, 0x6C	; 108
     e6a:	11 f4       	brne	.+4      	; 0xe70 <vfprintf+0xc6>
     e6c:	20 68       	ori	r18, 0x80	; 128
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0xca>
     e70:	88 36       	cpi	r24, 0x68	; 104
     e72:	41 f4       	brne	.+16     	; 0xe84 <vfprintf+0xda>
     e74:	f6 01       	movw	r30, r12
     e76:	93 fd       	sbrc	r25, 3
     e78:	85 91       	lpm	r24, Z+
     e7a:	93 ff       	sbrs	r25, 3
     e7c:	81 91       	ld	r24, Z+
     e7e:	6f 01       	movw	r12, r30
     e80:	81 11       	cpse	r24, r1
     e82:	c1 cf       	rjmp	.-126    	; 0xe06 <vfprintf+0x5c>
     e84:	98 2f       	mov	r25, r24
     e86:	9f 7d       	andi	r25, 0xDF	; 223
     e88:	95 54       	subi	r25, 0x45	; 69
     e8a:	93 30       	cpi	r25, 0x03	; 3
     e8c:	28 f4       	brcc	.+10     	; 0xe98 <vfprintf+0xee>
     e8e:	0c 5f       	subi	r16, 0xFC	; 252
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	ff e3       	ldi	r31, 0x3F	; 63
     e94:	f9 83       	std	Y+1, r31	; 0x01
     e96:	0d c0       	rjmp	.+26     	; 0xeb2 <vfprintf+0x108>
     e98:	83 36       	cpi	r24, 0x63	; 99
     e9a:	31 f0       	breq	.+12     	; 0xea8 <vfprintf+0xfe>
     e9c:	83 37       	cpi	r24, 0x73	; 115
     e9e:	71 f0       	breq	.+28     	; 0xebc <vfprintf+0x112>
     ea0:	83 35       	cpi	r24, 0x53	; 83
     ea2:	09 f0       	breq	.+2      	; 0xea6 <vfprintf+0xfc>
     ea4:	5b c0       	rjmp	.+182    	; 0xf5c <vfprintf+0x1b2>
     ea6:	22 c0       	rjmp	.+68     	; 0xeec <vfprintf+0x142>
     ea8:	f8 01       	movw	r30, r16
     eaa:	80 81       	ld	r24, Z
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	0e 5f       	subi	r16, 0xFE	; 254
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	44 24       	eor	r4, r4
     eb4:	43 94       	inc	r4
     eb6:	51 2c       	mov	r5, r1
     eb8:	54 01       	movw	r10, r8
     eba:	15 c0       	rjmp	.+42     	; 0xee6 <vfprintf+0x13c>
     ebc:	38 01       	movw	r6, r16
     ebe:	f2 e0       	ldi	r31, 0x02	; 2
     ec0:	6f 0e       	add	r6, r31
     ec2:	71 1c       	adc	r7, r1
     ec4:	f8 01       	movw	r30, r16
     ec6:	a0 80       	ld	r10, Z
     ec8:	b1 80       	ldd	r11, Z+1	; 0x01
     eca:	26 ff       	sbrs	r18, 6
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <vfprintf+0x12a>
     ece:	65 2d       	mov	r22, r5
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x12e>
     ed4:	6f ef       	ldi	r22, 0xFF	; 255
     ed6:	7f ef       	ldi	r23, 0xFF	; 255
     ed8:	c5 01       	movw	r24, r10
     eda:	2c 87       	std	Y+12, r18	; 0x0c
     edc:	0e 94 b2 08 	call	0x1164	; 0x1164 <strnlen>
     ee0:	2c 01       	movw	r4, r24
     ee2:	83 01       	movw	r16, r6
     ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee6:	2f 77       	andi	r18, 0x7F	; 127
     ee8:	22 2e       	mov	r2, r18
     eea:	17 c0       	rjmp	.+46     	; 0xf1a <vfprintf+0x170>
     eec:	38 01       	movw	r6, r16
     eee:	f2 e0       	ldi	r31, 0x02	; 2
     ef0:	6f 0e       	add	r6, r31
     ef2:	71 1c       	adc	r7, r1
     ef4:	f8 01       	movw	r30, r16
     ef6:	a0 80       	ld	r10, Z
     ef8:	b1 80       	ldd	r11, Z+1	; 0x01
     efa:	26 ff       	sbrs	r18, 6
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <vfprintf+0x15a>
     efe:	65 2d       	mov	r22, r5
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <vfprintf+0x15e>
     f04:	6f ef       	ldi	r22, 0xFF	; 255
     f06:	7f ef       	ldi	r23, 0xFF	; 255
     f08:	c5 01       	movw	r24, r10
     f0a:	2c 87       	std	Y+12, r18	; 0x0c
     f0c:	0e 94 a7 08 	call	0x114e	; 0x114e <strnlen_P>
     f10:	2c 01       	movw	r4, r24
     f12:	2c 85       	ldd	r18, Y+12	; 0x0c
     f14:	20 68       	ori	r18, 0x80	; 128
     f16:	22 2e       	mov	r2, r18
     f18:	83 01       	movw	r16, r6
     f1a:	23 fc       	sbrc	r2, 3
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <vfprintf+0x1aa>
     f1e:	83 2d       	mov	r24, r3
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	48 16       	cp	r4, r24
     f24:	59 06       	cpc	r5, r25
     f26:	b0 f4       	brcc	.+44     	; 0xf54 <vfprintf+0x1aa>
     f28:	b7 01       	movw	r22, r14
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
     f32:	3a 94       	dec	r3
     f34:	f4 cf       	rjmp	.-24     	; 0xf1e <vfprintf+0x174>
     f36:	f5 01       	movw	r30, r10
     f38:	27 fc       	sbrc	r2, 7
     f3a:	85 91       	lpm	r24, Z+
     f3c:	27 fe       	sbrs	r2, 7
     f3e:	81 91       	ld	r24, Z+
     f40:	5f 01       	movw	r10, r30
     f42:	b7 01       	movw	r22, r14
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
     f4a:	31 10       	cpse	r3, r1
     f4c:	3a 94       	dec	r3
     f4e:	f1 e0       	ldi	r31, 0x01	; 1
     f50:	4f 1a       	sub	r4, r31
     f52:	51 08       	sbc	r5, r1
     f54:	41 14       	cp	r4, r1
     f56:	51 04       	cpc	r5, r1
     f58:	71 f7       	brne	.-36     	; 0xf36 <vfprintf+0x18c>
     f5a:	e5 c0       	rjmp	.+458    	; 0x1126 <vfprintf+0x37c>
     f5c:	84 36       	cpi	r24, 0x64	; 100
     f5e:	11 f0       	breq	.+4      	; 0xf64 <vfprintf+0x1ba>
     f60:	89 36       	cpi	r24, 0x69	; 105
     f62:	39 f5       	brne	.+78     	; 0xfb2 <vfprintf+0x208>
     f64:	f8 01       	movw	r30, r16
     f66:	27 ff       	sbrs	r18, 7
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <vfprintf+0x1ce>
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	0c 5f       	subi	r16, 0xFC	; 252
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	08 c0       	rjmp	.+16     	; 0xf88 <vfprintf+0x1de>
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	07 2e       	mov	r0, r23
     f7e:	00 0c       	add	r0, r0
     f80:	88 0b       	sbc	r24, r24
     f82:	99 0b       	sbc	r25, r25
     f84:	0e 5f       	subi	r16, 0xFE	; 254
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	2f 76       	andi	r18, 0x6F	; 111
     f8a:	72 2e       	mov	r7, r18
     f8c:	97 ff       	sbrs	r25, 7
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <vfprintf+0x1f8>
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	70 95       	com	r23
     f96:	61 95       	neg	r22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	20 68       	ori	r18, 0x80	; 128
     fa0:	72 2e       	mov	r7, r18
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	a4 01       	movw	r20, r8
     fa8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__ultoa_invert>
     fac:	a8 2e       	mov	r10, r24
     fae:	a8 18       	sub	r10, r8
     fb0:	44 c0       	rjmp	.+136    	; 0x103a <vfprintf+0x290>
     fb2:	85 37       	cpi	r24, 0x75	; 117
     fb4:	29 f4       	brne	.+10     	; 0xfc0 <vfprintf+0x216>
     fb6:	2f 7e       	andi	r18, 0xEF	; 239
     fb8:	b2 2e       	mov	r11, r18
     fba:	2a e0       	ldi	r18, 0x0A	; 10
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	25 c0       	rjmp	.+74     	; 0x100a <vfprintf+0x260>
     fc0:	f2 2f       	mov	r31, r18
     fc2:	f9 7f       	andi	r31, 0xF9	; 249
     fc4:	bf 2e       	mov	r11, r31
     fc6:	8f 36       	cpi	r24, 0x6F	; 111
     fc8:	c1 f0       	breq	.+48     	; 0xffa <vfprintf+0x250>
     fca:	18 f4       	brcc	.+6      	; 0xfd2 <vfprintf+0x228>
     fcc:	88 35       	cpi	r24, 0x58	; 88
     fce:	79 f0       	breq	.+30     	; 0xfee <vfprintf+0x244>
     fd0:	b4 c0       	rjmp	.+360    	; 0x113a <vfprintf+0x390>
     fd2:	80 37       	cpi	r24, 0x70	; 112
     fd4:	19 f0       	breq	.+6      	; 0xfdc <vfprintf+0x232>
     fd6:	88 37       	cpi	r24, 0x78	; 120
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <vfprintf+0x238>
     fda:	af c0       	rjmp	.+350    	; 0x113a <vfprintf+0x390>
     fdc:	2f 2f       	mov	r18, r31
     fde:	20 61       	ori	r18, 0x10	; 16
     fe0:	b2 2e       	mov	r11, r18
     fe2:	b4 fe       	sbrs	r11, 4
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <vfprintf+0x256>
     fe6:	8b 2d       	mov	r24, r11
     fe8:	84 60       	ori	r24, 0x04	; 4
     fea:	b8 2e       	mov	r11, r24
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <vfprintf+0x256>
     fee:	24 ff       	sbrs	r18, 4
     ff0:	0a c0       	rjmp	.+20     	; 0x1006 <vfprintf+0x25c>
     ff2:	9f 2f       	mov	r25, r31
     ff4:	96 60       	ori	r25, 0x06	; 6
     ff6:	b9 2e       	mov	r11, r25
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <vfprintf+0x25c>
     ffa:	28 e0       	ldi	r18, 0x08	; 8
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <vfprintf+0x260>
    1000:	20 e1       	ldi	r18, 0x10	; 16
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x260>
    1006:	20 e1       	ldi	r18, 0x10	; 16
    1008:	32 e0       	ldi	r19, 0x02	; 2
    100a:	f8 01       	movw	r30, r16
    100c:	b7 fe       	sbrs	r11, 7
    100e:	07 c0       	rjmp	.+14     	; 0x101e <vfprintf+0x274>
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	0c 5f       	subi	r16, 0xFC	; 252
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	06 c0       	rjmp	.+12     	; 0x102a <vfprintf+0x280>
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 5f       	subi	r16, 0xFE	; 254
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	a4 01       	movw	r20, r8
    102c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__ultoa_invert>
    1030:	a8 2e       	mov	r10, r24
    1032:	a8 18       	sub	r10, r8
    1034:	fb 2d       	mov	r31, r11
    1036:	ff 77       	andi	r31, 0x7F	; 127
    1038:	7f 2e       	mov	r7, r31
    103a:	76 fe       	sbrs	r7, 6
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <vfprintf+0x2aa>
    103e:	37 2d       	mov	r19, r7
    1040:	3e 7f       	andi	r19, 0xFE	; 254
    1042:	a5 14       	cp	r10, r5
    1044:	50 f4       	brcc	.+20     	; 0x105a <vfprintf+0x2b0>
    1046:	74 fe       	sbrs	r7, 4
    1048:	0a c0       	rjmp	.+20     	; 0x105e <vfprintf+0x2b4>
    104a:	72 fc       	sbrc	r7, 2
    104c:	08 c0       	rjmp	.+16     	; 0x105e <vfprintf+0x2b4>
    104e:	37 2d       	mov	r19, r7
    1050:	3e 7e       	andi	r19, 0xEE	; 238
    1052:	05 c0       	rjmp	.+10     	; 0x105e <vfprintf+0x2b4>
    1054:	ba 2c       	mov	r11, r10
    1056:	37 2d       	mov	r19, r7
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x2b6>
    105a:	ba 2c       	mov	r11, r10
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <vfprintf+0x2b6>
    105e:	b5 2c       	mov	r11, r5
    1060:	34 ff       	sbrs	r19, 4
    1062:	0d c0       	rjmp	.+26     	; 0x107e <vfprintf+0x2d4>
    1064:	fe 01       	movw	r30, r28
    1066:	ea 0d       	add	r30, r10
    1068:	f1 1d       	adc	r31, r1
    106a:	80 81       	ld	r24, Z
    106c:	80 33       	cpi	r24, 0x30	; 48
    106e:	11 f4       	brne	.+4      	; 0x1074 <vfprintf+0x2ca>
    1070:	39 7e       	andi	r19, 0xE9	; 233
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <vfprintf+0x2dc>
    1074:	32 ff       	sbrs	r19, 2
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <vfprintf+0x2da>
    1078:	b3 94       	inc	r11
    107a:	b3 94       	inc	r11
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <vfprintf+0x2dc>
    107e:	83 2f       	mov	r24, r19
    1080:	86 78       	andi	r24, 0x86	; 134
    1082:	09 f0       	breq	.+2      	; 0x1086 <vfprintf+0x2dc>
    1084:	b3 94       	inc	r11
    1086:	33 fd       	sbrc	r19, 3
    1088:	13 c0       	rjmp	.+38     	; 0x10b0 <vfprintf+0x306>
    108a:	30 ff       	sbrs	r19, 0
    108c:	06 c0       	rjmp	.+12     	; 0x109a <vfprintf+0x2f0>
    108e:	5a 2c       	mov	r5, r10
    1090:	b3 14       	cp	r11, r3
    1092:	18 f4       	brcc	.+6      	; 0x109a <vfprintf+0x2f0>
    1094:	53 0c       	add	r5, r3
    1096:	5b 18       	sub	r5, r11
    1098:	b3 2c       	mov	r11, r3
    109a:	b3 14       	cp	r11, r3
    109c:	68 f4       	brcc	.+26     	; 0x10b8 <vfprintf+0x30e>
    109e:	b7 01       	movw	r22, r14
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	3c 87       	std	Y+12, r19	; 0x0c
    10a6:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
    10aa:	b3 94       	inc	r11
    10ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ae:	f5 cf       	rjmp	.-22     	; 0x109a <vfprintf+0x2f0>
    10b0:	b3 14       	cp	r11, r3
    10b2:	10 f4       	brcc	.+4      	; 0x10b8 <vfprintf+0x30e>
    10b4:	3b 18       	sub	r3, r11
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <vfprintf+0x310>
    10b8:	31 2c       	mov	r3, r1
    10ba:	34 ff       	sbrs	r19, 4
    10bc:	12 c0       	rjmp	.+36     	; 0x10e2 <vfprintf+0x338>
    10be:	b7 01       	movw	r22, r14
    10c0:	80 e3       	ldi	r24, 0x30	; 48
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	3c 87       	std	Y+12, r19	; 0x0c
    10c6:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
    10ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    10cc:	32 ff       	sbrs	r19, 2
    10ce:	17 c0       	rjmp	.+46     	; 0x10fe <vfprintf+0x354>
    10d0:	31 fd       	sbrc	r19, 1
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <vfprintf+0x330>
    10d4:	88 e7       	ldi	r24, 0x78	; 120
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <vfprintf+0x334>
    10da:	88 e5       	ldi	r24, 0x58	; 88
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	b7 01       	movw	r22, r14
    10e0:	0c c0       	rjmp	.+24     	; 0x10fa <vfprintf+0x350>
    10e2:	83 2f       	mov	r24, r19
    10e4:	86 78       	andi	r24, 0x86	; 134
    10e6:	59 f0       	breq	.+22     	; 0x10fe <vfprintf+0x354>
    10e8:	31 ff       	sbrs	r19, 1
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <vfprintf+0x346>
    10ec:	8b e2       	ldi	r24, 0x2B	; 43
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <vfprintf+0x348>
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	37 fd       	sbrc	r19, 7
    10f4:	8d e2       	ldi	r24, 0x2D	; 45
    10f6:	b7 01       	movw	r22, r14
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
    10fe:	a5 14       	cp	r10, r5
    1100:	38 f4       	brcc	.+14     	; 0x1110 <vfprintf+0x366>
    1102:	b7 01       	movw	r22, r14
    1104:	80 e3       	ldi	r24, 0x30	; 48
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
    110c:	5a 94       	dec	r5
    110e:	f7 cf       	rjmp	.-18     	; 0x10fe <vfprintf+0x354>
    1110:	aa 94       	dec	r10
    1112:	f4 01       	movw	r30, r8
    1114:	ea 0d       	add	r30, r10
    1116:	f1 1d       	adc	r31, r1
    1118:	80 81       	ld	r24, Z
    111a:	b7 01       	movw	r22, r14
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
    1122:	a1 10       	cpse	r10, r1
    1124:	f5 cf       	rjmp	.-22     	; 0x1110 <vfprintf+0x366>
    1126:	33 20       	and	r3, r3
    1128:	09 f4       	brne	.+2      	; 0x112c <vfprintf+0x382>
    112a:	51 ce       	rjmp	.-862    	; 0xdce <vfprintf+0x24>
    112c:	b7 01       	movw	r22, r14
    112e:	80 e2       	ldi	r24, 0x20	; 32
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 bd 08 	call	0x117a	; 0x117a <fputc>
    1136:	3a 94       	dec	r3
    1138:	f6 cf       	rjmp	.-20     	; 0x1126 <vfprintf+0x37c>
    113a:	f7 01       	movw	r30, r14
    113c:	86 81       	ldd	r24, Z+6	; 0x06
    113e:	97 81       	ldd	r25, Z+7	; 0x07
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <vfprintf+0x39c>
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	9f ef       	ldi	r25, 0xFF	; 255
    1146:	2c 96       	adiw	r28, 0x0c	; 12
    1148:	e2 e1       	ldi	r30, 0x12	; 18
    114a:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__epilogue_restores__>

0000114e <strnlen_P>:
    114e:	fc 01       	movw	r30, r24
    1150:	05 90       	lpm	r0, Z+
    1152:	61 50       	subi	r22, 0x01	; 1
    1154:	70 40       	sbci	r23, 0x00	; 0
    1156:	01 10       	cpse	r0, r1
    1158:	d8 f7       	brcc	.-10     	; 0x1150 <strnlen_P+0x2>
    115a:	80 95       	com	r24
    115c:	90 95       	com	r25
    115e:	8e 0f       	add	r24, r30
    1160:	9f 1f       	adc	r25, r31
    1162:	08 95       	ret

00001164 <strnlen>:
    1164:	fc 01       	movw	r30, r24
    1166:	61 50       	subi	r22, 0x01	; 1
    1168:	70 40       	sbci	r23, 0x00	; 0
    116a:	01 90       	ld	r0, Z+
    116c:	01 10       	cpse	r0, r1
    116e:	d8 f7       	brcc	.-10     	; 0x1166 <strnlen+0x2>
    1170:	80 95       	com	r24
    1172:	90 95       	com	r25
    1174:	8e 0f       	add	r24, r30
    1176:	9f 1f       	adc	r25, r31
    1178:	08 95       	ret

0000117a <fputc>:
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	fb 01       	movw	r30, r22
    1184:	23 81       	ldd	r18, Z+3	; 0x03
    1186:	21 fd       	sbrc	r18, 1
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <fputc+0x16>
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	9f ef       	ldi	r25, 0xFF	; 255
    118e:	28 c0       	rjmp	.+80     	; 0x11e0 <fputc+0x66>
    1190:	22 ff       	sbrs	r18, 2
    1192:	16 c0       	rjmp	.+44     	; 0x11c0 <fputc+0x46>
    1194:	46 81       	ldd	r20, Z+6	; 0x06
    1196:	57 81       	ldd	r21, Z+7	; 0x07
    1198:	24 81       	ldd	r18, Z+4	; 0x04
    119a:	35 81       	ldd	r19, Z+5	; 0x05
    119c:	42 17       	cp	r20, r18
    119e:	53 07       	cpc	r21, r19
    11a0:	44 f4       	brge	.+16     	; 0x11b2 <fputc+0x38>
    11a2:	a0 81       	ld	r26, Z
    11a4:	b1 81       	ldd	r27, Z+1	; 0x01
    11a6:	9d 01       	movw	r18, r26
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	31 83       	std	Z+1, r19	; 0x01
    11ae:	20 83       	st	Z, r18
    11b0:	8c 93       	st	X, r24
    11b2:	26 81       	ldd	r18, Z+6	; 0x06
    11b4:	37 81       	ldd	r19, Z+7	; 0x07
    11b6:	2f 5f       	subi	r18, 0xFF	; 255
    11b8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ba:	37 83       	std	Z+7, r19	; 0x07
    11bc:	26 83       	std	Z+6, r18	; 0x06
    11be:	10 c0       	rjmp	.+32     	; 0x11e0 <fputc+0x66>
    11c0:	eb 01       	movw	r28, r22
    11c2:	09 2f       	mov	r16, r25
    11c4:	18 2f       	mov	r17, r24
    11c6:	00 84       	ldd	r0, Z+8	; 0x08
    11c8:	f1 85       	ldd	r31, Z+9	; 0x09
    11ca:	e0 2d       	mov	r30, r0
    11cc:	09 95       	icall
    11ce:	89 2b       	or	r24, r25
    11d0:	e1 f6       	brne	.-72     	; 0x118a <fputc+0x10>
    11d2:	8e 81       	ldd	r24, Y+6	; 0x06
    11d4:	9f 81       	ldd	r25, Y+7	; 0x07
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	9f 83       	std	Y+7, r25	; 0x07
    11da:	8e 83       	std	Y+6, r24	; 0x06
    11dc:	81 2f       	mov	r24, r17
    11de:	90 2f       	mov	r25, r16
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret

000011ea <__ultoa_invert>:
    11ea:	fa 01       	movw	r30, r20
    11ec:	aa 27       	eor	r26, r26
    11ee:	28 30       	cpi	r18, 0x08	; 8
    11f0:	51 f1       	breq	.+84     	; 0x1246 <__ultoa_invert+0x5c>
    11f2:	20 31       	cpi	r18, 0x10	; 16
    11f4:	81 f1       	breq	.+96     	; 0x1256 <__ultoa_invert+0x6c>
    11f6:	e8 94       	clt
    11f8:	6f 93       	push	r22
    11fa:	6e 7f       	andi	r22, 0xFE	; 254
    11fc:	6e 5f       	subi	r22, 0xFE	; 254
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	8f 4f       	sbci	r24, 0xFF	; 255
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	af 4f       	sbci	r26, 0xFF	; 255
    1206:	b1 e0       	ldi	r27, 0x01	; 1
    1208:	3e d0       	rcall	.+124    	; 0x1286 <__ultoa_invert+0x9c>
    120a:	b4 e0       	ldi	r27, 0x04	; 4
    120c:	3c d0       	rcall	.+120    	; 0x1286 <__ultoa_invert+0x9c>
    120e:	67 0f       	add	r22, r23
    1210:	78 1f       	adc	r23, r24
    1212:	89 1f       	adc	r24, r25
    1214:	9a 1f       	adc	r25, r26
    1216:	a1 1d       	adc	r26, r1
    1218:	68 0f       	add	r22, r24
    121a:	79 1f       	adc	r23, r25
    121c:	8a 1f       	adc	r24, r26
    121e:	91 1d       	adc	r25, r1
    1220:	a1 1d       	adc	r26, r1
    1222:	6a 0f       	add	r22, r26
    1224:	71 1d       	adc	r23, r1
    1226:	81 1d       	adc	r24, r1
    1228:	91 1d       	adc	r25, r1
    122a:	a1 1d       	adc	r26, r1
    122c:	20 d0       	rcall	.+64     	; 0x126e <__ultoa_invert+0x84>
    122e:	09 f4       	brne	.+2      	; 0x1232 <__ultoa_invert+0x48>
    1230:	68 94       	set
    1232:	3f 91       	pop	r19
    1234:	2a e0       	ldi	r18, 0x0A	; 10
    1236:	26 9f       	mul	r18, r22
    1238:	11 24       	eor	r1, r1
    123a:	30 19       	sub	r19, r0
    123c:	30 5d       	subi	r19, 0xD0	; 208
    123e:	31 93       	st	Z+, r19
    1240:	de f6       	brtc	.-74     	; 0x11f8 <__ultoa_invert+0xe>
    1242:	cf 01       	movw	r24, r30
    1244:	08 95       	ret
    1246:	46 2f       	mov	r20, r22
    1248:	47 70       	andi	r20, 0x07	; 7
    124a:	40 5d       	subi	r20, 0xD0	; 208
    124c:	41 93       	st	Z+, r20
    124e:	b3 e0       	ldi	r27, 0x03	; 3
    1250:	0f d0       	rcall	.+30     	; 0x1270 <__ultoa_invert+0x86>
    1252:	c9 f7       	brne	.-14     	; 0x1246 <__ultoa_invert+0x5c>
    1254:	f6 cf       	rjmp	.-20     	; 0x1242 <__ultoa_invert+0x58>
    1256:	46 2f       	mov	r20, r22
    1258:	4f 70       	andi	r20, 0x0F	; 15
    125a:	40 5d       	subi	r20, 0xD0	; 208
    125c:	4a 33       	cpi	r20, 0x3A	; 58
    125e:	18 f0       	brcs	.+6      	; 0x1266 <__ultoa_invert+0x7c>
    1260:	49 5d       	subi	r20, 0xD9	; 217
    1262:	31 fd       	sbrc	r19, 1
    1264:	40 52       	subi	r20, 0x20	; 32
    1266:	41 93       	st	Z+, r20
    1268:	02 d0       	rcall	.+4      	; 0x126e <__ultoa_invert+0x84>
    126a:	a9 f7       	brne	.-22     	; 0x1256 <__ultoa_invert+0x6c>
    126c:	ea cf       	rjmp	.-44     	; 0x1242 <__ultoa_invert+0x58>
    126e:	b4 e0       	ldi	r27, 0x04	; 4
    1270:	a6 95       	lsr	r26
    1272:	97 95       	ror	r25
    1274:	87 95       	ror	r24
    1276:	77 95       	ror	r23
    1278:	67 95       	ror	r22
    127a:	ba 95       	dec	r27
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__ultoa_invert+0x86>
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	61 05       	cpc	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	08 95       	ret
    1286:	9b 01       	movw	r18, r22
    1288:	ac 01       	movw	r20, r24
    128a:	0a 2e       	mov	r0, r26
    128c:	06 94       	lsr	r0
    128e:	57 95       	ror	r21
    1290:	47 95       	ror	r20
    1292:	37 95       	ror	r19
    1294:	27 95       	ror	r18
    1296:	ba 95       	dec	r27
    1298:	c9 f7       	brne	.-14     	; 0x128c <__ultoa_invert+0xa2>
    129a:	62 0f       	add	r22, r18
    129c:	73 1f       	adc	r23, r19
    129e:	84 1f       	adc	r24, r20
    12a0:	95 1f       	adc	r25, r21
    12a2:	a0 1d       	adc	r26, r0
    12a4:	08 95       	ret

000012a6 <__prologue_saves__>:
    12a6:	2f 92       	push	r2
    12a8:	3f 92       	push	r3
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	ca 1b       	sub	r28, r26
    12d0:	db 0b       	sbc	r29, r27
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	09 94       	ijmp

000012de <__epilogue_restores__>:
    12de:	2a 88       	ldd	r2, Y+18	; 0x12
    12e0:	39 88       	ldd	r3, Y+17	; 0x11
    12e2:	48 88       	ldd	r4, Y+16	; 0x10
    12e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    12ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    12f0:	b9 84       	ldd	r11, Y+9	; 0x09
    12f2:	c8 84       	ldd	r12, Y+8	; 0x08
    12f4:	df 80       	ldd	r13, Y+7	; 0x07
    12f6:	ee 80       	ldd	r14, Y+6	; 0x06
    12f8:	fd 80       	ldd	r15, Y+5	; 0x05
    12fa:	0c 81       	ldd	r16, Y+4	; 0x04
    12fc:	1b 81       	ldd	r17, Y+3	; 0x03
    12fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1300:	b9 81       	ldd	r27, Y+1	; 0x01
    1302:	ce 0f       	add	r28, r30
    1304:	d1 1d       	adc	r29, r1
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	ed 01       	movw	r28, r26
    1312:	08 95       	ret

00001314 <__do_global_dtors>:
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	c1 e8       	ldi	r28, 0x81	; 129
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <__do_global_dtors+0x10>
    131c:	fe 01       	movw	r30, r28
    131e:	0e 94 5c 05 	call	0xab8	; 0xab8 <__tablejump2__>
    1322:	21 96       	adiw	r28, 0x01	; 1
    1324:	c2 38       	cpi	r28, 0x82	; 130
    1326:	d1 07       	cpc	r29, r17
    1328:	c9 f7       	brne	.-14     	; 0x131c <__do_global_dtors+0x8>
    132a:	f8 94       	cli

0000132c <__stop_program>:
    132c:	ff cf       	rjmp	.-2      	; 0x132c <__stop_program>
